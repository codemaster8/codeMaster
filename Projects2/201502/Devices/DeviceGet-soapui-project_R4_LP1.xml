<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project name="DeviceGet_R4" resourceRoot="${projectDir}" soapui-version="4.6.1" activeEnvironment="Default" id="a6fa1dde-b50c-454a-b547-d86b1324823d" xmlns:con="http://eviware.com/soapui/config">
  <con:settings><con:setting id="com.eviware.soapui.impl.wsdl.actions.iface.tools.soapui.ProTestRunnerAction@values-local"><![CDATA[<xml-fragment xmlns:con="http://eviware.com/soapui/config">
  <con:entry key="Environment" value="Default"/>
  <con:entry key="Global Properties" value=""/>
  <con:entry key="TestSuite" value="&lt;all>"/>
  <con:entry key="Report to Generate" value=""/>
  <con:entry key="Password" value=""/>
  <con:entry key="soapui-setings.xml Password" value=""/>
  <con:entry key="TestRunner Path" value=""/>
  <con:entry key="Tool Args" value=""/>
  <con:entry key="Ignore Errors" value="true"/>
  <con:entry key="Host:Port" value=""/>
  <con:entry key="WSS Password Type" value=""/>
  <con:entry key="Save Project" value="true"/>
  <con:entry key="Enable UI" value="false"/>
  <con:entry key="System Properties" value=""/>
  <con:entry key="Domain" value=""/>
  <con:entry key="Coverage Report" value="false"/>
  <con:entry key="Export JUnit Results" value="true"/>
  <con:entry key="Open Report" value="false"/>
  <con:entry key="Project Properties" value=""/>
  <con:entry key="Project Password" value=""/>
  <con:entry key="Export All" value="true"/>
  <con:entry key="Report Format(s)" value=""/>
  <con:entry key="TestCase" value="&lt;all>"/>
  <con:entry key="Print Report" value="false"/>
  <con:entry key="Username" value=""/>
  <con:entry key="Root Folder" value="C:\Users\raju.ganji\Desktop\DeviceGet_170613\4.2.3"/>
  <con:entry key="Save After" value="true"/>
  <con:entry key="Add Settings" value="true"/>
  <con:entry key="Endpoint" value=""/>
</xml-fragment>]]></con:setting></con:settings>
  <con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="DeviceGet" type="rest" basePath="" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
    <con:settings/>
    <con:definitionCache type="TEXT" rootPart=""/><con:endpoints>
      <con:endpoint>${#Project#Query_HostName}</con:endpoint>
    </con:endpoints>
    <con:resource name="DeviceGet" path="rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/Domain/{DomainID}/Device/{DeviceID}">
      <con:settings/>
      <con:parameters>
        <con:parameter>
          <con:name>AccountID</con:name>
          <con:value/>
          <con:style>TEMPLATE</con:style>
          <con:default/>
        </con:parameter>
        <con:parameter>
          <con:name>DomainID</con:name>
          <con:value/>
          <con:style>TEMPLATE</con:style>
          <con:default/>
        </con:parameter>
        <con:parameter>
          <con:name>DeviceID</con:name>
          <con:style>TEMPLATE</con:style>
          <con:default>ewqee</con:default>
        </con:parameter>
      </con:parameters>
      <con:method name="DeviceGet_Request" method="GET">
        <con:settings/>
        <con:parameters/>
        <con:representation type="FAULT">
          <con:mediaType>text/html</con:mediaType>
          <con:status>404 500</con:status>
          <con:params/>
          <con:element>html</con:element>
        </con:representation>
        <con:representation type="FAULT">
          <con:mediaType>application/xml</con:mediaType>
          <con:status>400 403 401</con:status>
          <con:params/>
          <con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ErrorList</con:element>
        </con:representation>
        <con:representation type="RESPONSE">
          <con:mediaType>application/xml</con:mediaType>
          <con:status>200</con:status>
          <con:params/>
          <con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:Device</con:element>
        </con:representation>
        <con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>400 404 403 401</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator">coor:ErrorList</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator">coor:Device</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>304</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>304</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>304</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>304</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>304</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/xml;charset=UTF-8</con:mediaType><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Request 1" mediaType="application/xml" sslKeystore="0701_concat.pem">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=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" xmlns="http://eviware.com/soapui/config"/></con:setting>
          </con:settings>
          <con:endpoint>https://qa.q.uvvu.com:7001</con:endpoint>
          <con:request/>
          <con:credentials>
            <con:domain/>
          <con:authType>Global HTTP Settings</con:authType></con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters>
            <con:entry key="DeviceID" value="urn:dece:deviceid:org:dece:A09D9C22F11CBC6DE0401F0A05996898"/>
            <con:entry key="AccountID" value="urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0"/>
            <con:entry key="DomainID" value="urn:dece:domainid:dece:A09DA589BD63A036E0401F0A05996D9A"/>
          </con:parameters>
        </con:request>
        <con:request name="Copy of Request 1" mediaType="application/xml" sslKeystore="0701_concat.pem">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=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" xmlns="http://eviware.com/soapui/config"/></con:setting>
          </con:settings>
          <con:endpoint>https://qa.q.uvvu.com:7001</con:endpoint>
          <con:request/>
          <con:credentials>
            <con:domain/>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters>
            <con:entry key="DeviceID" value="urn:dece:deviceid:org:dece:A04559CE239D84F3E0401F0A07993907"/>
            <con:entry key="AccountID" value="urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0"/>
            <con:entry key="DomainID" value="urn:dece:domainid:dece:A09DA589BD63A036E0401F0A05996D9A"/>
          </con:parameters>
        </con:request>
      </con:method>
    </con:resource>
  </con:interface>
  <con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="DeviceDeceDomain" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
    <con:settings/>
    <con:definitionCache type="TEXT" rootPart=""/><con:endpoints>
      <con:endpoint>https://qa.q.uvvu.com:7001</con:endpoint>
    </con:endpoints>
    <con:resource name="DeviceDeceDomain" path="rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/Device/{DeviceID}/DECEDomain">
      <con:settings/>
      <con:parameters>
        <con:parameter>
          <con:name>AccountID</con:name>
          <con:value/>
          <con:style>TEMPLATE</con:style>
          <con:default/>
        </con:parameter>
        <con:parameter>
          <con:name>DeviceID</con:name>
          <con:style>TEMPLATE</con:style>
        </con:parameter>
      </con:parameters>
      <con:method name="DeviceDeceDomain_Request" method="GET">
        <con:settings/>
        <con:parameters/>
        <con:representation type="FAULT">
          <con:mediaType>text/html</con:mediaType>
          <con:status>404</con:status>
          <con:params/>
          <con:element>html</con:element>
        </con:representation>
        <con:representation type="FAULT">
          <con:mediaType>text/xml</con:mediaType>
          <con:status>404 500</con:status>
          <con:params/>
        </con:representation>
        <con:representation type="FAULT">
          <con:mediaType>application/xml</con:mediaType>
          <con:status>403 400 404</con:status>
          <con:params/>
          <con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ErrorList</con:element>
        </con:representation>
        <con:representation type="RESPONSE">
          <con:mediaType>application/xml</con:mediaType>
          <con:status>200</con:status>
          <con:params/>
          <con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:DeviceDecedomain</con:element>
        </con:representation>
        <con:request name="Request 1" mediaType="application/xml" sslKeystore="0701_concat.pem" postQueryString="false">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=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" xmlns="http://eviware.com/soapui/config"/></con:setting>
          </con:settings>
          <con:endpoint>https://qa.q.uvvu.com:7001</con:endpoint>
          <con:request/>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters>
            <con:entry key="DeviceID" value="urn:dece:deviceid:org:dece:A04559CE239D84F3E0401F0A07993907"/>
            <con:entry key="AccountID" value="urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0"/>
          </con:parameters>
        </con:request>
      </con:method>
    </con:resource>
  </con:interface>
  <con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="STS" type="rest" basePath="" definitionUrl="C:\Documents and Settings\schinna\Desktop\Rights_8.0\STS wadl\STS_1.wadl" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
    <con:settings/>
    <con:definitionCache type="TEXT"/><con:endpoints/>
    <con:resource name="STS" path="rest/${#Project#versionMajor}/${#Project#versionMinor}/SecurityToken/SecurityTokenExchange/">
      <con:settings/>
      <con:parameters>
        <con:parameter required="false" disableUrlEncoding="true"><con:name>audience</con:name><con:value>${#TestCase#audience}</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>${#TestCase#audience}</con:default><con:description xsi:nil="true"/></con:parameter><con:parameter disableUrlEncoding="true">
          <con:name>tokentype</con:name>
          <con:value>${#TestCase#tokentype}</con:value>
          <con:style>QUERY</con:style>
          <con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type>
          <con:default>${#TestCase#tokentype}</con:default>
        </con:parameter>
      </con:parameters>
      <con:method name="STS - POST" method="POST">
        <con:settings/>
        <con:parameters/>
        <con:request name="Request 1" mediaType="application/x-www-form-urlencoded" postQueryString="false">
          <con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings>
          <con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/>
        </con:request>
      </con:method>
    </con:resource>
    <con:resource name="STS Get" path="rest/${#Project#versionMajor}/${#Project#versionMinor}/SecurityToken/Assertion/{assertionUUID}">
      <con:settings/>
      <con:parameters>
        <con:parameter>
          <con:name>assertionUUID</con:name>
          <con:value>${#TestCase#assertionUUID}</con:value>
          <con:style>TEMPLATE</con:style>
          <con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type>
          <con:default>${#TestCase#assertionUUID}</con:default>
        </con:parameter>
      </con:parameters>
      <con:method name="STS - GET" method="GET">
        <con:settings/>
        <con:parameters/>
        <con:request name="Request 1" mediaType="application/xml">
          <con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings>
          <con:endpoint>${#Project#Query_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/>
        </con:request>
      </con:method>
    </con:resource>
  </con:interface>
  <con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="DRMClientCreate" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
    <con:settings/>
    <con:definitionCache type="TEXT" rootPart=""/><con:endpoints>
      <con:endpoint>${#Project#Provision_HostName}</con:endpoint>
    </con:endpoints>
    <con:resource name="DRMClientCreate" path="rest/${#Project#versionMajor}/${#Project#versionMinor}/DECEDomain/{DeceDomainID}/DRMClient">
      <con:settings/>
      <con:parameters>
        <con:parameter>
          <con:name>DeceDomainID</con:name>
          <con:value/>
          <con:style>TEMPLATE</con:style>
          <con:default/>
        </con:parameter>
      </con:parameters>
      <con:method name="DRMClientCreate Request" method="POST">
        <con:settings/>
        <con:parameters/>
        <con:representation type="FAULT">
          <con:mediaType>application/xml</con:mediaType>
          <con:status>403</con:status>
          <con:params/>
          <con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ErrorList</con:element>
        </con:representation>
        <con:representation type="REQUEST">
          <con:mediaType>application/xml</con:mediaType>
          <con:params/>
          <con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ErrorList</con:element>
        </con:representation>
        <con:representation type="FAULT">
          <con:mediaType>text/xml</con:mediaType>
          <con:status>500</con:status>
          <con:params/>
        </con:representation>
        <con:representation type="RESPONSE">
          <con:mediaType>application/xml</con:mediaType>
          <con:status>201</con:status>
          <con:params/>
        </con:representation>
        <con:request name="Request 1" mediaType="application/xml" postQueryString="false" sslKeystore="0701_concat.pem">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=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" xmlns="http://eviware.com/soapui/config"/></con:setting>
          </con:settings>
          <con:endpoint>https://qa.q.uvvu.com:7001</con:endpoint>
          <con:request><![CDATA[<DRMClient 
DeviceID="urn:dece:deviceid:org:dece:A09D9C22F11CBC6DE0401F0A05996898"
xmlns="http://www.decellc.org/schema/2010/10/dece">
    <DRMSupported>urn:dece:drm:OMA:3.0</DRMSupported>    
    <NativeDRMClientID>QTA5RDlDMjJGMTFDQkM2REUwNDAxRjBBMDU5OTY4OTg=</NativeDRMClientID>
    <ResourceStatus>
        <Current CreatedBy="urn:dece:org:org:dece:0701" CreationDate="2011-04-07T17:19:52.686Z">
            <Value>urn:dece:type:status:active</Value>
            <Description>active</Description>
        </Current>
    </ResourceStatus>
</DRMClient>]]></con:request>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters>
            <entry key="DeceDomainID" value="urn:dece:domainid:dece:A09DA589BD63A036E0401F0A05996D9A" xmlns="http://eviware.com/soapui/config"/>
          </con:parameters>
        </con:request>
      </con:method>
    </con:resource>
  </con:interface>
  <con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="DeviceUpdate" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints/><con:resource name="DeviceUpdate" path="rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/LicApp/{LicAppID}"><con:settings/><con:parameters><con:parameter disableUrlEncoding="true"><con:name>AccountID</con:name><con:value>AccountID</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>AccountID</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter disableUrlEncoding="true"><con:name>LicAppID</con:name><con:value>LicAppID</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>LicAppID</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter disableUrlEncoding="true"><con:name>LicAppHandle</con:name><con:value>{LicAppHandle}</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>{LicAppHandle}</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="PUT" method="PUT"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>text/html; charset=iso-8859-1</con:mediaType><con:status>404</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator">coor:LicApp</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml</con:mediaType><con:status>409 403 400</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator">coor:ErrorList</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator">coor:LicApp</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator">coor:LicApp</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/html;charset=utf-8</con:mediaType><con:status>412</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>text/xml;charset=UTF-8</con:mediaType><con:status>303</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>404 400</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator">coor:ErrorList</con:element></con:representation><con:request name="Request 1" mediaType="application/xml" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>https://qa.p.uvvu.com:7001</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="Account" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints/><con:resource name="AccountCreate" path="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account"><con:settings/><con:parameters/><con:method name="POST" method="POST"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>text/html; charset=iso-8859-1</con:mediaType><con:status>404</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/xml;charset=UTF-8</con:mediaType><con:status>400</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2013/10/coordinator">coor:ErrorList</con:element></con:representation><con:request name="Request 1" mediaType="application/xml" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<Account xmlns="${#Project#coordinatorSchema}"> 
<DisplayName>${#TestCase#AccountName}</DisplayName>
<Country>${#Project#AccountCountry}</Country>
</Account>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="User" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints/><con:resource name="FirstUserCreate" path="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/User"><con:settings/><con:parameters><con:parameter><con:name>AccountID</con:name><con:value>AccountID</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>AccountID</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="POST" method="POST"><con:settings/><con:parameters/><con:request name="Request 1" mediaType="application/xml" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="UserPolicyCreate" type="rest" basePath="" definitionUrl="C:\Users\raju.ganji\Desktop\PolicyCreate_1_1.wadl" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart="file:/C:/Users/raju.ganji/Desktop/PolicyCreate_1_1.wadl"><con:part><con:url>file:/C:/Users/raju.ganji/Desktop/PolicyCreate_1_1.wadl</con:url><con:content><![CDATA[<application xmlns="http://wadl.dev.java.net/2009/02">
  <doc xml:lang="en" title="PolicyCreate"/>
  <resources base="https://${#Global#HOST}:${#Global#PORT}">
    <resource path="dece/Account/{NodeAccountId}/User/{NodeUserId}/Policy/{PolicyClass}" id="PolicyCreateSinglePolicy">
      <doc xml:lang="en" title="PolicyCreateSinglePolicy"/>
      <param name="NodeAccountId" default="${#TestProject#NodeAccountId}" type="xs:string" required="false" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <param name="NodeUserId" default="${#TestProject#NodeUserId}" type="xs:string" required="false" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <param name="PolicyClass" default="${#TestCase#PolicyClass}" type="xs:string" required="false" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <method name="POST" id="PolicyCreateSinglePolicyPost">
        <doc xml:lang="en" title="PolicyCreateSinglePolicyPost"/>
        <request>
          <representation mediaType="application/xml;charset=UTF-8"/>
        </request>
        <response status="400 403">
          <representation mediaType="application/xml;charset=UTF-8"/>
        </response>
        <response status="">
          <representation mediaType="application/xml;charset=UTF-8"/>
        </response>
        <response status="200 201">
          <representation mediaType="application/xml;charset=UTF-8"/>
        </response>
        <response status="500">
          <representation mediaType="text/html"/>
        </response>
      </method>
    </resource>
  </resources>
</application>]]></con:content><con:type>http://wadl.dev.java.net/2009/02</con:type></con:part></con:definitionCache><con:endpoints><con:endpoint>${#Project#Query_HostName}</con:endpoint></con:endpoints><con:resource name="PolicyCreateSinglePolicy" path="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{NodeAccountId}/User/{NodeUserId}/Policy/{PolicyClass}"><con:settings/><con:parameters><con:parameter><con:name>NodeAccountId</con:name><con:value>${#TestProject#NodeAccountId}</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>${#TestProject#NodeAccountId}</con:default></con:parameter><con:parameter><con:name>NodeUserId</con:name><con:value>${#TestProject#NodeUserId}</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>${#TestProject#NodeUserId}</con:default></con:parameter><con:parameter><con:name>PolicyClass</con:name><con:value>${#TestCase#PolicyClass}</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>${#TestCase#PolicyClass}</con:default></con:parameter></con:parameters><con:method name="PolicyCreateSinglePolicyPost" method="POST"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>400 403</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>200 201</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/html</con:mediaType><con:status>500</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/xml;charset=UTF-8"><con:settings/><con:endpoint>https://${</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method><con:method name="PolicyGet" method="GET"><con:settings/><con:parameters/><con:request name="Request 1" mediaType="application/xml"><con:settings/><con:endpoint>https://${</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="LicAppJoinTriggerGet" type="rest" basePath="" definitionUrl="C:\Users\raju.ganji\Desktop\LicAppJoinTriggerGet_1_1.wadl" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart="file:/C:/Users/raju.ganji/Desktop/LicAppJoinTriggerGet_1_1.wadl"><con:part><con:url>file:/C:/Users/raju.ganji/Desktop/LicAppJoinTriggerGet_1_1.wadl</con:url><con:content><![CDATA[<application xmlns="http://wadl.dev.java.net/2009/02">
  <doc xml:lang="en" title="LicAppJoinTriggerGet"/>
  <resources base="https://${#Project#targetDECEHostd}:${#Project#targetDECEport}">
    <resource path="rest/{MAJOR}/{MINOR}/Account/{ACCT}/Device/{DEVICE}/LicApp/{LICAPPID}/JoinTrigger/{DRMID}" id="LicAppJoinTriggerGet">
      <doc xml:lang="en" title="LicAppJoinTriggerGet"/>
      <param name="MAJOR" default="${#Project#versionMajor}" type="xs:string" required="false" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <param name="MINOR" default="${#Project#versionMinor}" type="xs:string" required="false" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <param name="ACCT" default="${#TestCase#assertionAccountIdFull}" type="xs:string" required="false" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <param name="DEVICE" default="${#TestCase#deviceIdFull}" type="xs:string" required="false" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <param name="LICAPPID" default="${#TestCase#licappIdFULL}" type="xs:string" required="false" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <param name="DRMID" default="${#TestCase#drmid}" type="xs:string" required="false" style="template" xmlns:xs="http://www.w3.org/2001/XMLSchema"/>
      <method name="GET" id="GET">
        <doc xml:lang="en" title="GET"/>
        <request/>
        <response status="0">
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType="text/xml"/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType="text/html"/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
        </response>
        <response status="0 200">
          <representation mediaType="application/xml" element="proj:ErrorList" xmlns:proj="${#Project#coordinatorSchema}"/>
        </response>
        <response status="400 403 500">
          <representation mediaType="application/xml" element="coor:ErrorList" xmlns:coor="http://www.decellc.org/schema/2011/08/coordinator"/>
        </response>
        <response status="404">
          <representation mediaType="text/xml"/>
        </response>
      </method>
    </resource>
  </resources>
</application>]]></con:content><con:type>http://wadl.dev.java.net/2009/02</con:type></con:part></con:definitionCache><con:endpoints><con:endpoint>${#Project#Device_HostName}</con:endpoint></con:endpoints><con:resource name="LicAppJoinTriggerGet" path="rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{ACCT}/Device/{DEVICE}/LicApp/{LICAPPID}/JoinTrigger/{DRMID}"><con:settings/><con:parameters><con:parameter><con:name>ACCT</con:name><con:value>${#TestCase#assertionAccountIdFull}</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>${#TestCase#assertionAccountIdFull}</con:default></con:parameter><con:parameter><con:name>DEVICE</con:name><con:value>${#TestCase#deviceIdFull}</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>${#TestCase#deviceIdFull}</con:default></con:parameter><con:parameter><con:name>LICAPPID</con:name><con:value>${#TestCase#licappIdFULL}</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>${#TestCase#licappIdFULL}</con:default></con:parameter><con:parameter><con:name>DRMID</con:name><con:value>${#TestCase#drmid}</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>${#TestCase#drmid}</con:default></con:parameter></con:parameters><con:method name="GET" method="GET"><con:settings/><con:parameters/><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>text/xml</con:mediaType><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>text/html</con:mediaType><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>0 200</con:status><con:params/><con:element xmlns:proj="${#Project#coordinatorSchema}">proj:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400 403 500</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2011/08/coordinator">coor:ErrorList</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/xml</con:mediaType><con:status>404</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/json"><con:settings/><con:endpoint>https://${</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="LicApp" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints/><con:resource name="LicApp" path="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/LicApp"><con:settings/><con:parameters><con:parameter><con:name>AccountID</con:name><con:value>AccountID</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>AccountID</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:resource name="LicAppUpdate" path="/{LicAppID}"><con:settings/><con:parameters><con:parameter><con:name>LicAppID</con:name><con:value>LicAppID</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>LicAppID</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="PUT" method="PUT"><con:settings/><con:parameters/><con:request name="Request 1" mediaType="application/xml" postQueryString="false"><con:settings/><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method><con:method name="LicAppGet" method="GET"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>text/xml;charset=UTF-8</con:mediaType><con:status>401</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/plain;charset=UTF-8</con:mediaType><con:status>405</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator">coor:LicApp</con:element></con:representation><con:request name="Request 1" mediaType="application/xml"><con:settings/><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method><con:method name="LicAppDelete" method="DELETE"><con:settings/><con:parameters/><con:request name="Request 1" mediaType="application/xml"><con:settings/><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="LicAppUpdate_NonAuthenticated" path="{LicAppID}?LicAppHandle={LicAppHandle}"><con:settings/><con:parameters><con:parameter><con:name>LicAppID</con:name><con:value>LicAppID</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>LicAppID</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>LicAppHandle</con:name><con:value>{LicAppHandle}</con:value><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>{LicAppHandle}</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="LicAppUpdate" method="PUT"><con:settings/><con:parameters/><con:request name="Request 1" mediaType="application/xml" postQueryString="false"><con:settings/><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method><con:method name="LicAppGet" method="GET"><con:settings/><con:parameters/><con:request name="Request 1" mediaType="application/xml"><con:settings/><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method><con:method name="LicAppDelete" method="DELETE"><con:settings/><con:parameters/><con:request name="Request 1" mediaType="application/xml"><con:settings/><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:method name="POST" method="POST"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>text/xml</con:mediaType><con:status>405</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:ErrorList</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>400</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator">coor:ErrorList</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Request 1" mediaType="application/xml" postQueryString="false"><con:settings/><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="LegacyDeviceAdd_Retailer" type="rest" basePath="" definitionUrl="C:\Users\raju.ganji\Desktop\LegacyDeviceAdd_Retailer_1.wadl" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart="file:/C:/Users/raju.ganji/Desktop/LegacyDeviceAdd_Retailer_1.wadl"><con:part><con:url>file:/C:/Users/raju.ganji/Desktop/LegacyDeviceAdd_Retailer_1.wadl</con:url><con:content><![CDATA[<application xmlns="http://wadl.dev.java.net/2009/02">
  <doc xml:lang="en" title="LegacyDeviceAdd_Retailer"/>
  <resources base="https://${">
    <resource path="rest/${#Project#REST_API_Version}/Account/${#Project#AccountID}/LegacyDevice" id="LegacyDeviceAdd">
      <doc xml:lang="en" title="LegacyDeviceAdd"/>
      <method name="GET" id="GET LegacyDeviceAdd">
        <doc xml:lang="en" title="GET LegacyDeviceAdd"/>
        <request/>
        <response status="200">
          <representation mediaType="application/xml" element="dece:DigitalAsset" xmlns:dece="http://www.decellc.org/schema/2010/10/dece"/>
          <representation mediaType="text/xml"/>
        </response>
        <response status="404 405">
          <representation mediaType="text/xml"/>
        </response>
        <response status="">
          <representation mediaType="application/xml"/>
        </response>
        <response status="400 404">
          <representation mediaType="application/xml" element="dece:Error" xmlns:dece="http://www.decellc.org/schema/2010/10/dece"/>
        </response>
        <response status="401 404">
          <representation mediaType="text/html"/>
        </response>
        <response status="405">
          <representation mediaType="text/plain; charset=UTF-8"/>
        </response>
        <response status="303">
          <representation mediaType="text/xml;charset=UTF-8"/>
        </response>
      </method>
      <method name="POST" id="POST LegacyDeviceAdd">
        <doc xml:lang="en" title="POST LegacyDeviceAdd"/>
        <request>
          <representation mediaType="application/xml" element="dece:Errors" xmlns:dece="http://www.decellc.org/schema/2010/10/dece"/>
        </request>
        <response status="">
          <representation mediaType="application/xml" element="dece:Errors" xmlns:dece="http://www.decellc.org/schema/2010/10/dece"/>
        </response>
        <response status="400 401 403 404 409">
          <representation mediaType="application/xml" element="dece:Errors" xmlns:dece="http://www.decellc.org/schema/2010/10/dece"/>
        </response>
        <response status="200 201 202">
          <representation mediaType="application/xml"/>
        </response>
        <response status="400 405">
          <representation mediaType="text/xml"/>
        </response>
        <response status="400 405 500">
          <representation mediaType="text/plain"/>
        </response>
        <response status="401 404 413 500 502">
          <representation mediaType="text/html"/>
        </response>
        <response status="200">
          <representation mediaType="text/xml"/>
        </response>
        <response status="200 201">
          <representation mediaType="text/plain"/>
        </response>
        <response status="201">
          <representation mediaType="text/plain; charset=UTF-8"/>
          <representation mediaType="application/xml;charset=UTF-8"/>
        </response>
        <response status="0">
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
        </response>
        <response status="400 403">
          <representation mediaType="application/xml;charset=UTF-8"/>
        </response>
      </method>
      <method name="PUT" id="PUT LegacyDeviceAdd">
        <doc xml:lang="en" title="PUT LegacyDeviceAdd"/>
        <request>
          <representation mediaType="application/xml" element="dece:Errors" xmlns:dece="http://www.decellc.org/schema/2010/10/dece"/>
        </request>
        <response status="">
          <representation mediaType="application/xml" element="dece:Errors" xmlns:dece="http://www.decellc.org/schema/2010/10/dece"/>
        </response>
        <response status="400">
          <representation mediaType="application/xml" element="dece:Errors" xmlns:dece="http://www.decellc.org/schema/2010/10/dece"/>
        </response>
        <response status="200">
          <representation mediaType="application/xml"/>
        </response>
        <response status="405">
          <representation mediaType="text/xml"/>
        </response>
      </method>
      <method name="DELETE" id="DELETE LegacyDeviceAdd">
        <doc xml:lang="en" title="DELETE LegacyDeviceAdd"/>
        <request/>
        <response status="200">
          <representation mediaType="application/xml"/>
        </response>
        <response status="400 404">
          <representation mediaType="application/xml" element="dece:Errors" xmlns:dece="http://www.decellc.org/schema/2010/10/dece"/>
        </response>
        <response status="400 405">
          <representation mediaType="text/xml"/>
        </response>
        <response status="">
          <representation mediaType="application/xml"/>
        </response>
        <response status="500">
          <representation mediaType="text/html"/>
        </response>
        <response status="405">
          <representation mediaType="text/plain"/>
          <representation mediaType="text/plain; charset=UTF-8"/>
        </response>
      </method>
      <method name="HEAD" id="HEAD LegacyDeviceAdd">
        <doc xml:lang="en" title="HEAD LegacyDeviceAdd"/>
        <request/>
        <response status="500">
          <representation mediaType="text/html"/>
        </response>
      </method>
      <method name="OPTIONS" id="OPTION LegacyDeviceAdd">
        <doc xml:lang="en" title="OPTION LegacyDeviceAdd"/>
        <request/>
        <response status="200">
          <representation mediaType="text/xml"/>
        </response>
        <response status="500">
          <representation mediaType="text/html"/>
        </response>
      </method>
    </resource>
    <resource path="rest/${#Project#REST_API_Version}/Account/${#Project#AccountID}/LegacyDevice/${#TestCase#DeviceID}" id="LegacyDeviceDelete">
      <doc xml:lang="en" title="LegacyDeviceDelete"/>
      <method name="GET" id="GET LegacyDeviceAdd">
        <doc xml:lang="en" title="GET LegacyDeviceAdd"/>
        <request/>
        <response status="200">
          <representation mediaType="application/xml" element="dece:DigitalAsset" xmlns:dece="http://www.decellc.org/schema/2010/10/dece"/>
          <representation mediaType="text/xml"/>
          <representation mediaType="text/plain"/>
        </response>
        <response status="404 405">
          <representation mediaType="text/xml"/>
        </response>
        <response status="">
          <representation mediaType="application/xml"/>
        </response>
        <response status="400 404">
          <representation mediaType="application/xml" element="dece:Error" xmlns:dece="http://www.decellc.org/schema/2010/10/dece"/>
        </response>
        <response status="401 404 500">
          <representation mediaType="text/html"/>
        </response>
        <response status="405">
          <representation mediaType="text/plain"/>
          <representation mediaType="text/plain; charset=UTF-8"/>
        </response>
      </method>
      <method name="POST" id="POST LegacyDeviceAdd">
        <doc xml:lang="en" title="POST LegacyDeviceAdd"/>
        <request>
          <representation mediaType="application/xml" element="dece:Errors" xmlns:dece="http://www.decellc.org/schema/2010/10/dece"/>
        </request>
        <response status="">
          <representation mediaType="application/xml" element="dece:Errors" xmlns:dece="http://www.decellc.org/schema/2010/10/dece"/>
        </response>
        <response status="400 403">
          <representation mediaType="application/xml" element="dece:Errors" xmlns:dece="http://www.decellc.org/schema/2010/10/dece"/>
        </response>
        <response status="200 202">
          <representation mediaType="application/xml"/>
        </response>
        <response status="400 405">
          <representation mediaType="text/xml"/>
        </response>
        <response status="500">
          <representation mediaType="text/plain"/>
        </response>
        <response status="401 413">
          <representation mediaType="text/html"/>
        </response>
      </method>
      <method name="PUT" id="PUT LegacyDeviceAdd">
        <doc xml:lang="en" title="PUT LegacyDeviceAdd"/>
        <request>
          <representation mediaType="application/xml" element="dece:Errors" xmlns:dece="http://www.decellc.org/schema/2010/10/dece"/>
        </request>
        <response status="">
          <representation mediaType="application/xml" element="dece:Errors" xmlns:dece="http://www.decellc.org/schema/2010/10/dece"/>
        </response>
        <response status="400 401 403 404">
          <representation mediaType="application/xml" element="dece:Errors" xmlns:dece="http://www.decellc.org/schema/2010/10/dece"/>
        </response>
        <response status="200">
          <representation mediaType="application/xml"/>
          <representation mediaType="text/plain"/>
          <representation mediaType="text/plain; charset=UTF-8"/>
          <representation mediaType="application/xml;charset=UTF-8"/>
        </response>
        <response status="405">
          <representation mediaType="text/xml"/>
        </response>
        <response status="400">
          <representation mediaType="text/plain"/>
        </response>
        <response status="0">
          <representation mediaType=""/>
        </response>
        <response status="400 404">
          <representation mediaType="application/xml;charset=UTF-8"/>
        </response>
        <response status="404">
          <representation mediaType="text/html; charset=iso-8859-1"/>
        </response>
        <response status="412">
          <representation mediaType="text/html;charset=utf-8"/>
        </response>
      </method>
      <method name="DELETE" id="DELETE LegacyDeviceAdd">
        <doc xml:lang="en" title="DELETE LegacyDeviceAdd"/>
        <request/>
        <response status="200">
          <representation mediaType="application/xml"/>
          <representation mediaType="text/plain"/>
          <representation mediaType="text/plain; charset=UTF-8"/>
          <representation mediaType="text/plain;charset=UTF-8"/>
        </response>
        <response status="400 404">
          <representation mediaType="application/xml" element="dece:Errors" xmlns:dece="http://www.decellc.org/schema/2010/10/dece"/>
        </response>
        <response status="400 405">
          <representation mediaType="text/xml"/>
        </response>
        <response status="">
          <representation mediaType="application/xml"/>
        </response>
        <response status="404">
          <representation mediaType="application/xml;charset=UTF-8"/>
          <representation mediaType="text/html; charset=iso-8859-1"/>
        </response>
      </method>
      <method name="HEAD" id="HEAD LegacyDeviceAdd">
        <doc xml:lang="en" title="HEAD LegacyDeviceAdd"/>
        <request/>
      </method>
      <method name="OPTIONS" id="OPTION LegacyDeviceAdd">
        <doc xml:lang="en" title="OPTION LegacyDeviceAdd"/>
        <request/>
        <response status="200">
          <representation mediaType="text/xml"/>
        </response>
      </method>
    </resource>
    <resource path="rest/${#Project#REST_API_Version}/Account/${#Project#AccountID}/LegacyDevice/${#TestCase#DeviceID}" id="LegacyDeviceUpdate">
      <doc xml:lang="en" title="LegacyDeviceUpdate"/>
      <method name="GET" id="GET LegacyDeviceAdd">
        <doc xml:lang="en" title="GET LegacyDeviceAdd"/>
        <request/>
        <response status="200">
          <representation mediaType="application/xml" element="dece:DigitalAsset" xmlns:dece="http://www.decellc.org/schema/2010/10/dece"/>
          <representation mediaType="text/xml"/>
        </response>
        <response status="404 405">
          <representation mediaType="text/xml"/>
        </response>
        <response status="">
          <representation mediaType="application/xml"/>
        </response>
        <response status="400 404">
          <representation mediaType="application/xml" element="dece:Error" xmlns:dece="http://www.decellc.org/schema/2010/10/dece"/>
        </response>
        <response status="401 404">
          <representation mediaType="text/html"/>
        </response>
      </method>
      <method name="POST" id="POST LegacyDeviceAdd">
        <doc xml:lang="en" title="POST LegacyDeviceAdd"/>
        <request>
          <representation mediaType="application/xml" element="dece:Errors" xmlns:dece="http://www.decellc.org/schema/2010/10/dece"/>
        </request>
        <response status="">
          <representation mediaType="application/xml" element="dece:Errors" xmlns:dece="http://www.decellc.org/schema/2010/10/dece"/>
        </response>
        <response status="400">
          <representation mediaType="application/xml" element="dece:Errors" xmlns:dece="http://www.decellc.org/schema/2010/10/dece"/>
        </response>
        <response status="200 202">
          <representation mediaType="application/xml"/>
        </response>
        <response status="400 405">
          <representation mediaType="text/xml"/>
        </response>
        <response status="500">
          <representation mediaType="text/plain"/>
        </response>
        <response status="401">
          <representation mediaType="text/html"/>
        </response>
      </method>
      <method name="PUT" id="PUT LegacyDeviceAdd">
        <doc xml:lang="en" title="PUT LegacyDeviceAdd"/>
        <request>
          <representation mediaType="application/xml" element="dece:Errors" xmlns:dece="http://www.decellc.org/schema/2010/10/dece"/>
        </request>
        <response status="">
          <representation mediaType="application/xml" element="dece:Errors" xmlns:dece="http://www.decellc.org/schema/2010/10/dece"/>
        </response>
        <response status="400">
          <representation mediaType="application/xml" element="dece:Errors" xmlns:dece="http://www.decellc.org/schema/2010/10/dece"/>
        </response>
        <response status="200">
          <representation mediaType="application/xml"/>
        </response>
        <response status="405">
          <representation mediaType="text/xml"/>
        </response>
      </method>
      <method name="DELETE" id="DELETE LegacyDeviceAdd">
        <doc xml:lang="en" title="DELETE LegacyDeviceAdd"/>
        <request/>
        <response status="200">
          <representation mediaType="application/xml"/>
        </response>
        <response status="404">
          <representation mediaType="application/xml" element="dece:Errors" xmlns:dece="http://www.decellc.org/schema/2010/10/dece"/>
        </response>
        <response status="400 405">
          <representation mediaType="text/xml"/>
        </response>
        <response status="">
          <representation mediaType="application/xml"/>
        </response>
      </method>
      <method name="HEAD" id="HEAD LegacyDeviceAdd">
        <doc xml:lang="en" title="HEAD LegacyDeviceAdd"/>
        <request/>
      </method>
      <method name="OPTIONS" id="OPTION LegacyDeviceAdd">
        <doc xml:lang="en" title="OPTION LegacyDeviceAdd"/>
        <request/>
        <response status="200">
          <representation mediaType="text/xml"/>
        </response>
      </method>
    </resource>
    <resource path="rest/${#Project#REST_API_Version}/Account/${#Project#AccountID}/Domain/urn%3Adece%3Adomainid%3Adece%3A1234/Device/${#TestCase#DeviceID}" id="LegacyDeviceGet">
      <doc xml:lang="en" title="LegacyDeviceGet"/>
      <method name="GET" id="GET LegacyDeviceAdd">
        <doc xml:lang="en" title="GET LegacyDeviceAdd"/>
        <request/>
        <response status="200">
          <representation mediaType="application/xml" element="dece:DigitalAsset" xmlns:dece="http://www.decellc.org/schema/2010/10/dece"/>
          <representation mediaType="text/xml"/>
          <representation mediaType="text/plain"/>
          <representation mediaType="application/xml;charset=UTF-8"/>
        </response>
        <response status="404 405">
          <representation mediaType="text/xml"/>
        </response>
        <response status="">
          <representation mediaType="application/xml"/>
        </response>
        <response status="400 401 403 404">
          <representation mediaType="application/xml" element="dece:Error" xmlns:dece="http://www.decellc.org/schema/2010/10/dece"/>
        </response>
        <response status="401 404 500">
          <representation mediaType="text/html"/>
        </response>
        <response status="405">
          <representation mediaType="text/plain"/>
        </response>
        <response status="404">
          <representation mediaType="text/html; charset=iso-8859-1"/>
        </response>
        <response status="403 404">
          <representation mediaType="application/xml;charset=UTF-8"/>
        </response>
        <response status="500">
          <representation mediaType="text/xml;charset=UTF-8"/>
        </response>
      </method>
      <method name="POST" id="POST LegacyDeviceAdd">
        <doc xml:lang="en" title="POST LegacyDeviceAdd"/>
        <request>
          <representation mediaType="application/xml" element="dece:Errors" xmlns:dece="http://www.decellc.org/schema/2010/10/dece"/>
        </request>
        <response status="">
          <representation mediaType="application/xml" element="dece:Errors" xmlns:dece="http://www.decellc.org/schema/2010/10/dece"/>
        </response>
        <response status="400 403">
          <representation mediaType="application/xml" element="dece:Errors" xmlns:dece="http://www.decellc.org/schema/2010/10/dece"/>
        </response>
        <response status="200 202">
          <representation mediaType="application/xml"/>
        </response>
        <response status="400 405">
          <representation mediaType="text/xml"/>
        </response>
        <response status="500">
          <representation mediaType="text/plain"/>
        </response>
        <response status="401 413">
          <representation mediaType="text/html"/>
        </response>
      </method>
      <method name="PUT" id="PUT LegacyDeviceAdd">
        <doc xml:lang="en" title="PUT LegacyDeviceAdd"/>
        <request>
          <representation mediaType="application/xml" element="dece:Errors" xmlns:dece="http://www.decellc.org/schema/2010/10/dece"/>
        </request>
        <response status="">
          <representation mediaType="application/xml" element="dece:Errors" xmlns:dece="http://www.decellc.org/schema/2010/10/dece"/>
        </response>
        <response status="400 401 403 404">
          <representation mediaType="application/xml" element="dece:Errors" xmlns:dece="http://www.decellc.org/schema/2010/10/dece"/>
        </response>
        <response status="200">
          <representation mediaType="application/xml"/>
          <representation mediaType="text/plain"/>
        </response>
        <response status="405">
          <representation mediaType="text/xml"/>
        </response>
        <response status="400">
          <representation mediaType="text/plain"/>
        </response>
      </method>
      <method name="DELETE" id="DELETE LegacyDeviceAdd">
        <doc xml:lang="en" title="DELETE LegacyDeviceAdd"/>
        <request/>
        <response status="200">
          <representation mediaType="application/xml"/>
          <representation mediaType="text/plain"/>
        </response>
        <response status="404">
          <representation mediaType="application/xml" element="dece:Errors" xmlns:dece="http://www.decellc.org/schema/2010/10/dece"/>
        </response>
        <response status="400 405">
          <representation mediaType="text/xml"/>
        </response>
        <response status="">
          <representation mediaType="application/xml"/>
        </response>
      </method>
      <method name="HEAD" id="HEAD LegacyDeviceAdd">
        <doc xml:lang="en" title="HEAD LegacyDeviceAdd"/>
        <request/>
      </method>
      <method name="OPTIONS" id="OPTION LegacyDeviceAdd">
        <doc xml:lang="en" title="OPTION LegacyDeviceAdd"/>
        <request/>
        <response status="200">
          <representation mediaType="text/xml"/>
        </response>
      </method>
    </resource>
    <resource path="rest/1/0/Account/urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0/Domain/urn%3Adece%3Adomainid%3Adece%3AA09DA589BD63A036E0401F0A05996D9A/Device/urn%3Adece%3Adeviceid%3Aorg%3Adece%3AA09D9C22F11CBC6DE0401F0A05996898" id="Copy of LegacyDeviceGet">
      <doc xml:lang="en" title="Copy of LegacyDeviceGet"/>
      <method name="GET" id="GET LegacyDeviceAdd">
        <doc xml:lang="en" title="GET LegacyDeviceAdd"/>
        <request/>
        <response status="200">
          <representation mediaType="application/xml" element="dece:DigitalAsset" xmlns:dece="http://www.decellc.org/schema/2010/10/dece"/>
          <representation mediaType="text/xml"/>
          <representation mediaType="text/plain"/>
        </response>
        <response status="404 405">
          <representation mediaType="text/xml"/>
        </response>
        <response status="">
          <representation mediaType="application/xml"/>
        </response>
        <response status="400 404">
          <representation mediaType="application/xml" element="dece:Error" xmlns:dece="http://www.decellc.org/schema/2010/10/dece"/>
        </response>
        <response status="401 404 500">
          <representation mediaType="text/html"/>
        </response>
        <response status="405">
          <representation mediaType="text/plain"/>
        </response>
        <response status="0">
          <representation mediaType=""/>
          <representation mediaType=""/>
          <representation mediaType=""/>
        </response>
      </method>
      <method name="POST" id="POST LegacyDeviceAdd">
        <doc xml:lang="en" title="POST LegacyDeviceAdd"/>
        <request>
          <representation mediaType="application/xml" element="dece:Errors" xmlns:dece="http://www.decellc.org/schema/2010/10/dece"/>
        </request>
        <response status="">
          <representation mediaType="application/xml" element="dece:Errors" xmlns:dece="http://www.decellc.org/schema/2010/10/dece"/>
        </response>
        <response status="400 403">
          <representation mediaType="application/xml" element="dece:Errors" xmlns:dece="http://www.decellc.org/schema/2010/10/dece"/>
        </response>
        <response status="200 202">
          <representation mediaType="application/xml"/>
        </response>
        <response status="400 405">
          <representation mediaType="text/xml"/>
        </response>
        <response status="500">
          <representation mediaType="text/plain"/>
        </response>
        <response status="401 413">
          <representation mediaType="text/html"/>
        </response>
      </method>
      <method name="PUT" id="PUT LegacyDeviceAdd">
        <doc xml:lang="en" title="PUT LegacyDeviceAdd"/>
        <request>
          <representation mediaType="application/xml" element="dece:Errors" xmlns:dece="http://www.decellc.org/schema/2010/10/dece"/>
        </request>
        <response status="">
          <representation mediaType="application/xml" element="dece:Errors" xmlns:dece="http://www.decellc.org/schema/2010/10/dece"/>
        </response>
        <response status="400 401 403 404">
          <representation mediaType="application/xml" element="dece:Errors" xmlns:dece="http://www.decellc.org/schema/2010/10/dece"/>
        </response>
        <response status="200">
          <representation mediaType="application/xml"/>
          <representation mediaType="text/plain"/>
        </response>
        <response status="405">
          <representation mediaType="text/xml"/>
        </response>
        <response status="400">
          <representation mediaType="text/plain"/>
        </response>
      </method>
      <method name="DELETE" id="DELETE LegacyDeviceAdd">
        <doc xml:lang="en" title="DELETE LegacyDeviceAdd"/>
        <request/>
        <response status="200">
          <representation mediaType="application/xml"/>
          <representation mediaType="text/plain"/>
        </response>
        <response status="404">
          <representation mediaType="application/xml" element="dece:Errors" xmlns:dece="http://www.decellc.org/schema/2010/10/dece"/>
        </response>
        <response status="400 405">
          <representation mediaType="text/xml"/>
        </response>
        <response status="">
          <representation mediaType="application/xml"/>
        </response>
      </method>
      <method name="HEAD" id="HEAD LegacyDeviceAdd">
        <doc xml:lang="en" title="HEAD LegacyDeviceAdd"/>
        <request/>
      </method>
      <method name="OPTIONS" id="OPTION LegacyDeviceAdd">
        <doc xml:lang="en" title="OPTION LegacyDeviceAdd"/>
        <request/>
        <response status="200">
          <representation mediaType="text/xml"/>
        </response>
      </method>
    </resource>
  </resources>
</application>]]></con:content><con:type>http://wadl.dev.java.net/2009/02</con:type></con:part></con:definitionCache><con:endpoints><con:endpoint>${#Project#Provision_HostName}</con:endpoint></con:endpoints><con:resource name="LegacyDeviceAdd" path="rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/LegacyDevice"><con:settings/><con:parameters><con:parameter><con:name>AccountID</con:name><con:style>TEMPLATE</con:style><con:default/></con:parameter></con:parameters><con:method name="POST LegacyDeviceAdd" method="POST"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:Errors</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:Errors</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400 401 403 404 409</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:Errors</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>200 201 202</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/xml</con:mediaType><con:status>400 405</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/plain</con:mediaType><con:status>400 405 500</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/html</con:mediaType><con:status>401 404 413 500 502</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>text/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>text/plain</con:mediaType><con:status>200 201</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>text/plain; charset=UTF-8</con:mediaType><con:status>201</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>201</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>400 403</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/xml"><con:settings/><con:endpoint>https://${</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method></con:resource><con:resource name="LegacyDeviceDelete" path="rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/LegacyDevice/{DeviceID}"><con:settings/><con:parameters><con:parameter><con:name>AccountID</con:name><con:style>TEMPLATE</con:style><con:default/></con:parameter><con:parameter><con:name>DeviceID</con:name><con:style>TEMPLATE</con:style><con:default/></con:parameter></con:parameters><con:method name="PUT LegacyDeviceAdd" method="PUT"><con:settings/><con:parameters/><con:representation type="REQUEST" id=""><con:mediaType>application/xml</con:mediaType><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:Errors</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:Errors</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400 401 403 404</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:Errors</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>text/plain</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>text/plain; charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/xml</con:mediaType><con:status>405</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/plain</con:mediaType><con:status>400</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType/><con:status>0</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>400 404</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/html; charset=iso-8859-1</con:mediaType><con:status>404</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/html;charset=utf-8</con:mediaType><con:status>412</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/xml"><con:settings/><con:endpoint>https://${</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method><con:method name="DELETE LegacyDeviceAdd" method="DELETE"><con:settings/><con:parameters/><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>text/plain</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>text/plain; charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>text/plain;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400 404</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:Errors</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/xml</con:mediaType><con:status>400 405</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>404</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/html; charset=iso-8859-1</con:mediaType><con:status>404</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/json"><con:settings/><con:endpoint>https://${</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method></con:resource><con:resource name="LegacyDeviceGet" path="rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/${#Project#AccountID}/Domain/urn%3Adece%3Adomainid%3Adece%3A1234/Device/${#TestCase#DeviceID}"><con:settings/><con:parameters/><con:method name="GET LegacyDeviceAdd" method="GET"><con:settings/><con:parameters/><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:DigitalAsset</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>text/xml</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>text/plain</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/xml</con:mediaType><con:status>404 405</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="RESPONSE" id=""><con:mediaType>application/xml</con:mediaType><con:status/><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml</con:mediaType><con:status>400 401 403 404</con:status><con:params/><con:element xmlns:dece="http://www.decellc.org/schema/2010/10/dece">dece:Error</con:element><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/html</con:mediaType><con:status>401 404 500</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/plain</con:mediaType><con:status>405</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/html; charset=iso-8859-1</con:mediaType><con:status>404</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>403 404</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>text/xml;charset=UTF-8</con:mediaType><con:status>500</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" mediaType="application/json"><con:settings/><con:endpoint>https://${</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="UserPolicyDelete" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints/><con:resource name="PolicyDelete" path="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{NodeAccountId}/User/{NodeUserId}/Policy/{PolicyID}"><con:settings/><con:parameters><con:parameter><con:name>NodeAccountId</con:name><con:value>NodeAccountId</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>NodeAccountId</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>NodeUserId</con:name><con:value>NodeUserId</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>NodeUserId</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>PolicyID</con:name><con:value>PolicyClass</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>PolicyClass</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="Delete" method="DELETE"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Request 1" mediaType="application/xml"><con:settings/><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="AccountPolicyCreate" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints/><con:resource name="AccountPolicyCreate" path="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{NodeAccountId}/Policy/{PolicyClass}"><con:settings/><con:parameters><con:parameter><con:name>NodeAccountId</con:name><con:value>NodeAccountId</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>NodeAccountId</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>PolicyClass</con:name><con:value>PolicyClass</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>PolicyClass</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="POST" method="POST"><con:settings/><con:parameters/><con:request name="Request 1" mediaType="application/xml" postQueryString="false"><con:settings/><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method><con:method name="Get" method="GET"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator">coor:PolicyList</con:element></con:representation><con:request name="Request 1" mediaType="application/xml"><con:settings/><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="AccountPolicyDelete" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints/><con:resource name="AccountPolicyDelete" path="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{NodeAccountId}/Policy/{PolicyID}"><con:settings/><con:parameters><con:parameter><con:name>NodeAccountId</con:name><con:value>NodeAccountId</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>NodeAccountId</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>PolicyID</con:name><con:value>PolicyID</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>PolicyID</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="Delete" method="DELETE"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>text/xml;charset=UTF-8</con:mediaType><con:status>404 500</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/html;charset=utf-8</con:mediaType><con:status>412</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Request 1" mediaType="application/xml"><con:settings/><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="AttestationDataCreate" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints/><con:resource name="AttestationDataCreate" path="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Attestation"><con:settings/><con:parameters/><con:method name="POST" method="POST"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:coor="http://www.decellc.org/schema/2012/12/coordinator">coor:ErrorList</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/xml</con:mediaType><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>201</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Request 1" mediaType="application/xml" postQueryString="false"><con:settings/><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="AttestationDataGet" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints/><con:resource name="AttestationDataGet" path="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Attestation/{AttestationID}"><con:settings/><con:parameters><con:parameter><con:name>AttestationID</con:name><con:style>TEMPLATE</con:style><con:default/></con:parameter></con:parameters><con:method name="GET" method="GET"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/xml;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:util="http://www.decellc.org/schema/2010/10/dece/util">util:AttestationData</con:element></con:representation><con:request name="Request 1" mediaType="application/xml"><con:settings/><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="DRMClientDelete" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints/><con:resource name="DRMClientDelete" path="/rest/${#Project#versionMajor}/${#Project#versionMinor}/DECEDomain/{DeceDomainID}/DRMClientDelete"><con:settings/><con:parameters><con:parameter><con:name>DeceDomainID</con:name><con:value>DeceDomainID</con:value><con:style>TEMPLATE</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default>DeceDomainID</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="Delete" method="DELETE"><con:settings/><con:parameters/><con:request name="Request 1" mediaType="application/xml"><con:settings/><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:testSuite name="Common Test Steps" disabled="true" id="da5b4403-97c6-42b0-ad34-9f0256c27ae8">
    <con:description/>
    <con:settings/>
    <con:runType>SEQUENTIAL</con:runType>
    <con:properties/>
    <con:reportParameters/>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Extract DeceDomainCreate Information" searchProperties="true">
      <con:settings/>
      <con:testStep type="groovy" name="Extract DeceDomainCreate Request XML">
        <con:settings/>
        <con:config>
          <script>import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.teststeps.WsdlResponseMessageExchange

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def callingTSuiteName = testCase.getPropertyValue("TSuiteName");
def callingTCaseName = testCase.getPropertyValue("TCaseName");

def callingTCase = testProject.getTestSuiteByName(callingTSuiteName).getTestCaseByName(callingTCaseName);

def RT_RequestBody = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenCreateRequest").getTestStepByName("RightsTokenCreate Request POST").testRequest.response.rawRequestData;

def rawData = new String(RT_RequestBody);
 
testCase.setPropertyValue("RightsReqXml",rawData.tokenize('\n').last());

log.info testCase.getPropertyValue("RightsReqXml");
callingTCase.setPropertyValue("RightsReqXml",testCase.getPropertyValue("RightsReqXml"));</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract DeceDomain Info from the Response">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callingTSuiteName = testCase.getPropertyValue("TSuiteName");
def callingTCaseName = testCase.getPropertyValue("TCaseName");

def callingTCase = testProject.getTestSuiteByName(callingTSuiteName).getTestCaseByName(callingTCaseName)

def RightsResHeader = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenCreateRequest").getTestStepByName('RightsTokenCreate Request POST').httpRequest.response.getResponseHeaders(); 
def RightsResXml = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenCreateRequest").getTestStepByName('RightsTokenCreate Request POST').httpRequest.response.getContentAsString();
def RightsResTime = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("RightsTokenCreateRequest").getTestStepByName('RightsTokenCreate Request POST').httpRequest.response.getTimeTaken();
def RightsResHttpStatus = RightsResHeader.getAt("#status#");

log.info RightsResHttpStatus;
log.info "Response Time : $RightsResTime:ms";

testCase.setPropertyValue("RightsResXml",RightsResXml);
testCase.setPropertyValue("RightsResTime",RightsResTime.toString());

if(RightsResHttpStatus == "HTTP/1.1 201 Created")
{
def RTKLoc = RightsResHeader.getAt("Location").tokenize('/')
log.info RTKLoc[RTKLoc.indexOf("RightsToken").next()];
testCase.setPropertyValue("rightstokenid",RTKLoc[RTKLoc.indexOf("RightsToken").next()] );
log.info RTKLoc[RTKLoc.indexOf("Account").next()];
testCase.setPropertyValue("Accountid",RTKLoc[RTKLoc.indexOf("Account").next()]);
//com.eviware.soapui.support.UISupport.showInfoMessage("RightsToken has been Created"); 
}
else{
log.info " RightsToken Create failed - [ $RightsResHttpStatus ]"
throw new Exception( "Test Step Failed!" );
}
// Returns Rights token , Account id
testCase.setPropertyValue("DBrightstokenid",testCase.getPropertyValue("rightstokenid").tokenize(':').last());
callingTCase.setPropertyValue("rightstokenid",testCase.getPropertyValue("rightstokenid"));
callingTCase.setPropertyValue("DBrightstokenid",testCase.getPropertyValue("DBrightstokenid"));
callingTCase.setPropertyValue("RightsResXml",testCase.getPropertyValue("RightsResXml"));
callingTCase.setPropertyValue("RightsReqXml",testCase.getPropertyValue("RightsReqXml"));
callingTCase.setPropertyValue("RightsResTime",testCase.getPropertyValue("RightsResTime"));
//callingTCase.setPropertyValue("Accountid",testCase.getPropertyValue("Accountid"));</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>TCaseName</con:name>
          <con:value>RightsTokenCreate_With_Valid_AccountId</con:value>
        </con:property>
        <con:property>
          <con:name>TSuiteName</con:name>
          <con:value>Staging Rights DELETE</con:value>
        </con:property>
        <con:property>
          <con:name>rightstokenid</con:name>
          <con:value>urn:dece:rightstokenid:org:dece:9C7D2A2C8D973ED7E0401F0A05997B5C</con:value>
        </con:property>
        <con:property>
          <con:name>Accountid</con:name>
          <con:value>urn:dece:accountid:org:dece:107001</con:value>
        </con:property>
        <con:property>
          <con:name>DBrightstokenid</con:name>
          <con:value>9C7D2A2C8D973ED7E0401F0A05997B5C</con:value>
        </con:property>
        <con:property>
          <con:name>RightsReqXml</con:name>
          <con:value><![CDATA[<ns4:RightsTokenData ALID="urn:dece:alid:file:SARVJEET_CID_DONT_TOUCH_4.txt" xsi:schemaLocation="http://www.decellc.org/schema file:/C:/5Work/Workspaces/workspace-sts-2.3.3/dece_api/src/main/webapp/WEB-INF/dece.xsd" ContentID="urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_4.txt" xmlns:ns4="http://www.decellc.org/schema/2010/10/dece" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><ns4:SoldAs><ns4:DisplayName Language="en">Avatar BestBuy Special Packaging</ns4:DisplayName><ns4:ContentID>urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_4.txt</ns4:ContentID></ns4:SoldAs><ns4:RightsProfiles><ns4:PurchaseProfile ContentProfile="urn:dece:type:mediaprofile:highdefinition"><ns4:DiscreteMediaRightsRemaining DiscreteMediaProfile="urn:dece:type:discretemediaformat:securesd:cprm">1</ns4:DiscreteMediaRightsRemaining><ns4:CanDownload>true</ns4:CanDownload><ns4:CanStream>true</ns4:CanStream></ns4:PurchaseProfile><ns4:PurchaseProfile ContentProfile="urn:dece:type:mediaprofile:standarddefinition"><ns4:DiscreteMediaRightsRemaining DiscreteMediaProfile="urn:dece:type:discretemediaformat:securesd:cprm">1</ns4:DiscreteMediaRightsRemaining><ns4:CanDownload>true</ns4:CanDownload><ns4:CanStream>true</ns4:CanStream></ns4:PurchaseProfile><ns4:PurchaseProfile ContentProfile="urn:dece:type:mediaprofile:portabledefinition"><ns4:DiscreteMediaRightsRemaining DiscreteMediaProfile="urn:dece:type:discretemediaformat:securesd:cprm">1</ns4:DiscreteMediaRightsRemaining><ns4:CanDownload>true</ns4:CanDownload><ns4:CanStream>true</ns4:CanStream></ns4:PurchaseProfile></ns4:RightsProfiles><ns4:ResourceStatus><ns4:Current CreatedBy="urn:dece:org:org:dece:0799" CreationDate="2011-02-17T15:12:03"><ns4:Value>urn:dece:type:status:active</ns4:Value><ns4:Description>new rights token</ns4:Description></ns4:Current></ns4:ResourceStatus><ns4:LicenseAcqBaseLoc>https://dl.bestbuy.com/p/bb93827398sdjdhds</ns4:LicenseAcqBaseLoc><ns4:FulfillmentWebLoc><ns4:Location>https://dl.bestbuy.com/p/aaa</ns4:Location><ns4:Preference>1</ns4:Preference></ns4:FulfillmentWebLoc><ns4:FulfillmentWebLoc><ns4:Location>https://dl.bestbuy.com/p/bbb</ns4:Location><ns4:Preference>1</ns4:Preference></ns4:FulfillmentWebLoc><ns4:FulfillmentManifestLoc><ns4:Location>https://dl.bestbuy.com/p/ccc</ns4:Location><ns4:Preference>3</ns4:Preference></ns4:FulfillmentManifestLoc><ns4:FulfillmentManifestLoc><ns4:Location>https://dl.bestbuy.com/p/ddd</ns4:Location><ns4:Preference>1</ns4:Preference></ns4:FulfillmentManifestLoc><ns4:PurchaseInfo><ns4:NodeID>urn:dece:org:org:dece:0799</ns4:NodeID><ns4:RetailerTransaction>RetailerTransaction_1_node0799_RetailerNode</ns4:RetailerTransaction><ns4:PurchaseAccount>urn:dece:accountid:org:dece:107001</ns4:PurchaseAccount><ns4:PurchaseUser>urn:dece:userid:org:dece:9A9CCCF13ABCD94FE0401F0A05992F63</ns4:PurchaseUser><ns4:PurchaseTime>2011-06-24T15:12:03</ns4:PurchaseTime></ns4:PurchaseInfo><ns4:ViewControl><ns4:AllowedUser>urn:dece:userid:org:dece:107999</ns4:AllowedUser></ns4:ViewControl></ns4:RightsTokenData>]]></con:value>
        </con:property>
        <con:property>
          <con:name>RightsResXml</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>RightsResTime</con:name>
          <con:value>11681</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DeceDomain Create Data Validation" searchProperties="true">
      <con:settings/>
      <con:testStep type="groovy" name="Validate DB for Dece Domain">
        <con:settings/>
        <con:config>
          <script>import dbUtils.dbRightsToken;
import dbUtils.dbUtils;
import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.teststeps.WsdlResponseMessageExchange

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

mydbRights = new dbRightsToken(log,"LP1");

def callTSuitename = testCase.getPropertyValue("TSuiteName");
def callTCasename = testCase.getPropertyValue("TCaseName");

def CallingTCase = testProject.getTestSuiteByName(callTSuitename).getTestCaseByName(callTCasename);

testCase.setPropertyValue("RightsReqXml",CallingTCase.getPropertyValue("RightsReqXml"));

//getRequestContentAsXml

testCase.setPropertyValue("rightstokenid",CallingTCase.getPropertyValue("rightstokenid"));
testCase.setPropertyValue("DBrightstokenid",CallingTCase.getPropertyValue("DBrightstokenid"));
testCase.setPropertyValue("Accountid",CallingTCase.getPropertyValue("Accountid"));


// Fetch RightsToken info from RIGHTS_TOKEN table
RT_Data = mydbRights.rightstokenGetRow(testCase.getPropertyValue("DBrightstokenid"));
//RT_Data2 = mydbRights.rightstokenSoldAsGetRow(testCase.getPropertyValue("DBrightstokenid"));
//RT_Data3 = mydbRights.rightstokenPMPPGetRow(testCase.getPropertyValue("DBrightstokenid"));
//RT_Data4 = mydbRights.rightstokenFFLocGetRow(testCase.getPropertyValue("DBrightstokenid"));
RT_Data5 = mydbRights.rightstokenStatusHistoryGetRow(testCase.getPropertyValue("DBrightstokenid"));
//log.info RT_Data2.toString(); 
log.info RT_Data.toString();

testCase.setPropertyValue("DbResultRTXml",RT_Data.toString());
testCase.setPropertyValue("DbResultRT_StatusHistoryXml",RT_Data5.toString());

//log.info testCase.getPropertyValue("DbResultRTXml");
//log.info testCase.getPropertyValue("RightsReqXml");

// Assert RightsToken Information Expected &amp; Actual 

def Val_DbResultRTXml = new XmlSlurper().parseText(testCase.getPropertyValue("DbResultRTXml"));
def Val_RightsReqXml =  new XmlSlurper().parseText(testCase.getPropertyValue("RightsReqXml"));
def Val_DbResultRTSHXml =  new XmlSlurper().parseText(testCase.getPropertyValue("DbResultRT_StatusHistoryXml"));

def rcStatusHistory = Val_DbResultRTSHXml.ResultSet.Row.size();
testCase.setPropertyValue("RTC_rcStatusHistory",rcStatusHistory.toString());

// Assert RightsTokenID

assert Val_DbResultRTXml.ResultSet.Row.RIGHTS_TOKEN_OID == testCase.getPropertyValue("DBrightstokenid");

//Assert ALID information
assert  Val_DbResultRTXml.ResultSet.Row.ALID == Val_RightsReqXml.@ALID;

// Assert CID information 
assert  Val_DbResultRTXml.ResultSet.Row.CONTENT_ID == Val_RightsReqXml.@ContentID;

//Assert NodeID information
//Val_RightsReqXml.PurchaseInfo.NodeID 
assert  Val_DbResultRTXml.ResultSet.Row.NODE_OID.toInteger() == Val_RightsReqXml.PurchaseInfo.NodeID.toString().tokenize(':').last().toInteger();

log.info rcStatusHistory;
// return rc for Status History 

CallingTCase.setPropertyValue("RTC_rcStatusHistory",testCase.getPropertyValue("RTC_rcStatusHistory"));</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>TCaseName</con:name>
          <con:value>RightsTokenCreate_With_Valid_AccountId</con:value>
        </con:property>
        <con:property>
          <con:name>TSuiteName</con:name>
          <con:value>Staging Rights DELETE</con:value>
        </con:property>
        <con:property>
          <con:name>rightstokenid</con:name>
          <con:value>urn:dece:rightstokenid:org:dece:9C7D2A2C8D973ED7E0401F0A05997B5C</con:value>
        </con:property>
        <con:property>
          <con:name>Accountid</con:name>
          <con:value>urn:dece:accountid:org:dece:107001</con:value>
        </con:property>
        <con:property>
          <con:name>DBrightstokenid</con:name>
          <con:value>9C7D2A2C8D973ED7E0401F0A05997B5C</con:value>
        </con:property>
        <con:property>
          <con:name>DbResultRTXml</con:name>
          <con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <RIGHTS_TOKEN_OID>9C7D2A2C8D973ED7E0401F0A05997B5C</RIGHTS_TOKEN_OID>
      <ACCOUNT_OID>7001</ACCOUNT_OID>
      <USER_OID>799999</USER_OID>
      <RIGHTS_LOCKER_OID>7001</RIGHTS_LOCKER_OID>
      <NODE_OID>0799</NODE_OID>
      <PURCHASE_NODE_ACCOUNT_OID>107001</PURCHASE_NODE_ACCOUNT_OID>
      <RETAILER_TRANSACTION>RetailerTransaction_1_node0799_RetailerNode</RETAILER_TRANSACTION>
      <PURCHASE_NODE_USER_OID>9A9CCCF13ABCD94FE0401F0A05992F63</PURCHASE_NODE_USER_OID>
      <PURCHASE_TIME>2011-06-24 15:12:03.0</PURCHASE_TIME>
      <ALID>urn:dece:alid:file:SARVJEET_CID_DONT_TOUCH_4.txt</ALID>
      <CONTENT_ID>urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_4.txt</CONTENT_ID>
      <RENTAL_ABSOLUTE_EXPIRATION>null</RENTAL_ABSOLUTE_EXPIRATION>
      <RENTAL_DOWNLOAD_TO_PLAY_MAX>null</RENTAL_DOWNLOAD_TO_PLAY_MAX>
      <RENTAL_PLAY_DURATION_MAX>null</RENTAL_PLAY_DURATION_MAX>
      <LICENSE_ACQ_BASE_LOC>https://dl.bestbuy.com/p/bb93827398sdjdhds</LICENSE_ACQ_BASE_LOC>
      <CREATED_DATE>2011-02-17 15:36:52.925</CREATED_DATE>
      <CREATED_BY>0799</CREATED_BY>
      <UPDATED_DATE>null</UPDATED_DATE>
      <UPDATED_BY>null</UPDATED_BY>
      <STATUS_ID>active</STATUS_ID>
    </Row>
  </ResultSet>
</Results>]]></con:value>
        </con:property>
        <con:property>
          <con:name>RightsReqXml</con:name>
          <con:value><![CDATA[<ns4:RightsTokenData ALID="urn:dece:alid:file:SARVJEET_CID_DONT_TOUCH_4.txt" xsi:schemaLocation="http://www.decellc.org/schema file:/C:/5Work/Workspaces/workspace-sts-2.3.3/dece_api/src/main/webapp/WEB-INF/dece.xsd" ContentID="urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_4.txt" xmlns:ns4="http://www.decellc.org/schema/2010/10/dece" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><ns4:SoldAs><ns4:DisplayName Language="en">Avatar BestBuy Special Packaging</ns4:DisplayName><ns4:ContentID>urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_4.txt</ns4:ContentID></ns4:SoldAs><ns4:RightsProfiles><ns4:PurchaseProfile ContentProfile="urn:dece:type:mediaprofile:highdefinition"><ns4:DiscreteMediaRightsRemaining DiscreteMediaProfile="urn:dece:type:discretemediaformat:securesd:cprm">1</ns4:DiscreteMediaRightsRemaining><ns4:CanDownload>true</ns4:CanDownload><ns4:CanStream>true</ns4:CanStream></ns4:PurchaseProfile><ns4:PurchaseProfile ContentProfile="urn:dece:type:mediaprofile:standarddefinition"><ns4:DiscreteMediaRightsRemaining DiscreteMediaProfile="urn:dece:type:discretemediaformat:securesd:cprm">1</ns4:DiscreteMediaRightsRemaining><ns4:CanDownload>true</ns4:CanDownload><ns4:CanStream>true</ns4:CanStream></ns4:PurchaseProfile><ns4:PurchaseProfile ContentProfile="urn:dece:type:mediaprofile:portabledefinition"><ns4:DiscreteMediaRightsRemaining DiscreteMediaProfile="urn:dece:type:discretemediaformat:securesd:cprm">1</ns4:DiscreteMediaRightsRemaining><ns4:CanDownload>true</ns4:CanDownload><ns4:CanStream>true</ns4:CanStream></ns4:PurchaseProfile></ns4:RightsProfiles><ns4:ResourceStatus><ns4:Current CreatedBy="urn:dece:org:org:dece:0799" CreationDate="2011-02-17T15:12:03"><ns4:Value>urn:dece:type:status:active</ns4:Value><ns4:Description>new rights token</ns4:Description></ns4:Current></ns4:ResourceStatus><ns4:LicenseAcqBaseLoc>https://dl.bestbuy.com/p/bb93827398sdjdhds</ns4:LicenseAcqBaseLoc><ns4:FulfillmentWebLoc><ns4:Location>https://dl.bestbuy.com/p/aaa</ns4:Location><ns4:Preference>1</ns4:Preference></ns4:FulfillmentWebLoc><ns4:FulfillmentWebLoc><ns4:Location>https://dl.bestbuy.com/p/bbb</ns4:Location><ns4:Preference>1</ns4:Preference></ns4:FulfillmentWebLoc><ns4:FulfillmentManifestLoc><ns4:Location>https://dl.bestbuy.com/p/ccc</ns4:Location><ns4:Preference>3</ns4:Preference></ns4:FulfillmentManifestLoc><ns4:FulfillmentManifestLoc><ns4:Location>https://dl.bestbuy.com/p/ddd</ns4:Location><ns4:Preference>1</ns4:Preference></ns4:FulfillmentManifestLoc><ns4:PurchaseInfo><ns4:NodeID>urn:dece:org:org:dece:0799</ns4:NodeID><ns4:RetailerTransaction>RetailerTransaction_1_node0799_RetailerNode</ns4:RetailerTransaction><ns4:PurchaseAccount>urn:dece:accountid:org:dece:107001</ns4:PurchaseAccount><ns4:PurchaseUser>urn:dece:userid:org:dece:9A9CCCF13ABCD94FE0401F0A05992F63</ns4:PurchaseUser><ns4:PurchaseTime>2011-06-24T15:12:03</ns4:PurchaseTime></ns4:PurchaseInfo><ns4:ViewControl><ns4:AllowedUser>urn:dece:userid:org:dece:107999</ns4:AllowedUser></ns4:ViewControl></ns4:RightsTokenData>]]></con:value>
        </con:property>
        <con:property>
          <con:name>DbResultRT_StatusHistoryXml</con:name>
          <con:value>&lt;Results>
  &lt;ResultSet fetchSize='10' />
&lt;/Results></con:value>
        </con:property>
        <con:property>
          <con:name>RTC_rcStatusHistory</con:name>
          <con:value>0</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Validate SAML Assertion" searchProperties="true" id="fa483af2-ec5f-4534-9d5f-b8af7663acec">
      <con:settings/>
      <con:testStep type="groovy" name="Validate SamlGetAssertionExpDate">
        <con:settings/>
        <con:config><script>import dbUtils.dbUtils;
import dbUtils.dbSAMLAssertion;
import groovy.*
import groovy.xml.*
import groovy.util.*;
import groovy.time.*
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callingTSuiteName = testCase.getPropertyValue("TSuiteName");
def callingTCaseName = testCase.getPropertyValue("TCaseName");

def callingTCase = testProject.getTestSuiteByName(callingTSuiteName).getTestCaseByName(callingTCaseName);

testCase.setPropertyValue("nodeid",callingTCase.getPropertyValue("nodeid"));
testCase.setPropertyValue("assertionUUID",callingTCase.getPropertyValue("assertionUUID"));

               
def myDbSaml = new dbSAMLAssertion(log,"LP1");

nodeid = testCase.getPropertyValue("nodeid");
Uuid = testCase.getPropertyValue("assertionUUID");
rcSAMLuuid = myDbSaml.samlGetAssertionRowCount(Uuid,nodeid);
testCase.setPropertyValue("rcUUID",rcSAMLuuid.toString());

		if (rcSAMLuuid.toInteger() ==1){ 
			log.info "UUid : [$Uuid] Found, row count: $rcSAMLuuid";
			// check expiration date for the assertion	
			ValsamlExpDate = GetsamlExpDate(Uuid,nodeid);			
			ValSysDate = getSysDate();
			
				 if (CompareDates(ValsamlExpDate,ValSysDate).toString()=='true'){
			 		log.info  "SAML Assertion is Good !" 
			 		log.info "SAML Assertion Expiration Date till-[$ValsamlExpDate]";
			 		testCase.setPropertyValue("SAMLExpDate",ValsamlExpDate);
				 }
				 else{
				 	log.info "SAML Assertion is Expired."
				 	assert setSamlExpDate(Uuid.toString(),nodeid.toString(),4) == 1;	
				 	ValsamlRenwDate = GetsamlExpDate(Uuid,nodeid);
				 	SysDate = getSysDate();
				 	log.info "SAML Assertion Renewed till-[$ValsamlRenwDate]";
				 	assert CompareDates(ValsamlRenwDate,SysDate)== true;
				 	testCase.setPropertyValue("SAMLExpDate",ValsamlRenwDate);			 			 	
				 }
		
		}
		else{	
			log.info "UUid : [$Uuid] not Found, row count: $rcSAMLuuid";
			testCase.setPropertyValue("rcUUID",rcSAMLuuid.toString());	
			
		}


// Get SAML Expiration Date Mehtod
def GetsamlExpDate(String Uuid, String Nodeid){
def myDbSaml = new dbSAMLAssertion(log,"LP1");
ExpDate = myDbSaml.samlGetAssertionExpDate(Uuid ,nodeid);
samlExpDateXML = new XmlSlurper().parseText(ExpDate.toString());
samlExpDate = samlExpDateXML.toString();
return samlExpDate;
}


def getSysDate(){
	sysDate = new Date().format("yyyy-MM-dd hh:mm:ss.S");
	return sysDate;
}
	
def CompareDates( String SamlDate, String SysDate){
	
		def tSamlDate = new Date().parse("yyyy-MM-dd hh:mm:ss.S",SamlDate.toString());
		def tSysDate = new Date().parse("yyyy-MM-dd hh:mm:ss.S",SysDate.toString());

		log.info "SamlDateTime in Millisec:" + tSamlDate.getTime() + "- SysDateTime in Millisec:" + tSysDate.getTime();
		if (tSamlDate.getTime() >= tSysDate.getTime()){
		return true;
		}
	
}	

def setSamlExpDate( String Uuid, String Nodeid, int Years){
		def myDbSaml = new dbSAMLAssertion(log,"LP1");
		def rcsetSamlExpDate = myDbSaml.samlRenewAssertionYear(Uuid.toString(),Nodeid.toString(),Years.toInteger() );
		return rcsetSamlExpDate;
}

// Return SAML Assertion Validations 

callingTCase.setPropertyValue("SAMLExpDate",testCase.getPropertyValue("SAMLExpDate"));
callingTCase.setPropertyValue("rcUUID",testCase.getPropertyValue("rcUUID"));</script></con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">_e11ac976-cbd0-4cb6-9058-7713bde415af</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0701</con:value>
        </con:property>
        <con:property>
          <con:name>SAMLExpDate</con:name>
          <con:value>2014-06-12 12:52:58.0</con:value>
        </con:property>
        <con:property>
          <con:name>TCaseName</con:name>
          <con:value>TC_DECE_00001_DeviceGet_Retailer_FUNC_with_ValidData</con:value>
        </con:property>
        <con:property>
          <con:name>TSuiteName</con:name>
          <con:value>DeviceGet  Retailer Test Cases Old</con:value>
        </con:property>
        <con:property>
          <con:name>rcUUID</con:name>
          <con:value>1</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Get SAML Assertion - STS" searchProperties="true" id="f9b01e91-ccce-409f-bfe9-e4d602a0fdc7">
      <con:settings/>
      <con:testStep type="groovy" name="Get SAML Assertion from STS">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callingTSuiteName = testCase.getPropertyValue("TSuiteName");
def callingTCaseName = testCase.getPropertyValue("TCaseName");

def callingTCase = testProject.getTestSuiteByName(callingTSuiteName).getTestCaseByName(callingTCaseName);

		testCase.setPropertyValue("nodetype",callingTCase.getPropertyValue("nodetype"));
		testCase.setPropertyValue("nodeid",callingTCase.getPropertyValue("nodeid"));
		testCase.setPropertyValue("audienceNodeid",callingTCase.getPropertyValue("audienceNodeid"));
		testCase.setPropertyValue("username",callingTCase.getPropertyValue("username"));
		testCase.setPropertyValue("password",callingTCase.getPropertyValue("password"));
		testCase.setPropertyValue("accountoid",null);
		testCase.setPropertyValue("useroid",null);
		testCase.setPropertyValue("assertid",null);
		testCase.setPropertyValue("SAMLassertion",null);
		testCase.setPropertyValue("tokentype",callingTCase.getPropertyValue("tokentype"));
		testCase.setPropertyValue("loopuntil",callingTCase.getPropertyValue("loopuntil"));
		testCase.setPropertyValue("expectErrTypeSTS",callingTCase.getPropertyValue("expectErrTypeSTS"));
		testCase.setPropertyValue("expectErrTypeSTSGet",callingTCase.getPropertyValue("expectErrTypeSTSGet"));


def GetSTS = testProject.getTestSuiteByName("Test Configuration/Setup").getTestCaseByName("Authorization Information Extraction via STS")

GetSTS.setPropertyValue("tName",testCase.getName());
GetSTS.setPropertyValue("sName",testSuite.getName());

def runnerTC = GetSTS.run( null , false )

assert runnerTC.status == Status.FINISHED;


// Return Property Values to the Calling testcase

callingTCase.setPropertyValue("nodeid", testCase.getPropertyValue("nodeid"));
callingTCase.setPropertyValue("nodetype",testCase.getPropertyValue("nodetype"));
callingTCase.setPropertyValue("username",testCase.getPropertyValue("username"));
callingTCase.setPropertyValue("password",testCase.getPropertyValue("password"));
callingTCase.setPropertyValue("accountoid",testCase.getPropertyValue("accountoid"));
callingTCase.setPropertyValue("useroid",testCase.getPropertyValue("useroid"));
callingTCase.setPropertyValue("SAMLassertion",testCase.getPropertyValue("assert"));
callingTCase.setPropertyValue("assertionUUID",testCase.getPropertyValue("assertionUUID"));
callingTCase.setPropertyValue("assertionUserIdFULL",testCase.getPropertyValue("assertionUserIdFULL"));
callingTCase.setPropertyValue("assertionUserId",testCase.getPropertyValue("assertionUserId"));
callingTCase.setPropertyValue("assertionAccountIdFULL",testCase.getPropertyValue("assertionAccountIdFULL"));
callingTCase.setPropertyValue("assertionAccountId",testCase.getPropertyValue("assertionAccountId"));</script></con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>nodetype</con:name>
          <con:value>device</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>0701</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>sch-drm_user1</con:value>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>Password1</con:value>
        </con:property>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SAMLassertion</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>loopuntil</con:name>
          <con:value>25</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTS</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>userrowoid</con:name>
          <con:value>A06A9AA49F7A73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value>urn:dece:userid:org:dece:A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value>A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>nodeaccountid</con:name>
          <con:value>A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>nodeuserid</con:name>
          <con:value>A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>targetURL</con:name>
          <con:value>null:null</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value>A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>alid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>cid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>deceorgid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value>urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>accountrowoid</con:name>
          <con:value>A06A9AA49F7273D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value>_e11ac976-cbd0-4cb6-9058-7713bde415af</con:value>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">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</con:value>
        </con:property>
        <con:property>
          <con:name>assertXML</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>TCaseName</con:name>
          <con:value>TC_DECE_00012_DeviceGet_RetailerCS_FUNC_Verify_DECE_DomainID_with_DEVICE_DomainID</con:value>
        </con:property>
        <con:property>
          <con:name>TSuiteName</con:name>
          <con:value>DeviceGet  Retailer_CS Test Cases</con:value>
        </con:property>
      <con:property><con:name>audienceNodeid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0702</con:value></con:property></con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DeceDomainCreateRequest" searchProperties="true">
      <con:settings/>
      <con:testStep type="groovy" name="Get the Required DeceDomain Properties">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSuitename = testCase.getPropertyValue("TSuiteName");
def callTCasename = testCase.getPropertyValue("TCaseName");

//log.info callTSuitename.getName();
//log.info callTCasename.getName();

def CallingTCase = testProject.getTestSuiteByName(callTSuitename).getTestCaseByName(callTCasename);

//SetUp SAML assertion in Request header

def headers = new StringToStringMap()
headers.put("Authorization","SAML2 assertion="+ CallingTCase.getPropertyValue("SAMLassertion"));
testRunner.testCase.getTestStepByName("RightsTokenCreate Request POST").testRequest.setRequestHeaders(headers);


//SetUp test properties

testCase.setPropertyValue("AccountID",CallingTCase.getPropertyValue("AccountID"));
testCase.setPropertyValue("ALID",CallingTCase.getPropertyValue("ALID"));
testCase.setPropertyValue("ContentID",CallingTCase.getPropertyValue("ContentID"));
testCase.setPropertyValue("SoldAsDisplayName",CallingTCase.getPropertyValue("SoldAsDisplayName") );
testCase.setPropertyValue("SoldAsLanguage",CallingTCase.getPropertyValue("SoldAsLanguage"));
testCase.setPropertyValue("SoldAsContentID",CallingTCase.getPropertyValue("SoldAsContentID"));
testCase.setPropertyValue("SoldAsBundleID",CallingTCase.getPropertyValue("SoldAsBundleID"));
testCase.setPropertyValue("PPContentProfile1",CallingTCase.getPropertyValue("PPContentProfile1"));
testCase.setPropertyValue("PPDiscreteMediaRemaining1",CallingTCase.getPropertyValue("PPDiscreteMediaRemaining1"));
testCase.setPropertyValue("PPDiscreteMediaProfile1",CallingTCase.getPropertyValue("PPDiscreteMediaProfile1"));
testCase.setPropertyValue("PPCanDownLoad1",CallingTCase.getPropertyValue("PPCanStream1"));
testCase.setPropertyValue("PPCanStream1",CallingTCase.getPropertyValue("PPCanStream1"));
testCase.setPropertyValue("PPContentProfile2",CallingTCase.getPropertyValue("PPContentProfile2"));
testCase.setPropertyValue("PPDiscreteMediaRemaining2",CallingTCase.getPropertyValue("PPDiscreteMediaRemaining2"));
testCase.setPropertyValue("PPDiscreteMediaProfile2",CallingTCase.getPropertyValue("PPDiscreteMediaProfile2"));
testCase.setPropertyValue("PPCanDownLoad2",CallingTCase.getPropertyValue("PPCanDownLoad2"));
testCase.setPropertyValue("PPCanStream2",CallingTCase.getPropertyValue("PPCanStream2"));
testCase.setPropertyValue("PPContentProfile3",CallingTCase.getPropertyValue("PPContentProfile3"));
testCase.setPropertyValue("PPDiscreteMediaRemaining3",CallingTCase.getPropertyValue("PPDiscreteMediaRemaining3"));
testCase.setPropertyValue("PPDiscreteMediaProfile3",CallingTCase.getPropertyValue("PPDiscreteMediaProfile3"));
testCase.setPropertyValue("PPCanDownLoad3",CallingTCase.getPropertyValue("PPCanDownLoad3"));
testCase.setPropertyValue("PPCanStream3",CallingTCase.getPropertyValue("PPCanStream3"));
testCase.setPropertyValue("RSCreatedby",CallingTCase.getPropertyValue("RSCreatedby"));
testCase.setPropertyValue("RSCreationDate",CallingTCase.getPropertyValue("RSCreationDate"));
testCase.setPropertyValue("RSValue",CallingTCase.getPropertyValue("RSValue"));
testCase.setPropertyValue("RSDescription",CallingTCase.getPropertyValue("RSDescription"));
testCase.setPropertyValue("LICAcqBaseLoc",CallingTCase.getPropertyValue("LICAcqBaseLoc"));
testCase.setPropertyValue("FFWebLocLocation1",CallingTCase.getPropertyValue("FFWebLocLocation1"));
testCase.setPropertyValue("FFWebLocPreference1",CallingTCase.getPropertyValue("FFWebLocPreference1"));
testCase.setPropertyValue("FFWebLocLocation2",CallingTCase.getPropertyValue("FFWebLocLocation2"));
testCase.setPropertyValue("FFWebLocPreference2",CallingTCase.getPropertyValue("FFWebLocPreference2"));
testCase.setPropertyValue("FFManifestLocLocation1",CallingTCase.getPropertyValue("FFManifestLocLocation1"));
testCase.setPropertyValue("FFManifestLocPreference1",CallingTCase.getPropertyValue("FFManifestLocPreference1"));
testCase.setPropertyValue("FFManifestLocLocation2",CallingTCase.getPropertyValue("FFManifestLocLocation2"));
testCase.setPropertyValue("FFManifestLocPreference2",CallingTCase.getPropertyValue("FFManifestLocPreference2"));
testCase.setPropertyValue("PINodeID",CallingTCase.getPropertyValue("PINodeID"));
testCase.setPropertyValue("PIRetailerTransx",CallingTCase.getPropertyValue("PIRetailerTransx"));
testCase.setPropertyValue("PIPurchaseAccount",CallingTCase.getPropertyValue("PIPurchaseAccount"));
testCase.setPropertyValue("PIPurchaseUser",CallingTCase.getPropertyValue("PIPurchaseUser"));
testCase.setPropertyValue("PIPurchaseTime",CallingTCase.getPropertyValue("PIPurchaseTime"));
testCase.setPropertyValue("VCAllowedUser",CallingTCase.getPropertyValue("VCAllowedUser"));

//Testing RightTokenCreate Request Properties Loaded correctly.

testCase.setPropertyValue("FeedRTCReq","OK");
CallingTCase.setPropertyValue("FeedRTCReq",CallingTCase.getPropertyValue("FeedRTCReq"));</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>AccountID</con:name>
          <con:value>urn:dece:accountid:org:dece:107001</con:value>
        </con:property>
        <con:property>
          <con:name>ALID</con:name>
          <con:value>urn:dece:alid:file:SARVJEET_CID_DONT_TOUCH_4.txt</con:value>
        </con:property>
        <con:property>
          <con:name>ContentID</con:name>
          <con:value>urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_4.txt</con:value>
        </con:property>
        <con:property>
          <con:name>FeedRTCReq</con:name>
          <con:value>OK</con:value>
        </con:property>
        <con:property>
          <con:name>FFManifestLocLocation1</con:name>
          <con:value>https://dl.bestbuy.com/p/ccc</con:value>
        </con:property>
        <con:property>
          <con:name>FFManifestLocLocation2</con:name>
          <con:value>https://dl.bestbuy.com/p/ddd</con:value>
        </con:property>
        <con:property>
          <con:name>FFManifestLocPreference1</con:name>
          <con:value>3</con:value>
        </con:property>
        <con:property>
          <con:name>FFManifestLocPreference2</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>FFWebLocLocation1</con:name>
          <con:value>https://dl.bestbuy.com/p/aaa</con:value>
        </con:property>
        <con:property>
          <con:name>FFWebLocLocation2</con:name>
          <con:value>https://dl.bestbuy.com/p/bbb</con:value>
        </con:property>
        <con:property>
          <con:name>FFWebLocPreference1</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>FFWebLocPreference2</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>LICAcqBaseLoc</con:name>
          <con:value>https://dl.bestbuy.com/p/bb93827398sdjdhds</con:value>
        </con:property>
        <con:property>
          <con:name>PINodeID</con:name>
          <con:value>urn:dece:org:org:dece:0799</con:value>
        </con:property>
        <con:property>
          <con:name>PIPurchaseAccount</con:name>
          <con:value>urn:dece:accountid:org:dece:107001</con:value>
        </con:property>
        <con:property>
          <con:name>PIPurchaseTime</con:name>
          <con:value>2011-06-24T15:12:03</con:value>
        </con:property>
        <con:property>
          <con:name>PIPurchaseUser</con:name>
          <con:value>urn:dece:userid:org:dece:9A9CCCF13ABCD94FE0401F0A05992F63</con:value>
        </con:property>
        <con:property>
          <con:name>PIRetailerTransx</con:name>
          <con:value>RetailerTransaction_1_node0799_RetailerNode</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanDownLoad1</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanDownLoad2</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanDownLoad3</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanStream1</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanStream2</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>PPCanStream3</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>PPContentProfile1</con:name>
          <con:value>urn:dece:type:mediaprofile:highdefinition</con:value>
        </con:property>
        <con:property>
          <con:name>PPContentProfile2</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:type:mediaprofile:standarddefinition</con:value>
        </con:property>
        <con:property>
          <con:name>PPContentProfile3</con:name>
          <con:value>urn:dece:type:mediaprofile:portabledefinition</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaProfile1</con:name>
          <con:value>urn:dece:type:discretemediaformat:securesd:cprm</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaProfile2</con:name>
          <con:value>urn:dece:type:discretemediaformat:securesd:cprm</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaProfile3</con:name>
          <con:value>urn:dece:type:discretemediaformat:securesd:cprm</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaRemaining1</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaRemaining2</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>PPDiscreteMediaRemaining3</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>RSCreatedby</con:name>
          <con:value>urn:dece:org:org:dece:0799</con:value>
        </con:property>
        <con:property>
          <con:name>RSCreationDate</con:name>
          <con:value>2011-02-17T15:12:03</con:value>
        </con:property>
        <con:property>
          <con:name>RSDescription</con:name>
          <con:value>new rights token</con:value>
        </con:property>
        <con:property>
          <con:name>RSValue</con:name>
          <con:value>urn:dece:type:status:active</con:value>
        </con:property>
        <con:property>
          <con:name>SAMLassertion</con:name>
          <con:value/>
        </con:property>
        <con:property>
          <con:name>SoldAsBundleID</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SoldAsContentID</con:name>
          <con:value>urn:dece:cid:file:SARVJEET_CID_DONT_TOUCH_4.txt</con:value>
        </con:property>
        <con:property>
          <con:name>SoldAsDisplayName</con:name>
          <con:value>Avatar BestBuy Special Packaging</con:value>
        </con:property>
        <con:property>
          <con:name>SoldAsLanguage</con:name>
          <con:value>en</con:value>
        </con:property>
        <con:property>
          <con:name>TCaseName</con:name>
          <con:value>RightsTokenCreate_With_Valid_AccountId</con:value>
        </con:property>
        <con:property>
          <con:name>TSuiteName</con:name>
          <con:value>Staging Rights DELETE</con:value>
        </con:property>
        <con:property>
          <con:name>VCAllowedUser</con:name>
          <con:value>urn:dece:userid:org:dece:107999</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Extract DeviceDeceDomainGet Information" searchProperties="true">
      <con:settings/>
      <con:testStep type="groovy" name="Extract RightsToken Request XML">
        <con:settings/>
        <con:config>
          <script>import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.teststeps.WsdlResponseMessageExchange

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def callingTSuiteName = testCase.getPropertyValue("TSuiteName");
def callingTCaseName = testCase.getPropertyValue("TCaseName");

def callingTCase = testProject.getTestSuiteByName(callingTSuiteName).getTestCaseByName(callingTCaseName);

def RT_RequestBody = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceDeceDomainGet Request").getTestStepByName("DeviceDeceDomainRequest").testRequest.response.rawRequestData;

def rawData = new String(RT_RequestBody);
 
testCase.setPropertyValue("DeviceDeceDomainReqXml",rawData.tokenize('\n').last());

log.info testCase.getPropertyValue("DeviceDeceDomainReqXml");
callingTCase.setPropertyValue("DeviceDeceDomainReqXml",testCase.getPropertyValue("DeviceDeceDomainReqXml"));</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract RightsToken Info from the Response">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import dbUtils.dbUtils;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def callingTSuiteName = testCase.getPropertyValue("TSuiteName");
def callingTCaseName = testCase.getPropertyValue("TCaseName");

def callingTCase = testProject.getTestSuiteByName(callingTSuiteName).getTestCaseByName(callingTCaseName)

// Http Header
def DeviceDeceDomainResHeader = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceDeceDomainGet Request").getTestStepByName('DeviceDeceDomainRequest').httpRequest.response.getResponseHeaders(); 
def DeviceDeceDomainResXml = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceDeceDomainGet Request").getTestStepByName('DeviceDeceDomainRequest').httpRequest.response.getContentAsString();
def DeviceDeceDomainResTime = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceDeceDomainGet Request").getTestStepByName('DeviceDeceDomainRequest').httpRequest.response.getTimeTaken();
def DeviceDeceDomainResHttpStatus = DeviceDeceDomainResHeader.getAt("#status#");

testCase.setPropertyValue("DeviceDeceDomainResXml",DeviceDeceDomainResXml);
testCase.setPropertyValue("DeviceDeceDomainResTime",DeviceDeceDomainResTime.toString());

// DeviceDeceDomain Req Response Object type

def Val_DeviceDeceDomainResXml =  new XmlSlurper().parseText(testCase.getPropertyValue("DeviceDeceDomainResXml"));

DeviceDeceDomainID = Val_DeviceDeceDomainResXml.toString();

testCase.setPropertyValue("DeviceDeceDomainID",DeviceDeceDomainID.toString());

if(DeviceDeceDomainResHttpStatus.toString() == "HTTP/1.1 200 OK"){

// Evaluate DeviceDeceDomain Success &amp; Failure
log.info DeviceDeceDomainID;
log.info "Response Code : ${DeviceDeceDomainResHttpStatus.toString()}";
log.info "Response Time : $DeviceDeceDomainResTime:ms";

}
else{
log.info " DeviceDeceDomain Get failed - [ $DeviceDeceDomainResHttpStatus]"
log.info " Error Code Validation +++++ "
}
// Returns Rights Response Information
callingTCase.setPropertyValue("DeviceDeceDomainResXml",testCase.getPropertyValue("DeviceDeceDomainResXml"));
callingTCase.setPropertyValue("DeviceDeceDomainResTime",testCase.getPropertyValue("DeviceDeceDomainResTime"));
callingTCase.setPropertyValue("DeviceDeceDomainID",testCase.getPropertyValue("DeviceDeceDomainID"));</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>TCaseName</con:name>
          <con:value>TC_DECE_00001_DeviceDeceDomain_Device _FUNC_with_ValidData</con:value>
        </con:property>
        <con:property>
          <con:name>TSuiteName</con:name>
          <con:value>Device Dece Domain Device Test Cases</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceDeceDomainReqXml</con:name>
          <con:value>Host: qa.q.uvvu.com:7001</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceDeceDomainResXml</con:name>
          <con:value>&lt;DeviceDecedomain xmlns="http://www.decellc.org/schema/2010/10/dece" xmlns:ns2="http://www.movielabs.com/schema/md/v1.07/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">A09DA589BD63A036E0401F0A05996D9A&lt;/DeviceDecedomain></con:value>
        </con:property>
        <con:property>
          <con:name>DeviceDeceDomainResTime</con:name>
          <con:value>482</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceDeceDomainID</con:name>
          <con:value>A09DA589BD63A036E0401F0A05996D9A</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DeviceDeceDomainGet Data Validation" searchProperties="true">
      <con:settings/>
      <con:testStep type="groovy" name="Extract DB results for RightsLocker Data GET" disabled="true">
        <con:settings/>
        <con:config>
          <script>import dbUtils.dbRightsToken;
import dbUtils.dbUtils;
import dbUtils.dbSAMLAssertion;
import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.teststeps.WsdlResponseMessageExchange

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

mydbRights = new dbRightsToken(log,"LP1");

def callTSuitename = testCase.getPropertyValue("TSuiteName");
def callTCasename = testCase.getPropertyValue("TCaseName");

def CallingTCase = testProject.getTestSuiteByName(callTSuitename).getTestCaseByName(callTCasename);
testCase.setPropertyValue("RightsResXml",CallingTCase.getPropertyValue("RightsResXml"));

//getRequestContentAsXml

testCase.setPropertyValue("rightstokenid",CallingTCase.getPropertyValue("rightstokenid"));
testCase.setPropertyValue("DBrightstokenid",CallingTCase.getPropertyValue("DBrightstokenid"));
testCase.setPropertyValue("Accountid",CallingTCase.getPropertyValue("Accountid"));


// Fetch RightsToken info from RIGHTS_TOKEN table
RT_Data = mydbRights.rightstokenGetRow(testCase.getPropertyValue("DBrightstokenid"));
RT_Data2 = mydbRights.rightstokenSoldAsGetRow(testCase.getPropertyValue("DBrightstokenid"));
RT_Data3 = mydbRights.rightstokenPMPPGetRow(testCase.getPropertyValue("DBrightstokenid"));
RT_Data4 = mydbRights.rightstokenFFLocGetRow(testCase.getPropertyValue("DBrightstokenid"));
RT_Data5 = mydbRights.rightstokenStatusHistoryGetRow(testCase.getPropertyValue("DBrightstokenid"));

testCase.setPropertyValue("DbResultRTXml",RT_Data.toString());
testCase.setPropertyValue("DbResultRT-SoldAsXml",RT_Data2.toString());
testCase.setPropertyValue("DbResultRT-PMPPXml",RT_Data3.toString());
testCase.setPropertyValue("DbResultRT-FFLocXml",RT_Data4.toString());</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Data Validation DB - RightsLockerDataGet Response" disabled="true">
        <con:settings/>
        <con:config>
          <script>import dbUtils.dbRightsToken;
import dbUtils.dbUtils;
import dbUtils.dbSAMLAssertion;
import groovy.*
import groovy.xml.*
import groovy.util.*
import groovy.time.*
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.teststeps.WsdlResponseMessageExchange

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

// Assert RightsToken Information Expected &amp; Actual 
def expectRTG_PPContentProfile  = new ArrayList();
def expectRTG_PPDMR  = new ArrayList();
def expectRTG_PPCanDownload  = new ArrayList();
def expectRTG_PPCanStream  = new ArrayList();
def expectRTG_PPDMProfile  = new ArrayList();
def expectRTG_LicAcqBaseLoc = new ArrayList();
def expectRTG_FFWebLoc_Location = new ArrayList();
def expectRTG_FFWebLoc_Pref = new ArrayList();
def expectRTG_FFManifestLoc_Location = new ArrayList();
def expectRTG_FFManifestLoc_Pref = new ArrayList();
def actRTG_PPContentProfile  = new ArrayList();
def actRTG_PPDMR  = new ArrayList();
def actRTG_PPCanDownload  = new ArrayList();
def actRTG_PPCanStream  = new ArrayList();
def actRTG_PPDMProfile  = new ArrayList();
def actRTG_LicAcqBaseLoc = new ArrayList();
def actRTG_FFWebLoc_Location = new ArrayList();
def actRTG_FFWebLoc_Pref = new ArrayList();
def actRTG_FFManifestLoc_Location = new ArrayList();
def actRTG_FFManifestLoc_Pref = new ArrayList();


def Val_DbResultRTXml = new XmlSlurper().parseText(testCase.getPropertyValue("DbResultRTXml"));
def Val_DbResultRTSoldAsXml = new XmlSlurper().parseText(testCase.getPropertyValue("DbResultRT-SoldAsXml"));
def Val_DbResultRTPMPPXml = new XmlSlurper().parseText(testCase.getPropertyValue("DbResultRT-PMPPXml"));
def Val_DbResultFFLocXml = new XmlSlurper().parseText(testCase.getPropertyValue("DbResultRT-FFLocXml"));

def PMPPSize =  Val_DbResultRTPMPPXml.ResultSet.Row.size();
def LicAcqSize = Val_DbResultRTXml.ResultSet.Row.LICENSE_ACQ_BASE_LOC.size();
//def FFWebLocSize = Val_DbResultFFLocXml.ResultSet.Row.findAll{ it.TYPE == 'Web'}.size();
//def FFManifestSize = Val_DbResultFFLocXml.ResultSet.Row.findAll{ it.TYPE == 'Manifest'}.size();

def rcFFWebloc = Val_DbResultFFLocXml.ResultSet.Row.findAll{ it.TYPE == 'Web'}.@rowNumber.collect{ it.text() }
def rcFFManifest = Val_DbResultFFLocXml.ResultSet.Row.findAll{ it.TYPE == 'Manifest'}.@rowNumber.collect{ it.text() }
def rcFFWeblocSize = rcFFWebloc.size();
def rcFFManifestSize = rcFFManifest.size();

RTObjType = testCase.getPropertyValue("RTObjType");


switch (RTObjType) {
	
	case "RightsTokenFull":

		// Rights Token 
		expectRTG_Accountid = testCase.getPropertyValue("Accountid");
		expectRTG_Lockerid = "urn:dece:rightslockerid:org:dece:" + Val_DbResultRTXml.ResultSet.Row.RIGHTS_LOCKER_OID;
		expectRTG_RightsTokenID = testCase.getPropertyValue("rightstokenid");
		expectRTG_ALID = Val_DbResultRTXml.ResultSet.Row.ALID;
		expectRTG_ContentID = Val_DbResultRTXml.ResultSet.Row.CONTENT_ID;

		// Rights SoldAs 
		
		expectRTG_SoldAs_Lang = Val_DbResultRTSoldAsXml.ResultSet.Row.LANGUAGE_ID;
		expectRTG_SoldAs_PRODUCT_ID = Val_DbResultRTSoldAsXml.ResultSet.Row.PRODUCT_ID;
		expectRTG_SoldAs_DisplayName = Val_DbResultRTSoldAsXml.ResultSet.Row.DISPLAY_NAME;
		expectRTG_SoldAs_ContentID = Val_DbResultRTSoldAsXml.ResultSet.Row.CONTENT_ID;
		expectRTG_SoldAs_BUNDLE_ID = Val_DbResultRTSoldAsXml.ResultSet.Row.BUNDLE_ID;

		
		
		// Rights Purchase Media Purchase Profiles
		
		for ( i in 0..PMPPSize-1 ){
	
		expectRTG_PPContentProfile += ("urn:dece:type:mediaprofile:" + Val_DbResultRTPMPPXml.ResultSet.Row.PURCHASED_CONTENT_PROFILE[i]).toString();
		expectRTG_PPDMR += (Val_DbResultRTPMPPXml.ResultSet.Row.DISCRETE_MEDIA_RIGHTS_REMAIN[i]).toString();
		//expectRTG_PPDMProfile = 
		expectRTG_PPCanDownload += (Val_DbResultRTPMPPXml.ResultSet.Row.DOWNLOAD[i]).toString();
		expectRTG_PPCanStream += (Val_DbResultRTPMPPXml.ResultSet.Row.STREAM[i]).toString();
		
		}

		// Rights Status 
		expectRTG_RS_CreatedBy = "urn:dece:org:org:dece:"+ Val_DbResultRTXml.ResultSet.Row.CREATED_BY;
		expectRTG_PS_CreationDate = Val_DbResultRTXml.ResultSet.Row.CREATED_DATE;
		expectRTG_RS_Value = "urn:dece:type:status:"+ Val_DbResultRTXml.ResultSet.Row.STATUS_ID;

		// Rights Licence Acq Base Location
		
		for ( i in 0..LicAcqSize-1 ){
		
		expectRTG_LicAcqBaseLoc += Val_DbResultRTXml.ResultSet.Row.LICENSE_ACQ_BASE_LOC[i];
		}

		// Rights Fullfillment WebLocation

		for ( int i in 0..rcFFWeblocSize-1 ){
		
		int j = rcFFWebloc[i].toInteger();
		expectRTG_FFWebLoc_Location += Val_DbResultFFLocXml.ResultSet.Row.LOCATION[j-1];
		expectRTG_FFWebLoc_Pref += Val_DbResultFFLocXml.ResultSet.Row.PREFERENCE_ORDER[j-1];
		}

		// Rights Fullfillment Manifest Location


		for ( int i in 0..rcFFManifestSize-1 ){

		int j = rcFFManifest[i].toInteger();
		expectRTG_FFManifestLoc_Location += Val_DbResultFFLocXml.ResultSet.Row.LOCATION[j-1];	
		expectRTG_FFManifestLoc_Pref += Val_DbResultFFLocXml.ResultSet.Row.PREFERENCE_ORDER[j-1];
	
		}

		// Rights Purchase Infomation
				
		expectRTG_PI_NodeID = "urn:dece:org:org:dece:"+Val_DbResultRTXml.ResultSet.Row.NODE_OID;
		expectRTG_PI_RetailerTrax = Val_DbResultRTXml.ResultSet.Row.RETAILER_TRANSACTION;
		expectRTG_PI_PurcaseAccount = "urn:dece:accountid:org:dece:"+Val_DbResultRTXml.ResultSet.Row.PURCHASE_NODE_ACCOUNT_OID;
		expectRTG_PI_PurchaseUser = "urn:dece:userid:org:dece:"+Val_DbResultRTXml.ResultSet.Row.PURCHASE_NODE_USER_OID;
		expectRTG_PI_PurchaseTime = Val_DbResultRTXml.ResultSet.Row.PURCHASE_TIME;

	break;

	case "RightsTokenInfo":
			
		// Rights Token 
		expectRTG_Accountid = testCase.getPropertyValue("Accountid");
		expectRTG_RightsTokenID = testCase.getPropertyValue("rightstokenid");
		expectRTG_ALID = Val_DbResultRTXml.ResultSet.Row.ALID;
		expectRTG_ContentID = Val_DbResultRTXml.ResultSet.Row.CONTENT_ID;

		// Rights SoldAs 
		
		expectRTG_SoldAs_Lang = Val_DbResultRTSoldAsXml.ResultSet.Row.LANGUAGE_ID;
		expectRTG_SoldAs_PRODUCT_ID = Val_DbResultRTSoldAsXml.ResultSet.Row.PRODUCT_ID;
		expectRTG_SoldAs_DisplayName = Val_DbResultRTSoldAsXml.ResultSet.Row.DISPLAY_NAME;
		expectRTG_SoldAs_ContentID = Val_DbResultRTSoldAsXml.ResultSet.Row.CONTENT_ID;
		expectRTG_SoldAs_BUNDLE_ID = Val_DbResultRTSoldAsXml.ResultSet.Row.BUNDLE_ID;

		// Rights Purchase Media Purchase Profiles
		
		for ( i in 0..PMPPSize-1 ){
	
		expectRTG_PPContentProfile += "urn:dece:type:mediaprofile:" + Val_DbResultRTPMPPXml.ResultSet.Row.PURCHASED_CONTENT_PROFILE[i];
		expectRTG_PPDMR += Val_DbResultRTPMPPXml.ResultSet.Row.DISCRETE_MEDIA_RIGHTS_REMAIN[i];
		//expectRTG_PPDMProfile = 
		expectRTG_PPCanDownload += Val_DbResultRTPMPPXml.ResultSet.Row.DOWNLOAD[i].toString();
		expectRTG_PPCanStream += Val_DbResultRTPMPPXml.ResultSet.Row.STREAM[i].toString();
		
		}

		// Rights Status 
		expectRTG_RS_CreatedBy = "urn:dece:org:org:dece:"+ Val_DbResultRTXml.ResultSet.Row.CREATED_BY;
		expectRTG_PS_CreationDate = Val_DbResultRTXml.ResultSet.Row.CREATED_DATE;
		expectRTG_RS_Value = "urn:dece:type:status:"+ Val_DbResultRTXml.ResultSet.Row.STATUS_ID;

		// Rights Licence Acq Base Location
		
		for ( i in 0..LicAcqSize-1 ){
		
		expectRTG_LicAcqBaseLoc += Val_DbResultRTXml.ResultSet.Row.LICENSE_ACQ_BASE_LOC;
		}

		// Rights Fullfillment WebLocation

		for ( int i in 0..rcFFWeblocSize-1 ){
		
		int j = rcFFWebloc[i].toInteger();
		expectRTG_FFWebLoc_Location += Val_DbResultFFLocXml.ResultSet.Row.LOCATION[j-1];
		expectRTG_FFWebLoc_Pref += Val_DbResultFFLocXml.ResultSet.Row.PREFERENCE_ORDER[j-1];
		}

		// Rights Fullfillment Manifest Location


		for ( int i in 0..rcFFManifestSize-1 ){

		int j = rcFFManifest[i].toInteger();
		expectRTG_FFManifestLoc_Location += Val_DbResultFFLocXml.ResultSet.Row.LOCATION[j-1];	
		expectRTG_FFManifestLoc_Pref += Val_DbResultFFLocXml.ResultSet.Row.PREFERENCE_ORDER[j-1];
	
		}

	break;

	case "RightsTokenBasic":
			
		// Rights Token 
		expectRTG_Accountid = testCase.getPropertyValue("Accountid");
		expectRTG_RightsTokenID = testCase.getPropertyValue("rightstokenid");
		expectRTG_ALID = Val_DbResultRTXml.ResultSet.Row.ALID;
		expectRTG_ContentID = Val_DbResultRTXml.ResultSet.Row.CONTENT_ID;

		// Rights SoldAs 
		
		expectRTG_SoldAs_Lang = Val_DbResultRTSoldAsXml.ResultSet.Row.LANGUAGE_ID;
		expectRTG_SoldAs_PRODUCT_ID = Val_DbResultRTSoldAsXml.ResultSet.Row.PRODUCT_ID;
		expectRTG_SoldAs_DisplayName = Val_DbResultRTSoldAsXml.ResultSet.Row.DISPLAY_NAME;
		expectRTG_SoldAs_ContentID = Val_DbResultRTSoldAsXml.ResultSet.Row.CONTENT_ID;
		expectRTG_SoldAs_BUNDLE_ID = Val_DbResultRTSoldAsXml.ResultSet.Row.BUNDLE_ID;

		// Rights Purchase Media Purchase Profiles
		
		for ( i in 0..PMPPSize-1 ){
	
		expectRTG_PPContentProfile += "urn:dece:type:mediaprofile:" + Val_DbResultRTPMPPXml.ResultSet.Row.PURCHASED_CONTENT_PROFILE[i];
		expectRTG_PPDMR += Val_DbResultRTPMPPXml.ResultSet.Row.DISCRETE_MEDIA_RIGHTS_REMAIN[i];
		//expectRTG_PPDMProfile = 
		expectRTG_PPCanDownload += Val_DbResultRTPMPPXml.ResultSet.Row.DOWNLOAD[i].toString();
		expectRTG_PPCanStream += Val_DbResultRTPMPPXml.ResultSet.Row.STREAM[i].toString();
		
		}

		// Rights Status 
		expectRTG_RS_CreatedBy = "urn:dece:org:org:dece:"+ Val_DbResultRTXml.ResultSet.Row.CREATED_BY;
		expectRTG_PS_CreationDate = Val_DbResultRTXml.ResultSet.Row.CREATED_DATE;
		expectRTG_RS_Value = "urn:dece:type:status:"+ Val_DbResultRTXml.ResultSet.Row.STATUS_ID;

	break; 

}

def Val_RightsResXml =  new XmlSlurper().parseText(testCase.getPropertyValue("RightsResXml"));

		actRTG_AccountID = Val_RightsResXml.@AccountID.toString();
		actRTG_RightsLockerID = Val_RightsResXml.@RightsLockerID.toString();
		actRTG_RightsTokenID =  Val_RightsResXml.RightsToken."$RTObjType".@RightsTokenID.toString();
		actRTG_ALID = Val_RightsResXml.RightsToken."$RTObjType".RightsTokenData.@ALID.toString();
		actRTG_ContentID = Val_RightsResXml.RightsToken."$RTObjType".RightsTokenData.@ContentID.toString();
		actRTG_SoldAsLang = Val_RightsResXml.RightsToken."$RTObjType".RightsTokenData.SoldAs.DisplayName.@Language.toString();
		actRTG_DisplayName = Val_RightsResXml.RightsToken."$RTObjType".RightsTokenData.SoldAs.DisplayName;
		actRTG_SoldAsContentID = Val_RightsResXml.RightsToken."$RTObjType".RightsTokenData.SoldAs.ContentID;
		actRTG_SoldAsBUNDLE_ID = Val_RightsResXml.RightsToken."$RTObjType".RightsTokenData.SoldAs.BundleID;

// Rights Purchase Media Purchase Profiles
		actPMPPSize = Val_RightsResXml.RightsToken."$RTObjType".RightsTokenData.RightsProfiles.PurchaseProfile.size();

		for ( i in 0..actPMPPSize-1 ){
	
			actRTG_PPContentProfile +=(Val_RightsResXml.RightsToken."$RTObjType".RightsTokenData.RightsProfiles.PurchaseProfile.@ContentProfile[i]).toString();
			actRTG_PPDMR +=(Val_RightsResXml.RightsToken."$RTObjType".RightsTokenData.RightsProfiles.PurchaseProfile.DiscreteMediaRightsRemaining[i]).toString();
			actRTG_PPDMProfile +=(Val_RightsResXml.RightsToken."$RTObjType".RightsTokenData.RightsProfiles.PurchaseProfile.DiscreteMediaRightsRemaining.@DiscreteMediaProfile[i]).toString();
			if ((Val_RightsResXml.RightsToken."$RTObjType".RightsTokenData.RightsProfiles.PurchaseProfile.CanDownload[i]).toString() == 'true'){
			actRTG_PPCanDownload += 'Y';
			}
			else{
			actRTG_PPCanDownload += 'N';
			}
			
			if ((Val_RightsResXml.RightsToken."$RTObjType".RightsTokenData.RightsProfiles.PurchaseProfile.CanStream[i]).toString()== 'true'){
			actRTG_PPCanStream += 'Y';
			}
			else{
			actRTG_PPCanStream += 'N';
			}
		}


// Actual Rights Status 

		actRTG_RS_CreatedBy = (Val_RightsResXml.RightsToken."$RTObjType".RightsTokenData.ResourceStatus.Current.@CreatedBy).toString();
		CreationDate = (Val_RightsResXml.RightsToken."$RTObjType".RightsTokenData.ResourceStatus.Current.@CreationDate).toString();
		actRTG_PS_CreationDate = (((CreationDate.tokenize('Z'))[0]).tokenize('T'))[0] + " " + (((CreationDate.tokenize('Z'))[0]).tokenize('T'))[1];
		actRTG_RS_Value = (Val_RightsResXml.RightsToken."$RTObjType".RightsTokenData.ResourceStatus.Current.Value).toString();

//  Actual Rights Licence Acq Base Location

 		actLicAcqSize = Val_RightsResXml.RightsToken."$RTObjType".RightsTokenData.LicenseAcqBaseLoc.size();
 	
 		for ( i in 0..actLicAcqSize-1 ){
		
			actRTG_LicAcqBaseLoc += Val_RightsResXml.RightsToken."$RTObjType".RightsTokenData.LicenseAcqBaseLoc[i];
		}

// Actual Rights Fullfillment WebLoc

	actFFWeblocSize = Val_RightsResXml.RightsToken."$RTObjType".RightsTokenData.FulfillmentWebLoc.size();
	

		for ( int i in 0..actFFWeblocSize-1 ){
	
		actRTG_FFWebLoc_Location += (Val_RightsResXml.RightsToken."$RTObjType".RightsTokenData.FulfillmentWebLoc.Location[i]).toString();
		actRTG_FFWebLoc_Pref += (Val_RightsResXml.RightsToken."$RTObjType".RightsTokenData.FulfillmentWebLoc.Preference[i]).toString();
		}


// Actual Rights Fullfillment ManifestLoc

	actFFManifestSize = Val_RightsResXml.RightsToken."$RTObjType".RightsTokenData.FulfillmentManifestLoc.size();
	

		for ( int i in 0..actFFManifestSize-1 ){
	
		actRTG_FFManifestLoc_Location += (Val_RightsResXml.RightsToken."$RTObjType".RightsTokenData.FulfillmentManifestLoc.Location[i]).toString();
		actRTG_FFManifestLoc_Pref += (Val_RightsResXml.RightsToken."$RTObjType".RightsTokenData.FulfillmentManifestLoc.Preference[i]).toString();
		}

// Actual Rights Purchase Info
		actRTG_PI_NodeID = (Val_RightsResXml.RightsToken."$RTObjType".RightsTokenData.PurchaseInfo.NodeID).toString();
		actRTG_PI_RetailerTrax = (Val_RightsResXml.RightsToken."$RTObjType".RightsTokenData.PurchaseInfo.RetailerTransaction).toString();
		actRTG_PI_PurcaseAccount = (Val_RightsResXml.RightsToken."$RTObjType".RightsTokenData.PurchaseInfo.PurchaseAccount).toString();
		actRTG_PI_PurchaseUser = (Val_RightsResXml.RightsToken."$RTObjType".RightsTokenData.PurchaseInfo.PurchaseUser).toString();
		PurchaseTime = (Val_RightsResXml.RightsToken."$RTObjType".RightsTokenData.PurchaseInfo.PurchaseTime).toString();
		actRTG_PI_PurchaseTime	= (((PurchaseTime.tokenize('Z'))[0]).tokenize('T'))[0] + " " + (((PurchaseTime.tokenize('Z'))[0]).tokenize('T'))[1];	

// Assert RightsToken Information DB and RightsTokenGet Response.

// Assert RightsToken Account ID 

		log.info "Rights TokenGet Accountid Expected : [$expectRTG_Accountid] - Actual Recieved: [$actRTG_AccountID]";
 		assert expectRTG_Accountid == actRTG_AccountID;

// Assert RightsToken LockerId

		log.info "Rights TokenGet Lockerid Expected : [$expectRTG_Lockerid] - Actual Recieved: [$actRTG_RightsLockerID]";
		 assert expectRTG_Lockerid == actRTG_RightsLockerID;

// Assert RightsToken id 

		log.info "Rights TokenGet Tokenid Expected : [$expectRTG_RightsTokenID] - Actual Recieved: [$actRTG_RightsTokenID]";
		//assert expectRTG_RightsTokenID == actRTG_RightsTokenID;

// Assert RightsToken ALID 

		log.info "Rights TokenGet Alid Expected : [$expectRTG_ALID] - Actual Recieved: [$actRTG_ALID]";
 		assert expectRTG_ALID == actRTG_ALID;

// Assert RightsToken ContentID 

		log.info "Rights TokenGet ContentID Expected : [$expectRTG_ALID] - Actual Recieved: [$actRTG_ContentID]"; 
 		assert expectRTG_ContentID == actRTG_ContentID;

// Assert RightsToken SoldAS Language

		log.info "Rights TokenGet SoldAs Language Expected : [$expectRTG_SoldAs_Lang] - Actual Recieved: [$actRTG_SoldAsLang]";
		assert expectRTG_SoldAs_Lang == actRTG_SoldAsLang;

// Assert RightsToken SoldAS DisplayName

		log.info "Rights TokenGet SoldAs DisplayName Expected : [$expectRTG_SoldAs_DisplayName] - Actual Recieved:[$actRTG_DisplayName]";
 		assert expectRTG_SoldAs_DisplayName == actRTG_DisplayName;

		if (expectRTG_SoldAs_ContentID){
		// Assert RightsToken SoldAs ContentID		
		log.info "Rights TokenGet SoldAs ContentID Expected : [$expectRTG_SoldAs_ContentID] - Actual Recieved:[$actRTG_SoldAsContentID]";
 		assert expectRTG_SoldAs_ContentID == actRTG_SoldAsContentID;
		}
		else{
		// Assert RightsToken SoldAs BUNDLE_ID	
		log.info "Rights TokenGet SoldAs BUNDLE_ID Expected : [$expectRTG_SoldAs_BUNDLE_ID] - Actual Recieved:[$actRTG_SoldAsBUNDLE_ID]";
		assert expectRTG_SoldAs_BUNDLE_ID == actRTG_SoldAsBUNDLE_ID;
		}
// Assert RightsToken Purchase Profile

		//RightsToken Purchase Profile- ContentProfile.
		log.info "Rights TokenGet Purchase ContentProfile Expected : $expectRTG_PPContentProfile - Actual Recieved:$actRTG_PPContentProfile";
		assert expectRTG_PPContentProfile == actRTG_PPContentProfile;

		//RightsToken Purchase Profile- DiscreteMediaRightsRemaining.
		log.info "Rights TokenGet Purchase DiscreteMediaRightsRemaining Expected : $expectRTG_PPDMR - Actual Recieved:$actRTG_PPDMR";
		assert expectRTG_PPDMR == actRTG_PPDMR;
		
		//RightsToken Purchase Profile- CanDownload
		log.info "Rights TokenGet Purchase CanDownload Expected : $expectRTG_PPCanDownload - Actual Recieved:$actRTG_PPCanDownload";
		assert expectRTG_PPCanDownload == actRTG_PPCanDownload;
		
		//RightsToken Purchase Profile- CanStream
		log.info "Rights TokenGet Purchase CanStream Expected : $expectRTG_PPCanStream - Actual Recieved:$actRTG_PPCanStream";
		assert expectRTG_PPCanStream == actRTG_PPCanStream;

// Assert Rights ResourceStatus 

		log.info "Rights TokenGet ResourceStatus CreatedBy Expected : [$expectRTG_RS_CreatedBy] - Actual Recieved: [$actRTG_RS_CreatedBy]";
		assert expectRTG_RS_CreatedBy == actRTG_RS_CreatedBy;
		
		log.info "Rights TokenGet ResourceStatus CreationDate Expected : [$expectRTG_PS_CreationDate] - Actual Recieved: [$actRTG_PS_CreationDate]";
		//assert expectRTG_PS_CreationDate == actRTG_PS_CreationDate;

		log.info "Rights TokenGet ResourceStatus Value Expected : [$expectRTG_RS_Value] - Actual Recieved: [$actRTG_RS_Value]";
		assert expectRTG_RS_Value == actRTG_RS_Value;

		
//  Assert Rights Licence Acq Base Location

		log.info "Rights TokenGet LicenceAcqBase Location Expected : [$expectRTG_LicAcqBaseLoc] - Actual Recieved: [$actRTG_LicAcqBaseLoc]";
		assert expectRTG_LicAcqBaseLoc == actRTG_LicAcqBaseLoc;

//  Assert Rights Fulfillment WebLoc

		//Assert FF Web location 
		log.info "Rights TokenGet FF Web location Expected : [$expectRTG_FFWebLoc_Location] - Actual Recieved: [$actRTG_FFWebLoc_Location]";
		assert expectRTG_FFWebLoc_Location == actRTG_FFWebLoc_Location;

	    // Assert Web FF preference

	    log.info "Rights TokenGet Web FF preference Expected : [$expectRTG_FFWebLoc_Pref] - Actual Recieved: [$actRTG_FFWebLoc_Pref]";
		assert expectRTG_FFWebLoc_Pref == actRTG_FFWebLoc_Pref;

//  Assert Rights Fulfillment Manifest Location

		//Assert FF Manifest location 
		log.info "Rights TokenGet FF Manifest location Expected : [$expectRTG_FFManifestLoc_Location] - Actual Recieved: [$actRTG_FFManifestLoc_Location]";
		assert expectRTG_FFManifestLoc_Location == actRTG_FFManifestLoc_Location;

	    // Assert FF Manifest  preference

	    log.info "Rights TokenGet FF Manifest  preference Expected : [$actRTG_FFManifestLoc_Pref] - Actual Recieved: [$actRTG_FFManifestLoc_Pref]";
		assert expectRTG_FFManifestLoc_Pref == actRTG_FFManifestLoc_Pref;


//  Assert Rights PurchaseInfo Location

		log.info "Rights TokenGet PurchaseInfo  NodeID Expected : [$expectRTG_PI_NodeID] - Actual Recieved: [$actRTG_PI_NodeID]";
		assert expectRTG_PI_NodeID == actRTG_PI_NodeID;

		log.info "Rights TokenGet PurchaseInfo  RetailerTrax Expected : [$expectRTG_PI_RetailerTrax] - Actual Recieved: [$actRTG_PI_RetailerTrax]";
		assert expectRTG_PI_RetailerTrax == actRTG_PI_RetailerTrax;

		log.info "Rights TokenGet PurchaseInfo  PurcaseAccount Expected : [$expectRTG_PI_PurcaseAccount] - Actual Recieved: [$actRTG_PI_PurcaseAccount]";
		assert expectRTG_PI_PurcaseAccount == actRTG_PI_PurcaseAccount;
		
		log.info "Rights TokenGet PurchaseInfo  PurchaseUser Expected : [$expectRTG_PI_PurchaseUser] - Actual Recieved: [$actRTG_PI_PurchaseUser]";
		assert expectRTG_PI_PurchaseUser == actRTG_PI_PurchaseUser;

		log.info "Rights TokenGet PurchaseInfo  PurchaseTime Expected : [$expectRTG_PI_PurchaseTime] - Actual Recieved: [$actRTG_PI_PurchaseTime]";
		def expecPurchaseTime = new Date().parse("yyyy-mm-dd hh:mm:ss.SSS",expectRTG_PI_PurchaseTime.toString());
		def actPurchaseTime = new Date().parse("yyyy-mm-dd hh:mm:ss.SSS",actRTG_PI_PurchaseTime.toString());

		//log.info expecPurchaseTime.getTime() + ":" + actPurchaseTime.getTime();
		assert expecPurchaseTime.getTime() == actPurchaseTime.getTime();</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="DeviceDeceDomain  DB validation">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import dbUtils.dbAccount;
import dbUtils.dbUtils;
import dbUtils.dbDM;
import dbUtils.dbSAMLAssertion;
import groovy.time.*
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.teststeps.WsdlResponseMessageExchange

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

DECE_DeviceID = new ArrayList();

def DeviceDeceDomainResXml = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceDeceDomainGet Request").getTestStepByName('DeviceDeceDomainRequest').httpRequest.response.getContentAsString();

testCase.setPropertyValue("DeviceDeceDomainResXml",DeviceDeceDomainResXml);

mydbAccount = new dbAccount(log,"LP1");
mydbDM = new dbDM(log,"LP1DM");

def callTSuitename = testCase.getPropertyValue("TSuiteName");
def callTCasename = testCase.getPropertyValue("TCaseName");
def processFlag = true;

def CallingTCase = testProject.getTestSuiteByName(callTSuitename).getTestCaseByName(callTCasename);

testCase.setPropertyValue("Account_OID",CallingTCase.getPropertyValue("accountoid"));
testCase.setPropertyValue("AccountID",CallingTCase.getPropertyValue("AccountID"));
testCase.setPropertyValue("DeviceID",CallingTCase.getPropertyValue("DeviceID"));

//getRequestContentAsXml

def Val_DeviceDeceDomainResXml =  new XmlSlurper().parseText(testCase.getPropertyValue("DeviceDeceDomainResXml"));

DECE_DomainID = Val_DeviceDeceDomainResXml.toString();

testCase.setPropertyValue("DECE_DomainID", DECE_DomainID);

// Fetch RightsToken info from ACCOUNT table

DECE_DomainID_Data = mydbAccount.accountGetRow(testCase.getPropertyValue("Account_OID"));
DECE_DeviceID += mydbAccount.accountGetDeviceId(testCase.getPropertyValue("Account_OID"));
DECE_DM_Data = mydbDM.dmDECEDomainGetRow(testCase.getPropertyValue("DECE_DomainID"));

log.info DECE_DeviceID;

testCase.setPropertyValue("DbResultDDDXml",DECE_DomainID_Data.toString());
testCase.setPropertyValue("DbResultDMXml",DECE_DM_Data.toString());
testCase.setPropertyValue("DbDECE_DeviceID",DECE_DeviceID.toString());

	if(DECE_DomainID_Data.toString().isEmpty()){
		processFlag = false;
		log.info "processFlag : [processFlag] -- EMPTY [DbResultDDDXml]";
	}
	else{
		Val_DbResultDDDXml = new XmlSlurper().parseText(testCase.getPropertyValue("DbResultDDDXml"));
	}

	if(DECE_DM_Data.toString().isEmpty()){
		processFlag = false;
		log.info "processFlag : [$processFlag] -- EMPTY [DbResultDMXml]";
	}
	else{
		Val_DbResultDMXml = new XmlSlurper().parseText(testCase.getPropertyValue("DbResultDMXml"));
	}
	if(DECE_DeviceID.toString().isEmpty()){
		processFlag = false;
		log.info "processFlag : [$processFlag] -- EMPTY [DbDECE_DeviceID]";
	}
	
 
log.info "processFlag : [$processFlag]";



if(processFlag.toString() == 'true'){

 	log.info " Validating DECE Domain Information....."

 expectDDD_DECE_DomainID =(Val_DbResultDDDXml.ResultSet.Row.DECE_DOMAIN_ID).toString();
 expectDDD_AccountID = (Val_DbResultDDDXml.ResultSet.Row.ACCOUNT_OID).toString();
 expectDDD_DM_DECE_DomainID  =(Val_DbResultDMXml.ResultSet.Row.DECE_DOMAIN_OID).toString();
 expectDDD_DM_DECE_STATUS = (Val_DbResultDMXml.ResultSet.Row.STATUS).toString();
 expectDDD_DM_DECE_CREATED_DATE =(Val_DbResultDMXml.ResultSet.Row.CREATED_DATE).toString();
 expectDDD_DM_DECE_UPDATED_DATE = (Val_DbResultDMXml.ResultSet.Row.UPDATED_DATE).toString();
 expectDDD_DECE_Domain_DeviceID = testCase.getPropertyValue("DbDECE_DeviceID").toString();


Act_DDD_DECE_DomainID = testCase.getPropertyValue("DECE_DomainID");
Act_DDD_AccountID = testCase.getPropertyValue("Account_OID");
Act_DDD_DM_DECE_DomainID = testCase.getPropertyValue("DECE_DomainID");
Act_DDD_DECE_DeviceID = testCase.getPropertyValue("DeviceID").tokenize(':').last();
 
}

// Assert DECE Domain ID Information DB and DeviceDeceDomain Response.
			
// Assert DeviceDece - Domain ID  DB validation
		
		log.info "DeviceDeceDomain  DB  DECE_DomainID Expected : [$expectDDD_DECE_DomainID] - Actual Recieved: [$Act_DDD_DECE_DomainID]";
 		assert expectDDD_DECE_DomainID == Act_DDD_DECE_DomainID;


log.info "DeviceDeceDomain Manager DB  DECE_DomainID Expected : [$expectDDD_DM_DECE_DomainID] - Actual Recieved: [$Act_DDD_DM_DECE_DomainID]";
 		assert expectDDD_DM_DECE_DomainID == Act_DDD_DM_DECE_DomainID;
 		
		
// Assert DECE Domain Account ID Information

		log.info "DeviceDeceDomain DB Accountid Expected : [$expectDDD_AccountID] - Actual Recieved: [$Act_DDD_AccountID]";
		assert expectDDD_AccountID == Act_DDD_AccountID;

		// Assert DECE Domain Device ID Information

		log.info "DeviceDeceDomain DB Deviceid Expected : [$expectDDD_DECE_Domain_DeviceID] - Actual Recieved: [$Act_DDD_DECE_DeviceID]";
		assert expectDDD_DECE_Domain_DeviceID.contains(Act_DDD_DECE_DeviceID);</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>TCaseName</con:name>
          <con:value>TC_DECE_00001_DeviceDeceDomain_Device _FUNC_with_ValidData</con:value>
        </con:property>
        <con:property>
          <con:name>TSuiteName</con:name>
          <con:value>Device Dece Domain Device Test Cases</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceDeceDomainResXml</con:name>
          <con:value>&lt;DeviceDecedomain xmlns="http://www.decellc.org/schema/2010/10/dece" xmlns:ns2="http://www.movielabs.com/schema/md/v1.07/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">A09DA589BD63A036E0401F0A05996D9A&lt;/DeviceDecedomain></con:value>
        </con:property>
        <con:property>
          <con:name>DECE_DomainID</con:name>
          <con:value>A09DA589BD63A036E0401F0A05996D9A</con:value>
        </con:property>
        <con:property>
          <con:name>Account_OID</con:name>
          <con:value>A06A9AA49F7073D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>AccountID</con:name>
          <con:value>urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>DbResultDDDXml</con:name>
          <con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <ACCOUNT_OID>A06A9AA49F7073D7E0401F0A059915F0</ACCOUNT_OID>
      <STATUS>active</STATUS>
      <DISPLAY_NAME>Sarvjeet_DRM_Account</DISPLAY_NAME>
      <CREATED_DATE>2011-04-08 15:26:24.224</CREATED_DATE>
      <UPDATED_DATE>null</UPDATED_DATE>
      <NEWSFEED_CLEAR_TIME>null</NEWSFEED_CLEAR_TIME>
      <COUNTRY>US</COUNTRY>
      <DECE_DOMAIN_ID>A09DA589BD63A036E0401F0A05996D9A</DECE_DOMAIN_ID>
    </Row>
  </ResultSet>
</Results>]]></con:value>
        </con:property>
        <con:property>
          <con:name>DbResultDMXml</con:name>
          <con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <DECE_DOMAIN_OID>A09DA589BD63A036E0401F0A05996D9A</DECE_DOMAIN_OID>
      <ACCOUNT_ID>A06A9AA49F6E73D7E0401F0A059915F0</ACCOUNT_ID>
      <STATUS>active</STATUS>
      <CREATED_DATE>2011-04-11 04:02:39.371</CREATED_DATE>
      <UPDATED_DATE>null</UPDATED_DATE>
    </Row>
  </ResultSet>
</Results>]]></con:value>
        </con:property>
        <con:property>
          <con:name>DbDECE_DeviceID</con:name>
          <con:value>[[A09D9C22F11CBC6DE0401F0A05996898, A0E1F463A3528259E0401F0A0799227B, A0E2E4B81E7E1B7CE0401F0A07994404]]</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceID</con:name>
          <con:value>urn:dece:deviceid:org:dece:A09D9C22F11CBC6DE0401F0A05996898</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DeviceDeceDomainGet Response Validation" searchProperties="true">
      <con:settings/>
      <con:testStep type="groovy" name="ValidateDeviceDeceDomainGet RESPONSE">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import dbUtils.dbNode;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("errorStatusCode",null);
testCase.setPropertyValue("errorReason",null);
testCase.setPropertyValue("errorID",null);
def ValerrorID;


def callTSuitename = testCase.getPropertyValue("TSuiteName");
def callTCasename = testCase.getPropertyValue("TCaseName");

def CallingTCase = testProject.getTestSuiteByName(callTSuitename).getTestCaseByName(callTCasename);

testCase.setPropertyValue("nodeid",CallingTCase.getPropertyValue("nodeid"));
testCase.setPropertyValue("DeviceDeceDomainID",CallingTCase.getPropertyValue("DeviceDeceDomainID"));
testCase.setPropertyValue("Accountid",CallingTCase.getPropertyValue("Accountid"));
testCase.setPropertyValue("expectErrType",CallingTCase.getPropertyValue("expectErrType"));
testCase.setPropertyValue("ErrorDataVal",CallingTCase.getPropertyValue("ErrorDataVal"));

myNode = new dbNode(log,"LP1");
Nodeid = testCase.getPropertyValue("nodeid");
myNodeRole = myNode.nodeGetRole(Nodeid);
log.info myNodeRole;

def DeceUrl   = testProject.getPropertyValue("AppHost");
def DecePort  = testProject.getPropertyValue("AppPort");
//def urnacct   = testProject.getPropertyValue("urnaccount");
//def urnRights = testProject.getPropertyValue("urnRights");
//def nodeacctid  = testCase.getPropertyValue("nodeaccountid");
def ResponseXML = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceDeceDomainGet Request").getTestStepByName("DeviceDeceDomainRequest").getPropertyValue("ResponseAsXml");
def RT_ResponseHeader = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceDeceDomainGet Request").getTestStepByName("DeviceDeceDomainRequest").httpRequest.response.getResponseHeaders();

def DeviceDeceDomainID = testCase.getPropertyValue("DeviceDeceDomainID");
def accountid  = testCase.getPropertyValue("Accountid");
def errorRespType = testCase.getPropertyValue("expectErrType");
def Resp_HTTPstatus = RT_ResponseHeader.getAt("#status#");
def Resp_HTTPconnection = RT_ResponseHeader.getAt("Connection");
def Resp_HTTPcontenttype = RT_ResponseHeader.getAt("Content-Type");
def Resp_HTTPcontentlength = RT_ResponseHeader.getAt("Content-Length");

	
boolean errorIDFlag = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean processXMLFlag  = true;
boolean Responsebodynull = false;

String Resp_ErrorID = "";
String Resp_errorReason = "";
String Resp_errorLink  = "";
String Resp_errorHost  = "";

//  Expected Http Response
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml";


if (DeceUrl.length() == 0) {
	Resp_errorHost = "http://error.decellc.org";
} else {
	Resp_errorHost = "https://qa.q.uvvu.com:$DecePort";
}
this.log.info "errorRespType[$errorRespType]";


switch (errorRespType) {
	
	case "SUCCESS":
		expectHTTPstatus = "HTTP/1.1 200 OK";
		if ( myNodeRole == 'urn:dece:role:device'||'urn:dece:role:manufacturerportal:customersupport'){
               
               	log.info "Valid DeviceDeceDomainID Returned  for Node[$Nodeid] - NodeRole[$myNodeRole] : [$errorRespType]";
		}
              else {

              	 log.info " InValid Response Returned for  Node[$Nodeid] - NodeRole[$myNodeRole]- $myNodeRole : [$errorRespType]";
              }		
		processXMLFlag = false;
	break;
	
	case "ACCOUNT_NOT_ACTIVE":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:AccountNotActive";
	ValerrorID = 1;
	//Resp_errorReason = "Account is not active";
	Resp_errorLink   = "$Resp_errorHost/rest/1/0/error/en/ErrorList.html#AccountNotActive";
	break;
	case "API_NOT_AUTH":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
	Resp_errorReason = "API call not authorized";
	Resp_errorLink   = "$Resp_errorHost/rest/1/0/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "DEVICEID_NOT_VALID":
	Resp_ErrorID   = "urn:dece:errorid:org:dece:DeviceIdInvalid";
	ValerrorID = 1;
	Resp_errorLink   = "$Resp_errorHost/rest/1/0/error/en/ErrorList.html#DeviceIdInvalid";
	break;

	case "DEVICEID_NOT_FOUND":
	Resp_ErrorID   = "urn:dece:errorid:org:dece:DeviceNotFound";
	ValerrorID = 1;
	Resp_errorLink   = "$Resp_errorHost/rest/1/0/error/en/ErrorList.html#DeviceNotFound";
	break;

	case "CONTENT_NOT_FOUND":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:ContentIDNotFound";
	ValerrorID = 1;
	//Resp_errorReason = "ContentID is not found";
	//expectHTTPstatus = "HTTP/1.1 404 Not Found";
	Resp_errorLink   = "$Resp_errorHost/rest/1/0/error/en/ErrorList.html#ContentIDNotFound";
	break;
	
	case "CONTENT_NOT_VALID":
	Resp_ErrorID   = "urn:dece:errorid:org:dece:ContentIDNotValid";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "ContentID is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/1/0/error/en/ErrorList.html#ContentIDNotValid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "LOGICAL_ASSET_NOT_ACTIVE":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:AssetLogicalIDNotActive";
	ValerrorID  = 1;
	//Resp_errorReason = "The AssetLogicalID (ALID) is not active.";
	Resp_errorLink   = "$Resp_errorHost/rest/1/0/error/en/ErrorList.html#AssetLogicalIDNotActive";
	break;

	case "Node_status_inactive":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "USER_NOT_MATCH_TOKEN":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:UserIdUnmatched";
	ValerrorID = 1;
	//Resp_errorReason = "User ID does not match security token";
	Resp_errorLink   = "$Resp_errorHost/rest/1/0/error/en/ErrorList.html#UserIdUnmatched";
	
	break;
	
	case "USER_NOT_ACTIVE":
	Resp_ErrorID = "urn:dece:errorid:org:dece:UserNotActive";
	ValerrorID = 1;
	//Resp_errorReason = "User is not active";
	Resp_errorLink   = "$Resp_errorHost/rest/1/0/error/en/ErrorList.html#UserNotActive";
	
	break;
		
	case "ACCOUNTID NOT MATCH":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:AccountIdUnmatched";
	//Resp_errorReason = "Request Account ID not match";
	ValerrorID  = 1;
	Resp_errorLink   = "$Resp_errorHost/rest/1/0/error/en/ErrorList.html#AccountIdUnmatched";
	break;

	case "ACCOUNT_INVALID":
	Resp_ErrorID = "urn:dece:errorid:org:dece:AccountIdNotValid";
	ValerrorID = 1;
	Resp_errorLink  = "$Resp_errorHost/rest/1/0/error/en/ErrorList.html#AccountIdNotValid";
	break;

			
	case "ALID NOT VALID":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:AssetLogicalIDNotValid";
	ValerrorID  = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "AssetLogicalID is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/1/0/error/en/ErrorList.html#AssetLogicalIDNotValid";
	
	break;
	
	case "ALID NOT ACTIVE":
	//expectHTTPstatus = "HTTP/1.1 403 Forbidden";
	Resp_ErrorID     = "urn:dece:errorid:org:dece:AssetLogicalIDNotActive";
	ValerrorID = 1;
	//Resp_errorReason = "The AssetLogicalID (ALID) is not active.";
	Resp_errorLink   = "$Resp_errorHost/rest/1/0/error/en/ErrorList.html#AssetLogicalIDNotActive";
	
	break;
	
	case "ALID NOT FOUND":
	Resp_ErrorID   = "urn:dece:errorid:org:dece:AssetLogicalIDNotFound";
	//expectHTTPstatus = "HTTP/1.1 404 Not Found";
	ValerrorID = 1;
	//Resp_errorReason = "The supplied AssetLogicalID (ALID) was not found.";
	Resp_errorLink   = "$Resp_errorHost/rest/1/0/error/en/ErrorList.html#AssetLogicalIDNotFound";
	
	break;

	case "BUNDLEID NOT VALID":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:BundleIDNotValid";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "The identified bundle is invalid.";
	Resp_errorLink   = "$Resp_errorHost/rest/1/0/error/en/ErrorList.html#BundleIDNotValid";
	
	break;
	case "BUNDLEID NOT FOUND":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:BundleIDNotFound";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 404 Not Found";
	//Resp_errorReason = "BundleID is not found";
	Resp_errorLink   = "$Resp_errorHost/rest/1/0/error/en/ErrorList.html#BundleIDNotFound";
	
	break;
	
	case "INVALID_DISPLAY_LANGUAGE":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:DisplayNameLanguageNotValid";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "DisplayNameLanguage is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/1/0/error/en/ErrorList.html#DisplayNameLanguageNotValid";
	
	break;

	case "INVALID_DM_REMAIN":
		expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
		expectHTTPcontenttype = "application/xml"
	break;
	
	case "DMR_LIMIT_EXCEEDED":
	Resp_ErrorID  = "urn:dece:errorid:org:dece:DiscreteMediaLimitExceeded";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "ContentProfile is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/1/0/error/en/ErrorList.html#DiscreteMediaLimitExceeded";
	break;
	
	case "CONTENTPROFILE_NOT_VALID":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:ContentProfileNotValid";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "ContentProfile is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/1/0/error/en/ErrorList.html#ContentProfileNotValid";
	break;

	case "FULLFILLMENTLOC_NOT_VALID":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:FulfillmentLocNotValid";
	ValerrorID = 1;
	//Resp_errorReason = "FulfillmentLoc is not valid";
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	Resp_errorLink   = "$Resp_errorHost/rest/1/0/error/en/ErrorList.html#FulfillmentLocNotValid";
	break;
	
	case "FULLFILLMENTLOC_MISSING":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	expectHTTPcontenttype = "application/xml"
	processXMLFlag  = false;
	errorIDFlag     = false;
	errorReasonFlag = false;
	errorLinkFlag   = false;
	break;
	
	case "STANDARD_DEF_MISSING":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:StandardDefinitionMissing";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "StandardDefinition is missing";
	Resp_errorLink   = "$Resp_errorHost/rest/1/0/error/en/ErrorList.html#StandardDefinitionMissing";
	break;

	case "PURCHASE_ACCOUNTID_INVALID":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:PurchaseAccountNotValid";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "PurchaseAccount is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/1/0/error/en/ErrorList.html#PurchaseAccountNotValid";
	break;
	case "PURCHASE_USERID_INVALID":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:PurchaseUserNotValid";
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "PurchaseUser is not valid";
	ValerrorID = 1;
	Resp_errorLink   = "$Resp_errorHost/rest/1/0/error/en/ErrorList.html#PurchaseUserNotValid";
	break;
	case "PURCHASE_NODEID_INVALID":
	Resp_ErrorID    = "urn:dece:errorid:org:dece:PurchaseNodeIDNotValid";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "PurchaseNodeID is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/1/0/error/en/ErrorList.html#PurchaseNodeIDNotValid";
	break;
	
	case "PURCHASE_TIME_INVALID":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	expectHTTPcontenttype = "application/xml"
	processXMLFlag  = false;
	errorIDFlag     = false;
	errorReasonFlag = false;
	errorLinkFlag   = false;
	break;
	
	case "SCHEMA_VALIDATION_ERROR":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	expectHTTPcontenttype = "application/xml"
	processXMLFlag  = false;
	errorIDFlag     = false;
	errorReasonFlag = false;
	errorLinkFlag   = false;
	break;
	case "LICACQBASE_LOC_INVALID":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:LicenseAcqBaseLocNotValid";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "LicenseAcqBaseLoc is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/1/0/error/en/ErrorList.html#LicenseAcqBaseLocNotValid";
	break;
	case "LICACQBASE_LOC_MISSING":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	expectHTTPcontenttype = "application/xml"
	processXMLFlag  = false;
	errorIDFlag     = false;
	errorReasonFlag = false;
	errorLinkFlag   = false;
	break;

	case "RT_PP_DOWNLOAD/STREAM_INVALID":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	expectHTTPcontenttype = "application/xml"
	processXMLFlag  = false;
	errorIDFlag     = false;
	errorReasonFlag = false;
	errorLinkFlag   = false;
	break;
	
	case "BUNDLEID NOT ACTIVE":
	Resp_ErrorID   = "urn:dece:errorid:org:dece:BundleIDNotActive";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "LicenseAcqBaseLoc is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/1/0/error/en/ErrorList.html#BundleIDNotActive";

	case "RIGHTSTOKEN_NOT_FOUND":
	Resp_ErrorID  = "urn:dece:errorid:org:dece:RightsTokenNotFound";
	ValerrorID = 1;
	//Resp_errorReason = "User ID does not match security token";
	Resp_errorLink   = "$Resp_errorHost/rest/1/0/error/en/ErrorList.html#RightsTokenNotFound";
	break;

	case "RIGHTSTOKEN_INVALID":
	Resp_ErrorID  = "urn:dece:errorid:org:dece:RightsTokenIDNotValid";
	ValerrorID = 1;
	//Resp_errorReason = "User ID does not match security token";
	Resp_errorLink   = "$Resp_errorHost/rest/1/0/error/en/ErrorList.html#RightsTokenIDNotValid";
	
	break;
	
	case "RT_UPDATE_NOT_ALLOWED":
	Resp_ErrorID  = "urn:dece:errorid:org:dece:RightsTokenStatusChangeNotAllowed";
	ValerrorID = 1;
	//Resp_errorReason = "User ID does not match security token";
	Resp_errorLink   = "$Resp_errorHost/rest/1/0/error/en/ErrorList.html#RightsTokenStatusChangeNotAllowed";
	break;

	case "USER_NOT_ACTIVE":
	Resp_ErrorID  = "urn:dece:errorid:org:dece:UserNotActive";
	ValerrorID = 1;
	//Resp_errorReason = "User ID does not match security token";
	Resp_errorLink   = "$Resp_errorHost/rest/1/0/error/en/ErrorList.html#UserNotActive";
	break;

	case "PURCHASE_INFO_MISSING":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	expectHTTPcontenttype = "application/xml"
	processXMLFlag  = false;
	errorIDFlag     = false;
	errorReasonFlag = false;
	errorLinkFlag   = false;
	break;

	case "FULLFILLMENT_METHOD_INVALID":
	Resp_ErrorID = "urn:dece:errorid:org:dece:DiscreteMediaFulfillmentMethodNotValid";
	ValerrorID = 1;
	Resp_errorLink   = "$Resp_errorHost/rest/1/0/error/en/ErrorList.html#DiscreteMediaFulfillmentMethodNotValid";
	break;


	case "ALID_UPDATE_NOTALLOWED":
	Resp_ErrorID = "urn:dece:errorid:org:dece:LogicalIDUpdationNotAllowed";
	ValerrorID = 1;
	Resp_errorLink  = "$Resp_errorHost/rest/1/0/error/en/ErrorList.html#LogicalIDUpdationNotAllowed";
	break;

	case "CONTENTID_UPDATE_NOTALLOWED":
	Resp_ErrorID = "urn:dece:errorid:org:dece:ContentIDUpdationNotAllowed";
	ValerrorID = 1;
	Resp_errorLink  = "$Resp_errorHost/rest/1/0/error/en/ErrorList.html#ContentIDUpdationNotAllowed";
	break;

	case "SOLDAS_UPDATE_NOTALLOWED":
	Resp_ErrorID = "urn:dece:errorid:org:dece:RightsSoldAsUpdationNotAllowed";
	ValerrorID = 1;
	Resp_errorLink  = "$Resp_errorHost/rest/1/0/error/en/ErrorList.html#RightsSoldAsUpdationNotAllowed";
	break;

	case "SOLDAS_DISPLAY_LANG_UPDATE_NOTALLOWED":
	Resp_ErrorID = "urn:dece:errorid:org:dece:RightsSoldAsUpdationNotAllowed";
	ValerrorID = 1;
	Resp_errorLink  = "$Resp_errorHost/rest/1/0/error/en/ErrorList.html#RightsSoldAsUpdationNotAllowed";
	break;

	case "RIGHTSTOKEN_DELETE_NOTALLOWED":
	Resp_ErrorID = "urn:dece:errorid:org:dece:RightsTokenAlreadyDeleted";
	ValerrorID = 1;
	Resp_errorLink  = "$Resp_errorHost/rest/1/0/error/en/ErrorList.html#RightsTokenAlreadyDeleted";
	break;

		
 }

testCase.setPropertyValue("errorID",Resp_ErrorID);

if(ValerrorID.toString() == '1') {
	
def RTErrors = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeceDomain Error Validation");

RTErrors.setPropertyValue("TCaseName",testCase.getName());
RTErrors.setPropertyValue("TSuiteName",testSuite.getName());

WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTErrors, null );

TSrunnerRTC.runTestStepByName("Validate DeceDomain Errors");

assert TSrunnerRTC.status == Status.INITIALIZED;

Resp_errorReason = testCase.getPropertyValue("errorReason");
expectHTTPstatus = testCase.getPropertyValue("errorStatusCode");

log.info Resp_errorReason.toString();
}

// HTTP header status

this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + Resp_HTTPstatus;
assert Resp_HTTPstatus == expectHTTPstatus;

// Connection
this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + Resp_HTTPconnection;
assert Resp_HTTPconnection == expectHTTPconnection;

//Content-Length
if(errorRespType!= "SUCCESS")
{
log.info "Content-Length:"+ Resp_HTTPcontentlength;
assert Resp_HTTPcontentlength.toInteger() > 0; 
}
//Content-Type

log.info "Content-Type:" + Resp_HTTPcontenttype;
assert Resp_HTTPcontenttype == expectHTTPcontenttype;

//XML body should be null test
if (Responsebodynull) {
assert ResponseXML == null;
}

//this.log.info "ResponseXML Length [" + ResponseXML.length() + "] processXMLFlag[$processXMLFlag]";

if (ResponseXML != null &amp;&amp; processXMLFlag == true) {
	
	def Resp_XML = new XmlSlurper().parseText(ResponseXML);

// Verify response sizes...
	
     ErrorDataVal = testCase.getPropertyValue("ErrorDataVal");

	assert Resp_XML.Error.size() == ErrorDataVal.toInteger();
	assert Resp_XML.Error.Reason.size() ==  ErrorDataVal.toInteger();
	assert Resp_XML.Error.OriginalRequest.size() ==  ErrorDataVal.toInteger();
	assert Resp_XML.Error.ErrorLink.size() ==  ErrorDataVal.toInteger();
		
// ErrorCode
	log.info "Received ErrorID [" + Resp_XML.Error[0].@ErrorID.toString() + "] Exp[$Resp_ErrorID]";
	assert Resp_XML.Error[0].@ErrorID.toString() == Resp_ErrorID;
	
// ErrorReason
      log.info "ErrorReason Received [" + Resp_XML.Error[0].Reason.toString() + "] Exp[$Resp_errorReason]";
	assert Resp_XML.Error[0].Reason.toString() == Resp_errorReason;

// ErrorLink
	log.info "ErrorLink [" + Resp_XML.Error[0].ErrorLink.toString() + "] errorLink[$Resp_errorLink]";
	assert Resp_XML.Error[0].ErrorLink.toString() == Resp_errorLink;
}</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>0701</con:value>
        </con:property>
        <con:property>
          <con:name>TCaseName</con:name>
          <con:value>TC_DECE_00001_DeviceDeceDomain_Device _FUNC_with_ValidData</con:value>
        </con:property>
        <con:property>
          <con:name>TSuiteName</con:name>
          <con:value>Device Dece Domain Device Test Cases</con:value>
        </con:property>
        <con:property>
          <con:name>Accountid</con:name>
          <con:value>urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>ErrorDataVal</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>errorStatusCode</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>errorReason</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>errorID</con:name>
          <con:value/>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceDeceDomainID</con:name>
          <con:value>A09DA589BD63A036E0401F0A05996D9A</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DeviceDeceDomainGet Request" searchProperties="true">
      <con:settings/>
      <con:testStep type="groovy" name="Get the DeviceDeceDomainGet Properties">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSuitename = testCase.getPropertyValue("TSuiteName");
def callTCasename = testCase.getPropertyValue("TCaseName");

def CallingTCase = testProject.getTestSuiteByName(callTSuitename).getTestCaseByName(callTCasename);

//SetUp SAML assertion in Request header

def headers = new StringToStringMap()
headers.put("Authorization","SAML2 assertion="+ CallingTCase.getPropertyValue("SAMLassertion"));
testRunner.testCase.getTestStepByName("DeviceDeceDomainRequest").testRequest.setRequestHeaders(headers);


// setUp Node Properties
testCase.setPropertyValue("nodeid",CallingTCase.getPropertyValue("nodeid"));


//SetUp test properties
testCase.setPropertyValue("AccountID",CallingTCase.getPropertyValue("AccountID"));
testCase.setPropertyValue("DeviceID",CallingTCase.getPropertyValue("DeviceID"));

//Testing RightLockerDataGet Request Properties Loaded correctly.

testCase.setPropertyValue("FeedRTDReq","OK");
//CallingTCase.setPropertyValue("FeedRTDReq",CallingTCase.getPropertyValue("FeedRTDReq"));</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="pem set">
        <con:settings/>
        <con:config>
          <script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;

def testCase    = testRunner.getTestCase();
def testSuite   = testCase.getTestSuite();
def testProject = testSuite.getProject();

String keyStorePath  = "";
String keyStoreAlias = "";
String nodeId = testCase.getPropertyValue("nodeid");

RestTestRequestStep testStep = testCase.getTestStepByName("DeviceDeceDomainRequest");

//String keyStorePath = testCase.getPropertyValue("KeyStorePath");
//String keyStoreAlias = testCase.getPropertyValue("notValidExpiredNode");

switch (nodeId) {
	case "0799":
		keyStorePath = "C:\\DECE\\certs\\0799_concat.pem";
	break;
	case "0798":
		keyStorePath = "C:\\DECE\\certs\\0798_concat.pem";
	break;
	case "0701":
		keyStorePath = "C:\\DECE\\certs2\\0701_concat.pem";
	break;
	case "0702":
		keyStorePath = "C:\\DECE\\certs2\\0702_concat.pem";
	break;
	case "700030":
		keyStorePath = "C:\\DECE\\certs\\700030_concat.pem";
	break;
	}
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);

soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="DeviceDeceDomainRequest">
        <con:settings/>
        <con:config service="DeviceDeceDomain" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/Device/{DeviceID}/DECEDomain" methodName="DeviceDeceDomain_Request" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="DeviceDeceDomainRequest" mediaType="application/xml" sslKeystore="0701_concat.pem" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=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" xmlns="http://eviware.com/soapui/config"/></con:setting>
            </con:settings>
            <con:endpoint>https://qa.q.uvvu.com:7001</con:endpoint>
            <con:request/>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters>
              <con:entry key="DeviceID" value="${#TestCase#DeviceID}"/>
              <con:entry key="AccountID" value="${#TestCase#AccountID}"/>
            </con:parameters>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>TCaseName</con:name>
          <con:value>TC_DECE_00001_DeviceDeceDomain_Device _FUNC_with_ValidData</con:value>
        </con:property>
        <con:property>
          <con:name>TSuiteName</con:name>
          <con:value>Device Dece Domain Device Test Cases</con:value>
        </con:property>
        <con:property>
          <con:name>AccountID</con:name>
          <con:value>urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>FeedRTDReq</con:name>
          <con:value>OK</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>0701</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceID</con:name>
          <con:value>urn:dece:deviceid:org:dece:A09D9C22F11CBC6DE0401F0A05996898</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Get-Set Node Statuses" searchProperties="true">
      <con:settings/>
      <con:testStep type="groovy" name="Get Node Statuses for DVG">
        <con:settings/>
        <con:config>
          <script>import dbUtils.dbUtils;
import dbUtils.dbNode;
import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.teststeps.WsdlResponseMessageExchange

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callingTSuiteName = testCase.getPropertyValue("TSuiteName");
def callingTCaseName = testCase.getPropertyValue("TCaseName");

def callingTCase = testProject.getTestSuiteByName(callingTSuiteName).getTestCaseByName(callingTCaseName);
log.info callingTCase.getName();

myDb = new dbUtils(log,"LP1");
NodeStatusXML = myDb.SelectFromDB("select Status from NODE_STATUS where Status != 'active'","LP1");

log.info NodeStatusXML.toString();

testCase.setPropertyValue("NodeStatusXML",NodeStatusXML.toString());
callingTCase.setPropertyValue("NodeStatusXML",testCase.getPropertyValue("NodeStatusXML"));</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Set Node Statuses for DVG">
        <con:settings/>
        <con:config>
          <script>import dbUtils.dbUtils;
import dbUtils.dbNode;
import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.teststeps.WsdlResponseMessageExchange

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callingTSuiteName = testCase.getPropertyValue("TSuiteName");
def callingTCaseName = testCase.getPropertyValue("TCaseName");

def CallingTCase = testProject.getTestSuiteByName(callingTSuiteName).getTestCaseByName(callingTCaseName);

log.info CallingTCase.getName();
//log.info CallingTCase.getPropertyValue("nodeid");

myNode = new dbNode(log,"LP1");

testCase.setPropertyValue("nodeid",CallingTCase.getPropertyValue("nodeid"));
testCase.setPropertyValue("NodeStatus",CallingTCase.getPropertyValue("NodeStatus"));

nodeid = testCase.getPropertyValue("nodeid");
NodeStatus = testCase.getPropertyValue("NodeStatus");

myNode.nodeSetStatus(nodeid ,NodeStatus);

Upd_NodeStatus = myNode.nodeGetStatus(nodeid);

testCase.setPropertyValue("NodeStatus",Upd_NodeStatus);

CallingTCase.setPropertyValue("NodeStatus",testCase.getPropertyValue("NodeStatus"));</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>NodeStatusXML</con:name>
          <con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <STATUS>deleted</STATUS>
    </Row>
    <Row rowNumber='2'>
      <STATUS>pending</STATUS>
    </Row>
    <Row rowNumber='3'>
      <STATUS>suspended</STATUS>
    </Row>
  </ResultSet>
</Results>]]></con:value>
        </con:property>
        <con:property>
          <con:name>TCaseName</con:name>
          <con:value>TC_DECE_00006_DeviceGet_RetailerCS_FUNC_with_Inactive NodeID</con:value>
        </con:property>
        <con:property>
          <con:name>TSuiteName</con:name>
          <con:value>DeviceGet  Retailer_CS Test Cases_R4</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>0702</con:value>
        </con:property>
        <con:property>
          <con:name>NodeStatus</con:name>
          <con:value>active</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DeviceGet Error Validation" searchProperties="true">
      <con:settings/>
      <con:testStep type="groovy" name="Validate DeviceGet Errors">
        <con:settings/>
        <con:config>
          <script>import dbUtils.dbUtils;
import dbUtils.dbErrors;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def DeceDomainErrors = new dbErrors(log,"LP1");


def callTSuitename = tC.getPropertyValue("TSuiteName");
def callTCasename = tC.getPropertyValue("TCaseName");

def CallingTCase = tP.getTestSuiteByName(callTSuitename).getTestCaseByName(callTCasename);
def errId = CallingTCase.getPropertyValue("errorID");
log.info errId.tokenize(':').last();

ErrorID = errId.tokenize(':').last();

def xmlData = "";

try {
			 xmlData = DeceDomainErrors.errGetIdInfo(ErrorID.toString());
                log.info xmlData;
                
                assert xmlData.trim().length() > 1;

                def myXML = new XmlSlurper().parseText(xmlData);
                

                log.info myXML.ResultSet.Row.size();
                tC.setPropertyValue("errorStatusCode", myXML.ResultSet.Row[0].STATUS_CODE.toString());
                tC.setPropertyValue("errorReason", myXML.ResultSet.Row[0].REASON.toString());
                tC.setPropertyValue("errorID", myXML.ResultSet.Row[0].ERROR_ID.toString());

                /*
                *  The DB does not contain the complete HTTP status
                *  string, only the code.  Thus, we must adjust.
                */
                switch (tC.getPropertyValue("errorStatusCode")) {
                                case "400":
                                                tC.setPropertyValue("errorStatusCode","HTTP/1.1 400 Bad Request");
                                                break;
                                 case "401":
                                                tC.setPropertyValue("errorStatusCode","HTTP/1.1 401 Unauthorized");
                                                break;
                                case "403":
                                                tC.setPropertyValue("errorStatusCode","HTTP/1.1 403 Forbidden");
                                                break;
                                case "404":
                                                tC.setPropertyValue("errorStatusCode","HTTP/1.1 404 Not Found");
                                                break;
                                case "409":
                                                tC.setPropertyValue("errorStatusCode","HTTP/1.1 409 Conflict");
                                                break;
                }
}
catch (Throwable e) {
                log.info "STEP FAILURE! --- " + e;
                
}


CallingTCase.setPropertyValue("errorStatusCode",tC.getPropertyValue("errorStatusCode"));
CallingTCase.setPropertyValue("errorReason",tC.getPropertyValue("errorReason"));
CallingTCase.setPropertyValue("errorID",tC.getPropertyValue("errorID"));</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>TCaseName</con:name>
          <con:value>DeviceGet Response Validation</con:value>
        </con:property>
        <con:property>
          <con:name>TSuiteName</con:name>
          <con:value>Common Test Steps</con:value>
        </con:property>
        <con:property>
          <con:name>errorStatusCode</con:name>
          <con:value>HTTP/1.1 403 Forbidden</con:value>
        </con:property>
        <con:property>
          <con:name>errorReason</con:name>
          <con:value>The member is not active.</con:value>
        </con:property>
        <con:property>
          <con:name>errorID</con:name>
          <con:value>UserNotActive</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Get-Set Account Status" searchProperties="true">
      <con:settings/>
      <con:testStep type="groovy" name="Get Account Status for DVG">
        <con:settings/>
        <con:config>
          <script>import dbUtils.dbUtils;
import dbUtils.dbAccount;
import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.teststeps.WsdlResponseMessageExchange

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callingTSuiteName = testCase.getPropertyValue("TSuiteName");
def callingTCaseName = testCase.getPropertyValue("TCaseName");

def callingTCase = testProject.getTestSuiteByName(callingTSuiteName).getTestCaseByName(callingTCaseName);
log.info callingTCase.getName();

//AccountID = callingTCase.getPropertyValue("accountoid");

myDb = new dbUtils(log,"LP1");

SqlStr = callingTCase.getPropertyValue("SqlStr");

log.info SqlStr;

AccountStatusXML = myDb.SelectFromDB(SqlStr, "LP1");

log.info AccountStatusXML.toString();

testCase.setPropertyValue("AccountStatusXML",AccountStatusXML.toString());
callingTCase.setPropertyValue("AccountStatusXML",testCase.getPropertyValue("AccountStatusXML"));

AccXML = new XmlSlurper().parseText(AccountStatusXML.toString());

AccountStatus = AccXML.ResultSet.Row.STATUS

testCase.setPropertyValue("AccountStatus",AccountStatus.toString());
callingTCase.setPropertyValue("AccountStatus",testCase.getPropertyValue("AccountStatus"));</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Set Account Status for DVG">
        <con:settings/>
        <con:config>
          <script>import dbUtils.dbUtils;
import dbUtils.dbAccount;
import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.teststeps.WsdlResponseMessageExchange

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callingTSuiteName = testCase.getPropertyValue("TSuiteName");
def callingTCaseName = testCase.getPropertyValue("TCaseName");

def callingTCase = testProject.getTestSuiteByName(callingTSuiteName).getTestCaseByName(callingTCaseName);
log.info callingTCase.getName();

log.info callingTCase.getPropertyValue("accountoid");

AccountID = callingTCase.getPropertyValue("accountoid");


//testCase.setPropertyValue("AccountID",AccountID);

AccountStatus = callingTCase.getPropertyValue("AccountStatus");

myAccount = new dbAccount(log,"LP1");

UserStatus = myAccount.accountSetStatus(AccountID.toString(),AccountStatus.toString());

log.info AccountStatus.toString();

testCase.setPropertyValue("AccountStatus",AccountStatus.toString());
callingTCase.setPropertyValue("AccountStatus",testCase.getPropertyValue("AccountStatus"));</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>TCaseName</con:name>
          <con:value>TC_DECE_00021_DeviceGet_RetailerCS_FUNC_with_InActive AccountID_CS_ROLE_NOT_Allowed</con:value>
        </con:property>
        <con:property>
          <con:name>TSuiteName</con:name>
          <con:value>DeviceGet  Retailer_CS Test Cases_R4</con:value>
        </con:property>
        <con:property>
          <con:name>AccountStatus</con:name>
          <con:value>active</con:value>
        </con:property>
        <con:property>
          <con:name>AccountID</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>AccountStatusXML</con:name>
          <con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <STATUS>forcedeleted</STATUS>
    </Row>
    <Row rowNumber='2'>
      <STATUS>mergedeleted</STATUS>
    </Row>
    <Row rowNumber='3'>
      <STATUS>other</STATUS>
    </Row>
    <Row rowNumber='4'>
      <STATUS>suspended</STATUS>
    </Row>
  </ResultSet>
</Results>]]></con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Get-Set User Status" searchProperties="true">
      <con:settings/>
      <con:testStep type="groovy" name="Get User Status for DVG">
        <con:settings/>
        <con:config>
          <script>import dbUtils.dbUtils;
import dbUtils.dbUser;
import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.teststeps.WsdlResponseMessageExchange

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callingTSuiteName = testCase.getPropertyValue("TSuiteName");
def callingTCaseName = testCase.getPropertyValue("TCaseName");

def callingTCase = testProject.getTestSuiteByName(callingTSuiteName).getTestCaseByName(callingTCaseName);
log.info callingTCase.getName();

USerID = callingTCase.getPropertyValue("useroid");
myUser = new dbUser(log,"LP1");

UserStatus = myUser.userGetStatus(USerID);

log.info UserStatus.toString();

myDb = new dbUtils(log,"LP1");

SqlStr = callingTCase.getPropertyValue("SqlStr");

UserStatusXML = myDb.SelectFromDB(SqlStr,"LP1");

log.info UserStatusXML.toString();

testCase.setPropertyValue("UserStatusXML",UserStatusXML.toString());
callingTCase.setPropertyValue("UserStatusXML",testCase.getPropertyValue("UserStatusXML"));

testCase.setPropertyValue("UserStatus",UserStatus.toString());
callingTCase.setPropertyValue("UserStatus",testCase.getPropertyValue("UserStatus"));</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Set User Status for DVG">
        <con:settings/>
        <con:config>
          <script>import dbUtils.dbUtils;
import dbUtils.dbUser;
import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.teststeps.WsdlResponseMessageExchange

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callingTSuiteName = testCase.getPropertyValue("TSuiteName");
def callingTCaseName = testCase.getPropertyValue("TCaseName");

def callingTCase = testProject.getTestSuiteByName(callingTSuiteName).getTestCaseByName(callingTCaseName);
log.info callingTCase.getName();



USerID = callingTCase.getPropertyValue("useroid");
testCase.setPropertyValue("UserOid",USerID.toString());

UserSetStatus = callingTCase.getPropertyValue("UserStatus");

myUser = new dbUser(log,"LP1");

UserStatus = myUser.userSetStatus(USerID.toString(),UserSetStatus.toString());

log.info UserStatus.toString();

testCase.setPropertyValue("UserStatus",UserStatus.toString());
callingTCase.setPropertyValue("UserStatus",testCase.getPropertyValue("UserStatus"));</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>TCaseName</con:name>
          <con:value>TC_DECE_00008_DeviceGet_RetailerCS_FUNC_HouseholdAccount_User_Status_Inactive</con:value>
        </con:property>
        <con:property>
          <con:name>TSuiteName</con:name>
          <con:value>DeviceGet  Retailer_CS Test Cases_R4</con:value>
        </con:property>
        <con:property>
          <con:name>UserStatus</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>UserOid</con:name>
          <con:value>DEF5738E544A633AE0401F0A05990CC0</con:value>
        </con:property>
        <con:property>
          <con:name>UserStatusXML</con:name>
          <con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <STATUS>archived</STATUS>
    </Row>
    <Row rowNumber='2'>
      <STATUS>blocked</STATUS>
    </Row>
    <Row rowNumber='3'>
      <STATUS>blocked:clg</STATUS>
    </Row>
    <Row rowNumber='4'>
      <STATUS>blocked:tou</STATUS>
    </Row>
    <Row rowNumber='5'>
      <STATUS>deleted</STATUS>
    </Row>
    <Row rowNumber='6'>
      <STATUS>forcedeleted</STATUS>
    </Row>
    <Row rowNumber='7'>
      <STATUS>mergedeleted</STATUS>
    </Row>
    <Row rowNumber='8'>
      <STATUS>other</STATUS>
    </Row>
    <Row rowNumber='9'>
      <STATUS>pending</STATUS>
    </Row>
    <Row rowNumber='10'>
      <STATUS>suspended</STATUS>
    </Row>
  </ResultSet>
</Results>]]></con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Get-Set Device Status" searchProperties="true">
      <con:settings/>
      <con:testStep type="groovy" name="Set Device Status for DVG">
        <con:settings/>
        <con:config>
          <script>import dbUtils.dbUtils;
import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.teststeps.WsdlResponseMessageExchange

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callingTSuiteName = testCase.getPropertyValue("TSuiteName");
def callingTCaseName = testCase.getPropertyValue("TCaseName");

def callingTCase = testProject.getTestSuiteByName(callingTSuiteName).getTestCaseByName(callingTCaseName);
log.info callingTCase.getName();

testCase.setPropertyValue("DeviceID",callingTCase.getPropertyValue("DeviceID"));

DeviceID = testCase.getPropertyValue("DeviceID");

dbDeviceID = DeviceID.tokenize(':').last();

DeviceStatus = callingTCase.getPropertyValue("DeviceStatus");

myDb = new dbUtils(log,"LP1");


SqlStr = "Update DEVICE set STATUS = '$DeviceStatus' Where DEVICE_OID = '$dbDeviceID'";

testCase.setPropertyValue("SqlStr",SqlStr);

rcDeviceStatus = myDb.UpdateDB(SqlStr,"LP1");

testCase.setPropertyValue("rcDeviceStatus",rcDeviceStatus.toString());
callingTCase.setPropertyValue("rcDeviceStatus",testCase.getPropertyValue("rcDeviceStatus"));</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Get Device Status for DVG">
        <con:settings/>
        <con:config>
          <script>import dbUtils.dbUtils;
import dbUtils.dbUser;
import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.teststeps.WsdlResponseMessageExchange

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callingTSuiteName = testCase.getPropertyValue("TSuiteName");
def callingTCaseName = testCase.getPropertyValue("TCaseName");

def callingTCase = testProject.getTestSuiteByName(callingTSuiteName).getTestCaseByName(callingTCaseName);
log.info callingTCase.getName();

DeviceID = callingTCase.getPropertyValue("DeviceID");

myDb = new dbUtils(log,"LP1");

SqlStr = callingTCase.getPropertyValue("SqlStr");

DeviceStatusXML = myDb.SelectFromDB(SqlStr,"LP1");

log.info DeviceStatusXML.toString();

testCase.setPropertyValue("DeviceStatusXML",DeviceStatusXML.toString());
callingTCase.setPropertyValue("DeviceStatusXML",testCase.getPropertyValue("DeviceStatusXML"));</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>TCaseName</con:name>
          <con:value>TC_DECE_00011_DeviceGet_RetailerCS_FUNC_with_Inactive_ DeviceID</con:value>
        </con:property>
        <con:property>
          <con:name>TSuiteName</con:name>
          <con:value>DeviceGet  Retailer_CS Test Cases_R4</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceStatusXML</con:name>
          <con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <STATUS>active</STATUS>
    </Row>
    <Row rowNumber='2'>
      <STATUS>deleted</STATUS>
    </Row>
    <Row rowNumber='3'>
      <STATUS>forcedeleted</STATUS>
    </Row>
    <Row rowNumber='4'>
      <STATUS>mergedeleted</STATUS>
    </Row>
    <Row rowNumber='5'>
      <STATUS>pending</STATUS>
    </Row>
  </ResultSet>
</Results>]]></con:value>
        </con:property>
        <con:property>
          <con:name>SqlStr</con:name>
          <con:value>Update DEVICE set STATUS = 'pending' Where DEVICE_OID = 'DEF585C6AEA11471E0401F0A07994634'</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceStatus</con:name>
          <con:value>forceddelete</con:value>
        </con:property>
        <con:property>
          <con:name>rcDeviceStatus</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>dbDeviceID</con:name>
          <con:value>A09D9C22F11CBC6DE0401F0A05996898</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceID</con:name>
          <con:value>urn:dece:deviceid:org:dece:DEF585C6AEA11471E0401F0A07994634</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Get-Set Node Role" searchProperties="true">
      <con:settings/>
      <con:testStep type="groovy" name="Get Node Role for DDD">
        <con:settings/>
        <con:config>
          <script>import dbUtils.dbUtils;
import dbUtils.dbNode;
import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.teststeps.WsdlResponseMessageExchange

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callingTSuiteName = testCase.getPropertyValue("TSuiteName");
def callingTCaseName = testCase.getPropertyValue("TCaseName");

def callingTCase = testProject.getTestSuiteByName(callingTSuiteName).getTestCaseByName(callingTCaseName);
log.info callingTCase.getName();

testCase.setPropertyValue("nodeid",CallingTCase.getPropertyValue("nodeid"));

NodeID = testCase.getPropertyValue("nodeid");

myDb = new dbNode(log,"LP1");
NodeRole = myDb.nodeGetRole(NodeID);

log.info NodeRole;

testCase.setPropertyValue("NodeRole",NodeRole.toString());
callingTCase.setPropertyValue("NodeRole",testCase.getPropertyValue("NodeRole"));</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Set Node Role for DDD">
        <con:settings/>
        <con:config>
          <script>import dbUtils.dbUtils;
import dbUtils.dbNode;
import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.teststeps.WsdlResponseMessageExchange

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callingTSuiteName = testCase.getPropertyValue("TSuiteName");
def callingTCaseName = testCase.getPropertyValue("TCaseName");

def CallingTCase = testProject.getTestSuiteByName(callingTSuiteName).getTestCaseByName(callingTCaseName);

log.info CallingTCase.getName();
//log.info CallingTCase.getPropertyValue("nodeid");

myNode = new dbNode(log,"LP1");

testCase.setPropertyValue("nodeid",CallingTCase.getPropertyValue("nodeid"));
testCase.setPropertyValue("NodeRole",CallingTCase.getPropertyValue("NodeRole"));

nodeid = testCase.getPropertyValue("nodeid");
NodeRole = testCase.getPropertyValue("NodeRole");

myNode.nodeSetRole(nodeid ,NodeRole);

Upd_NodeRole = myNode.nodeGetRole(nodeid);

testCase.setPropertyValue("NodeRole",Upd_NodeRole);

CallingTCase.setPropertyValue("NodeRole",testCase.getPropertyValue("NodeRole"));</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>NodeStatusXML</con:name>
          <con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <STATUS>deleted</STATUS>
    </Row>
    <Row rowNumber='2'>
      <STATUS>pending</STATUS>
    </Row>
    <Row rowNumber='3'>
      <STATUS>suspended</STATUS>
    </Row>
  </ResultSet>
</Results>]]></con:value>
        </con:property>
        <con:property>
          <con:name>TCaseName</con:name>
          <con:value>TC_DECE_30021 -  DeviceGet - PERM - SecurityRoleValid - Invocation with AccessPortal_CS</con:value>
        </con:property>
        <con:property>
          <con:name>TSuiteName</con:name>
          <con:value>DeviceGet_Invocation_ByPermission_TestCases_R4</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>0701</con:value>
        </con:property>
        <con:property>
          <con:name>NodeStatus</con:name>
          <con:value>active</con:value>
        </con:property>
        <con:property>
          <con:name>NodeRole</con:name>
          <con:value>urn:dece:role:retailer</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="misc" searchProperties="true">
      <con:settings/>
      <con:testStep type="groovy" name="compare Strings">
        <con:settings/>
        <con:config>
          <script>String a1 ="A09DA589BD63A036E0401F0A05996D9A";
String b1 ="A09DA589BD63A036E0401F0A05996D9A"


assert a1 == b1;</script>
        </con:config>
      </con:testStep>
      <con:properties/>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Create ManageAccountConsent Policy" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" disabled="true">
      <con:description/>
      <con:settings/>
      <con:testStep type="groovy" name="Create ManageAccountConsent Policy">
        <con:settings/>
        <con:config>
          <script>import groovy.sql.Sql;
import dbUtils.dbUtils; 

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def userName = "deqa2";
def passWord = "dece2010";
def db = [url:'jdbc:oracle:thin:@stdeqp-clu1-scan.va.neustar.com:2115/stdecqpdb_stdecqa.neustar.com', user: userName, password: passWord, driver:'oracle.jdbc.driver.OracleDriver'];
def sql = Sql.newInstance(db.url, db.user, db.password, db.driver);

//Policy Stuff

def creatorUUID = "5d8e0d44-c90d-4c3e-8e28-bdfd260098c5";
sqlStr = """select rawtohex(user_oid) from node_user where row_oid in (select node_user_id from node_user_saml_assertion where node_user_saml_uuid = '$creatorUUID')""";
sql.eachRow(sqlStr){
	creatingUserOid = it[0];	
}

def requestorUUID = "5d8e0d44-c90d-4c3e-8e28-bdfd260098c5";
sqlStr = """select rawtohex(user_oid) from node_user where row_oid in (select node_user_id from node_user_saml_assertion where node_user_saml_uuid = '$requestorUUID')""";
sql.eachRow(sqlStr){
	restrictedUserOid = it[0];	
}

// RightsLockerOid
sqlStr = """select rawtohex(rights_locker_oid) from rights_locker where account_oid in (select account_oid from node_account where row_oid in (select node_account_id from node_user_saml_assertion where node_user_saml_uuid = '$creatorUUID'))""";
sql.eachRow(sqlStr){
	rightsLockerOid = it[0];
}

dataUtils = new dbUtils(log);
dataUtils.dbConnEstablish("LP1");

def creatorNodeOid = "0702";
def requestorNodeOid = "0702";
def policyFor = testCase.getPropertyValue("PolicyFor");

// INSERTS

// POLICY

def policyOid = dataUtils.getNextPKVal('policy', 'policy_oid');
if(policyFor == "Creator")
{
sqlStr = """insert into
policy
(POLICY_OID,
POLICY_CLASS,
CREATED_BY,
CREATED_BY_TYPE,
CREATED_DATE,
--EFFECTIVE_DATE,
STATUS)
values
('$policyOid',
'105',
'$creatingUserOid',
'user',
sysdate,
--sysdate,
'active')""";
}

if(policyFor == "Requestor")
{
sqlStr = """insert into
policy
(POLICY_OID,
POLICY_CLASS,
CREATED_BY,
CREATED_BY_TYPE,
CREATED_DATE,
--EFFECTIVE_DATE,
STATUS)
values
('$policyOid',
'105',
'$restrictedUserOid',
'user',
sysdate,
--sysdate,
'active')""";
}
sql.execute(sqlStr);

// POLICY_RELATIONSHIP

def pkValue = dataUtils.getNextPKVal('POLICY_RELATIONSHIP', 'POLICY_RELATIONSHIP_OID');
def creatorAccountOid = "A06A9AA49F7073D7E0401F0A059915F0";
def requestorAccountOid = "A06A9AA49F7073D7E0401F0A059915F0";
if(policyFor == "Creator")

{
	log.info "SCH here - pkValue[$pkValue] - creatorAccountOid[$creatorAccountOid]";
sqlStr = """insert into
POLICY_RELATIONSHIP
(POLICY_RELATIONSHIP_OID,
POLICY_ACTOR,
POLICY_ACTOR_TYPE,
POLICY_OID)
values
('$pkValue',
'$creatorAccountOid',
'account_policy',
'$policyOid'
)""";
}
else if(policyFor == "Requestor")
{
	
sqlStr = """insert into
POLICY_RELATIONSHIP
(POLICY_RELATIONSHIP_OID,
POLICY_ACTOR,
POLICY_ACTOR_TYPE,
POLICY_OID)
values
('$pkValue',
'$requestorAccountOid',
'account_policy',
'$policyOid'
)""";	
}
sql.execute(sqlStr);

// POLICY_REQUESTING_ENTITY

pkValue = dataUtils.getNextPKVal('POLICY_REQUESTING_ENTITY', 'POLICY_REQUESTING_ENTITY_OID');
if(policyFor == "Creator")
{
sqlStr = """insert into
POLICY_REQUESTING_ENTITY
(POLICY_REQUESTING_ENTITY_OID,
POLICY_OID,
ENTITY_TYPE,
ENTITY_ID)
values
('$pkValue',
'$policyOid',
'node',
'$creatorNodeOid')""";
}
else if(policyFor == "Requestor")
{
sqlStr = """insert into
POLICY_REQUESTING_ENTITY
(POLICY_REQUESTING_ENTITY_OID,
POLICY_OID,
ENTITY_TYPE,
ENTITY_ID)
values
('$pkValue',
'$policyOid',
'node',
'$requestorNodeOid')""";
}
sql.execute(sqlStr);

// POLICY_RESOURCE

pkValue = dataUtils.getNextPKVal('POLICY_RESOURCE', 'POLICY_RESOURCE_OID');
def creatorRightsLockerOid = testProject.getPropertyValue("CreatorRightsLockerOid");
if(policyFor == "Creator")
{
sqlStr = """insert into
POLICY_RESOURCE
(POLICY_RESOURCE_OID,
POLICY_OID,
RESOURCE_TYPE,
RESOURCE_ID)
values
('$pkValue',
'$policyOid',
'account',
'$creatorAccountOid')""";
}
else if(policyFor == "Requestor")
{
sqlStr = """insert into
POLICY_RESOURCE
(POLICY_RESOURCE_OID,
POLICY_OID,
RESOURCE_TYPE,
RESOURCE_ID)
values
('$pkValue',
'$policyOid',
'account',
'$requestorAccountOid')""";	
}
sql.execute(sqlStr);

dataUtils.dbConnClose();

sql.close();</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value>15554</con:value>
        </con:property>
        <con:property>
          <con:name>NodeId</con:name>
          <con:value>urn:dece:org:org:dece:1397</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>ErrorResponse</con:name>
          <con:value>Created</con:value>
        </con:property>
        <con:property>
          <con:name>CreatorNodeRole</con:name>
          <con:value>urn:dece:role:lasp:linked</con:value>
        </con:property>
        <con:property>
          <con:name>NodeOid</con:name>
          <con:value>1397</con:value>
        </con:property>
        <con:property>
          <con:name>CreatorUUID</con:name>
          <con:value>fbbdd202-bj4u-4e57-b32a-100005</con:value>
        </con:property>
        <con:property>
          <con:name>RequestorUUID</con:name>
          <con:value>fbbdd202-bj4u-4e57-b32a-100006</con:value>
        </con:property>
        <con:property>
          <con:name>RequestorPrivilege</con:name>
          <con:value>full</con:value>
        </con:property>
        <con:property>
          <con:name>CreatorPrivilege</con:name>
          <con:value>full</con:value>
        </con:property>
        <con:property>
          <con:name>PolicyStatus</con:name>
          <con:value>urn:dece:type:status:active</con:value>
        </con:property>
        <con:property>
          <con:name>PolicyClass</con:name>
          <con:value>urn:dece:type:policy:EnableSharingMemberProfile</con:value>
        </con:property>
        <con:property>
          <con:name>PolicyClassesToBeDeleted</con:name>
          <con:value>103</con:value>
        </con:property>
        <con:property>
          <con:name>PolicyAuthority</con:name>
          <con:value>urn:dece:role:coordinator</con:value>
        </con:property>
        <con:property>
          <con:name>RequestorNodeRole</con:name>
          <con:value>urn:dece:role:lasp:linked</con:value>
        </con:property>
        <con:property>
          <con:name>PolicyTablesLog</con:name>
          <con:value>Woohoo!</con:value>
        </con:property>
        <con:property>
          <con:name>ResponseErrorLog</con:name>
          <con:value>Woohoo!</con:value>
        </con:property>
        <con:property>
          <con:name>NumberOfPolicyResources</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>UserRating</con:name>
          <con:value>urn:dece:type:rating:US:MPAA:G</con:value>
        </con:property>
        <con:property>
          <con:name>DataSourceFile</con:name>
          <con:value>C:\Policies\PoliciesPermData.csv</con:value>
        </con:property>
        <con:property>
          <con:name>PolicyFor</con:name>
          <con:value>Creator</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DeviceGet Request" searchProperties="true" id="848891df-5671-4334-96fe-687880be6218">
      <con:settings/>
      <con:testStep type="groovy" name="Get the DeviceGet Properties">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def callTSuitename = testCase.getPropertyValue("TSuiteName");
def callTCasename = testCase.getPropertyValue("TCaseName");

def CallingTCase = testProject.getTestSuiteByName(callTSuitename).getTestCaseByName(callTCasename);

//SetUp SAML assertion in Request header

def headers = new StringToStringMap()
headers.put("Authorization","SAML2 assertion="+ CallingTCase.getPropertyValue("SAMLassertion"));
testRunner.testCase.getTestStepByName("DeviceGetRequest").testRequest.setRequestHeaders(headers);

def headers1 = new StringToStringMap()
headers1.put("Authorization","SAML2 assertion="+ CallingTCase.getPropertyValue("SAMLassertion"));
headers1.put("If-Match","*");
testRunner.testCase.getTestStepByName("DeviceUpdateRequest").testRequest.setRequestHeaders(headers1);

// setUp Node Properties
testCase.setPropertyValue("nodeid",CallingTCase.getPropertyValue("nodeid"));


//SetUp test properties

testCase.setPropertyValue("AccountID",CallingTCase.getPropertyValue("AccountID"));
testCase.setPropertyValue("DeviceID",CallingTCase.getPropertyValue("DeviceID"));
testCase.setPropertyValue("DomainID",CallingTCase.getPropertyValue("DomainID"));

//Testing RightLockerDataGet Request Properties Loaded correctly.

testCase.setPropertyValue("FeedRTDReq","OK");
//CallingTCase.setPropertyValue("FeedRTDReq",CallingTCase.getPropertyValue("FeedRTDReq"));</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="pem set">
        <con:settings/>
        <con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def today = new Date()

String keyStorePath  = "";
String nodeId = testCase.getPropertyValue("node_Id");
log.info "nodeid:"+nodeId;

testCase.setPropertyValue("keyStorePath","");

def myTC = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("SetPem");

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());
myTC.setPropertyValue("nodeid",nodeId);

def runnerTC = myTC.run( null , false );

assert "$runnerTC.status" == "FINISHED";

keyStorePath = myTC.getPropertyValue("keyStorePath");
log.info "keyStorePath:"+keyStorePath;


RestTestRequestStep testStep1 = testCase.getTestStepByName("DeviceUpdateRequest");
RestTestRequestStep testStep2 = testCase.getTestStepByName("DeviceGetRequest");


this.log.info "testStep [$testStep]";
soapUtils = new soapUIUtils(log);

soapUtils.setStepSSLSettingsKeyStore(testStep1, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep2, keyStorePath);
</script></con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="DeviceUpdateRequest"><con:settings/><con:config service="DeviceUpdate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/LicApp/{LicAppID}" methodName="PUT" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DeviceUpdateRequest" mediaType="application/xml" postQueryString="false" accept="" sslKeystore="0701_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="SAML2 assertion=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"/>
  &lt;con:entry key="If-Match" value="*"/>
&lt;/xml-fragment></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>https://qa.p.uvvu.com:7001</con:endpoint><con:request><![CDATA[<LicApp LicAppHandle="3" Embedded="false" xmlns="${#Project#coordinatorSchema}" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">    
  <DisplayName>licAppDisplayName24</DisplayName> 
   <Manufacturer>manfact-97288178864105</Manufacturer>
   <Model>model-3A65F92B71130</Model> 
   <Application>appid-hKqnPMNYWHC61</Application>  
   <MediaProfile>urn:dece:type:mediaprofile:hd</MediaProfile> 
   <MediaProfile>urn:dece:type:mediaprofile:sd</MediaProfile>  
   <MediaProfile>urn:dece:type:mediaprofile:pd</MediaProfile> 
   <Brand Language="zh">licAppBrand</Brand> 
   <SerialNo>877981</SerialNo>  
   <Image Height="81" Width="75" MimeType="MimeType1">http://www.oxygenxml.com/</Image> 
   <DeviceInfo>       
      <DisplayName>DeviceInfoDisplayName34</DisplayName>
      <Manufacturer>DeviceInfoManufacturer28</Manufacturer>
      <Model>DeviceInfoModel48</Model> 
      <Brand Language="en-US">DeviceInfoBrand40</Brand>
      <SerialNo>1127431</SerialNo>   
      <Image Height="50" Width="50" MimeType="MimeType1">http://www.oxygenxml.com/</Image>
   </DeviceInfo>
   <DRMClientRef>
      <DRMClientID>urn:dece:drm:cmlauv:1.0</DRMClientID>
      <AttestationManufacturer>DRMClientRefAttestationManufacturer</AttestationManufacturer>
      <AttestationModel>DRMClientRefAttestationModel</AttestationModel>
      <AttestationApplication>DRMClientRefAttestationApplication</AttestationApplication>
   </DRMClientRef> 
</LicApp>]]></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>assert messageExchange.responseHeaders["#status#"].toString() == "[HTTP/1.1 200 OK]";</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="AccountID" value="${#TestCase#AccountID}"/>
  <con:entry key="LicAppHandle" value="3"/>
  <con:entry key="LicAppID" value="urn:dece:licappid:org:dece:DEF585C6AEA41471E0401F0A07994634"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="DeviceGetRequest">
        <con:settings/>
        <con:config service="DeviceGet" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/Domain/{DomainID}/Device/{DeviceID}" methodName="DeviceGet_Request" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="DeviceGetRequest" mediaType="application/xml" sslKeystore="0701_concat.pem" accept="application/xml">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="SAML2 assertion=nVdpc6pKE/7ur7A8Hy3D5oaVpGpYVFRUBBf4cgthQJRNBgT99e9gosfk5OTNvVWpitP0dD+9TM8zz8gMfLoHEIJJ6kVhVRJeav90O6bJwK7doG1IN5pt225sWx38i2qSJANpGrJmrSohlEEpRKkZpi81mqSYBtluULRG0b0W/us8teiWUauuYIKwaazyRNaqReCHqHd1+1LLkrAXmchDvdAMIOqlVk8F8qSHNXvmDVPt9fkN5dVh8rpL07hHENaTDS3o+9aTFQXEM/FB59lGPdVzQzPNEvju00Yvtfe9eZ4/5cxTlLgETZIkQbIE1rGR5/6qvVZum6EthU70tubNMAo9y/S9i1mCkmG6i+wq8N0o8dJd8BfTFEGRpekGLKyGRTXDXzXit4Mruh9a+gAyQWYD7UzqZmwBHZjA0ILV5UJ6qf36WQXf9mqJGSInSgL0af3vIMHwBP0ohnYD3SK7ofu5xS/S9foMrZ4UWn6GvBOclm0SmxZE1XkCHa+YeAg3n42q1/JXC3TrMGj9m5I8E484MWzii8wIngtR+l/q9VirNysr08/gq21mCa/b9XV97ygnlx7F2oISl1R/3ny5QnhUfgN1L/X7+nOj3vvqfdOM2pOh49gXXZ/wW2FjCqrVFYB4ljVrZguTyBLlBaHKmXiM18TUTLlwNerE9TUKDD50wvO+OwQrekAeh3wFjQb1UUtZzdqbZHieZ8SO6vDCkNWngQ62QE1jbhAoBKH2SX5jaEzfG6oTn0W6fCHcgrH7zNHY8ItseZaTysxDLe4wlFOvXU8ulA4P0svvmB5jKOMaw/M1yPL3pkWygpma9wVfTgoHH88UvsqSxNcFngeQd0EuccCVuMkFTDn3cNwdvAGbkxxQln0ggLO8ALng6sJKUcZibq9WvrGS+n1OXjTzIdCFCv4giMVKMDYj0lwbsU73SUPlOHuziLbMKLaHh3y4s6ayJudTTTrLe7GYaiK5vsrcAq8v8l6mZtqSqaz3HCsvxFzIrx4FMd9NjfUi1pdsbl1ERQbNAaCWIr+Th1qwoixmsbP24kQGh6uc28n8aiUXogbmFc6drnBsGt83Yiuw423g7x6MD7FxzR6sztuBnxkXcS/z4oBXjwNV2jKCIo7AQl9u16uDue6fKtZwCrY3j17LMzdR7hrdXFD00TgypN3JmgJF5DgF4HSRQJYGIxANOCA3gVdc+D3Xjni7nxMjGlXqrD9ob87ecYPMAembVLdL6ZN1e35sC2JYN8bZdr+Td5v+rD5W7dOSTdmLjk71U9v0KKuIHWUjDtNx4QwVtbKdC8XGGtZtd0T4F7afyJ0RSC7nnS+7i3TdnqHz1nOcNbeZNf2O48vMInZ8Jz6juhYph4Rsc5ChCf18GqcV4MocAIP9cs8pMtctk2pLuaLLnAn6YpqBy55Ox/TqOBqefEtnQFSM17P94b0wtpCLHJErIm4rsYIPkV0WYaguxf4eLDnXTThX7HOKJQBFl8a5jvO1HGLlz3nsX/PoihwQGQO02WGFWZJsOkvVZhOcQ24Z9tmdfCzWdjsgO0coTtRp3MxlNHVCYx0d5MBLlkmmLsfj6aTYatngsMezyiHV8YkxKuLpEANvOtZ2ByESzHms62lcD63ESqU4kKXiMjPQvuttA3JUb1HcnBSsDr0MtvlyYIrGOHFVajxchHOmw1ZQ5pyHQX3fzdd1TW3HHRtPBeF8JoxkRUYg6rOL1tEuaPqwW+aTdu6MwGFr0tPCZ7kzK44NzcoXynitBvVWpXWaTALyohHNaTzL1UHeFBWlzticNtRQnHh61nWLZBbatG6m7ZNBrtpe7B9YOjtozZhZuQEu1vxkxx15XlGaG8sI3E5sjYgFcQJix5lIg/P2Yl7iYGa9DdDP0+EufJsfxONk+TB6bqRDxd0KrfS2LC8gSaj28a1gpt8TmFLi2Q3nqtqLSxaEUhimtddyV0leehmmOJ7dw1fG21oQ+60O0xVbzSbbZhggkk2S6pOAbLEsyfPkjeW8ofgEkY9Cxyt9lTzu7Zb6HqAV9BAMbZg0TlFm7SCqfWOxzFdVChf4+o1CBLUI88Qmy5M0wwhsk+pwQOgIFMOKtMCSNM93WoCvVadROgtnCXBSmHzkiK0PHHEBLS/2YEkk329TlOKMHM1TlvrU08l8CmGGmWZSkr0e3ey2COQFsQ9LvIQfuV5IzGeq9hTv4ut1/tc4Pn+7hYx1bK9UQCVoDuKywS9YbfOG+I/Iml+y35t5kNleeWvj/KWJZ70h+fjpd1uU/XDvCbJD0jfMd9Ufb6X+3Ep8g4j4nIy7J/vkPfi9cXNMNzEhuVJyhIt2NJ+OT9nplF3L1CnJVoLNExRBtgkVWhlmTGctOsCQuJsgfkRW76g/eb7LP+LL0l2opvjAB7inqtflD14qKkTlS0XCZ6L46TPog0uctxQW6Vcy3scPmhLxt28eq2eVelg8x//yKLF/l+sLWw9+cJzlhPNCt1yV1PT8l66wImzWw1MuSh6Nf2XgK+cfhfck37GkuJu2WQr//qVajq+XmmlZURamklC7Ch5H6hVneo5h77fSH2au5PCd7Rfor2x/I09UPNwCs3bX9f6/csO7tosF8S7kXbG81Ar8cMXOQ/dhhL8D/HqKM+C7Kf4xktc/xH9KHnL6+Ty8/g8=" xmlns="http://eviware.com/soapui/config"/></con:setting>
            <con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting><con:setting id="com.eviware.soapui.settings.CommonSettings@entitizeProperties">false</con:setting></con:settings>
            <con:endpoint>${#Project#Query_HostName}</con:endpoint>
            <con:request/>
            <con:credentials>
              <con:domain/>
            <con:authType>Global HTTP Settings</con:authType></con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters>
  <con:entry key="DeviceID" value="${#TestCase#DeviceID}"/>
  <con:entry key="AccountID" value="${#TestCase#AccountID}"/>
  <con:entry key="DomainID" value="${#TestCase#DomainID}"/>
</con:parameters>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="DeviceGetRequest_If-None-Match" disabled="true">
        <con:settings/>
        <con:config service="DeviceGet" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/Domain/{DomainID}/Device/{DeviceID}" methodName="DeviceGet_Request" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="DeviceGetRequest_If-None-Match" mediaType="application/xml" sslKeystore="0701_concat.pem" accept="application/xml">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers"><![CDATA[<xml-fragment xmlns:con="http://eviware.com/soapui/config">
  <con:entry key="Authorization" value="SAML2 assertion=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"/>
  <con:entry key="If-None-Match" value="&quot;E45DB009B745906CE0401F0A059905A4&quot;"/>
</xml-fragment>]]></con:setting>
            <con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting><con:setting id="com.eviware.soapui.settings.CommonSettings@entitizeProperties">false</con:setting></con:settings>
            <con:endpoint>https://qa.q.uvvu.com:7001</con:endpoint>
            <con:request/>
            <con:credentials>
              <con:domain/>
            <con:authType>Global HTTP Settings</con:authType></con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters>
  <con:entry key="DeviceID" value="${#TestCase#DeviceID}"/>
  <con:entry key="AccountID" value="${#TestCase#AccountID}"/>
  <con:entry key="DomainID" value="${#TestCase#DomainID}"/>
</con:parameters>
          </con:restRequest>
        </con:config>
      </con:testStep><con:testStep type="restrequest" name="DeviceGetRequest_If-Modified-Since" disabled="true">
        <con:settings/>
        <con:config service="DeviceGet" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/Domain/{DomainID}/Device/{DeviceID}" methodName="DeviceGet_Request" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="DeviceGetRequest_If-Modified-Since" mediaType="application/xml" sslKeystore="0701_concat.pem" accept="application/xml">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="If-Modified-Since" value="Tue, 20 Aug 2013 08:18:27 GMT"/>
  &lt;con:entry key="Authorization" value="SAML2 assertion=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"/>
&lt;/xml-fragment></con:setting>
            <con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting><con:setting id="com.eviware.soapui.settings.CommonSettings@entitizeProperties">false</con:setting></con:settings>
            <con:endpoint>https://qa.q.uvvu.com:7001</con:endpoint>
            <con:request/>
            <con:credentials>
              <con:domain/>
            <con:authType>Global HTTP Settings</con:authType></con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters>
  <con:entry key="DeviceID" value="${#TestCase#DeviceID}"/>
  <con:entry key="AccountID" value="${#TestCase#AccountID}"/>
  <con:entry key="DomainID" value="${#TestCase#DomainID}"/>
</con:parameters>
          </con:restRequest>
        </con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>TCaseName</con:name>
          <con:value>TC_DECE_30002 -  DeviceGet - PERM - SecurityRoleValid - Invocation with DECE_CS</con:value>
        </con:property>
        <con:property>
          <con:name>TSuiteName</con:name>
          <con:value>DeviceGet_Invocation_ByPermission_TestCases_R4</con:value>
        </con:property>
        <con:property>
          <con:name>AccountID</con:name>
          <con:value>urn:dece:accountid:org:dece:DEF5738E543A633AE0401F0A05990CC0</con:value>
        </con:property>
        <con:property>
          <con:name>FeedRTDReq</con:name>
          <con:value>OK</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>0701</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceID</con:name>
          <con:value>urn:dece:deviceid:org:dece:DEF585C6AEA11471E0401F0A07994634</con:value>
        </con:property>
        <con:property>
          <con:name>DomainID</con:name>
          <con:value>urn:dece:domainid:dece:DEF587A47AF1508CE0401F0A07994D03</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Extract DeviceGet Information" searchProperties="true" id="1fb4c13b-8334-4bdb-9c4b-90cdf7ab2d17">
      <con:settings/>
      <con:testStep type="groovy" name="Extract DeviceGet Request XML">
        <con:settings/>
        <con:config>
          <script>import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.teststeps.WsdlResponseMessageExchange

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def callingTSuiteName = testCase.getPropertyValue("TSuiteName");
def callingTCaseName = testCase.getPropertyValue("TCaseName");

def callingTCase = testProject.getTestSuiteByName(callingTSuiteName).getTestCaseByName(callingTCaseName);

def RT_RequestBody = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request").getTestStepByName("DeviceGetRequest").testRequest.response.rawRequestData;

def rawData = new String(RT_RequestBody);
 
testCase.setPropertyValue("DeviceGetReqXml",rawData.tokenize('\n').last());

log.info testCase.getPropertyValue("DeviceGetReqXml");
callingTCase.setPropertyValue("DeviceGetReqXml",testCase.getPropertyValue("DeviceGetReqXml"));</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract Device Info from the Response">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import dbUtils.dbUtils;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def callingTSuiteName = testCase.getPropertyValue("TSuiteName");
def callingTCaseName = testCase.getPropertyValue("TCaseName");

def callingTCase = testProject.getTestSuiteByName(callingTSuiteName).getTestCaseByName(callingTCaseName)

// Http Header
def DeviceGetResHeader = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request").getTestStepByName('DeviceGetRequest').httpRequest.response.getResponseHeaders(); 
def DeviceGetResXml = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request").getTestStepByName('DeviceGetRequest').httpRequest.response.getContentAsString();
def DeviceGetResTime = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request").getTestStepByName('DeviceGetRequest').httpRequest.response.getTimeTaken();
def DeviceGetResHttpStatus = DeviceGetResHeader.getAt("#status#");

testCase.setPropertyValue("DeviceGetResXml",DeviceGetResXml);
testCase.setPropertyValue("DeviceGetResTime",DeviceGetResTime.toString());

// DeviceGet Req Response Object type

def Val_DeviceGetResXml =  new XmlSlurper().parseText(testCase.getPropertyValue("DeviceGetResXml"));

DeviceID = (Val_DeviceGetResXml.@DeviceID).toString();

testCase.setPropertyValue("DeviceID",DeviceID.toString());

if(DeviceGetResHttpStatus.toString() == "HTTP/1.1 200 OK"){

// Evaluate DeviceGet Success &amp; Failure
log.info DeviceID;
log.info "Response Code : ${DeviceGetResHttpStatus.toString()}";
log.info "Response Time : $DeviceGetResTime:ms";

// Returns Rights Response Information
callingTCase.setPropertyValue("DeviceGetResXml",testCase.getPropertyValue("DeviceGetResXml"));
callingTCase.setPropertyValue("DeviceGetResTime",testCase.getPropertyValue("DeviceGetResTime"));
callingTCase.setPropertyValue("DeviceID",testCase.getPropertyValue("DeviceID"));

}
else{
log.info " DeviceGet Get failed - [ $DeviceGetResHttpStatus]"
log.info " Error Code Validation +++++ "
}</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>TCaseName</con:name>
          <con:value>TC_DECE_00001_DeviceGet_Retailer_FUNC_with_ValidData</con:value>
        </con:property>
        <con:property>
          <con:name>TSuiteName</con:name>
          <con:value>DeviceGet  Retailer Test Cases_R4</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetReqXml</con:name>
          <con:value>User-Agent: Apache-HttpClient/4.1.1 (java 1.5)
</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResXml</con:name>
          <con:value><![CDATA[<Device IsLegacy="false" DeviceID="urn:dece:deviceid:org:dece:DEF585C6AEA11471E0401F0A07994634" xmlns="http://www.decellc.org/schema/2013/06/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v1.2/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <DisplayName>DeviceInfoDisplayName34</DisplayName>
   <Manufacturer>DeviceInfoManufacturer28</Manufacturer>
   <Model>DeviceInfoModel48</Model>
   <Brand Language="en-US">DeviceInfoBrand40</Brand>
   <SerialNo>1127431</SerialNo>
   <Image MimeType="MimeType1" Width="50" Height="50">https://qa.uvvu.com:7001/ssp/image?type=image&amp;imageId=DEF585C6AEA11471E0401F0A07994634</Image>
   <LicAppID>urn:dece:licappid:org:dece:DEF585C6AEA41471E0401F0A07994634</LicAppID>
   <ResourceStatus>
      <Current CreatedBy="urn:dece:org:org:dece:device" CreationDate="2013-06-12T12:55:36.204Z">
         <Value>urn:dece:type:status:pending</Value>
         <Description>Device Created</Description>
      </Current>
   </ResourceStatus>
</Device>]]></con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResTime</con:name>
          <con:value>2186</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceID</con:name>
          <con:value>urn:dece:deviceid:org:dece:DEF585C6AEA11471E0401F0A07994634</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DeviceGet Response Validation" searchProperties="true" id="054f0a49-45b7-45cd-b2ae-fa2b6f481b9d">
      <con:settings/>
      <con:testStep type="groovy" name="ValidateDeviceGet RESPONSE">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import dbUtils.dbNode;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//testCase.setPropertyValue("errorStatusCode",null);
//testCase.setPropertyValue("errorReason",null);
//testCase.setPropertyValue("errorID",null);
def ValerrorID;
def Resp_ErrorID;


def callTSuitename = testCase.getPropertyValue("TSuiteName");
def callTCasename = testCase.getPropertyValue("TCaseName");

def CallingTCase = testProject.getTestSuiteByName(callTSuitename).getTestCaseByName(callTCasename);

testCase.setPropertyValue("nodeid",CallingTCase.getPropertyValue("nodeid"));
testCase.setPropertyValue("DeviceDeceDomainID",CallingTCase.getPropertyValue("DeviceDeceDomainID"));
testCase.setPropertyValue("DeviceID",CallingTCase.getPropertyValue("DeviceID"));
testCase.setPropertyValue("Accountid",CallingTCase.getPropertyValue("Accountid"));
testCase.setPropertyValue("expectErrType",CallingTCase.getPropertyValue("expectErrType"));
testCase.setPropertyValue("ErrorDataVal",CallingTCase.getPropertyValue("ErrorDataVal"));

myNode = new dbNode(log,"LP1");
Nodeid = testCase.getPropertyValue("nodeid");
myNodeRole = myNode.nodeGetRole(Nodeid);
log.info myNodeRole;

def DeceUrl   = testProject.getPropertyValue("AppHost");
def DecePort  = testProject.getPropertyValue("AppPort");
//def urnacct   = testProject.getPropertyValue("urnaccount");
//def urnRights = testProject.getPropertyValue("urnRights");
//def nodeacctid  = testCase.getPropertyValue("nodeaccountid");
def ResponseXML = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request").getTestStepByName("DeviceGetRequest").getPropertyValue("ResponseAsXml");
def RT_ResponseHeader = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request").getTestStepByName("DeviceGetRequest").httpRequest.response.getResponseHeaders();

def accountid  = testCase.getPropertyValue("Accountid");
def errorRespType = testCase.getPropertyValue("expectErrType");
def Resp_HTTPstatus = RT_ResponseHeader.getAt("#status#");
def Resp_HTTPconnection = RT_ResponseHeader.getAt("Connection");
def Resp_HTTPcontenttype = RT_ResponseHeader.getAt("Content-Type");
def Resp_HTTPcontentlength = RT_ResponseHeader.getAt("Content-Length");
def Resp_HTTPetag = RT_ResponseHeader.getAt("ETag");
def Resp_HTTPlastModified = RT_ResponseHeader.getAt("Last-Modified");
if(errorRespType=="SUCCESS"){
testCase.setPropertyValue("ETagPrior",CallingTCase.getPropertyValue("ETag"));
CallingTCase.setPropertyValue("ETag",Resp_HTTPetag[0].toString());
CallingTCase.setPropertyValue("Last-Modified",Resp_HTTPlastModified[0].toString());
}
boolean errorIDFlag = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean processXMLFlag  = true;
boolean Responsebodynull = false;

//def Resp_ErrorID = "";
def Resp_errorReason = "";
def Resp_errorLink  = "";
def Resp_errorHost  = "";

//  Expected Http Response
def expectHTTPstatus = "HTTP/1.1 403 Forbidden";
def expectHTTPconnection  = "Keep-Alive";
def expectHTTPcontenttype = "application/xml;charset=UTF-8";

log.info expectHTTPstatus.toString();

if (DeceUrl.length() == 0) {
	Resp_errorHost = "http://error.decellc.org";
} else {
	Resp_errorHost = "https://qa.q.uvvu.com:$DecePort";
}
this.log.info "errorRespType[$errorRespType]";


switch (errorRespType) {
	
	case "SUCCESS":
		expectHTTPstatus = "HTTP/1.1 200 OK";
		if ( myNodeRole.toString() == 'urn:dece:role:retailer' || myNodeRole.toString() == 'urn:dece:role:retailer:customersupport'){
               
               	log.info "Valid DeviceInfo Returned  for Node[$Nodeid] - NodeRole[$myNodeRole] : [$errorRespType]";
		}
              else {

              	 log.info " InValid Response Returned for  Node[$Nodeid] - NodeRole[$myNodeRole]- $myNodeRole : [$errorRespType]";
              }		
		processXMLFlag = false;
	break;
	
	case "ACCOUNT_NOT_ACTIVE":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:AccountNotActive";
	QAResp_ErrorID = "AccountNotActive"
	ValerrorID = 1;
	//Resp_errorReason = "Account is not active";
	Resp_errorLink   = "$Resp_errorHost/rest/1/07/error/en/ErrorList.html#AccountNotActive";
	break;
	case "API_NOT_AUTH":
	QAResp_ErrorID = "NodeRoleInvalid"
	Resp_ErrorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
	Resp_errorReason = "The API call is not authorized.";
	expectHTTPcontenttype = "application/xml;charset=UTF-8";
	Resp_errorLink   = "$Resp_errorHost/rest/1/07/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "DEVICEID_NOT_VALID":
	Resp_ErrorID   = "urn:dece:errorid:org:dece:DeviceIdInvalid";
	QAResp_ErrorID = "BadRequestDeviceIdInvalid";
	ValerrorID = 1;
	Resp_errorLink   = "$Resp_errorHost/rest/1/07/error/en/ErrorList.html#DeviceIdInvalid";
	break;
	case "Policy:ManageAccountConsentRequired":
	
	Resp_ErrorID   = "urn:dece:errorid:org:dece:Policy:ManageAccountConsentRequired";
	QAResp_ErrorID = "Policy:ManageAccountConsentRequired";
	ValerrorID = 0;
	Resp_errorReason = "The setting of the ManageAccountConsent policy prevents the requested action from being completed.";
	Resp_errorLink   = "$Resp_errorHost/rest/1/07/error/en/ErrorList.html#Policy:ManageAccountConsentRequired";
	break;

	case "DEVICEID_NOT_FOUND":
	Resp_ErrorID   = "urn:dece:errorid:org:dece:DeviceNotFound";
	QAResp_ErrorID = "DeviceNotFound";
	ValerrorID = 1;
	Resp_errorReason = "ContentID is not found";
	Resp_errorLink   = "$Resp_errorHost/rest/1/07/error/en/ErrorList.html#DeviceNotFound";
	break;

	case "CONTENT_NOT_FOUND":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:ContentIDNotFound";
	ValerrorID = 1;
	//Resp_errorReason = "ContentID is not found";
	//expectHTTPstatus = "HTTP/1.1 404 Not Found";
	Resp_errorLink   = "$Resp_errorHost/rest/1/07/error/en/ErrorList.html#ContentIDNotFound";
	break;
	
	case "CONTENT_NOT_VALID":
	Resp_ErrorID   = "urn:dece:errorid:org:dece:ContentIDNotValid";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "ContentID is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/1/07/error/en/ErrorList.html#ContentIDNotValid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
		expectHTTPcontenttype = "application/xml;charset=UTF-8";
	break;
	
	case "LOGICAL_ASSET_NOT_ACTIVE":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:AssetLogicalIDNotActive";
	ValerrorID  = 1;
	//Resp_errorReason = "The AssetLogicalID (ALID) is not active.";
	Resp_errorLink   = "$Resp_errorHost/rest/1/07/error/en/ErrorList.html#AssetLogicalIDNotActive";
	break;

	case "Node_status_inactive":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
			expectHTTPcontenttype = "application/xml;charset=UTF-8";
	break;
	
	case "USER_NOT_MATCH_TOKEN":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:UserIdUnmatched";
	ValerrorID = 1;
	//Resp_errorReason = "User ID does not match security token";
	Resp_errorLink   = "$Resp_errorHost/rest/1/07/error/en/ErrorList.html#UserIdUnmatched";
	
	break;
	
	case "USER_NOT_ACTIVE":
	Resp_ErrorID = "urn:dece:errorid:org:dece:UserNotActive";
	QAResp_ErrorID = "UserNotActive"
	ValerrorID = 1;
	//Resp_errorReason = "User is not active";
	Resp_errorLink   = "$Resp_errorHost/rest/1/07/error/en/ErrorList.html#UserNotActive";
	
	break;
		
	case "ACCOUNTID NOT MATCH":
	expectHTTPstatus = "HTTP/1.1 403 Forbidden";
	Resp_ErrorID     = "urn:dece:errorid:org:dece:AccountIdUnmatched";
	QAResp_ErrorID = "AccountIdUnmatched"
	//Resp_errorReason = "Request Account ID not match";
	ValerrorID  = 1;
	Resp_errorLink   = "$Resp_errorHost/rest/1/07/error/en/ErrorList.html#AccountIdUnmatched";
	break;

	case "ACCOUNT_INVALID":
	Resp_ErrorID = "urn:dece:errorid:org:dece:AccountIdNotValid";
	ValerrorID = 1;
	Resp_errorLink  = "$Resp_errorHost/rest/1/07/error/en/ErrorList.html#AccountIdNotValid";
	break;

			
	case "ALID NOT VALID":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:AssetLogicalIDNotValid";
	ValerrorID  = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "AssetLogicalID is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/1/07/error/en/ErrorList.html#AssetLogicalIDNotValid";
	
	break;
	
	case "ALID NOT ACTIVE":
	//expectHTTPstatus = "HTTP/1.1 403 Forbidden";
	Resp_ErrorID     = "urn:dece:errorid:org:dece:AssetLogicalIDNotActive";
	ValerrorID = 1;
	//Resp_errorReason = "The AssetLogicalID (ALID) is not active.";
	Resp_errorLink   = "$Resp_errorHost/rest/1/07/error/en/ErrorList.html#AssetLogicalIDNotActive";
	
	break;
	
	case "ALID NOT FOUND":
	Resp_ErrorID   = "urn:dece:errorid:org:dece:AssetLogicalIDNotFound";
	//expectHTTPstatus = "HTTP/1.1 404 Not Found";
	ValerrorID = 1;
	//Resp_errorReason = "The supplied AssetLogicalID (ALID) was not found.";
	Resp_errorLink   = "$Resp_errorHost/rest/1/07/error/en/ErrorList.html#AssetLogicalIDNotFound";
	
	break;

	case "BUNDLEID NOT VALID":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:BundleIDNotValid";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "The identified bundle is invalid.";
	Resp_errorLink   = "$Resp_errorHost/rest/1/07/error/en/ErrorList.html#BundleIDNotValid";
	
	break;
	case "BUNDLEID NOT FOUND":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:BundleIDNotFound";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 404 Not Found";
	//Resp_errorReason = "BundleID is not found";
	Resp_errorLink   = "$Resp_errorHost/rest/1/07/error/en/ErrorList.html#BundleIDNotFound";
	
	break;
	
	case "INVALID_DISPLAY_LANGUAGE":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:DisplayNameLanguageNotValid";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "DisplayNameLanguage is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/1/07/error/en/ErrorList.html#DisplayNameLanguageNotValid";
	
	break;

	case "INVALID_DM_REMAIN":
		expectHTTPstatus = "HTTP/1.1 400 Bad Request";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
		expectHTTPcontenttype = "application/xml"
	break;
	
	case "DMR_LIMIT_EXCEEDED":
	Resp_ErrorID  = "urn:dece:errorid:org:dece:DiscreteMediaLimitExceeded";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "ContentProfile is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/1/07/error/en/ErrorList.html#DiscreteMediaLimitExceeded";
	break;
	
	case "CONTENTPROFILE_NOT_VALID":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:ContentProfileNotValid";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "ContentProfile is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/1/07/error/en/ErrorList.html#ContentProfileNotValid";
	break;

	case "FULLFILLMENTLOC_NOT_VALID":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:FulfillmentLocNotValid";
	ValerrorID = 1;
	//Resp_errorReason = "FulfillmentLoc is not valid";
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	Resp_errorLink   = "$Resp_errorHost/rest/1/07/error/en/ErrorList.html#FulfillmentLocNotValid";
	break;
	
	case "FULLFILLMENTLOC_MISSING":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	expectHTTPcontenttype = "application/xml"
	processXMLFlag  = false;
	errorIDFlag     = false;
	errorReasonFlag = false;
	errorLinkFlag   = false;
	break;
	
	case "STANDARD_DEF_MISSING":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:StandardDefinitionMissing";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "StandardDefinition is missing";
	Resp_errorLink   = "$Resp_errorHost/rest/1/07/error/en/ErrorList.html#StandardDefinitionMissing";
	break;

	case "PURCHASE_ACCOUNTID_INVALID":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:PurchaseAccountNotValid";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "PurchaseAccount is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/1/07/error/en/ErrorList.html#PurchaseAccountNotValid";
	break;
	case "PURCHASE_USERID_INVALID":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:PurchaseUserNotValid";
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "PurchaseUser is not valid";
	ValerrorID = 1;
	Resp_errorLink   = "$Resp_errorHost/rest/1/07/error/en/ErrorList.html#PurchaseUserNotValid";
	break;
	case "PURCHASE_NODEID_INVALID":
	Resp_ErrorID    = "urn:dece:errorid:org:dece:PurchaseNodeIDNotValid";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "PurchaseNodeID is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/1/07/error/en/ErrorList.html#PurchaseNodeIDNotValid";
	break;
	
	case "PURCHASE_TIME_INVALID":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	expectHTTPcontenttype = "application/xml"
	processXMLFlag  = false;
	errorIDFlag     = false;
	errorReasonFlag = false;
	errorLinkFlag   = false;
	break;
	
	case "SCHEMA_VALIDATION_ERROR":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	expectHTTPcontenttype = "application/xml"
	processXMLFlag  = false;
	errorIDFlag     = false;
	errorReasonFlag = false;
	errorLinkFlag   = false;
	break;
	case "LICACQBASE_LOC_INVALID":
	Resp_ErrorID     = "urn:dece:errorid:org:dece:LicenseAcqBaseLocNotValid";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "LicenseAcqBaseLoc is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/1/07/error/en/ErrorList.html#LicenseAcqBaseLocNotValid";
	break;
	case "LICACQBASE_LOC_MISSING":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	expectHTTPcontenttype = "application/xml"
	processXMLFlag  = false;
	errorIDFlag     = false;
	errorReasonFlag = false;
	errorLinkFlag   = false;
	break;

	case "RT_PP_DOWNLOAD/STREAM_INVALID":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	expectHTTPcontenttype = "application/xml"
	processXMLFlag  = false;
	errorIDFlag     = false;
	errorReasonFlag = false;
	errorLinkFlag   = false;
	break;
	
	case "BUNDLEID NOT ACTIVE":
	Resp_ErrorID   = "urn:dece:errorid:org:dece:BundleIDNotActive";
	ValerrorID = 1;
	//expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	//Resp_errorReason = "LicenseAcqBaseLoc is not valid";
	Resp_errorLink   = "$Resp_errorHost/rest/1/07/error/en/ErrorList.html#BundleIDNotActive";

	case "RIGHTSTOKEN_NOT_FOUND":
	Resp_ErrorID  = "urn:dece:errorid:org:dece:RightsTokenNotFound";
	ValerrorID = 1;
	//Resp_errorReason = "User ID does not match security token";
	Resp_errorLink   = "$Resp_errorHost/rest/1/07/error/en/ErrorList.html#RightsTokenNotFound";
	break;

	case "RIGHTSTOKEN_INVALID":
	Resp_ErrorID  = "urn:dece:errorid:org:dece:RightsTokenIDNotValid";
	ValerrorID = 1;
	//Resp_errorReason = "User ID does not match security token";
	Resp_errorLink   = "$Resp_errorHost/rest/1/07/error/en/ErrorList.html#RightsTokenIDNotValid";
	
	break;
	
	case "RT_UPDATE_NOT_ALLOWED":
	Resp_ErrorID  = "urn:dece:errorid:org:dece:RightsTokenStatusChangeNotAllowed";
	ValerrorID = 1;
	//Resp_errorReason = "User ID does not match security token";
	Resp_errorLink   = "$Resp_errorHost/rest/1/07/error/en/ErrorList.html#RightsTokenStatusChangeNotAllowed";
	break;

	case "USER_NOT_ACTIVE":
	Resp_ErrorID  = "urn:dece:errorid:org:dece:UserNotActive";
	ValerrorID = 1;
	//Resp_errorReason = "User ID does not match security token";
	Resp_errorLink   = "$Resp_errorHost/rest/1/07/error/en/ErrorList.html#UserNotActive";
	break;

	case "PURCHASE_INFO_MISSING":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	expectHTTPcontenttype = "application/xml"
	processXMLFlag  = false;
	errorIDFlag     = false;
	errorReasonFlag = false;
	errorLinkFlag   = false;
	break;

	case "FULLFILLMENT_METHOD_INVALID":
	Resp_ErrorID = "urn:dece:errorid:org:dece:DiscreteMediaFulfillmentMethodNotValid";
	ValerrorID = 1;
	Resp_errorLink   = "$Resp_errorHost/rest/1/07/error/en/ErrorList.html#DiscreteMediaFulfillmentMethodNotValid";
	break;


	case "ALID_UPDATE_NOTALLOWED":
	Resp_ErrorID = "urn:dece:errorid:org:dece:LogicalIDUpdationNotAllowed";
	ValerrorID = 1;
	Resp_errorLink  = "$Resp_errorHost/rest/1/07/error/en/ErrorList.html#LogicalIDUpdationNotAllowed";
	break;

	case "CONTENTID_UPDATE_NOTALLOWED":
	Resp_ErrorID = "urn:dece:errorid:org:dece:ContentIDUpdationNotAllowed";
	ValerrorID = 1;
	Resp_errorLink  = "$Resp_errorHost/rest/1/07/error/en/ErrorList.html#ContentIDUpdationNotAllowed";
	break;

	case "SOLDAS_UPDATE_NOTALLOWED":
	Resp_ErrorID = "urn:dece:errorid:org:dece:RightsSoldAsUpdationNotAllowed";
	ValerrorID = 1;
	Resp_errorLink  = "$Resp_errorHost/rest/1/07/error/en/ErrorList.html#RightsSoldAsUpdationNotAllowed";
	break;

	case "SOLDAS_DISPLAY_LANG_UPDATE_NOTALLOWED":
	Resp_ErrorID = "urn:dece:errorid:org:dece:RightsSoldAsUpdationNotAllowed";
	ValerrorID = 1;
	Resp_errorLink  = "$Resp_errorHost/rest/1/07/error/en/ErrorList.html#RightsSoldAsUpdationNotAllowed";
	break;

	case "RIGHTSTOKEN_DELETE_NOTALLOWED":
	Resp_ErrorID = "urn:dece:errorid:org:dece:RightsTokenAlreadyDeleted";
	ValerrorID = 1;
	Resp_errorLink  = "$Resp_errorHost/rest/1/07/error/en/ErrorList.html#RightsTokenAlreadyDeleted";
	break;

	case "NODE_UNAUTHORIZED":
	Resp_ErrorID = "urn:dece:errorid:org:dece:NodeUnauthorizedToActOnAccount";
	QAResp_ErrorID = "NodeUnauthorizedToActOnAccount";
	ValerrorID = 1;
	Resp_errorLink  = "$Resp_errorHost/rest/1/07/error/en/ErrorList.html#NodeUnauthorizedToActOnAccount";
	break;
	
 }
log.info ValerrorID;
log.info "here "+Resp_ErrorID;

testCase.setPropertyValue("errorID",Resp_ErrorID.toString());

log.info "From ValidateDeviceGetErrors ---" + Resp_ErrorID;
if(ValerrorID.toString() == "1") {

testCase.setPropertyValue("QAerrorID",QAResp_ErrorID.toString());
	
def RTErrors = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Error Response Validation");

RTErrors.setPropertyValue("TCaseName",testCase.getName());
RTErrors.setPropertyValue("TSuiteName",testSuite.getName());

WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTErrors, null );

TSrunnerRTC.runTestStepByName("Validate DeviceGet Errors");

assert TSrunnerRTC.status == Status.INITIALIZED;

Resp_errorReason = testCase.getPropertyValue("errorReason");
expectHTTPstatus = testCase.getPropertyValue("errorStatusCode");

log.info Resp_errorReason.toString();
}

// HTTP header status

this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + Resp_HTTPstatus;
assert Resp_HTTPstatus[0] == expectHTTPstatus;

// Connection
this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + Resp_HTTPconnection;
assert Resp_HTTPconnection[0] == expectHTTPconnection;

//Content-Length
if(errorRespType!= "SUCCESS")
{
log.info "Content-Length:"+ Resp_HTTPcontentlength;
assert Resp_HTTPcontentlength[0].toInteger() > 0; 
}
//Content-Type

log.info "Content-Type:" + Resp_HTTPcontenttype;
assert Resp_HTTPcontenttype[0] == expectHTTPcontenttype;

//XML body should be null test
if (Responsebodynull) {
assert ResponseXML == null;
}

//this.log.info "ResponseXML Length [" + ResponseXML.length() + "] processXMLFlag[$processXMLFlag]";

if (ResponseXML != null &amp;&amp; processXMLFlag == true) {
	
	def Resp_XML = new XmlSlurper().parseText(ResponseXML);

// Verify response sizes...
	
     ErrorDataVal = testCase.getPropertyValue("ErrorDataVal");

	assert Resp_XML.Error.size() == ErrorDataVal.toInteger();
	assert Resp_XML.Error.Reason.size() ==  ErrorDataVal.toInteger();
	assert Resp_XML.Error.OriginalRequest.size() ==  ErrorDataVal.toInteger();
	assert Resp_XML.Error.ErrorLink.size() ==  ErrorDataVal.toInteger();
		
// ErrorCode
	log.info "Received ErrorID [" + Resp_XML.Error[0].@ErrorID.toString() + "] Exp[$Resp_ErrorID]";
	assert Resp_XML.Error[0].@ErrorID.toString() == Resp_ErrorID;
	
// ErrorReason
      log.info "ErrorReason Received [" + Resp_XML.Error[0].Reason.toString() + "] Exp[$Resp_errorReason]";
	assert Resp_XML.Error[0].Reason.toString() == Resp_errorReason;

// ErrorLink
	log.info "ErrorLink [" + Resp_XML.Error[0].ErrorLink.toString() + "] errorLink[$Resp_errorLink]";
	assert Resp_XML.Error[0].ErrorLink.toString() == Resp_errorLink;
}</script></con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>0701</con:value>
        </con:property>
        <con:property>
          <con:name>TCaseName</con:name>
          <con:value>TC_DECE_00001_DeviceGet_Retailer_FUNC_with_ValidData</con:value>
        </con:property>
        <con:property>
          <con:name>TSuiteName</con:name>
          <con:value>DeviceGet  Retailer Test Cases_R4</con:value>
        </con:property>
        <con:property>
          <con:name>Accountid</con:name>
          <con:value>urn:dece:accountid:org:dece:DEF5738E543A633AE0401F0A05990CC0</con:value>
        </con:property>
        <con:property>
          <con:name>ErrorDataVal</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>errorStatusCode</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">HTTP/1.1 401 Unauthorized</con:value>
        </con:property>
        <con:property>
          <con:name>errorReason</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">The request is not authorized.</con:value>
        </con:property>
        
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceID</con:name>
          <con:value>urn:dece:deviceid:org:dece:DEF585C6AEA11471E0401F0A07994634</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceDeceDomainID</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
      <con:property><con:name>ResErrorID</con:name><con:value>urn:dece:errorid:org:dece:AccountIdUnmatched</con:value></con:property><con:property><con:name>errorID</con:name><con:value>null</con:value></con:property><con:property><con:name>QAerrorID</con:name><con:value>NodeUnauthorizedToActOnAccount</con:value></con:property><con:property><con:name>ETagPrior</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">"E9799F8CD0B5A85FE0401F0A05991171:F0246DC7"</con:value></con:property></con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DeviceGet Data Validation" searchProperties="true" id="40eaafe9-c35a-4793-85a5-9ff1d9872331">
      <con:settings/>
      <con:testStep type="groovy" name="Extract DB results for RightsLocker Data GET" disabled="true">
        <con:settings/>
        <con:config>
          <script>import dbUtils.dbRightsToken;
import dbUtils.dbUtils;
import dbUtils.dbSAMLAssertion;
import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.teststeps.WsdlResponseMessageExchange

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

mydbRights = new dbRightsToken(log,"LP1");

def callTSuitename = testCase.getPropertyValue("TSuiteName");
def callTCasename = testCase.getPropertyValue("TCaseName");

def CallingTCase = testProject.getTestSuiteByName(callTSuitename).getTestCaseByName(callTCasename);
testCase.setPropertyValue("RightsResXml",CallingTCase.getPropertyValue("RightsResXml"));

//getRequestContentAsXml

testCase.setPropertyValue("rightstokenid",CallingTCase.getPropertyValue("rightstokenid"));
testCase.setPropertyValue("DBrightstokenid",CallingTCase.getPropertyValue("DBrightstokenid"));
testCase.setPropertyValue("Accountid",CallingTCase.getPropertyValue("Accountid"));


// Fetch RightsToken info from RIGHTS_TOKEN table
RT_Data = mydbRights.rightstokenGetRow(testCase.getPropertyValue("DBrightstokenid"));
RT_Data2 = mydbRights.rightstokenSoldAsGetRow(testCase.getPropertyValue("DBrightstokenid"));
RT_Data3 = mydbRights.rightstokenPMPPGetRow(testCase.getPropertyValue("DBrightstokenid"));
RT_Data4 = mydbRights.rightstokenFFLocGetRow(testCase.getPropertyValue("DBrightstokenid"));
RT_Data5 = mydbRights.rightstokenStatusHistoryGetRow(testCase.getPropertyValue("DBrightstokenid"));

testCase.setPropertyValue("DbResultRTXml",RT_Data.toString());
testCase.setPropertyValue("DbResultRT-SoldAsXml",RT_Data2.toString());
testCase.setPropertyValue("DbResultRT-PMPPXml",RT_Data3.toString());
testCase.setPropertyValue("DbResultRT-FFLocXml",RT_Data4.toString());</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Data Validation DB - RightsLockerDataGet Response" disabled="true">
        <con:settings/>
        <con:config>
          <script>import dbUtils.dbRightsToken;
import dbUtils.dbUtils;
import dbUtils.dbSAMLAssertion;
import groovy.*
import groovy.xml.*
import groovy.util.*
import groovy.time.*
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.teststeps.WsdlResponseMessageExchange

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

// Assert RightsToken Information Expected &amp; Actual 
def expectRTG_PPContentProfile  = new ArrayList();
def expectRTG_PPDMR  = new ArrayList();
def expectRTG_PPCanDownload  = new ArrayList();
def expectRTG_PPCanStream  = new ArrayList();
def expectRTG_PPDMProfile  = new ArrayList();
def expectRTG_LicAcqBaseLoc = new ArrayList();
def expectRTG_FFWebLoc_Location = new ArrayList();
def expectRTG_FFWebLoc_Pref = new ArrayList();
def expectRTG_FFManifestLoc_Location = new ArrayList();
def expectRTG_FFManifestLoc_Pref = new ArrayList();
def actRTG_PPContentProfile  = new ArrayList();
def actRTG_PPDMR  = new ArrayList();
def actRTG_PPCanDownload  = new ArrayList();
def actRTG_PPCanStream  = new ArrayList();
def actRTG_PPDMProfile  = new ArrayList();
def actRTG_LicAcqBaseLoc = new ArrayList();
def actRTG_FFWebLoc_Location = new ArrayList();
def actRTG_FFWebLoc_Pref = new ArrayList();
def actRTG_FFManifestLoc_Location = new ArrayList();
def actRTG_FFManifestLoc_Pref = new ArrayList();


def Val_DbResultRTXml = new XmlSlurper().parseText(testCase.getPropertyValue("DbResultRTXml"));
def Val_DbResultRTSoldAsXml = new XmlSlurper().parseText(testCase.getPropertyValue("DbResultRT-SoldAsXml"));
def Val_DbResultRTPMPPXml = new XmlSlurper().parseText(testCase.getPropertyValue("DbResultRT-PMPPXml"));
def Val_DbResultFFLocXml = new XmlSlurper().parseText(testCase.getPropertyValue("DbResultRT-FFLocXml"));

def PMPPSize =  Val_DbResultRTPMPPXml.ResultSet.Row.size();
def LicAcqSize = Val_DbResultRTXml.ResultSet.Row.LICENSE_ACQ_BASE_LOC.size();
//def FFWebLocSize = Val_DbResultFFLocXml.ResultSet.Row.findAll{ it.TYPE == 'Web'}.size();
//def FFManifestSize = Val_DbResultFFLocXml.ResultSet.Row.findAll{ it.TYPE == 'Manifest'}.size();

def rcFFWebloc = Val_DbResultFFLocXml.ResultSet.Row.findAll{ it.TYPE == 'Web'}.@rowNumber.collect{ it.text() }
def rcFFManifest = Val_DbResultFFLocXml.ResultSet.Row.findAll{ it.TYPE == 'Manifest'}.@rowNumber.collect{ it.text() }
def rcFFWeblocSize = rcFFWebloc.size();
def rcFFManifestSize = rcFFManifest.size();

RTObjType = testCase.getPropertyValue("RTObjType");


switch (RTObjType) {
	
	case "RightsTokenFull":

		// Rights Token 
		expectRTG_Accountid = testCase.getPropertyValue("Accountid");
		expectRTG_Lockerid = "urn:dece:rightslockerid:org:dece:" + Val_DbResultRTXml.ResultSet.Row.RIGHTS_LOCKER_OID;
		expectRTG_RightsTokenID = testCase.getPropertyValue("rightstokenid");
		expectRTG_ALID = Val_DbResultRTXml.ResultSet.Row.ALID;
		expectRTG_ContentID = Val_DbResultRTXml.ResultSet.Row.CONTENT_ID;

		// Rights SoldAs 
		
		expectRTG_SoldAs_Lang = Val_DbResultRTSoldAsXml.ResultSet.Row.LANGUAGE_ID;
		expectRTG_SoldAs_PRODUCT_ID = Val_DbResultRTSoldAsXml.ResultSet.Row.PRODUCT_ID;
		expectRTG_SoldAs_DisplayName = Val_DbResultRTSoldAsXml.ResultSet.Row.DISPLAY_NAME;
		expectRTG_SoldAs_ContentID = Val_DbResultRTSoldAsXml.ResultSet.Row.CONTENT_ID;
		expectRTG_SoldAs_BUNDLE_ID = Val_DbResultRTSoldAsXml.ResultSet.Row.BUNDLE_ID;

		
		
		// Rights Purchase Media Purchase Profiles
		
		for ( i in 0..PMPPSize-1 ){
	
		expectRTG_PPContentProfile += ("urn:dece:type:mediaprofile:" + Val_DbResultRTPMPPXml.ResultSet.Row.PURCHASED_CONTENT_PROFILE[i]).toString();
		expectRTG_PPDMR += (Val_DbResultRTPMPPXml.ResultSet.Row.DISCRETE_MEDIA_RIGHTS_REMAIN[i]).toString();
		//expectRTG_PPDMProfile = 
		expectRTG_PPCanDownload += (Val_DbResultRTPMPPXml.ResultSet.Row.DOWNLOAD[i]).toString();
		expectRTG_PPCanStream += (Val_DbResultRTPMPPXml.ResultSet.Row.STREAM[i]).toString();
		
		}

		// Rights Status 
		expectRTG_RS_CreatedBy = "urn:dece:org:org:dece:"+ Val_DbResultRTXml.ResultSet.Row.CREATED_BY;
		expectRTG_PS_CreationDate = Val_DbResultRTXml.ResultSet.Row.CREATED_DATE;
		expectRTG_RS_Value = "urn:dece:type:status:"+ Val_DbResultRTXml.ResultSet.Row.STATUS_ID;

		// Rights Licence Acq Base Location
		
		for ( i in 0..LicAcqSize-1 ){
		
		expectRTG_LicAcqBaseLoc += Val_DbResultRTXml.ResultSet.Row.LICENSE_ACQ_BASE_LOC[i];
		}

		// Rights Fullfillment WebLocation

		for ( int i in 0..rcFFWeblocSize-1 ){
		
		int j = rcFFWebloc[i].toInteger();
		expectRTG_FFWebLoc_Location += Val_DbResultFFLocXml.ResultSet.Row.LOCATION[j-1];
		expectRTG_FFWebLoc_Pref += Val_DbResultFFLocXml.ResultSet.Row.PREFERENCE_ORDER[j-1];
		}

		// Rights Fullfillment Manifest Location


		for ( int i in 0..rcFFManifestSize-1 ){

		int j = rcFFManifest[i].toInteger();
		expectRTG_FFManifestLoc_Location += Val_DbResultFFLocXml.ResultSet.Row.LOCATION[j-1];	
		expectRTG_FFManifestLoc_Pref += Val_DbResultFFLocXml.ResultSet.Row.PREFERENCE_ORDER[j-1];
	
		}

		// Rights Purchase Infomation
				
		expectRTG_PI_NodeID = "urn:dece:org:org:dece:"+Val_DbResultRTXml.ResultSet.Row.NODE_OID;
		expectRTG_PI_RetailerTrax = Val_DbResultRTXml.ResultSet.Row.RETAILER_TRANSACTION;
		expectRTG_PI_PurcaseAccount = "urn:dece:accountid:org:dece:"+Val_DbResultRTXml.ResultSet.Row.PURCHASE_NODE_ACCOUNT_OID;
		expectRTG_PI_PurchaseUser = "urn:dece:userid:org:dece:"+Val_DbResultRTXml.ResultSet.Row.PURCHASE_NODE_USER_OID;
		expectRTG_PI_PurchaseTime = Val_DbResultRTXml.ResultSet.Row.PURCHASE_TIME;

	break;

	case "RightsTokenInfo":
			
		// Rights Token 
		expectRTG_Accountid = testCase.getPropertyValue("Accountid");
		expectRTG_RightsTokenID = testCase.getPropertyValue("rightstokenid");
		expectRTG_ALID = Val_DbResultRTXml.ResultSet.Row.ALID;
		expectRTG_ContentID = Val_DbResultRTXml.ResultSet.Row.CONTENT_ID;

		// Rights SoldAs 
		
		expectRTG_SoldAs_Lang = Val_DbResultRTSoldAsXml.ResultSet.Row.LANGUAGE_ID;
		expectRTG_SoldAs_PRODUCT_ID = Val_DbResultRTSoldAsXml.ResultSet.Row.PRODUCT_ID;
		expectRTG_SoldAs_DisplayName = Val_DbResultRTSoldAsXml.ResultSet.Row.DISPLAY_NAME;
		expectRTG_SoldAs_ContentID = Val_DbResultRTSoldAsXml.ResultSet.Row.CONTENT_ID;
		expectRTG_SoldAs_BUNDLE_ID = Val_DbResultRTSoldAsXml.ResultSet.Row.BUNDLE_ID;

		// Rights Purchase Media Purchase Profiles
		
		for ( i in 0..PMPPSize-1 ){
	
		expectRTG_PPContentProfile += "urn:dece:type:mediaprofile:" + Val_DbResultRTPMPPXml.ResultSet.Row.PURCHASED_CONTENT_PROFILE[i];
		expectRTG_PPDMR += Val_DbResultRTPMPPXml.ResultSet.Row.DISCRETE_MEDIA_RIGHTS_REMAIN[i];
		//expectRTG_PPDMProfile = 
		expectRTG_PPCanDownload += Val_DbResultRTPMPPXml.ResultSet.Row.DOWNLOAD[i].toString();
		expectRTG_PPCanStream += Val_DbResultRTPMPPXml.ResultSet.Row.STREAM[i].toString();
		
		}

		// Rights Status 
		expectRTG_RS_CreatedBy = "urn:dece:org:org:dece:"+ Val_DbResultRTXml.ResultSet.Row.CREATED_BY;
		expectRTG_PS_CreationDate = Val_DbResultRTXml.ResultSet.Row.CREATED_DATE;
		expectRTG_RS_Value = "urn:dece:type:status:"+ Val_DbResultRTXml.ResultSet.Row.STATUS_ID;

		// Rights Licence Acq Base Location
		
		for ( i in 0..LicAcqSize-1 ){
		
		expectRTG_LicAcqBaseLoc += Val_DbResultRTXml.ResultSet.Row.LICENSE_ACQ_BASE_LOC;
		}

		// Rights Fullfillment WebLocation

		for ( int i in 0..rcFFWeblocSize-1 ){
		
		int j = rcFFWebloc[i].toInteger();
		expectRTG_FFWebLoc_Location += Val_DbResultFFLocXml.ResultSet.Row.LOCATION[j-1];
		expectRTG_FFWebLoc_Pref += Val_DbResultFFLocXml.ResultSet.Row.PREFERENCE_ORDER[j-1];
		}

		// Rights Fullfillment Manifest Location


		for ( int i in 0..rcFFManifestSize-1 ){

		int j = rcFFManifest[i].toInteger();
		expectRTG_FFManifestLoc_Location += Val_DbResultFFLocXml.ResultSet.Row.LOCATION[j-1];	
		expectRTG_FFManifestLoc_Pref += Val_DbResultFFLocXml.ResultSet.Row.PREFERENCE_ORDER[j-1];
	
		}

	break;

	case "RightsTokenBasic":
			
		// Rights Token 
		expectRTG_Accountid = testCase.getPropertyValue("Accountid");
		expectRTG_RightsTokenID = testCase.getPropertyValue("rightstokenid");
		expectRTG_ALID = Val_DbResultRTXml.ResultSet.Row.ALID;
		expectRTG_ContentID = Val_DbResultRTXml.ResultSet.Row.CONTENT_ID;

		// Rights SoldAs 
		
		expectRTG_SoldAs_Lang = Val_DbResultRTSoldAsXml.ResultSet.Row.LANGUAGE_ID;
		expectRTG_SoldAs_PRODUCT_ID = Val_DbResultRTSoldAsXml.ResultSet.Row.PRODUCT_ID;
		expectRTG_SoldAs_DisplayName = Val_DbResultRTSoldAsXml.ResultSet.Row.DISPLAY_NAME;
		expectRTG_SoldAs_ContentID = Val_DbResultRTSoldAsXml.ResultSet.Row.CONTENT_ID;
		expectRTG_SoldAs_BUNDLE_ID = Val_DbResultRTSoldAsXml.ResultSet.Row.BUNDLE_ID;

		// Rights Purchase Media Purchase Profiles
		
		for ( i in 0..PMPPSize-1 ){
	
		expectRTG_PPContentProfile += "urn:dece:type:mediaprofile:" + Val_DbResultRTPMPPXml.ResultSet.Row.PURCHASED_CONTENT_PROFILE[i];
		expectRTG_PPDMR += Val_DbResultRTPMPPXml.ResultSet.Row.DISCRETE_MEDIA_RIGHTS_REMAIN[i];
		//expectRTG_PPDMProfile = 
		expectRTG_PPCanDownload += Val_DbResultRTPMPPXml.ResultSet.Row.DOWNLOAD[i].toString();
		expectRTG_PPCanStream += Val_DbResultRTPMPPXml.ResultSet.Row.STREAM[i].toString();
		
		}

		// Rights Status 
		expectRTG_RS_CreatedBy = "urn:dece:org:org:dece:"+ Val_DbResultRTXml.ResultSet.Row.CREATED_BY;
		expectRTG_PS_CreationDate = Val_DbResultRTXml.ResultSet.Row.CREATED_DATE;
		expectRTG_RS_Value = "urn:dece:type:status:"+ Val_DbResultRTXml.ResultSet.Row.STATUS_ID;

	break; 

}

def Val_RightsResXml =  new XmlSlurper().parseText(testCase.getPropertyValue("RightsResXml"));

		actRTG_AccountID = Val_RightsResXml.@AccountID.toString();
		actRTG_RightsLockerID = Val_RightsResXml.@RightsLockerID.toString();
		actRTG_RightsTokenID =  Val_RightsResXml.RightsToken."$RTObjType".@RightsTokenID.toString();
		actRTG_ALID = Val_RightsResXml.RightsToken."$RTObjType".RightsTokenData.@ALID.toString();
		actRTG_ContentID = Val_RightsResXml.RightsToken."$RTObjType".RightsTokenData.@ContentID.toString();
		actRTG_SoldAsLang = Val_RightsResXml.RightsToken."$RTObjType".RightsTokenData.SoldAs.DisplayName.@Language.toString();
		actRTG_DisplayName = Val_RightsResXml.RightsToken."$RTObjType".RightsTokenData.SoldAs.DisplayName;
		actRTG_SoldAsContentID = Val_RightsResXml.RightsToken."$RTObjType".RightsTokenData.SoldAs.ContentID;
		actRTG_SoldAsBUNDLE_ID = Val_RightsResXml.RightsToken."$RTObjType".RightsTokenData.SoldAs.BundleID;

// Rights Purchase Media Purchase Profiles
		actPMPPSize = Val_RightsResXml.RightsToken."$RTObjType".RightsTokenData.RightsProfiles.PurchaseProfile.size();

		for ( i in 0..actPMPPSize-1 ){
	
			actRTG_PPContentProfile +=(Val_RightsResXml.RightsToken."$RTObjType".RightsTokenData.RightsProfiles.PurchaseProfile.@ContentProfile[i]).toString();
			actRTG_PPDMR +=(Val_RightsResXml.RightsToken."$RTObjType".RightsTokenData.RightsProfiles.PurchaseProfile.DiscreteMediaRightsRemaining[i]).toString();
			actRTG_PPDMProfile +=(Val_RightsResXml.RightsToken."$RTObjType".RightsTokenData.RightsProfiles.PurchaseProfile.DiscreteMediaRightsRemaining.@DiscreteMediaProfile[i]).toString();
			if ((Val_RightsResXml.RightsToken."$RTObjType".RightsTokenData.RightsProfiles.PurchaseProfile.CanDownload[i]).toString() == 'true'){
			actRTG_PPCanDownload += 'Y';
			}
			else{
			actRTG_PPCanDownload += 'N';
			}
			
			if ((Val_RightsResXml.RightsToken."$RTObjType".RightsTokenData.RightsProfiles.PurchaseProfile.CanStream[i]).toString()== 'true'){
			actRTG_PPCanStream += 'Y';
			}
			else{
			actRTG_PPCanStream += 'N';
			}
		}


// Actual Rights Status 

		actRTG_RS_CreatedBy = (Val_RightsResXml.RightsToken."$RTObjType".RightsTokenData.ResourceStatus.Current.@CreatedBy).toString();
		CreationDate = (Val_RightsResXml.RightsToken."$RTObjType".RightsTokenData.ResourceStatus.Current.@CreationDate).toString();
		actRTG_PS_CreationDate = (((CreationDate.tokenize('Z'))[0]).tokenize('T'))[0] + " " + (((CreationDate.tokenize('Z'))[0]).tokenize('T'))[1];
		actRTG_RS_Value = (Val_RightsResXml.RightsToken."$RTObjType".RightsTokenData.ResourceStatus.Current.Value).toString();

//  Actual Rights Licence Acq Base Location

 		actLicAcqSize = Val_RightsResXml.RightsToken."$RTObjType".RightsTokenData.LicenseAcqBaseLoc.size();
 	
 		for ( i in 0..actLicAcqSize-1 ){
		
			actRTG_LicAcqBaseLoc += Val_RightsResXml.RightsToken."$RTObjType".RightsTokenData.LicenseAcqBaseLoc[i];
		}

// Actual Rights Fullfillment WebLoc

	actFFWeblocSize = Val_RightsResXml.RightsToken."$RTObjType".RightsTokenData.FulfillmentWebLoc.size();
	

		for ( int i in 0..actFFWeblocSize-1 ){
	
		actRTG_FFWebLoc_Location += (Val_RightsResXml.RightsToken."$RTObjType".RightsTokenData.FulfillmentWebLoc.Location[i]).toString();
		actRTG_FFWebLoc_Pref += (Val_RightsResXml.RightsToken."$RTObjType".RightsTokenData.FulfillmentWebLoc.Preference[i]).toString();
		}


// Actual Rights Fullfillment ManifestLoc

	actFFManifestSize = Val_RightsResXml.RightsToken."$RTObjType".RightsTokenData.FulfillmentManifestLoc.size();
	

		for ( int i in 0..actFFManifestSize-1 ){
	
		actRTG_FFManifestLoc_Location += (Val_RightsResXml.RightsToken."$RTObjType".RightsTokenData.FulfillmentManifestLoc.Location[i]).toString();
		actRTG_FFManifestLoc_Pref += (Val_RightsResXml.RightsToken."$RTObjType".RightsTokenData.FulfillmentManifestLoc.Preference[i]).toString();
		}

// Actual Rights Purchase Info
		actRTG_PI_NodeID = (Val_RightsResXml.RightsToken."$RTObjType".RightsTokenData.PurchaseInfo.NodeID).toString();
		actRTG_PI_RetailerTrax = (Val_RightsResXml.RightsToken."$RTObjType".RightsTokenData.PurchaseInfo.RetailerTransaction).toString();
		actRTG_PI_PurcaseAccount = (Val_RightsResXml.RightsToken."$RTObjType".RightsTokenData.PurchaseInfo.PurchaseAccount).toString();
		actRTG_PI_PurchaseUser = (Val_RightsResXml.RightsToken."$RTObjType".RightsTokenData.PurchaseInfo.PurchaseUser).toString();
		PurchaseTime = (Val_RightsResXml.RightsToken."$RTObjType".RightsTokenData.PurchaseInfo.PurchaseTime).toString();
		actRTG_PI_PurchaseTime	= (((PurchaseTime.tokenize('Z'))[0]).tokenize('T'))[0] + " " + (((PurchaseTime.tokenize('Z'))[0]).tokenize('T'))[1];	

// Assert RightsToken Information DB and RightsTokenGet Response.

// Assert RightsToken Account ID 

		log.info "Rights TokenGet Accountid Expected : [$expectRTG_Accountid] - Actual Recieved: [$actRTG_AccountID]";
 		assert expectRTG_Accountid == actRTG_AccountID;

// Assert RightsToken LockerId

		log.info "Rights TokenGet Lockerid Expected : [$expectRTG_Lockerid] - Actual Recieved: [$actRTG_RightsLockerID]";
		 assert expectRTG_Lockerid == actRTG_RightsLockerID;

// Assert RightsToken id 

		log.info "Rights TokenGet Tokenid Expected : [$expectRTG_RightsTokenID] - Actual Recieved: [$actRTG_RightsTokenID]";
		//assert expectRTG_RightsTokenID == actRTG_RightsTokenID;

// Assert RightsToken ALID 

		log.info "Rights TokenGet Alid Expected : [$expectRTG_ALID] - Actual Recieved: [$actRTG_ALID]";
 		assert expectRTG_ALID == actRTG_ALID;

// Assert RightsToken ContentID 

		log.info "Rights TokenGet ContentID Expected : [$expectRTG_ALID] - Actual Recieved: [$actRTG_ContentID]"; 
 		assert expectRTG_ContentID == actRTG_ContentID;

// Assert RightsToken SoldAS Language

		log.info "Rights TokenGet SoldAs Language Expected : [$expectRTG_SoldAs_Lang] - Actual Recieved: [$actRTG_SoldAsLang]";
		assert expectRTG_SoldAs_Lang == actRTG_SoldAsLang;

// Assert RightsToken SoldAS DisplayName

		log.info "Rights TokenGet SoldAs DisplayName Expected : [$expectRTG_SoldAs_DisplayName] - Actual Recieved:[$actRTG_DisplayName]";
 		assert expectRTG_SoldAs_DisplayName == actRTG_DisplayName;

		if (expectRTG_SoldAs_ContentID){
		// Assert RightsToken SoldAs ContentID		
		log.info "Rights TokenGet SoldAs ContentID Expected : [$expectRTG_SoldAs_ContentID] - Actual Recieved:[$actRTG_SoldAsContentID]";
 		assert expectRTG_SoldAs_ContentID == actRTG_SoldAsContentID;
		}
		else{
		// Assert RightsToken SoldAs BUNDLE_ID	
		log.info "Rights TokenGet SoldAs BUNDLE_ID Expected : [$expectRTG_SoldAs_BUNDLE_ID] - Actual Recieved:[$actRTG_SoldAsBUNDLE_ID]";
		assert expectRTG_SoldAs_BUNDLE_ID == actRTG_SoldAsBUNDLE_ID;
		}
// Assert RightsToken Purchase Profile

		//RightsToken Purchase Profile- ContentProfile.
		log.info "Rights TokenGet Purchase ContentProfile Expected : $expectRTG_PPContentProfile - Actual Recieved:$actRTG_PPContentProfile";
		assert expectRTG_PPContentProfile == actRTG_PPContentProfile;

		//RightsToken Purchase Profile- DiscreteMediaRightsRemaining.
		log.info "Rights TokenGet Purchase DiscreteMediaRightsRemaining Expected : $expectRTG_PPDMR - Actual Recieved:$actRTG_PPDMR";
		assert expectRTG_PPDMR == actRTG_PPDMR;
		
		//RightsToken Purchase Profile- CanDownload
		log.info "Rights TokenGet Purchase CanDownload Expected : $expectRTG_PPCanDownload - Actual Recieved:$actRTG_PPCanDownload";
		assert expectRTG_PPCanDownload == actRTG_PPCanDownload;
		
		//RightsToken Purchase Profile- CanStream
		log.info "Rights TokenGet Purchase CanStream Expected : $expectRTG_PPCanStream - Actual Recieved:$actRTG_PPCanStream";
		assert expectRTG_PPCanStream == actRTG_PPCanStream;

// Assert Rights ResourceStatus 

		log.info "Rights TokenGet ResourceStatus CreatedBy Expected : [$expectRTG_RS_CreatedBy] - Actual Recieved: [$actRTG_RS_CreatedBy]";
		assert expectRTG_RS_CreatedBy == actRTG_RS_CreatedBy;
		
		log.info "Rights TokenGet ResourceStatus CreationDate Expected : [$expectRTG_PS_CreationDate] - Actual Recieved: [$actRTG_PS_CreationDate]";
		//assert expectRTG_PS_CreationDate == actRTG_PS_CreationDate;

		log.info "Rights TokenGet ResourceStatus Value Expected : [$expectRTG_RS_Value] - Actual Recieved: [$actRTG_RS_Value]";
		assert expectRTG_RS_Value == actRTG_RS_Value;

		
//  Assert Rights Licence Acq Base Location

		log.info "Rights TokenGet LicenceAcqBase Location Expected : [$expectRTG_LicAcqBaseLoc] - Actual Recieved: [$actRTG_LicAcqBaseLoc]";
		assert expectRTG_LicAcqBaseLoc == actRTG_LicAcqBaseLoc;

//  Assert Rights Fulfillment WebLoc

		//Assert FF Web location 
		log.info "Rights TokenGet FF Web location Expected : [$expectRTG_FFWebLoc_Location] - Actual Recieved: [$actRTG_FFWebLoc_Location]";
		assert expectRTG_FFWebLoc_Location == actRTG_FFWebLoc_Location;

	    // Assert Web FF preference

	    log.info "Rights TokenGet Web FF preference Expected : [$expectRTG_FFWebLoc_Pref] - Actual Recieved: [$actRTG_FFWebLoc_Pref]";
		assert expectRTG_FFWebLoc_Pref == actRTG_FFWebLoc_Pref;

//  Assert Rights Fulfillment Manifest Location

		//Assert FF Manifest location 
		log.info "Rights TokenGet FF Manifest location Expected : [$expectRTG_FFManifestLoc_Location] - Actual Recieved: [$actRTG_FFManifestLoc_Location]";
		assert expectRTG_FFManifestLoc_Location == actRTG_FFManifestLoc_Location;

	    // Assert FF Manifest  preference

	    log.info "Rights TokenGet FF Manifest  preference Expected : [$actRTG_FFManifestLoc_Pref] - Actual Recieved: [$actRTG_FFManifestLoc_Pref]";
		assert expectRTG_FFManifestLoc_Pref == actRTG_FFManifestLoc_Pref;


//  Assert Rights PurchaseInfo Location

		log.info "Rights TokenGet PurchaseInfo  NodeID Expected : [$expectRTG_PI_NodeID] - Actual Recieved: [$actRTG_PI_NodeID]";
		assert expectRTG_PI_NodeID == actRTG_PI_NodeID;

		log.info "Rights TokenGet PurchaseInfo  RetailerTrax Expected : [$expectRTG_PI_RetailerTrax] - Actual Recieved: [$actRTG_PI_RetailerTrax]";
		assert expectRTG_PI_RetailerTrax == actRTG_PI_RetailerTrax;

		log.info "Rights TokenGet PurchaseInfo  PurcaseAccount Expected : [$expectRTG_PI_PurcaseAccount] - Actual Recieved: [$actRTG_PI_PurcaseAccount]";
		assert expectRTG_PI_PurcaseAccount == actRTG_PI_PurcaseAccount;
		
		log.info "Rights TokenGet PurchaseInfo  PurchaseUser Expected : [$expectRTG_PI_PurchaseUser] - Actual Recieved: [$actRTG_PI_PurchaseUser]";
		assert expectRTG_PI_PurchaseUser == actRTG_PI_PurchaseUser;

		log.info "Rights TokenGet PurchaseInfo  PurchaseTime Expected : [$expectRTG_PI_PurchaseTime] - Actual Recieved: [$actRTG_PI_PurchaseTime]";
		def expecPurchaseTime = new Date().parse("yyyy-mm-dd hh:mm:ss.SSS",expectRTG_PI_PurchaseTime.toString());
		def actPurchaseTime = new Date().parse("yyyy-mm-dd hh:mm:ss.SSS",actRTG_PI_PurchaseTime.toString());

		//log.info expecPurchaseTime.getTime() + ":" + actPurchaseTime.getTime();
		assert expecPurchaseTime.getTime() == actPurchaseTime.getTime();</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="DeviceGet  DB validation" disabled="true">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import dbUtils.dbAccount;
import dbUtils.dbDevice;
import dbUtils.dbUtils;
import dbUtils.dbDM;
import dbUtils.dbSAMLAssertion;
import groovy.time.*
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.teststeps.WsdlResponseMessageExchange

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

DECE_DeviceID = new ArrayList();

def DeviceGetResXml = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request").getTestStepByName('DeviceGetRequest').httpRequest.response.getContentAsString();

testCase.setPropertyValue("DeviceGetResXml",DeviceGetResXml);

mydbAccount = new dbAccount(log,"LP1");
mydbDevice = new dbDevice(log,"LP1");
mydbDM = new dbDM(log,"LP1DM");

def callTSuitename = testCase.getPropertyValue("TSuiteName");
def callTCasename = testCase.getPropertyValue("TCaseName");
def processFlag = true;

def CallingTCase = testProject.getTestSuiteByName(callTSuitename).getTestCaseByName(callTCasename);

testCase.setPropertyValue("Account_OID",CallingTCase.getPropertyValue("accountoid"));
testCase.setPropertyValue("AccountID",CallingTCase.getPropertyValue("AccountID"));
testCase.setPropertyValue("DeviceID",CallingTCase.getPropertyValue("DeviceID"));
testCase.setPropertyValue("DomainID",CallingTCase.getPropertyValue("DomainID"));

//getRequestContentAsXml

def Val_DeviceGetResXml =  new XmlSlurper().parseText(testCase.getPropertyValue("DeviceGetResXml"));

// Fetch RightsToken info from ACCOUNT table

DECE_DomainID_Data = mydbAccount.accountGetRow(testCase.getPropertyValue("Account_OID"));
DECE_DeviceID += mydbAccount.accountGetDeviceId(testCase.getPropertyValue("Account_OID"));
DECE_DM_Data = mydbDM.dmDECEDomainGetRow(testCase.getPropertyValue("DomainID").tokenize(':').last());
Device_Data = mydbDevice.DeviceGet(testCase.getPropertyValue("DeviceID").tokenize(':').last());
DeviceHistory_Data = mydbDevice.DeviceStatusHistoryGetRow(testCase.getPropertyValue("DeviceID").tokenize(':').last());
DeviceDRMClient_Data = mydbDevice.DeviceDRMClientGetRow(testCase.getPropertyValue("DeviceID").tokenize(':').last());
DeviceLicAppId = mydbDevice.DeviceGetLIC_APP_OID(testCase.getPropertyValue("DeviceID").tokenize(':').last());

log.info Device_Data.toString();
log.info DeviceHistory_Data.toString();
log.info DeviceDRMClient_Data.toString();
log.info DeviceLicAppId.toString();
log.info DECE_DeviceID;


testCase.setPropertyValue("DbResultDDDXml",DECE_DomainID_Data.toString());
testCase.setPropertyValue("DbResultDMXml",DECE_DM_Data.toString());
testCase.setPropertyValue("DbDECE_DeviceID",DECE_DeviceID.toString());
//testCase.setPropertyValue("DbDECE_DeviceID",DECE_DM_Data.toString());
testCase.setPropertyValue("DbResultDeviceDataXml",Device_Data.toString());
testCase.setPropertyValue("DbResultDeviceHistoryDataXml",DeviceHistory_Data.toString());
testCase.setPropertyValue("DbResultDeviceDRMClientDataXml",DeviceDRMClient_Data.toString());
testCase.setPropertyValue("DbDeviceLicAppId",DeviceLicAppId.toString());

	if(DECE_DomainID_Data.toString().isEmpty()){
		processFlag = false;
		log.info "processFlag : [processFlag] -- EMPTY [DbResultDDDXml]";
	}
	else{
		Val_DbResultDDDXml = new XmlSlurper().parseText(testCase.getPropertyValue("DbResultDDDXml"));
	}

	if(DECE_DM_Data.toString().isEmpty()){
		processFlag = false;
		log.info "processFlag : [$processFlag] -- EMPTY [DbResultDMXml]";
	}
	else{
		Val_DbResultDMXml = new XmlSlurper().parseText(testCase.getPropertyValue("DbResultDMXml"));
	}
	if(DECE_DeviceID.toString().isEmpty()){
		processFlag = false;
		log.info "processFlag : [$processFlag] -- EMPTY [DbDECE_DeviceID]";
	}
	if(Device_Data.toString().isEmpty()){
		processFlag = false;
		log.info "processFlag : [processFlag] -- EMPTY [DbResultDeviceDataXml]";
	}
	else{
		Val_DbResultDeviceDataXml = new XmlSlurper().parseText(testCase.getPropertyValue("DbResultDeviceDataXml"));
	}
	if(DeviceHistory_Data.toString().isEmpty()){
		processFlag = false;
		log.info "processFlag : [processFlag] -- EMPTY [DbResultDeviceHistoryDataXml]";
	}
	else{
		Val_DbResultDeviceHistoryDataXml = new XmlSlurper().parseText(testCase.getPropertyValue("DbResultDeviceHistoryDataXml"));
	}
	if(DeviceDRMClient_Data.toString().isEmpty()){
		processFlag = false;
		log.info "processFlag : [processFlag] -- EMPTY [DbResultDeviceDRMClientDataXml]";
	}
	else{
		Val_DbResultDeviceDRMClientDataXml = new XmlSlurper().parseText(testCase.getPropertyValue("DbResultDeviceDRMClientDataXml"));
	}
 
log.info "processFlag : [$processFlag]";



if(processFlag.toString() == 'true'){

 	log.info " Validating DECE Domain Information....."


expectDVG_DECE_DomainID =(Val_DbResultDDDXml.ResultSet.Row.DECE_DOMAIN_ID).toString();
expectDVG_DeviceID = "urn:dece:deviceid:org:dece:" + (Val_DbResultDeviceDataXml.ResultSet.Row.DEVICE_OID).toString();
expectDVG_Accountoid = (Val_DbResultDeviceDataXml.ResultSet.Row.ACCOUNT_OID).toString();
expectDVG_DisplayName = (Val_DbResultDeviceDataXml.ResultSet.Row.DISPLAY_NAME).toString();
expectDVG_Manufacturer = (Val_DbResultDeviceDataXml.ResultSet.Row.MANUFACTURER).toString();
expectDVG_Model = (Val_DbResultDeviceDataXml.ResultSet.Row.MODEL).toString();
expectDVG_Brand = (Val_DbResultDeviceDataXml.ResultSet.Row.BRAND).toString();
expectDVG_BrandLanguage = (Val_DbResultDeviceDataXml.ResultSet.Row.BRAND_LANGUAGE_ID).toString();
expectDVG_SerialNo = (Val_DbResultDeviceDataXml.ResultSet.Row.SERIAL_NO).toString();

expectDVG_ImageURL = (Val_DbResultDeviceDataXml.ResultSet.Row.IMAGE_URI).toString();
expectDVG_ImageMimeType = (Val_DbResultDeviceDataXml.ResultSet.Row.IMAGE_MIME_TYPE).toString();
expectDVG_ImageWidth = (Val_DbResultDeviceDataXml.ResultSet.Row.IMAGE_WIDTH).toString();
expectDVG_ImageHeight = (Val_DbResultDeviceDataXml.ResultSet.Row.IMAGE_HEIGHT).toString();
expectDVG_LicAppID = "urn:dece:licappid:org:dece:" + testCase.getPropertyValue("DbDeviceLicAppId");
expectDVG_DRMClientID = "urn:dece:drmclientid:org:dece:" + (Val_DbResultDeviceDRMClientDataXml.ResultSet.Row.DRM_CLIENT_OID).toString();

expectDVG_CreatedBy = "urn:dece:org:org:dece:" + (Val_DbResultDeviceHistoryDataXml.ResultSet.Row[0].CREATED_BY_NODE_OID).toString();
expectDVG_CreationDate = (Val_DbResultDeviceHistoryDataXml.ResultSet.Row[0].CREATED_DATE).toString();
expectDVG_CurrentStatus = "urn:dece:type:status:" + (Val_DbResultDeviceHistoryDataXml.ResultSet.Row[0].STATUS).toString();
expectDVG_Description = (Val_DbResultDeviceHistoryDataXml.ResultSet.Row[0].DESCRIPTION).toString(); 



Act_DVG_DECE_DomainID = testCase.getPropertyValue("DomainID").tokenize(':').last();
Act_DVG_DECE_DeviceID = testCase.getPropertyValue("DbDECE_DeviceID");

Act_DVG_DeviceID = (Val_DeviceGetResXml.@DeviceID).toString();
Act_DVG_Accountoid = testCase.getPropertyValue("Account_OID");
Act_DVG_DisplayName = (Val_DeviceGetResXml.DisplayName).toString();
Act_DVG_Manufacturer = (Val_DeviceGetResXml.Manufacturer).toString();
Act_DVG_Model= (Val_DeviceGetResXml.Model).toString();
Act_DVG_Brand = (Val_DeviceGetResXml.Brand).toString();
Act_DVG_BrandLanguage = (Val_DeviceGetResXml.Brand.@Language).toString();
Act_DVG_SerialNo = (Val_DeviceGetResXml.SerialNo).toString();

Act_DVG_ImageURL = (Val_DeviceGetResXml.Image).toString();
Act_DVG_ImageMimeType = (Val_DeviceGetResXml.Image.@MimeType).toString();
Act_DVG_ImageWidth = (Val_DeviceGetResXml.Image.@Width).toString();
Act_DVG_ImageHeight = (Val_DeviceGetResXml.Image.@Height).toString();
Act_DVG_LicAppID = (Val_DeviceGetResXml.LicAppID).toString();
Act_DVG_DRMClientID = (Val_DeviceGetResXml.DRMClientID).toString();
Act_DVG_CreatedBy = (Val_DeviceGetResXml.ResourceStatus.Current.@CreatedBy).toString();
Act_DVG_CreationDate = (Val_DeviceGetResXml.ResourceStatus.Current.@CreationDate).toString();
Act_DVG_CurrentStatus = (Val_DeviceGetResXml.ResourceStatus.Current.Value).toString();
Act_DVG_Description = (Val_DeviceGetResXml.ResourceStatus.Current.Description).toString(); 

 
}


// Assert DECE Domain ID Information DB and DeviceGet Response.
			
// Assert DeviceDece - Domain ID  DB validation
		
		log.info "DeviceGet  DB  DECE_DomainID Expected : [$expectDVG_DECE_DomainID] - Actual Recieved: [$Act_DVG_DECE_DomainID]";
 		assert expectDVG_DECE_DomainID == Act_DVG_DECE_DomainID;


// Assert DECE Domain Account ID Information

		log.info "DeviceGet DB Accountid Expected : [$expectDVG_Accountoid] - Actual Recieved: [$Act_DVG_Accountoid]";
		assert expectDVG_Accountoid == Act_DVG_Accountoid;

// Assert Device ID Information in the Account Device list

		expectDVG_DECE_DeviceID = expectDVG_DeviceID.tokenize(':').last();

		log.info "DeviceGet DB Deviceid Expected : [$expectDVG_DECE_DeviceID] - Actual  Devicelist Information Recieved: [$Act_DVG_DECE_DeviceID]";
		//assert expectDVG_DECE_DeviceID.contains(Act_DVG_DECE_DeviceID);


// Assert Device ID Information in the Device

		log.info "DeviceGet DB Deviceid Expected : [$expectDVG_DeviceID] - Actual  Device Information Recieved: [$Act_DVG_DeviceID]";
		assert expectDVG_DeviceID == Act_DVG_DeviceID;


// Assert Device Display Name Information 

		log.info "DeviceGet Device Display Name Expected : [$expectDVG_DisplayName] - Actual  Device Information Recieved: [$Act_DVG_DisplayName]";
		assert expectDVG_DisplayName == Act_DVG_DisplayName;

// Assert Device ID  Manufacturer Information 

		log.info "DeviceGet Device Manufacturer Expected : [$expectDVG_Manufacturer] - Actual  Device Information Recieved: [$Act_DVG_Manufacturer]";
		assert expectDVG_Manufacturer ==  Act_DVG_Manufacturer;

// Assert Device ID Model Information

		log.info "DeviceGet Device Model Expected : [$expectDVG_Model] - Actual  Device Information Recieved: [$Act_DVG_Model]";
		assert expectDVG_Model == Act_DVG_Model;

// Assert Device ID Brand Information 

		log.info "DeviceGet Device Expected : [$expectDVG_Brand] - Actual  Device Information Recieved: [$Act_DVG_Brand]";
		assert expectDVG_Brand == Act_DVG_Brand;

// Assert Device ID Brand Language Information

		log.info "DeviceGet Device Expected : [$expectDVG_BrandLanguage] - Actual  Device Information Recieved: [$Act_DVG_BrandLanguage]";
		assert expectDVG_BrandLanguage == Act_DVG_BrandLanguage;

// Assert Device ID  SerialNo Information 

		log.info "DeviceGet Device Expected : [$expectDVG_SerialNo] - Actual  Device Information Recieved: [$Act_DVG_SerialNo]";
		assert expectDVG_SerialNo == Act_DVG_SerialNo;

// Assert Device ID ImageURL Information

		log.info "DeviceGet Device Expected : [$expectDVG_ImageURL] - Actual  Device Information Recieved: [$Act_DVG_ImageURL]";
		//Raju assert expectDVG_ImageURL == Act_DVG_ImageURL;

// Assert Device ID ImageMimeType Information 

		log.info "DeviceGet Device Expected : [$expectDVG_ImageMimeType] - Actual  Device Information Recieved: [$Act_DVG_ImageMimeType]";
		assert expectDVG_ImageMimeType == Act_DVG_ImageMimeType;

// Assert Device ID ImageWidth Information 

		log.info "DeviceGet Device Expected : [$expectDVG_ImageWidth] - Actual  Device Information Recieved: [$Act_DVG_ImageWidth]";
		assert expectDVG_ImageWidth == Act_DVG_ImageWidth;

// Assert Device ID ImageHeight Information

		log.info "DeviceGet Device Expected : [$expectDVG_ImageHeight] - Actual  Device Information Recieved: [$Act_DVG_ImageHeight]";
		assert expectDVG_ImageHeight == Act_DVG_ImageHeight;

// Assert Device ID  LicAppID Information

		log.info "DeviceGet Device Expected : [$expectDVG_LicAppID] - Actual  Device Information Recieved: [$Act_DVG_LicAppID]";
		assert expectDVG_LicAppID == Act_DVG_LicAppID;

// Assert Device ID  DRMClientID Information

		log.info "DeviceGet Device Expected : [$expectDVG_DRMClientID] - Actual  Device Information Recieved: [$Act_DVG_DRMClientID]";
		// Raju assert expectDVG_DRMClientID == Act_DVG_DRMClientID;

// Assert Device ID  CreatedBy Information

		log.info "DeviceGet Device Expected : [$expectDVG_CreatedBy] - Actual  Device Information Recieved: [$Act_DVG_CreatedBy]";
		// Raju assert expectDVG_CreatedBy == Act_DVG_CreatedBy;

// Assert Device ID CreationDate Information 

		log.info "DeviceGet Device Expected : [$expectDVG_CreationDate] - Actual  Device Information Recieved: [$Act_DVG_CreationDate]";
		//assert expectDVG_CreationDate == Act_DVG_CreationDate;

// Assert Device ID CurrentStatus Information 

		log.info "DeviceGet Device Expected : [$expectDVG_CurrentStatus] - Actual  Device Information Recieved: [$Act_DVG_CurrentStatus]";
		assert expectDVG_CurrentStatus == Act_DVG_CurrentStatus;

// Assert Device ID  Description Information

		log.info "DeviceGet Device Expected : [$expectDVG_Description] - Actual  Device Information Recieved: [$Act_DVG_Description]";
		assert expectDVG_Description == Act_DVG_Description;</script></con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>TCaseName</con:name>
          <con:value>TC_DECE_00001_DeviceGet_Retailer_FUNC_with_ValidData</con:value>
        </con:property>
        <con:property>
          <con:name>TSuiteName</con:name>
          <con:value>DeviceGet  Retailer Test Cases_R4</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceDeceDomainResXml</con:name>
          <con:value>&lt;DeviceDecedomain xmlns="http://www.decellc.org/schema/2010/10/dece" xmlns:ns2="http://www.movielabs.com/schema/md/v1.07/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">A09DA589BD63A036E0401F0A05996D9A&lt;/DeviceDecedomain></con:value>
        </con:property>
        <con:property>
          <con:name>Account_OID</con:name>
          <con:value>DEF5738E543B633AE0401F0A05990CC0</con:value>
        </con:property>
        <con:property>
          <con:name>AccountID</con:name>
          <con:value>urn:dece:accountid:org:dece:DEF5738E543A633AE0401F0A05990CC0</con:value>
        </con:property>
        <con:property>
          <con:name>DbResultDDDXml</con:name>
          <con:value>&lt;</con:value>
        </con:property>
        <con:property>
          <con:name>DbResultDMXml</con:name>
          <con:value/>
        </con:property>
        <con:property>
          <con:name>DbDECE_DeviceID</con:name>
          <con:value>[DEF585C6AEA11471E0401F0A07994634]</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceID</con:name>
          <con:value>urn:dece:deviceid:org:dece:DEF585C6AEA11471E0401F0A07994634</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResXml</con:name>
          <con:value><![CDATA[<Device IsLegacy="false" DeviceID="urn:dece:deviceid:org:dece:DEF585C6AEA11471E0401F0A07994634" xmlns="http://www.decellc.org/schema/2012/12/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v1.2/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <DisplayName>DeviceInfoDisplayName34</DisplayName>
   <Manufacturer>DeviceInfoManufacturer28</Manufacturer>
   <Model>DeviceInfoModel48</Model>
   <Brand Language="en-US">DeviceInfoBrand40</Brand>
   <SerialNo>1127431</SerialNo>
   <Image MimeType="MimeType1" Width="50" Height="50">https://qa.uvvu.com:7001/ssp/image?type=image&amp;imageId=DEF585C6AEA11471E0401F0A07994634</Image>
   <LicAppID>urn:dece:licappid:org:dece:DEF585C6AEA41471E0401F0A07994634</LicAppID>
   <ResourceStatus>
      <Current CreatedBy="urn:dece:org:org:dece:device" CreationDate="2013-06-12T12:55:36.204Z">
         <Value>urn:dece:type:status:pending</Value>
         <Description>Device Created</Description>
      </Current>
   </ResourceStatus>
</Device>]]></con:value>
        </con:property>
        <con:property>
          <con:name>DomainID</con:name>
          <con:value>urn:dece:domainid:dece:DEF587A47AF1508CE0401F0A07994D03</con:value>
        </con:property>
        <con:property>
          <con:name>DbResultDeviceDataXml</con:name>
          <con:value>&lt;</con:value>
        </con:property>
        <con:property>
          <con:name>DbResultDeviceHistoryDataXml</con:name>
          <con:value>&lt;</con:value>
        </con:property>
        <con:property>
          <con:name>DbResultDeviceDRMClientDataXml</con:name>
          <con:value>&lt;</con:value>
        </con:property>
        <con:property>
          <con:name>DbDeviceLicAppId</con:name>
          <con:value>D</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DeviceGet Error Response Validation" searchProperties="true">
      <con:settings/>
      <con:testStep type="groovy" name="Validate DeviceGet Errors">
        <con:settings/>
        <con:config><script>import dbUtils.dbUtils;
import dbUtils.dbErrors;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def DeviceGetErrors = new dbErrors(log,"LP1");


def callTSuitename = tC.getPropertyValue("TSuiteName");
def callTCasename = tC.getPropertyValue("TCaseName");

def CallingTCase = tP.getTestSuiteByName(callTSuitename).getTestCaseByName(callTCasename);
def errId = CallingTCase.getPropertyValue("QAerrorID");
log.info errId.tokenize(':').last();

ErrorID = errId.tokenize(':').last();

def xmlData = "";

try {
			 xmlData = DeviceGetErrors.errGetIdInfo(ErrorID.toString());
                log.info xmlData;
                
                assert xmlData.trim().length() > 1;

                def myXML = new XmlSlurper().parseText(xmlData);
                

                log.info myXML.ResultSet.Row.size();
                tC.setPropertyValue("errorStatusCode", myXML.ResultSet.Row[0].STATUS_CODE.toString());
                tC.setPropertyValue("errorReason", myXML.ResultSet.Row[0].REASON.toString());
                tC.setPropertyValue("errorID", myXML.ResultSet.Row[0].ERROR_ID.toString());

                /*
                *  The DB does not contain the complete HTTP status
                *  string, only the code.  Thus, we must adjust.
                */
                switch (tC.getPropertyValue("errorStatusCode")) {
                                case "400":
                                                tC.setPropertyValue("errorStatusCode","HTTP/1.1 400 Bad Request");
                                                break;
                                case "403":
                                                tC.setPropertyValue("errorStatusCode","HTTP/1.1 403 Forbidden");
                                                break;
                                case "404":
                                                tC.setPropertyValue("errorStatusCode","HTTP/1.1 404 Not Found");
                                                break;
                                case "409":
                                                tC.setPropertyValue("errorStatusCode","HTTP/1.1 409 Conflict");
                                                break;
                                case "401":
                                                tC.setPropertyValue("errorStatusCode","HTTP/1.1 401 Unauthorized");
                                                break;
                }
}
catch (Throwable e) {
                log.info "STEP FAILURE! --- " + e;
                
}


CallingTCase.setPropertyValue("errorStatusCode",tC.getPropertyValue("errorStatusCode"));
CallingTCase.setPropertyValue("errorReason",tC.getPropertyValue("errorReason"));
CallingTCase.setPropertyValue("errorID",tC.getPropertyValue("errorID"));</script></con:config>
      </con:testStep>
      <con:properties>
        
        
        
        
        
      <con:property><con:name>TCaseName</con:name><con:value>DeviceGet Response Validation</con:value></con:property><con:property><con:name>TSuiteName</con:name><con:value>Common Test Steps</con:value></con:property><con:property><con:name>errorStatusCode</con:name><con:value>HTTP/1.1 401 Unauthorized</con:value></con:property><con:property><con:name>errorReason</con:name><con:value>The request is not authorized.</con:value></con:property><con:property><con:name>errorID</con:name><con:value>NodeUnauthorizedToActOnAccount</con:value></con:property></con:properties>
      <con:reportParameters/>
    </con:testCase>
  <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="AccountCreateAPI" searchProperties="true" id="f3fa8f3d-43f8-4b96-af2c-b1d009bd1e0a"><con:settings><con:setting id="IncludeOverview">true</con:setting><con:setting id="IncludeResults">true</con:setting><con:setting id="FlowLayout">false</con:setting><con:setting id="ErrorDetails">true</con:setting><con:setting id="IncludeCoverage">true</con:setting></con:settings><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("ResponseType","SUCCESS");
tC.setPropertyValue("NODE_ACCOUNT_ID",null);
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",null);
tC.setPropertyValue("AccountName",null);
tC.setPropertyValue("httpConnect",null);
tC.setPropertyValue("httpContentLength",null);
tC.setPropertyValue("httpContentType",null);
tC.setPropertyValue("httpLocation",null);
tC.setPropertyValue("httpStatus",null);
tC.setPropertyValue("XMLbody",null);


</script></con:config></con:testStep><con:testStep type="groovy" name="Generate AccountName"><con:settings/><con:config><script>def tC = testRunner.getTestCase();

def today= new Date().format( 'yyyyMMdd_hhmms' );

tC.setPropertyValue("AccountName","accname_"+today);</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def today = new Date()

String keyStorePath  = "";
String nodeId = testCase.getPropertyValue("node_Id");
log.info "nodeid:"+nodeId;

testCase.setPropertyValue("keyStorePath","");

def myTC = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("SetPem");

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());
myTC.setPropertyValue("nodeid",nodeId);

def runnerTC = myTC.run( null , false );

assert "$runnerTC.status" == "FINISHED";

keyStorePath = myTC.getPropertyValue("keyStorePath");
log.info "keyStorePath:"+keyStorePath;


RestTestRequestStep testStep = testCase.getTestStepByName("Account_Create");
this.log.info "testStep [$testStep]";
soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);
</script></con:config></con:testStep><con:testStep type="restrequest" name="Account_Create"><con:settings/><con:config service="Account" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Account_Create" mediaType="application/xml;charset=UTF-8" postQueryString="false" id="ca4ff0a9-00f8-41e3-871a-d799b7db932c" accept="application/xml;charset=UTF-8" sslKeystore="RET_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@remove_empty_content">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@strip-whitespaces">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<Account xmlns="${#Project#coordinatorSchema}"> 
<DisplayName>${#TestCase#AccountName}</DisplayName>
<Country>${#Project#AccountCountry}</Country>
</Account>]]></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="947149be-7bb0-4a3f-9591-1927886d48ad"><con:configuration><scriptText>assert messageExchange.responseHeaders["#status#"].toString() == "[HTTP/1.1 201 Created]";</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body and Headers"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('Account_Create');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;


tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location":
			contentLocation = value[0]; 
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Validate Response"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def url       = context.expand( '${#Project#Provision_HostName}' );
def errorRespType = context.expand( '${#TestCase#ResponseType}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');


boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#versionMajor}' );
String minor = context.expand( '${#Project#versionMinor}' );
String orgRequest = url + "/rest/$major/$minor/Account/";
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml;charset=UTF-8";
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 201 Created";
		XMLbodynull        = true;
		httpLocationHeader = true;
		
	break;

	case "INVALID_DISPLAY_NAME":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountDisplayNameNotValid";
		errorReason = "The display name exceeds 256 characters (or is empty).";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountDisplayNameNotValid";
	break;

	case "INVALID_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeNotValid";
	errorReason = "The supplied country code is invalid.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeNotValid";
	break;

	case "NULL_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeCannotBeNull";
	errorReason = "The country code cannot be null.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeCannotBeNull";
	break;
	
	case "API_NOT_AUTH":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
	errorReason = "API call not authorized";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "USER_NOT_MATCH_TOKEN":
	     expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserIdUnmatched";
		errorReason = "User ID does not match security token";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdUnmatched";
		break;
	
	case "USER_NOT_ACTIVE":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:UserNotActive";
	errorReason = "User is not active";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotActive";
	
	break;
	case "USER_REQUESTING_NOT_PROVIDED":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:UserNotSpecified";
	errorReason = "Requesting User ID Not Specified";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotSpecified";
	break;
	
	case "USER_NOT_PERMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserPrivilegeAccessRestricted";
		errorReason = "User Privilege Access Restricted";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserPrivilegeAccessRestricted";
	break;	
	
}
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");

assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
//assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
if (XMLbodynull) {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() == 0;
} else {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}

//Location Header
if (httpLocationHeader) {
	assert context.expand( '${#TestCase#httpLocation}') != null;

	def a = context.expand( '${#TestCase#httpLocation}');
	def b = a.toURL();
	def urlStr = b.getPath();
	
	if (tP.getPropertyValue("versionMinor") != tP.getPropertyValue("versionURLEncode")){
		
		assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*");
		
		int lastColon = urlStr.lastIndexOf(':');
		int lastSlash = urlStr.lastIndexOf('/');
		accountid     = urlStr.substring(lastColon + 1);
		accountidfull     = urlStr.substring(lastSlash + 1);
		
		tC.setPropertyValue("NODE_ACCOUNT_ID",accountid);
		tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",accountidfull);
		
	} else {
		log.info "here";
		assert b.getPath().matches("/rest/$major/$minor/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3A[0-9,A-F]*");
		int lastColon = urlStr.lastIndexOf('%3A');
		int lastSlash = urlStr.lastIndexOf('/');
		accountid     = urlStr.substring(lastColon + 3);
		accountidfull     = urlStr.substring(lastSlash + 1);
		
		tC.setPropertyValue("NODE_ACCOUNT_ID",accountid);
		tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",accountidfull);
	}
	
} else {
	assert context.expand( '${#TestCase#httpLocation}') == "";
}

//Content-Type
assert context.expand( '${#TestCase#httpContentType}') == expectHTTPcontenttype;

//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}

if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		assert myXML.Error.ErrorLink.toString() == errorLink;
	} 
	
 } 

</script></con:config></con:testStep><con:testStep type="groovy" name="Return the NodeAccountId to the Calling Test Case"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("NODE_ACCOUNT_ID",tC.getPropertyValue("NODE_ACCOUNT_ID"));
callTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));</script></con:config></con:testStep><con:properties><con:property><con:name>AccountName</con:name><con:value>accname_20150204_013416</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">close</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://qa.q.uvvu.com:7001/rest/2015/02/Account/urn:dece:accountid:org:dece:0E3F7BFDC3D7509BE05305991F0A99B6</con:value></con:property><con:property><con:name>httpStatus</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>ResponseType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>tName</con:name><con:value>00043_DeviceGetCacheScenario_NonCS_DeviceGet_1/07_DeviceGet(If-Modified-Since)_1/06_304_Not_Modified</con:value></con:property><con:property><con:name>sName</con:name><con:value>DeviceGetCache_TestCases</con:value></con:property><con:property><con:name>AccountCountry</con:name><con:value>NZ</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0E3F7BFDC3D7509BE05305991F0A99B6</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Code_Repo\uv-coordinator-api-regression\Certs\QALP1/RET_concat.pem</con:value></con:property><con:property><con:name>NODE_ID</con:name><con:value>RET</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:0E3F7BFDC3D7509BE05305991F0A99B6</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>b8ba87db-df08-4f36-8c88-c580bb3ec25b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>9ce61892-9d8a-4055-b161-e19938292410</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c50a4409-da80-4892-a2c3-07a22e674bd0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>fd13479c-f25a-495b-8c94-31e5557a93a8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="SetPem" searchProperties="true" id="bb58bb1d-0a83-4181-8c91-edc3d84d8d26"><con:settings/><con:testStep type="groovy" name="Set Pem"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import org.apache.commons.lang.SystemUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 

import com.eviware.soapui.settings.SSLSettings
import com.eviware.soapui.SoapUI
def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def projectPath = groovyUtils.projectPath

def eNV = context.expand( '${#Project#ENV}' )

def propertiesPath = null;

if (System.properties['os.name'].toLowerCase().contains('windows')) 
	{
    		log.info "it's Windows OS!!";
    		File temp = new File( projectPath + "\\..\\..\\..\\Properties\\");
    		propertiesPath = temp.getCanonicalPath();
	} 
else 
	{
    		log.info "it's Linux OS!!";
    		File temp = new File(projectPath + "/../../../Properties/");
    		propertiesPath = temp.getCanonicalPath();
	}
	
log.info("Properties File Location : '" + propertiesPath+ "'");




def propMap=[:]
BufferedReader reader = new BufferedReader(new FileReader(propertiesPath + "/" + eNV +"project.properties"));

String line;
while ((line = reader.readLine()) != null)
      {
	       if (line.trim().length()==0) continue;
	       if (line.charAt(0)=='#') continue;
	
	       int delimPosition = line.indexOf("=");
	       String key = line.substring(0, delimPosition-0).trim();
	       String value = line.substring(delimPosition+1).trim();
	       propMap.put(key, value);
      }


if (System.properties['os.name'].toLowerCase().contains('windows')) 
      {
            log.info "it's Windows OS!!!";
            File temp = new File( projectPath + "\\..\\..\\..\\Certs\\" + eNV + "\\");
    		  certPath = temp.getCanonicalPath();      
      } 
else 
      {
            log.info "it's Linux OS!!!";
            File temp = new File(projectPath + "/../../../Certs/" + eNV + "/");
    		  certPath = temp.getCanonicalPath();
      }  
      
 log.info("Cert path: " + certPath );  
                  
def nodeId = context.expand( '${#TestCase#nodeid}' )

log.info "nodeId: "+nodeId;

 if (nodeId == "dece:cs")
       {
             nodeId = "dececs";
       }
 else if (nodeId == "coord:cs")
       {
             nodeId = "coordcs";
       }
 else
       {
             nodeId = nodeId;
       }


//log.info "~~~~~~~~~~~~" +nodeId
boolean imFine = true;
def pwd = null;
def certMatchesNodeID = context.expand( '${#Project#CertMatchesNodeID}' )
log.info("CertMatchesNodeID : '" + certMatchesNodeID + "'");
if (certMatchesNodeID == "YES")
{
		File f1 = new File(certPath+"/"+nodeId + "_concat.pem");
		File f2 = new File(certPath+"/"+nodeId + ".jks");
		File f3 = new File(certPath+"/truststore-"+nodeId + ".jks");
		File f4 = new File(certPath+"/"+nodeId + ".pem");

		log.info("F1 : '" + f1.getPath()+ "'");
		log.info("F2 : '" + f2.getPath()+ "'");
		log.info("F3 : '" + f3.getPath()+ "'");
		log.info("F4 : '" + f4.getPath()+ "'");
	
	// sets the certificate from the specific folder when the certname and NodeId are same
	  if(f1.exists()) 
             {
                   keyStorePath = certPath+"/"+nodeId + "_concat.pem";
                   pwd = "123"
                   log.info("F1 file exists!!!");
                   log.info("keyStorePath : '" + keyStorePath + "'");      
             }
	  else if(f2.exists())
             {
                  	keyStorePath = certPath+"/"+nodeId + ".jks";
                   	pwd = "abcd1234" 
                   	log.info("F2 file exists!!!");
                   log.info("keyStorePath : '" + keyStorePath + "'");          
             }
	  else if(f3.exists())
             {
                  	keyStorePath = certPath+"/truststore-"+nodeId + ".jks";
                   	pwd = "12elma";
				log.info("F3 file exists!!!");
                   	log.info("keyStorePath : '" + keyStorePath + "'");
             }
	  else if(f4.exists()) 
             {
                   	keyStorePath = certPath+"/"+nodeId + ".pem";
                   	pwd = "123";
                   	log.info("F4 file exists!!!");
                   log.info("keyStorePath : '" + keyStorePath + "'");       
             }
	  else
             {
                  	log.info "No cert file is Found!!!";
                  	imFine = false;
             }
}
else
{
	//to get the certificate name from another property based on the nodeid property.
		
	
       def value = propMap.find{ it.value == nodeId }?.key
       def certName = testProject.getPropertyValue(value+"_cert");       
       log.info "cert name .... " + certName;

		File f1 = new File(certPath+"/"+certName + "_concat.pem");
		File f2 = new File(certPath+"/"+certName + ".jks");
		File f3 = new File(certPath+"/truststore-"+certName + ".jks");
		File f4 = new File(certPath+"/"+certName + ".pem");

		log.info("F1 : '" + f1.getPath()+ "'");
		log.info("F2 : '" + f2.getPath()+ "'");
		log.info("F3 : '" + f3.getPath()+ "'");
		log.info("F4 : '" + f4.getPath()+ "'");      
		     
       if(f1.exists()) 
             {
             		
				keyStorePath = certPath+"/"+certName + "_concat.pem";
				pwd = "123";
				log.info("F1 file exists!!!");
                   	log.info("keyStorePath : '" + keyStorePath + "'");     
             }
       else if(f2.exists())
             {
				keyStorePath = certPath+"/"+certName + ".jks";
				pwd = "abcd1234";
				log.info("F2 file exists!!!");
                   	log.info("keyStorePath : '" + keyStorePath + "'");           
             }
       else if(f3.exists())
             {
                  	keyStorePath = certPath+"/truststore-"+certName + ".jks";
                   	pwd = "abcd1234";
                   	log.info("F3 file exists!!!");
                   	log.info("keyStorePath : '" + keyStorePath + "'");
                   	         
             }
       else if(f4.exists()) 
             {
				keyStorePath = certPath+"/"+certName + ".pem";
				pwd = "123";  
				log.info("F4 file exists!!!");
                   	log.info("keyStorePath : '" + keyStorePath + "'");     
             }
       else
			{
			log.info "No cert file is Found!!!";
			imFine = false;
			}                             
}


if(imFine)
{
      def callTSname = testCase.getPropertyValue("sName");
      def callTCname = testCase.getPropertyValue("tName");
      
      def callTC = testProject.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)
      
      callTC.setPropertyValue("keyStorePath","$keyStorePath");
      testCase.setPropertyValue("keyStorePath","$keyStorePath");
      
      SoapUI.settings.setString( SSLSettings.KEYSTORE, keyStorePath );
      SoapUI.settings.setString( SSLSettings.KEYSTORE_PASSWORD, pwd);
      log.info 'pwd='+pwd
}

assert imFine == true;
</script></con:config></con:testStep><con:properties><con:property><con:name>nodeId</con:name><con:value>RET</con:value></con:property><con:property><con:name>tName</con:name><con:value>DeviceGetAPIwithIf-Modified-Since</con:value></con:property><con:property><con:name>sName</con:name><con:value>Common Test Steps</con:value></con:property><con:property><con:name>NODE_ID</con:name><con:value>RET</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Code_Repo\uv-coordinator-api-regression\Certs\QALP1/RET_concat.pem</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="FirstUserCreateAPI" searchProperties="true" id="53d73898-4945-42ea-b907-61c21e55c7c9"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("FirstFullUsername",null);
tC.setPropertyValue("NODE_USER_ID",null);
tC.setPropertyValue("NODE_USER_ID_FULL",null);

tC.setPropertyValue("httpConnect",null);
tC.setPropertyValue("httpContentLength",null);
tC.setPropertyValue("httpContentType",null);
tC.setPropertyValue("httpLocation",null);
tC.setPropertyValue("httpStatus",null);
tC.setPropertyValue("ResponseType","SUCCESS");
tC.setPropertyValue("XMLbody",null);

</script></con:config></con:testStep><con:testStep type="groovy" name="Generate UserName"><con:settings/><con:config><script>def tC = testRunner.getTestCase();

def today= new Date().format( 'yyyyMMdd_hhmms' );

tC.setPropertyValue("FirstFullUsername","firstfau_"+today);</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem"><con:settings/><con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
def today = new Date()

String keyStorePath  = "";
String nodeId = testCase.getPropertyValue("node_Id");
log.info "nodeid:"+nodeId;

testCase.setPropertyValue("keyStorePath","");

def myTC = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("SetPem");

myTC.setPropertyValue("tName",testCase.getName());
myTC.setPropertyValue("sName",testSuite.getName());
myTC.setPropertyValue("nodeid",nodeId);

def runnerTC = myTC.run( null , false );

assert "$runnerTC.status" == "FINISHED";

keyStorePath = myTC.getPropertyValue("keyStorePath");
log.info "keyStorePath:"+keyStorePath;


RestTestRequestStep testStep = testCase.getTestStepByName("User_Create");
this.log.info "testStep [$testStep]";
soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);
</script></con:config></con:testStep><con:testStep type="restrequest" name="User_Create"><con:settings/><con:config service="User" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/User" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="User_Create" mediaType="application/xml;charset=UTF-8" postQueryString="false" accept="application/xml;charset=UTF-8" sslKeystore="RET_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<User UserClass="urn:dece:role:user:class:full" xmlns="${#Project#coordinatorSchema}" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
	<Name>
        	<GivenName>${#TestCase#FirstFullUsername}</GivenName>
		<SurName>surname</SurName>
	</Name>	
	<ContactInfo>
        <PrimaryEmail>			
	 <Value>${#Project#PrimaryEmail}</Value>
        <ConfirmationEndpoint>www.abc.com</ConfirmationEndpoint>
	</PrimaryEmail>
	<AlternateEmail>			
        <Value>${#Project#AlternateEmail}</Value>			
        <ConfirmationEndpoint>www.abc.com</ConfirmationEndpoint>
	</AlternateEmail>
	</ContactInfo>
       <DateOfBirth MeetsAgeOfMajority="true">1986-02-25</DateOfBirth>
       <Credentials> 
               <Username>${#TestCase#FirstFullUsername}</Username>	
              <Password>${#Project#Password}</Password>
	</Credentials>
<UserRecoveryTokens>
      <RecoveryItem>
		<QuestionID>1200</QuestionID>  
		<QuestionResponse>Turner</QuestionResponse>
       </RecoveryItem>
       <RecoveryItem>
		<QuestionID>1650</QuestionID>  
		<QuestionResponse>Phoenix</QuestionResponse>
       </RecoveryItem> 
</UserRecoveryTokens>
</User>]]></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion 1" id="dc7939c7-4e38-4936-ab5e-97a276c8b7cf"><con:configuration><scriptText>assert messageExchange.responseHeaders["#status#"].toString() == "[HTTP/1.1 201 Created]";</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccountID" value="${#TestCase#NODE_ACCOUNT_ID_FULL}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract_Details"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('User_Create');
def expXML = tStep.httpRequest.response.getResponseContent();

String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;


tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
				contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Validate_Response"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = context.expand( '${#Project#Provision_HostName}' );
def errorRespType = context.expand( '${#TestCase#ResponseType}' );
def XMLbody       = context.expand( '${#TestCase#XMLbody}');


boolean errorIDFlag     = true;
boolean errorReasonFlag = true;
boolean errorLinkFlag   = true;
boolean XMLbodynull     = false;
boolean httpLocationHeader = false;
boolean processXMLFlag  = true;

String errorID = "";
String errorReason = "";
String errorLink  = "";
String errorHost  = "";
String major = context.expand( '${#Project#versionMajor}' );
String minor = context.expand( '${#Project#versionMinor}' );
String orgRequest = url + "/rest/$major/$minor/Account/";
String expectHTTPstatus      = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "Keep-Alive";
String expectHTTPcontenttype = "application/xml;charset=UTF-8";
String expected;
String received;
String description;
/*
*  Added this override with the 7.7 drop.  They change the name
*  of the &lt;ErrorLink> host.
*/
if (context.expand( '${#Project#nodeIdRetailerforDeviceAuthToken}' ).length() == 0) {
	errorHost = "http://error.decellc.org";
} else {
	errorHost = context.expand( '${#Project#nodeIdRetailerforDeviceAuthToken}' );
}
this.log.info "errorRespType[$errorRespType]";

switch (errorRespType) {
	case "SUCCESS":
		expectHTTPstatus   = "HTTP/1.1 201 Created";
		XMLbodynull        = true;
		httpLocationHeader = true;
		//this.log.info "Hello";
	break;

	case "INVALID_DISPLAY_NAME":
	     expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
		errorID     = "urn:dece:errorid:org:dece:AccountDisplayNameNotValid";
		errorReason = "The display name exceeds 256 characters (or is empty).";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountDisplayNameNotValid";
	break;

	case "INVALID_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeNotValid";
	errorReason = "The supplied country code is invalid.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeNotValid";
	break;

	case "NULL_COUNTRY":
	expectHTTPstatus   = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:AccountCountryCodeCannotBeNull";
	errorReason = "The country code cannot be null.";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#AccountCountryCodeCannotBeNull";
	break;
	
	case "API_NOT_AUTH":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:Security:RoleInvalid";
	errorReason = "API call not authorized";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Security:RoleInvalid";
	break;

	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		processXMLFlag  = false;
		errorIDFlag     = false;
		errorReasonFlag = false;
		errorLinkFlag   = false;
	break;
	
	case "USER_NOT_MATCH_TOKEN":
	     expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserIdUnmatched";
		errorReason = "User ID does not match security token";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserIdUnmatched";
		break;
	
	case "USER_NOT_ACTIVE":
	expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
	errorID     = "urn:dece:errorid:org:dece:UserNotActive";
	errorReason = "User is not active";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotActive";
	
	break;
	case "USER_REQUESTING_NOT_PROVIDED":
	expectHTTPstatus = "HTTP/1.1 400 Bad Request";
	errorID     = "urn:dece:errorid:org:dece:UserNotSpecified";
	errorReason = "Requesting User ID Not Specified";
	errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserNotSpecified";
	break;
	
	case "USER_NOT_PERMIT":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:UserPrivilegeAccessRestricted";
		errorReason = "User Privilege Access Restricted";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#UserPrivilegeAccessRestricted";
	break;

		case "CANNOT_CREATE_FAU":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorPrivilegeInsufficientToCreateFullAccessUser";
		errorReason = "The user does not have permission to create a full-access user.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorPrivilegeInsufficientToCreateFullAccessUser";
	break;
	
	case "CANNOT_CREATE_USER":
		expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
		errorID     = "urn:dece:errorid:org:dece:RequestorNotAllowedToCreateUsers";
		errorReason = "The user does not have permission to create a user.";
		errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#RequestorNotAllowedToCreateUsers";
	break;
	
	case "FIRST_USER_MUST_BE_ADULT":
			expectHTTPstatus   = "HTTP/1.1 403 Forbidden";
			errorID     = "urn:dece:errorid:org:dece:FirstUserMustBe18OrOlder";
			errorReason = "First User must be 18 years or older";
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#FirstUserMustBe18OrOlder";
	break;


	case "NO_MNG_ACC_CNST":
		     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
			errorReason = "The setting of the \"Manage Account Consent\" policy prevents the requested action from being completed.";
			errorID     = "urn:dece:errorid:org:dece:Policy:ManageAccountConsentRequired";
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#Policy:ManageAccountConsentRequired";
	break;
	
	case "FIRST_USER_MUST_BE_FAU":
		     expectHTTPstatus = "HTTP/1.1 403 Forbidden";
			errorReason = "The first user in a household account must be a full-access user.";
			errorID     = "urn:dece:errorid:org:dece:FirstUserMustBeCreatedWithFullAccessPrivilege";
			errorLink   = "$errorHost/rest/$major/$minor/error/en/ErrorList.html#FirstUserMustBeCreatedWithFullAccessPrivilege";
	break;
	
}
// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("httpStatus");

assert context.expand( '${#TestCase#httpStatus}' ) == expectHTTPstatus;

// Connection
//this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("httpConnect");
//assert context.expand( '${#TestCase#httpConnect}') == expectHTTPconnection;

//Content-Length
//this.log.info "HTTP Content-Length:  Value is " + context.expand( '${#TestCase#httpContentLength}').toInteger();
if (XMLbodynull) {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() == 0;
} else {
	assert context.expand( '${#TestCase#httpContentLength}').toInteger() > 0;
}

//Location Header
if (httpLocationHeader) {
	assert context.expand( '${#TestCase#httpLocation}') != null;

	def a = context.expand( '${#TestCase#httpLocation}');
	def b = a.toURL();
	def urlStr = b.getPath();

	if (tP.getPropertyValue("versionMinor") != tP.getPropertyValue("versionURLEncode")){
		
		assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*/User/urn:dece:userid:org:dece:[0-9,A-F]*");
		
		int lastColon = urlStr.lastIndexOf(':');
		int lastSlash = urlStr.lastIndexOf('/');
		userid     = urlStr.substring(lastColon + 1);
		useridfull     = urlStr.substring(lastSlash + 1);
		
		tC.setPropertyValue("NODE_USER_ID",userid);
		tC.setPropertyValue("NODE_USER_ID_FULL",useridfull);
	} else {
		assert b.getPath().matches("/rest/$major/$minor/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3A[0-9,A-F]*/User/urn%3Adece%3Auserid%3Aorg%3Adece%3A[0-9,A-F]*");
		int lastColon = urlStr.lastIndexOf('%3A');
		int lastSlash = urlStr.lastIndexOf('/');
		userid     = urlStr.substring(lastColon + 3);
		useridfull     = urlStr.substring(lastSlash + 1);
		
		tC.setPropertyValue("NODE_USER_ID",userid);
		tC.setPropertyValue("NODE_USER_ID_FULL",useridfull);
	}
	
} else {
	assert context.expand( '${#TestCase#httpLocation}') == "";
}

//Content-Type
assert context.expand( '${#TestCase#httpContentType}') == expectHTTPcontenttype;

//XML body should be null test
if (XMLbodynull) {

	assert XMLbody == "";
}

if (XMLbody != "" &amp;&amp; processXMLFlag == true) {
	def myXML = new XmlSlurper().parseText(XMLbody);
  
	if (errorRespType != "SUCCESS" ) {
		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode Received [" + myXML.Error.@ErrorID.toString() + "] Exp[$errorID]";
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason Received [" + myXML.Error.Reason.toString() + "] Exp[$errorReason]";
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		assert myXML.Error.ErrorLink.toString() == errorLink;
	} 
	
 } 

</script></con:config></con:testStep><con:testStep type="groovy" name="Return the NodeAccountId and NodeUserId to the Calling Test Case"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)
callTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID"));
callTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL"));
callTC.setPropertyValue("Username",tC.getPropertyValue("FirstFullUsername"));</script></con:config></con:testStep><con:properties><con:property><con:name>ResponseType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpStatus</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">close</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://qa.q.uvvu.com:7001/rest/2015/02/Account/urn:dece:accountid:org:dece:0E3F7BFDC3D7509BE05305991F0A99B6/User/urn:dece:userid:org:dece:0E3F7C15D7C950BAE05305991F0A172A</con:value></con:property><con:property><con:name>Password</con:name><con:value>testing</con:value></con:property><con:property><con:name>tName</con:name><con:value>00043_DeviceGetCacheScenario_NonCS_DeviceGet_1/07_DeviceGet(If-Modified-Since)_1/06_304_Not_Modified</con:value></con:property><con:property><con:name>sName</con:name><con:value>DeviceGetCache_TestCases</con:value></con:property><con:property><con:name>UserName</con:name><con:value>username_20130122_051451</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>222279</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0E3F7C15D7C950BAE05305991F0A172A</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E40DFEF86A2BD6F0E0401F0A079947EC</con:value></con:property><con:property><con:name>ENCODED_NODE_ACCOUNT_ID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE40DFEF86A2BD6F0E0401F0A079947EC</con:value></con:property><con:property><con:name>FirstFullUsername</con:name><con:value>firstfau_20150204_013418</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Code_Repo\uv-coordinator-api-regression\Certs\QALP1/RET_concat.pem</con:value></con:property><con:property><con:name>NODE_ID</con:name><con:value>RET</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:0E3F7C15D7C950BAE05305991F0A172A</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:0E3F7BFDC3D7509BE05305991F0A99B6</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>5ff78eb3-d79f-4f4a-b9a8-5ec1c84f61c0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>3d78db1c-105b-43a0-b406-6bb0f690c833</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>662fb201-c4e7-401c-b10a-548ea13f5020</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="STSCreateandGetAPI" searchProperties="true" id="1318e0db-da29-4c9a-963a-8fce9606a45f"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties" id="6a4253f1-125c-47e4-ac87-b67654d81a1b"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


if (tP.getPropertyValue("versionMinor") != tP.getPropertyValue("versionURLEncode")){
	tC.setPropertyValue("tokentype", "urn:dece:type:tokentype:usernamepassword") ;
	tC.setPropertyValue("audience", URLEncoder.encode(tC.getPropertyValue("audience"), "UTF-8")) ;
}else{
	tC.setPropertyValue("tokentype", "urn%3Adece%3Atype%3Atokentype%3Ausernamepassword") ;
	tC.setPropertyValue("audience", URLEncoder.encode(tC.getPropertyValue("audience"), "UTF-8")) ;
}

tC.setPropertyValue("expectErrType", "SUCCESS") ;
tC.setPropertyValue("assertionUUID", null) ;</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem" id="88473dc5-fa31-490d-9c12-190567d5c20b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("SetPem");

myTC.setPropertyValue("NODE_ID",tP.getPropertyValue("NODE_ID"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("STSCreate");
RestTestRequestStep testStep1 = tC.getTestStepByName("STSGet");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep1, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="STSCreate"><con:settings/><con:config service="STS" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/SecurityToken/SecurityTokenExchange/" methodName="STS - POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="STSCreate" mediaType="" postQueryString="false" sslKeystore="RET_concat.pem">
          <con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings>
          <con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<Credentials xmlns="${#Project#coordinatorSchema}">
   <Username>${#TestCase#Username}</Username>
   <Password>${#Project#Password}</Password>
</Credentials>]]></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>assert messageExchange.responseHeaders["#status#"].toString() == "[HTTP/1.1 201 Created]";</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/>
        </con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body and Headers" id="6c1cc9bc-f4c0-4806-b8ef-7b230acc0879">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def tStep = tC.getTestStepByName('STSCreate');

tC.setPropertyValue("status", null);
tC.setPropertyValue("connection", null);
tC.setPropertyValue("contentType", null);
tC.setPropertyValue("contentLength", null);
tC.setPropertyValue("contentLocation", null);


/*
*  Get the HTTP headers
*/
String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("status", status);
tC.setPropertyValue("connection", connection);
tC.setPropertyValue("contentType", contentType);
tC.setPropertyValue("contentLength", contentLength);
tC.setPropertyValue("contentLocation", contentLocation);

this.log.info "contentLength [$contentLength]";
this.log.info "status [$status]";
this.log.info "contentType [$contentType]";
this.log.info "contentLocation [$contentLocation]";


if (contentLength.toInteger() > 0 &amp;&amp; status != "HTTP/1.1 201 Created") {
	rawResp = new ByteArrayOutputStream();
     rawResp = tStep.httpRequest.response.getRawResponseData();
     strVal  = new String(rawResp);

     int startAssert = strVal.indexOf("&lt;?xml version=\"1.0\" ");

	String XMLbody  = strVal.substring(startAssert, strVal.length());
     
	tC.setPropertyValue("XMLbody", XMLbody);
}</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Verify Response Body and Headers and save assertion" id="ec4aecad-ae30-4b80-84fa-0870e7f47510">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
String major = context.expand( '${#Project#versionMajor}' );
String minor = context.expand( '${#Project#versionMinor}' );
def expectErrType = tC.getPropertyValue("expectErrType");

this.log.info "expectErrType is $expectErrType";

switch (expectErrType) {
	case "SUCCESS":
		expectHTTPstatus = "HTTP/1.1 201 Created";
		expectHTTPcontenttype = "text/plain; charset=UTF-8";
		contentLengthZero = true;
		doContentLocaton  = true;
		dobodyXML = false;
	break;
}
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("status");
assert tC.getPropertyValue("status") == expectHTTPstatus;


// Content-Location
if (doContentLocaton) {
	assert tC.getPropertyValue("contentLocation") != null;
	
	def b = tC.getPropertyValue("contentLocation").toURL();
	assert b.getPath().matches("/rest/$major/$minor/SecurityToken/Assertion/[_,0-9,a-f,-]*");
	def parms = b.getPath().split("/");
	
	tC.setPropertyValue("assertionUUID",parms[parms.size() - 1]);
} 
</script></con:config>
      </con:testStep><con:testStep type="restrequest" name="STSGet"><con:settings/><con:config service="STS" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/SecurityToken/Assertion/{assertionUUID}" methodName="STS - GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="STSGet" mediaType="application/xml" sslKeystore="RET_concat.pem">
          <con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings>
          <con:endpoint>${#Project#Query_HostName}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>assert messageExchange.responseHeaders["#status#"].toString() == "[HTTP/1.1 200 OK]";</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/>
        </con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body and Headers 1">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");
def tStep  = tC.getTestStepByName('STSGet');

/*
*  Get the HTTP headers
*/
String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
String major = tP.getPropertyValue("versionMajor");
String minor = tP.getPropertyValue("versionMinor");
String XMLbody = "";

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

//def expXML = tStep.httpRequest.response.getResponseContent();
this.log.info tStep.httpRequest.response.getRawResponseData();
//new b = tStep.httpRequest.response.getResponseContent();

rawResp = new ByteArrayOutputStream();

rawResp = tStep.httpRequest.response.getRawResponseData();
strVal  = new String(rawResp);
log.info strVal;
log.info "PATTY " + strVal.indexOf("&lt;?xml version=\"1.0\" ")

int startAssert = strVal.indexOf("&lt;?xml version=\"1.0\" ");
if (startAssert > 0) {
	XMLbody  = strVal.substring(startAssert, strVal.length());
}

tC.setPropertyValue("XMLbody", XMLbody);
tC.setPropertyValue("status", status);
tC.setPropertyValue("connection", connection);
tC.setPropertyValue("contentType", contentType);
tC.setPropertyValue("contentLength", contentLength);
tC.setPropertyValue("contentLocation", contentLocation);</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Extract Key Elements from &lt;Assertion> Body">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def XMLbody = tC.getPropertyValue("XMLbody");
def expectErrType = tC.getPropertyValue("expectErrType");

int lastColon = 0;
int lastSlash = 0;

if (expectErrType == "" || expectErrType == "SUCCESS") {
	tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",null);
	tC.setPropertyValue("NODE_USER_ID_FULL",null);
	tC.setPropertyValue("assertionNotBefore",null);
	tC.setPropertyValue("assertionNotOnOrAfter",null);
	tC.setPropertyValue("assertionAudienceRestriction",null);
	tC.setPropertyValue("NODE_USER_ID",null);
	tC.setPropertyValue("NODE_ACCOUNT_ID",null);
	
	if (XMLbody.length() > 0) {
		def myXML = new XmlSlurper().parseText(XMLbody).declareNamespace(saml2: "urn:oasis:names:tc:SAML:2.0:assertion");

			// Verify response sizes...
			assert myXML.size() == 1;

			def accountId = myXML."saml2:AttributeStatement"."saml2:Attribute"."saml2:AttributeValue";
			def userId    = myXML."saml2:Subject"."saml2:NameID";
			def NotBefore = myXML."saml2:Conditions".@NotBefore.text();
			def NotOnOrAfter = myXML."saml2:Conditions".@NotOnOrAfter.text();
			def AudienceRestriction = myXML."saml2:Conditions".AudienceRestriction;
			
			this.log.info "accountId [$accountId]";
			this.log.info "userId [$userId]";
			this.log.info "NotBefore [$NotBefore]";
			this.log.info "NotOnOrAfter [$NotOnOrAfter]";
			this.log.info "AudienceRestriction [$AudienceRestriction]";
					
			tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",accountId.toString());
			tC.setPropertyValue("NODE_USER_ID_FULL",userId.toString());
			tC.setPropertyValue("NODE_ACCOUNT_ID",accountId.toString().substring(accountId.toString().lastIndexOf(':') + 1).toString());
			tC.setPropertyValue("NODE_USER_ID",userId.toString().substring(userId.toString().lastIndexOf(':') + 1).toString());
			
			tC.setPropertyValue("assertionNotBefore",NotBefore.toString());
			tC.setPropertyValue("assertionNotOnOrAfter",NotOnOrAfter.toString());
			tC.setPropertyValue("assertionAudienceRestriction",NotBefore.toString());
			
	} else {
		return false;
	}
}</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Verify Response Body and Headers">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def url = tP.getPropertyValue("targetURL");
def assertionUUID = tC.getPropertyValue("assertionUUID");

def urnacct = tP.getPropertyValue("urnaccount");
def urnstream = tP.getPropertyValue("urnstream");
def expectErrType = tC.getPropertyValue("expectErrType");
def XMLbody = tC.getPropertyValue("XMLbody");
def nodeaccountid = tC.getPropertyValue("nodeaccountid");

boolean dobodyXML = true;
boolean doContentTypeHeader = true;
boolean doConnectionClose = false;
boolean doContentLocaton  = false;
boolean contentLengthZero = false;

String errorID     = "";
String errorReason = "";
String errorLink   = "";
String orgRequest  = url + "/dece/Account/" + urnacct + nodeaccountid;
String expectHTTPstatus = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection = "close";
String expectHTTPcontenttype = "application/xml;charset=UTF-8";
String major = tP.getPropertyValue("versionMajor");
String minor = tP.getPropertyValue("versionMinor");

this.log.info "expectErrType is $expectErrType";
 
if (expectErrType == "" || expectErrType == null) {
	expectErrType = "SUCCESS";
	tC.setPropertyValue("expectErrTypeSTSGet",expectErrType);
}


switch (expectErrType) {
	case "SUCCESS":
	default:
		expectHTTPstatus = "HTTP/1.1 200 OK";
		expectHTTPcontenttype = "application/xml;charset=UTF-8";
		contentLengthZero = false;
		doContentLocaton  = false;
		doContentTypeHeader = false;
		dobodyXML = true;
	break;
}

// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("status");
assert tC.getPropertyValue("status") == expectHTTPstatus;

// Connection

if (doConnectionClose) {
	this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("connection");
	assert tC.getPropertyValue("connection") == expectHTTPconnection;
}

//Content-Length
if (contentLengthZero) {
	assert tC.getPropertyValue("contentLength").toInteger() == 0;
} else {
	assert tC.getPropertyValue("contentLength").toInteger() > 0;
}
	
//Content-Type
if (doContentTypeHeader) {
	assert tC.getPropertyValue("contentType") == expectHTTPcontenttype;
}

</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Deflate and encode the &lt;Assertion>" id="9e47f371-34b0-4149-bbe2-2ac0b1ca3982">
        <con:settings/>
        <con:config><script>import java.util.zip.Deflater;
import org.w3c.tools.codec.Base64Encoder;
import java.io.ByteArrayOutputStream;
import java.util.zip.DeflaterOutputStream;
//import org.apache.commons.codec.binary.Base64;
import org.opensaml.xml.util.Base64;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def expectErrType = tC.getPropertyValue("expectErrType");

if (expectErrType == "" || expectErrType == "SUCCESS") {
	
int compressedLength = 0;
//String XMLbody = tC.getPropertyValue("XMLassertion").toString();
String XMLbodyRaw = tC.getPropertyValue("XMLbody").toString();

int startAssert = XMLbodyRaw.indexOf("&lt;saml2:Assertion ");
int endAssert   = XMLbodyRaw.indexOf("&lt;/saml2:Assertion>");

String XMLbody = XMLbodyRaw.substring(startAssert, endAssert + 18).trim();
String base64encodeStr = "";

this.log.info "XMLbody is [$XMLbody]";

def myXML = new XmlSlurper().parseText(XMLbody);
tC.setPropertyValue("assertId",myXML.@ID.toString());

// Perform Deflation
//byte[] xmlBytes = XMLbody.trim().getBytes();
byte [] xmlBytes = new byte[XMLbody.trim().length()];

Deflater compresser = new Deflater(Deflater.DEFLATED, true);
compresser.setInput(XMLbody.trim().getBytes());
compresser.finish();
compressedLength = compresser.deflate(xmlBytes);
    
//ByteArrayOutputStream byteOutputStream    = new ByteArrayOutputStream();
//DeflaterOutputStream deflaterOutputStream = new DeflaterOutputStream(byteOutputStream);

//deflaterOutputStream.write(xmlBytes, 0, xmlBytes.length);
//deflaterOutputStream.close();

/*
// next, base64 encode it
Base64 base64Encoder = new Base64();

byte[] base64EncodedByteArray = base64Encoder.encode(byteOutputStream.toByteArray());
String base64EncodedMessage = new String(base64EncodedByteArray);
*/
byte [] subArray = Arrays.copyOfRange(xmlBytes, 0, compressedLength);
base64encodeStr = Base64.encodeBytes(subArray,Base64.DONT_BREAK_LINES);

// finally, URL encode it
//String urlEncodedMessage = URLEncoder.encode(base64EncodedMessage, "UTF-8");
tC.setPropertyValue("SAML", "SAML2 Assertion="+base64encodeStr);
}</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Return the NodeAccountId and NodeUserId to the Calling Test Case"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

if (tP.getPropertyValue("versionMinor") != tP.getPropertyValue("versionURLEncode")){	
	callTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID"));
	callTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL"));
	callTC.setPropertyValue("NODE_ACCOUNT_ID",tC.getPropertyValue("NODE_ACCOUNT_ID"));
	callTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
}else{
	callTC.setPropertyValue("NODE_USER_ID",URLEncoder.encode(tC.getPropertyValue("NODE_USER_ID"), "UTF-8"));
	callTC.setPropertyValue("NODE_USER_ID_FULL",URLEncoder.encode(tC.getPropertyValue("NODE_USER_ID_FULL"), "UTF-8"));
	callTC.setPropertyValue("NODE_ACCOUNT_ID",URLEncoder.encode(tC.getPropertyValue("NODE_ACCOUNT_ID"), "UTF-8"));
	callTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",URLEncoder.encode(tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"), "UTF-8"));
}


callTC.setPropertyValue("SAML",tC.getPropertyValue("SAML"));</script></con:config></con:testStep><con:properties><con:property><con:name>assertId</con:name><con:value>_854245dd-d0dc-4194-8ef0-a5074f8a6c48</con:value></con:property><con:property><con:name>assertionAudienceRestriction</con:name><con:value>2015-02-04T08:01:58.936Z</con:value></con:property><con:property><con:name>assertionNotBefore</con:name><con:value>2015-02-04T08:01:58.936Z</con:value></con:property><con:property><con:name>assertionNotOnOrAfter</con:name><con:value>2015-02-04T14:02:08.936Z</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">_854245dd-d0dc-4194-8ef0-a5074f8a6c48</con:value></con:property><con:property><con:name>connection</con:name><con:value>close</con:value></con:property><con:property><con:name>contentLength</con:name><con:value>2888</con:value></con:property><con:property><con:name>contentLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>contentType</con:name><con:value>text/xml;charset=UTF-8</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Code_Repo\uv-coordinator-api-regression\Certs\QALP1/RET_concat.pem</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>0E3F7BFDC3D7509BE05305991F0A99B6</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:0E3F7BFDC3D7509BE05305991F0A99B6</con:value></con:property><con:property><con:name>NODE_ID</con:name><con:value>RET</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>0E3F7C15D7C950BAE05305991F0A172A</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:0E3F7C15D7C950BAE05305991F0A172A</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVbZcuI6EP0VynmcMpbBZnEFqgxkYULClmWSl1uK3IASIzuSzJKvH8mAg8lyuffJpXbr9OlFRzoVeB6WPF8I4JJGrLCah0x4qbVhJJx5ERZUeAzPQXiSeGP/uueVisjDuy1GodtpGP/UXKfkuEFgBiggpmPXHbMGE2RiF1WdSQ1XiFNTrkIk0GVCYiYbRgnZrolKJnJuUc1DJQ/VivVy5cko3AMXClu5FJGxJbUSDWMmZexZ1nK5LC7LxYhPrRJCtvXnujcmM5hjo3m6ySgNxJtbf1IMgEAYkiKJ5taplfM5DYQ3plOGZcJhGyv4LhayUN1SPoGg0xMj2wtBl02idNnGLGKU4JC+Y12fa5CzKCj44TTiVM7m3yZhIw1swoqYxHbYiWHlqR0JlGPIBTbFDNtbrBFMgAMjULgbdRvGyXFdS7fecszEJOJzkV/+Nz7AFhBGMQSm2KW1pXY84BeVap4C8bqMhImgC7jRwxpjAmLbTSDHQxUGHCZ01aNCDehKaHbWPr2D5aYaHToFIf9Pg/aaswG5x2ECzeBtcNe/uBzht+loSPyr19+/V9XFpfxVeW2kBPadU0PW2s3yYCizIdrsuHAfa+0XFAc+4Y/k6p2/j7sIovGQDPu805vx69WQSF/eBF17acFLb7pgL3b58uoi6bvroXtxN1m849Z4eFNLSOTUzy6urOp7x50+XdqVs8GvO2tw67faZyP6Z3Szvn8c8DUbPvBe5c13Lmw6eJg9turTdpXXftP+E+mBDEP7Bfz+fbWPKnH54dq1nadWH+6XjSydPf552+7Mj5PnFyByt9Rj0O0UzlWXsPxZzLSFBuYkdfViLT5CApNGU+/S2uElSu5o4KkebtborHxebdtup9quu6jlnyG3jNx63T5Hvl0t+TuR2bA4oNiO2ITqWFpyN2PzM0Ey9wSwALi5iBKldML4AbGDJS502UgdgogJuI2UPNvV9WvFWcYl/Mwi+zmuOeK16jyvIyWvN5Hssz73JxJ4TpRtOyfKIyA0pqCVWw+2UJMtpCrGG14kMrSLC1xkkCht51pmvZJTcy1B53EImqo1j4IkhGI8i9PSWGLzLZmYiNQ6OrtNj9u3iR3+29VA+QRUOwidSwtUH+HT7WJ77i6R7xN29hPewftJQPXJUgWVnJINk/yvjznRA5INicpoRznzPDTkUK3DhLJAwYKSbNKz+1rJuDr4zV073nDxrZgsFknagKoWOK7gLZ2ihUrWGEiipGl9G70CszIU66h7ICN+EDyz5ykmcsbGEkuYq4kppMsjLv4xCH3xd9Wsr459VeRCqtJJWMmvbO1QPVo04x/fNcQj2k+ZB+qzjHjw0bEvsPbiqDzVvS8pm+qVvgPW38wFiRQsVeoV8X3wrwC+Cp43ZkXOuEg1UM+JhO//FLQsNQxMSJQw2e0YqWFfKlOech2D9+H0CSZV4+x5Rv/9fWbSdAQIqEedoCm+vmU9fQTYdE9ut0E/KW7rvNMud6ouqrf2Fbdeb1WyouTYNT+ZP1v26nQ4482/</con:value></con:property><con:property><con:name>sName</con:name><con:value>DeviceGetCache_TestCases</con:value></con:property><con:property><con:name>status</con:name><con:value>HTTP/1.1 200 OK</con:value></con:property><con:property><con:name>tName</con:name><con:value>00043_DeviceGetCacheScenario_NonCS_DeviceGet_1/07_DeviceGet(If-Modified-Since)_1/06_304_Not_Modified</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>Username</con:name><con:value>firstfau_20150204_013418</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value><![CDATA[<?xml version="1.0" encoding="UTF-8"?><saml2:Assertion xmlns:saml2="urn:oasis:names:tc:SAML:2.0:assertion" ID="_854245dd-d0dc-4194-8ef0-a5074f8a6c48" IssueInstant="2015-02-04T08:02:08.936Z" Version="2.0" xmlns:xs="http://www.w3.org/2001/XMLSchema"><saml2:Issuer>http://c.decellc.com/</saml2:Issuer><ds:Signature xmlns:ds="http://www.w3.org/2000/09/xmldsig#"><ds:SignedInfo><ds:CanonicalizationMethod Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"/><ds:SignatureMethod Algorithm="http://www.w3.org/2000/09/xmldsig#rsa-sha1"/><ds:Reference URI="#_854245dd-d0dc-4194-8ef0-a5074f8a6c48"><ds:Transforms><ds:Transform Algorithm="http://www.w3.org/2000/09/xmldsig#enveloped-signature"/><ds:Transform Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"><ec:InclusiveNamespaces xmlns:ec="http://www.w3.org/2001/10/xml-exc-c14n#" PrefixList="xs"/></ds:Transform></ds:Transforms><ds:DigestMethod Algorithm="http://www.w3.org/2000/09/xmldsig#sha1"/><ds:DigestValue>dqPUOGHRaqgRQcAKkJJx7vHt+6k=</ds:DigestValue></ds:Reference></ds:SignedInfo><ds:SignatureValue>G5Y8Cj0pdAcrYcKzrzSI0eoSQcQOrDLhrMxQctAtNdI1w/ejLgvnj13HKGuO5yQ5GUfvzaBSQN8uco49EGK/7zD5gZH16EP+U/PTABCERiXRNyVYPrynQWrL6qA4G1iPWhYB9gC7r8JiOZcLetll1jeAOV7O06p3WM514ZBOeVw=</ds:SignatureValue></ds:Signature><saml2:Subject><saml2:NameID Format="urn:oasis:names:tc:SAML:2.0:nameid-format:persistent">urn:dece:userid:org:dece:0E3F7C15D7C950BAE05305991F0A172A</saml2:NameID><saml2:SubjectConfirmation Method="urn:oasis:names:tc:SAML:2.0:cm:sender-vouches"><saml2:SubjectConfirmationData InResponseTo="_17yk64wp2abno1bp84sk74byo0" NotOnOrAfter="2015-02-04T11:02:08.936Z" Recipient="https://stdecqavutl1.va.neustar.com:2485/simplesaml/module.php/saml/sp/saml2-acs.php/RET"/></saml2:SubjectConfirmation></saml2:Subject><saml2:Conditions NotBefore="2015-02-04T08:01:58.936Z" NotOnOrAfter="2015-02-04T14:02:08.936Z"><saml2:AudienceRestriction><saml2:Audience>urn:dece:org:org:dece:RET</saml2:Audience></saml2:AudienceRestriction></saml2:Conditions><saml2:Advice><saml2:AssertionURIRef>https://qa.q.uvvu.com:7001/rest/2015/02/SecurityToken/Assertion/_854245dd-d0dc-4194-8ef0-a5074f8a6c48</saml2:AssertionURIRef></saml2:Advice><saml2:AuthnStatement AuthnInstant="2015-02-04T08:02:08.936Z" SessionIndex="_854245dd-d0dc-4194-8ef0-a5074f8a6c48"><saml2:AuthnContext><saml2:AuthnContextClassRef>urn:oasis:names:tc:SAML:2.0:ac:classes:Password</saml2:AuthnContextClassRef><saml2:AuthenticatingAuthority>urn:dece:org:org:dece:coordinator</saml2:AuthenticatingAuthority></saml2:AuthnContext></saml2:AuthnStatement><saml2:AttributeStatement><saml2:Attribute Name="accountID" NameFormat="urn:dece:type:accountID"><saml2:AttributeValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="xs:string">urn:dece:accountid:org:dece:0E3F7BFDC3D7509BE05305991F0A99B6</saml2:AttributeValue></saml2:Attribute></saml2:AttributeStatement></saml2:Assertion>]]></con:value></con:property><con:property><con:name>audience</con:name><con:value/></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>6a4253f1-125c-47e4-ac87-b67654d81a1b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88473dc5-fa31-490d-9c12-190567d5c20b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>6c1cc9bc-f4c0-4806-b8ef-7b230acc0879</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ec4aecad-ae30-4b80-84fa-0870e7f47510</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>9e47f371-34b0-4149-bbe2-2ac0b1ca3982</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="STSCreateandGetAPIforDevices" searchProperties="true" id="357a7b2f-0d22-49b9-89a9-a484ab493d96"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


if (tP.getPropertyValue("versionMinor") != tP.getPropertyValue("versionURLEncode")){
	tC.setPropertyValue("tokentype", "urn:dece:type:tokentype:usernamepassword") ;
}else{
	tC.setPropertyValue("tokentype", "urn%3Adece%3Atype%3Atokentype%3Ausernamepassword") ;
}

tC.setPropertyValue("expectErrType", "SUCCESS") ;
tC.setPropertyValue("assertionUUID", null) ;</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("SetPem");

myTC.setPropertyValue("NODE_ID",tP.getPropertyValue("NODE_ID"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("STSCreate");
RestTestRequestStep testStep1 = tC.getTestStepByName("STSGet");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);
soapUtils.setStepSSLSettingsKeyStore(testStep1, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="STSCreate"><con:settings/><con:config service="STS" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/SecurityToken/SecurityTokenExchange/" methodName="STS - POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="STSCreate" mediaType="" postQueryString="false" sslKeystore="RET_concat.pem">
          <con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="x-dece-ApplicationAuthorization" value="dclient-basic w0rnh4lz4bfuaxasn7qu:A3D90BF121838C67444D58AC6D6554A6" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings>
          <con:endpoint>${#Project#Device_HostName}</con:endpoint><con:request><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<Credentials xmlns="${#Project#coordinatorSchema}">
   <Username>${#TestCase#Username}</Username>
   <Password>${#Project#Password}</Password>
</Credentials>]]></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>assert messageExchange.responseHeaders["#status#"].toString() == "[HTTP/1.1 201 Created]";</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/>
        </con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body and Headers">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def tStep = tC.getTestStepByName('STSCreate');

tC.setPropertyValue("status", null);
tC.setPropertyValue("connection", null);
tC.setPropertyValue("contentType", null);
tC.setPropertyValue("contentLength", null);
tC.setPropertyValue("contentLocation", null);


/*
*  Get the HTTP headers
*/
String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("status", status);
tC.setPropertyValue("connection", connection);
tC.setPropertyValue("contentType", contentType);
tC.setPropertyValue("contentLength", contentLength);
tC.setPropertyValue("contentLocation", contentLocation);

this.log.info "contentLength [$contentLength]";
this.log.info "status [$status]";
this.log.info "contentType [$contentType]";
this.log.info "contentLocation [$contentLocation]";


if (contentLength.toInteger() > 0 &amp;&amp; status != "HTTP/1.1 201 Created") {
	rawResp = new ByteArrayOutputStream();
     rawResp = tStep.httpRequest.response.getRawResponseData();
     strVal  = new String(rawResp);

     int startAssert = strVal.indexOf("&lt;?xml version=\"1.0\" ");

	String XMLbody  = strVal.substring(startAssert, strVal.length());
     
	tC.setPropertyValue("XMLbody", XMLbody);
}</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Verify Response Body and Headers and save assertion">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
String major = context.expand( '${#Project#versionMajor}' );
String minor = context.expand( '${#Project#versionMinor}' );
def expectErrType = tC.getPropertyValue("expectErrType");

this.log.info "expectErrType is $expectErrType";

switch (expectErrType) {
	case "SUCCESS":
		expectHTTPstatus = "HTTP/1.1 201 Created";
		expectHTTPcontenttype = "text/plain; charset=UTF-8";
		contentLengthZero = true;
		doContentLocaton  = true;
		dobodyXML = false;
	break;
}
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("status");
assert tC.getPropertyValue("status") == expectHTTPstatus;


// Content-Location
if (doContentLocaton) {
	assert tC.getPropertyValue("contentLocation") != null;
	
	def b = tC.getPropertyValue("contentLocation").toURL();
	assert b.getPath().matches("/rest/$major/$minor/SecurityToken/Assertion/[_,0-9,a-f,-]*");
	def parms = b.getPath().split("/");
	
	tC.setPropertyValue("assertionUUID",parms[parms.size() - 1]);
} 
</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Construct Authorization Header for Device"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
		
String combo = tC.getPropertyValue("Username").toString() + ":" + tP.getPropertyValue("Password").toString();
String authHeaderValue = "Basic " + combo.bytes.encodeBase64().toString()

log.info "combo[$combo] - authHeaderValue[$authHeaderValue]";

tC.setPropertyValue("authHeaderValue",authHeaderValue);</script></con:config></con:testStep><con:testStep type="restrequest" name="STSGet"><con:settings/><con:config service="STS" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/SecurityToken/Assertion/{assertionUUID}" methodName="STS - GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="STSGet" mediaType="application/xml" sslKeystore="RET_concat.pem">
          <con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="${#TestCase#authHeaderValue}"/>
  &lt;con:entry key="x-dece-ApplicationAuthorization" value="dclient-basic w0rnh4lz4bfuaxasn7qu:A3D90BF121838C67444D58AC6D6554A6"/>
&lt;/xml-fragment></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings>
          <con:endpoint>${#Project#Device_HostName}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>assert messageExchange.responseHeaders["#status#"].toString() == "[HTTP/1.1 200 OK]";</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/>
        </con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract Response Body and Headers 1">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");
def tStep  = tC.getTestStepByName('STSGet');

/*
*  Get the HTTP headers
*/
String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
String major = tP.getPropertyValue("versionMajor");
String minor = tP.getPropertyValue("versionMinor");
String XMLbody = "";

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

//def expXML = tStep.httpRequest.response.getResponseContent();
this.log.info tStep.httpRequest.response.getRawResponseData();
//new b = tStep.httpRequest.response.getResponseContent();

rawResp = new ByteArrayOutputStream();

rawResp = tStep.httpRequest.response.getRawResponseData();
strVal  = new String(rawResp);
log.info strVal;
log.info "PATTY " + strVal.indexOf("&lt;?xml version=\"1.0\" ")

int startAssert = strVal.indexOf("&lt;?xml version=\"1.0\" ");
if (startAssert > 0) {
	XMLbody  = strVal.substring(startAssert, strVal.length());
}

tC.setPropertyValue("XMLbody", XMLbody);
tC.setPropertyValue("status", status);
tC.setPropertyValue("connection", connection);
tC.setPropertyValue("contentType", contentType);
tC.setPropertyValue("contentLength", contentLength);
tC.setPropertyValue("contentLocation", contentLocation);</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Extract Key Elements from &lt;Assertion> Body">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def XMLbody = tC.getPropertyValue("XMLbody");
def expectErrType = tC.getPropertyValue("expectErrType");

int lastColon = 0;
int lastSlash = 0;

if (expectErrType == "" || expectErrType == "SUCCESS") {
	tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",null);
	tC.setPropertyValue("NODE_USER_ID_FULL",null);
	tC.setPropertyValue("assertionNotBefore",null);
	tC.setPropertyValue("assertionNotOnOrAfter",null);
	tC.setPropertyValue("assertionAudienceRestriction",null);
	tC.setPropertyValue("NODE_USER_ID",null);
	tC.setPropertyValue("NODE_ACCOUNT_ID",null);
	
	if (XMLbody.length() > 0) {
		def myXML = new XmlSlurper().parseText(XMLbody).declareNamespace(saml2: "urn:oasis:names:tc:SAML:2.0:assertion");

			// Verify response sizes...
			assert myXML.size() == 1;

			def accountId = myXML."saml2:AttributeStatement"."saml2:Attribute"."saml2:AttributeValue";
			def userId    = myXML."saml2:Subject"."saml2:NameID";
			def NotBefore = myXML."saml2:Conditions".@NotBefore.text();
			def NotOnOrAfter = myXML."saml2:Conditions".@NotOnOrAfter.text();
			def AudienceRestriction = myXML."saml2:Conditions".AudienceRestriction;
			
			this.log.info "accountId [$accountId]";
			this.log.info "userId [$userId]";
			this.log.info "NotBefore [$NotBefore]";
			this.log.info "NotOnOrAfter [$NotOnOrAfter]";
			this.log.info "AudienceRestriction [$AudienceRestriction]";
					
			tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",accountId.toString());
			tC.setPropertyValue("NODE_USER_ID_FULL",userId.toString());
			tC.setPropertyValue("NODE_ACCOUNT_ID",accountId.toString().substring(accountId.toString().lastIndexOf(':') + 1).toString());
			tC.setPropertyValue("NODE_USER_ID",userId.toString().substring(userId.toString().lastIndexOf(':') + 1).toString());
			
			tC.setPropertyValue("assertionNotBefore",NotBefore.toString());
			tC.setPropertyValue("assertionNotOnOrAfter",NotOnOrAfter.toString());
			tC.setPropertyValue("assertionAudienceRestriction",NotBefore.toString());
			
	} else {
		return false;
	}
}</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Verify Response Body and Headers">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def url = tP.getPropertyValue("targetURL");
def assertionUUID = tC.getPropertyValue("assertionUUID");

def urnacct = tP.getPropertyValue("urnaccount");
def urnstream = tP.getPropertyValue("urnstream");
def expectErrType = tC.getPropertyValue("expectErrType");
def XMLbody = tC.getPropertyValue("XMLbody");
def nodeaccountid = tC.getPropertyValue("nodeaccountid");

boolean dobodyXML = true;
boolean doContentTypeHeader = true;
boolean doConnectionClose = false;
boolean doContentLocaton  = false;
boolean contentLengthZero = false;

String errorID     = "";
String errorReason = "";
String errorLink   = "";
String orgRequest  = url + "/dece/Account/" + urnacct + nodeaccountid;
String expectHTTPstatus = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection = "close";
String expectHTTPcontenttype = "application/xml;charset=UTF-8";
String major = tP.getPropertyValue("versionMajor");
String minor = tP.getPropertyValue("versionMinor");

this.log.info "expectErrType is $expectErrType";
 
if (expectErrType == "" || expectErrType == null) {
	expectErrType = "SUCCESS";
	tC.setPropertyValue("expectErrTypeSTSGet",expectErrType);
}


switch (expectErrType) {
	case "SUCCESS":
	default:
		expectHTTPstatus = "HTTP/1.1 200 OK";
		expectHTTPcontenttype = "application/xml;charset=UTF-8";
		contentLengthZero = false;
		doContentLocaton  = false;
		doContentTypeHeader = false;
		dobodyXML = true;
	break;
}

// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("status");
assert tC.getPropertyValue("status") == expectHTTPstatus;

// Connection

if (doConnectionClose) {
	this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("connection");
	assert tC.getPropertyValue("connection") == expectHTTPconnection;
}

//Content-Length
if (contentLengthZero) {
	assert tC.getPropertyValue("contentLength").toInteger() == 0;
} else {
	assert tC.getPropertyValue("contentLength").toInteger() > 0;
}
	
//Content-Type
if (doContentTypeHeader) {
	assert tC.getPropertyValue("contentType") == expectHTTPcontenttype;
}

</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Deflate and encode the &lt;Assertion>">
        <con:settings/>
        <con:config><script>import java.util.zip.Deflater;
import org.w3c.tools.codec.Base64Encoder;
import java.io.ByteArrayOutputStream;
import java.util.zip.DeflaterOutputStream;
//import org.apache.commons.codec.binary.Base64;
import org.opensaml.xml.util.Base64;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def expectErrType = tC.getPropertyValue("expectErrType");

if (expectErrType == "" || expectErrType == "SUCCESS") {
	
int compressedLength = 0;
//String XMLbody = tC.getPropertyValue("XMLassertion").toString();
String XMLbodyRaw = tC.getPropertyValue("XMLbody").toString();

int startAssert = XMLbodyRaw.indexOf("&lt;saml2:Assertion ");
int endAssert   = XMLbodyRaw.indexOf("&lt;/saml2:Assertion>");

String XMLbody = XMLbodyRaw.substring(startAssert, endAssert + 18).trim();
String base64encodeStr = "";

this.log.info "XMLbody is [$XMLbody]";

def myXML = new XmlSlurper().parseText(XMLbody);
tC.setPropertyValue("assertId",myXML.@ID.toString());

// Perform Deflation
//byte[] xmlBytes = XMLbody.trim().getBytes();
byte [] xmlBytes = new byte[XMLbody.trim().length()];

Deflater compresser = new Deflater(Deflater.DEFLATED, true);
compresser.setInput(XMLbody.trim().getBytes());
compresser.finish();
compressedLength = compresser.deflate(xmlBytes);
    
//ByteArrayOutputStream byteOutputStream    = new ByteArrayOutputStream();
//DeflaterOutputStream deflaterOutputStream = new DeflaterOutputStream(byteOutputStream);

//deflaterOutputStream.write(xmlBytes, 0, xmlBytes.length);
//deflaterOutputStream.close();

/*
// next, base64 encode it
Base64 base64Encoder = new Base64();

byte[] base64EncodedByteArray = base64Encoder.encode(byteOutputStream.toByteArray());
String base64EncodedMessage = new String(base64EncodedByteArray);
*/
byte [] subArray = Arrays.copyOfRange(xmlBytes, 0, compressedLength);
base64encodeStr = Base64.encodeBytes(subArray,Base64.DONT_BREAK_LINES);

// finally, URL encode it
//String urlEncodedMessage = URLEncoder.encode(base64EncodedMessage, "UTF-8");
tC.setPropertyValue("SAML", "SAML2 Assertion="+base64encodeStr);
}</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Return the NodeAccountId and NodeUserId to the Calling Test Case"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

if (tP.getPropertyValue("versionMinor") != tP.getPropertyValue("versionURLEncode")){	
	callTC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID"));
	callTC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL"));
	callTC.setPropertyValue("NODE_ACCOUNT_ID",tC.getPropertyValue("NODE_ACCOUNT_ID"));
	callTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
}else{
	callTC.setPropertyValue("NODE_USER_ID",URLEncoder.encode(tC.getPropertyValue("NODE_USER_ID"), "UTF-8"));
	callTC.setPropertyValue("NODE_USER_ID_FULL",URLEncoder.encode(tC.getPropertyValue("NODE_USER_ID_FULL"), "UTF-8"));
	callTC.setPropertyValue("NODE_ACCOUNT_ID",URLEncoder.encode(tC.getPropertyValue("NODE_ACCOUNT_ID"), "UTF-8"));
	callTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",URLEncoder.encode(tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"), "UTF-8"));
}


callTC.setPropertyValue("SAML",tC.getPropertyValue("SAML"));</script></con:config></con:testStep><con:properties><con:property><con:name>keyStorePath</con:name><con:value>C:\Code_Repo\uv-coordinator-api-regression\Certs\QALP1/RET_concat.pem</con:value></con:property><con:property><con:name>tName</con:name><con:value>00043_DeviceGetCacheScenario_NonCS_DeviceGet_1/07_DeviceGet(If-Modified-Since)_1/06_304_Not_Modified</con:value></con:property><con:property><con:name>sName</con:name><con:value>DeviceGetCache_TestCases</con:value></con:property><con:property><con:name>NODE_ID</con:name><con:value>RET</con:value></con:property><con:property><con:name>Username</con:name><con:value>firstfau_20150204_013418</con:value></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>assertionUUID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">_01a0ab07-3e5a-472f-9799-37c2bdf309bc</con:value></con:property><con:property><con:name>status</con:name><con:value>HTTP/1.1 200 OK</con:value></con:property><con:property><con:name>connection</con:name><con:value>close</con:value></con:property><con:property><con:name>contentType</con:name><con:value>text/xml;charset=UTF-8</con:value></con:property><con:property><con:name>contentLength</con:name><con:value>2605</con:value></con:property><con:property><con:name>contentLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>XMLbody</con:name><con:value><![CDATA[<?xml version="1.0" encoding="UTF-8"?><saml2:Assertion xmlns:saml2="urn:oasis:names:tc:SAML:2.0:assertion" ID="_01a0ab07-3e5a-472f-9799-37c2bdf309bc" IssueInstant="2015-02-04T08:02:17.353Z" Version="2.0" xmlns:xs="http://www.w3.org/2001/XMLSchema"><saml2:Issuer>http://c.decellc.com/</saml2:Issuer><ds:Signature xmlns:ds="http://www.w3.org/2000/09/xmldsig#"><ds:SignedInfo><ds:CanonicalizationMethod Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"/><ds:SignatureMethod Algorithm="http://www.w3.org/2000/09/xmldsig#rsa-sha1"/><ds:Reference URI="#_01a0ab07-3e5a-472f-9799-37c2bdf309bc"><ds:Transforms><ds:Transform Algorithm="http://www.w3.org/2000/09/xmldsig#enveloped-signature"/><ds:Transform Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"><ec:InclusiveNamespaces xmlns:ec="http://www.w3.org/2001/10/xml-exc-c14n#" PrefixList="xs"/></ds:Transform></ds:Transforms><ds:DigestMethod Algorithm="http://www.w3.org/2000/09/xmldsig#sha1"/><ds:DigestValue>jVYY0ouzCk6W9rwThsRnKTWR/w8=</ds:DigestValue></ds:Reference></ds:SignedInfo><ds:SignatureValue>MBfPPCIQAFg1L44QjYCqmunnOCMjtRDpiPLYQh5uvywVV8TdZSvcNrMwiWJGNRxd8FGfv3gnLKXYPBJfSleBEH6V4dPMm3Pf0Kh/5QYXp4KH7FKg6fn5lyrUTsWHiBdhic1EighOIj744dGJMU+VGTmazae1ux6n3MPi5u2rT4M=</ds:SignatureValue></ds:Signature><saml2:Subject><saml2:NameID Format="urn:oasis:names:tc:SAML:2.0:nameid-format:persistent">urn:dece:userid:org:dece:0E3F7F20750D6D14E05307991F0AB570</saml2:NameID><saml2:SubjectConfirmation Method="urn:oasis:names:tc:SAML:2.0:cm:bearer"><saml2:SubjectConfirmationData NotOnOrAfter="2015-02-04T11:02:17.353Z"/></saml2:SubjectConfirmation></saml2:Subject><saml2:Conditions NotBefore="2015-02-04T08:02:07.353Z" NotOnOrAfter="2025-02-04T08:02:17.353Z"/><saml2:Advice><saml2:AssertionURIRef>https://qa.d.uvvu.com:7001/rest/2015/02/SecurityToken/Assertion/_01a0ab07-3e5a-472f-9799-37c2bdf309bc</saml2:AssertionURIRef></saml2:Advice><saml2:AuthnStatement AuthnInstant="2015-02-04T08:02:17.353Z" SessionIndex="_01a0ab07-3e5a-472f-9799-37c2bdf309bc"><saml2:AuthnContext><saml2:AuthnContextClassRef>urn:oasis:names:tc:SAML:2.0:ac:classes:Password</saml2:AuthnContextClassRef><saml2:AuthenticatingAuthority>urn:dece:org:org:dece:coordinator</saml2:AuthenticatingAuthority></saml2:AuthnContext></saml2:AuthnStatement><saml2:AttributeStatement><saml2:Attribute Name="accountID" NameFormat="urn:dece:type:accountID"><saml2:AttributeValue xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="xs:string">urn:dece:accountid:org:dece:0E3F7C1565C16D12E05307991F0A994E</saml2:AttributeValue></saml2:Attribute></saml2:AttributeStatement></saml2:Assertion>]]></con:value></con:property><con:property><con:name>assertionNotBefore</con:name><con:value>2015-02-04T08:02:07.353Z</con:value></con:property><con:property><con:name>assertionNotOnOrAfter</con:name><con:value>2025-02-04T08:02:17.353Z</con:value></con:property><con:property><con:name>assertionAudienceRestriction</con:name><con:value>2015-02-04T08:02:07.353Z</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:0E3F7C1565C16D12E05307991F0A994E</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:0E3F7F20750D6D14E05307991F0AB570</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>0E3F7F20750D6D14E05307991F0AB570</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>0E3F7C1565C16D12E05307991F0A994E</con:value></con:property><con:property><con:name>assertId</con:name><con:value>_01a0ab07-3e5a-472f-9799-37c2bdf309bc</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVbbcuI4EP0VynncMpZvEFyBKi4hIYGEACFhXraELBtlbJmRZCD5+pUMeAwhGWafqG5ap4/U3ad9xWEcWV6Tc8wESWhpE0eUe5m3rqWMegnkhHsUxph7Annj5qDvWWXgwf0RrdTr1LV/gQkBnIOqbmMX6k7VCvRatVbT7Sqy5n5gg9ocyVDOU9yjXEAq6poFTFcHlg6cCbj0gOWZ1bLt2j+00hQzLrFlSBloO1IbXtcWQiw9w1iv1+W1XU5YaFgAmMbroD9GCxxDrXG1vVGWiDV28ajsY4SjCJVREhtXxkHMlc+9MQkpFCnDu1z+V7mAAWqGjPE5CS+0/Cz2ezRIMrMNaUIJghH5gOp9BlgsEr/UjMKEEbGIv7yECRSwjjdIR6ZDLzTjkNqZQAcMGYc6X0BzhzXCAWaYIlx6HvXq2sV5VcuOThikPEhYzA/Nv+OD6QpHyRL7Ot9fa0ftfMATL9W4wsjrURSlnKzwg2rWJUSY76qJ0flQpSHDAdn0CZcNuuGKnVGkd2RuX6NDQszF/ylQoThbkCmMUtx4m85mIEk/2j8rLzW2niz4iN5PXkbG+rKeESgGZ468tFvzqCnzJtqeGLSC4bDde2p2Q7PvOE9vs/avOKX0sT14E6POkgz7s6eFm67e19Pp5cT/MV6hBzZYk5e7m4fRxr/s3gQrO6T9+9fZsHUXjCPcur6tTB1/OIjtYQDuF4b7NHtdOve31e59WAmoG72z5wl/uSUtf0GQeU3CxWPvreo4/s3d4Pmf6c0khh8Qm+mmQu3BkLipxSbOoJ5fp8D/0Lef+XE6f8NI7E3VBr1OqSurBMX3YqY8xNeDLNRbKvHhAlOhNdQppR1eKuWO+J6s4dYG13a32rVA1QWdSsd0roFrAzk6Zhc0W24V7EVmy+KIYjuhAVG5lORu2+Z7gij25hgyzLRvkDpQwNJDIh7pI2sGArMDhTXNosKqtv4S6Pi/fU4Z4xMVwFWaFpbvhU+oONir+DEX67TaG3v8pr8iKC9nvpSkVsnuzrScy2n6Bct+OV2tUiXmXlVNMZOzYCgeBrCMMUapnL/3SfITUyNHMc4Su/3Nj5Pn/kOKqVjQsYACx7JbSpl5xnYbY662W4/6eHPu6jxIKQsh8Eac8rUjuZkV42+XN/KQipPuofxZJ8zPL3gKq5BH3lMuN0FoqCwldO+/h0RNRz4hKJGwRI5oworgpwBOJT905o+ccxGCkXkq8Nf/lNTs1TWIUJJS0etomaOoBxlP8b7E3u+gTzCZ5OTfIOTPHyE6yVoAYfnlwkmGr1aJxyUgDQuaskv6SVbapltx26aUFasoK7Wac50/ygG7xif3Z0/hnY57vPEf</con:value></con:property><con:property><con:name>authHeaderValue</con:name><con:value>Basic Zmlyc3RmYXVfMjAxNTAyMDRfMDEzNDE4OnRlc3Rpbmc=</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>6a4253f1-125c-47e4-ac87-b67654d81a1b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>88473dc5-fa31-490d-9c12-190567d5c20b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>6c1cc9bc-f4c0-4806-b8ef-7b230acc0879</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ec4aecad-ae30-4b80-84fa-0870e7f47510</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>9e47f371-34b0-4149-bbe2-2ac0b1ca3982</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TOUPolicyCreateAPI" searchProperties="true" id="468a3f4c-4f58-4a38-830b-e6ac210a5a2f"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("NODE_USER_ID",null);
tC.setPropertyValue("NODE_ACCOUNT_ID",null);
tC.setPropertyValue("NODE_USER_ID_FULL",null);
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",null);
tC.setPropertyValue("NODE_ID",null);
tC.setPropertyValue("SAML",null);
tC.setPropertyValue("expectErrType","SUCCESS");
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Required Properties from Calling Test Case"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("NODE_USER_ID",callTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL",callTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("NODE_ACCOUNT_ID",callTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",callTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

tC.setPropertyValue("SAML",callTC.getPropertyValue("SAML"));

if (tP.getPropertyValue("versionMinor") == tP.getPropertyValue("versionURLEncode")){	
	tC.setPropertyValue("Policy_Class", URLEncoder.encode("urn:dece:type:policy:TermsOfUse", "UTF-8"));
	
}else{
	tC.setPropertyValue("Policy_Class", "urn:dece:type:policy:TermsOfUse");
}



</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("SetPem");

myTC.setPropertyValue("NODE_ID",tP.getPropertyValue("NODE_ID"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("PolicyCreateSinglePolicyPost_TOU");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="groovy" name="Set TOU Policy Resource"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

String country = context.expand( '${#Project#AccountCountry}' );
def tOUUrl = context.expand( '${#Project#TOUUrl}' )


def touForCountry = "TOU_"+country
def consent_Version =  tP.getPropertyValue(touForCountry);

tP.setPropertyValue("TOUPolicyResource",'https://'+ tOUUrl + '/Consent/Text/' + country + '/urn:dece:type:policy:TermsOfUse:' + consent_Version + '/html');

log.info "Policy TOU from Project level property " + tP.getPropertyValue("TOUPolicyResource");</script></con:config></con:testStep><con:testStep type="restrequest" name="PolicyCreateSinglePolicyPost_TOU"><con:settings/><con:config service="UserPolicyCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{NodeAccountId}/User/{NodeUserId}/Policy/{PolicyClass}" methodName="PolicyCreateSinglePolicyPost" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PolicyCreateSinglePolicyPost_TOU" mediaType="" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="RET_concat.pem" accept="application/xml;charset=UTF-8"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#TestCase#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.settings.CommonSettings@entitizeProperties">false</con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@bind_address"/></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd"  xmlns:dece="${#Project#coordinatorSchema}"  xmlns:ds="http://www.w3.org/2000/09/xmldsig#"  xmlns:md="http://www.movielabs.com/md"  xmlns:xenc="http://www.w3.org/2001/04/xmlenc#"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
	<dece:Policy>
		<dece:PolicyClass>urn:dece:type:policy:TermsOfUse</dece:PolicyClass>
		<dece:Resource>${#Project#TOUPolicyResource}</dece:Resource>
		<dece:RequestingEntity>urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID}</dece:RequestingEntity>
		<dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
		<dece:ResourceStatus>
			<dece:Current CreatedBy="urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID}">
				<dece:Value>urn:dece:type:status:active</dece:Value>
			</dece:Current>
		</dece:ResourceStatus>
	</dece:Policy>
</dece:PolicyList>]]></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>assert messageExchange.responseHeaders["#status#"].toString() == "[HTTP/1.1 201 Created]";</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="${#TestCase#NODE_USER_ID_FULL}"/>
  <con:entry key="PolicyClass" value="${#TestCase#Policy_Class}"/>
  <con:entry key="NodeAccountId" value="${#TestCase#NODE_ACCOUNT_ID_FULL}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVbZcuI6EP0VynmcMpbBZnEFqgxkYULClmWSl1uK3IASIzuSzJKvH8mAg8lyuffJpXbr9OlFRzoVeB6WPF8I4JJGrLCah0x4qbVhJJx5ERZUeAzPQXiSeGP/uueVisjDuy1GodtpGP/UXKfkuEFgBiggpmPXHbMGE2RiF1WdSQ1XiFNTrkIk0GVCYiYbRgnZrolKJnJuUc1DJQ/VivVy5cko3AMXClu5FJGxJbUSDWMmZexZ1nK5LC7LxYhPrRJCtvXnujcmM5hjo3m6ySgNxJtbf1IMgEAYkiKJ5taplfM5DYQ3plOGZcJhGyv4LhayUN1SPoGg0xMj2wtBl02idNnGLGKU4JC+Y12fa5CzKCj44TTiVM7m3yZhIw1swoqYxHbYiWHlqR0JlGPIBTbFDNtbrBFMgAMjULgbdRvGyXFdS7fecszEJOJzkV/+Nz7AFhBGMQSm2KW1pXY84BeVap4C8bqMhImgC7jRwxpjAmLbTSDHQxUGHCZ01aNCDehKaHbWPr2D5aYaHToFIf9Pg/aaswG5x2ECzeBtcNe/uBzht+loSPyr19+/V9XFpfxVeW2kBPadU0PW2s3yYCizIdrsuHAfa+0XFAc+4Y/k6p2/j7sIovGQDPu805vx69WQSF/eBF17acFLb7pgL3b58uoi6bvroXtxN1m849Z4eFNLSOTUzy6urOp7x50+XdqVs8GvO2tw67faZyP6Z3Szvn8c8DUbPvBe5c13Lmw6eJg9turTdpXXftP+E+mBDEP7Bfz+fbWPKnH54dq1nadWH+6XjSydPf552+7Mj5PnFyByt9Rj0O0UzlWXsPxZzLSFBuYkdfViLT5CApNGU+/S2uElSu5o4KkebtborHxebdtup9quu6jlnyG3jNx63T5Hvl0t+TuR2bA4oNiO2ITqWFpyN2PzM0Ey9wSwALi5iBKldML4AbGDJS502UgdgogJuI2UPNvV9WvFWcYl/Mwi+zmuOeK16jyvIyWvN5Hssz73JxJ4TpRtOyfKIyA0pqCVWw+2UJMtpCrGG14kMrSLC1xkkCht51pmvZJTcy1B53EImqo1j4IkhGI8i9PSWGLzLZmYiNQ6OrtNj9u3iR3+29VA+QRUOwidSwtUH+HT7WJ77i6R7xN29hPewftJQPXJUgWVnJINk/yvjznRA5INicpoRznzPDTkUK3DhLJAwYKSbNKz+1rJuDr4zV073nDxrZgsFknagKoWOK7gLZ2ihUrWGEiipGl9G70CszIU66h7ICN+EDyz5ykmcsbGEkuYq4kppMsjLv4xCH3xd9Wsr459VeRCqtJJWMmvbO1QPVo04x/fNcQj2k+ZB+qzjHjw0bEvsPbiqDzVvS8pm+qVvgPW38wFiRQsVeoV8X3wrwC+Cp43ZkXOuEg1UM+JhO//FLQsNQxMSJQw2e0YqWFfKlOech2D9+H0CSZV4+x5Rv/9fWbSdAQIqEedoCm+vmU9fQTYdE9ut0E/KW7rvNMud6ouqrf2Fbdeb1WyouTYNT+ZP1v26nQ4482/</con:value></con:property><con:property><con:name>tName</con:name><con:value>00043_DeviceGetCacheScenario_NonCS_DeviceGet_1/07_DeviceGet(If-Modified-Since)_1/06_304_Not_Modified</con:value></con:property><con:property><con:name>sName</con:name><con:value>DeviceGetCache_TestCases</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>0E3F7C15D7C950BAE05305991F0A172A</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>0E3F7BFDC3D7509BE05305991F0A99B6</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>status</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>contentType</con:name><con:value>application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>contentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>contentLocation</con:name><con:value>https://qa.q.uvvu.com:7001/rest/1/06/Account/urn:dece:accountid:org:dece:D12F2DD48A10D559E0401F0A059918B0/User/urn:dece:userid:org:dece:D12F2DD48A1ED559E0401F0A059918B0/Policy/urn:dece:type:policy:TermsOfUse</con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>Keep-Alive</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://qa.q.uvvu.com:7001/rest/1/07/Account/urn:dece:accountid:org:dece:E37E9E0090319851E0401F0A05992566/User/urn:dece:userid:org:dece:E37E9E0090589851E0401F0A05992566/Policy/urn:dece:type:policy:TermsOfUse</con:value></con:property><con:property><con:name>Policy_Class</con:name><con:value>urn:dece:type:policy:TermsOfUse</con:value></con:property><con:property><con:name>ENNODE_USER_ID</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AD3CD43AEEE91F252E0401F0A079913BF</con:value></con:property><con:property><con:name>ENNODE_ACCOUNT_ID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AD3CD44C830AA5460E0401F0A079913BD</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Code_Repo\uv-coordinator-api-regression\Certs\QALP1/RET_concat.pem</con:value></con:property><con:property><con:name>NODE_ID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:0E3F7C15D7C950BAE05305991F0A172A</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:0E3F7BFDC3D7509BE05305991F0A99B6</con:value></con:property><con:property><con:name>ENCODED_NODE_USER_ID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>ENCODED_NODE_ACCOUNT_ID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>ce02e137-2b56-4bd6-a4b9-e1e9fdc05e16</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>46677643-d11e-4e41-a0a4-e6e1d2901adb</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="ULCPolicyCreateAPI" searchProperties="true" id="00662cf6-17e6-4f7a-8fcb-021b1c5183dd"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("NODE_USER_ID",null);
tC.setPropertyValue("NODE_ACCOUNT_ID",null);
tC.setPropertyValue("NODE_USER_ID_FULL",null);
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",null);
tC.setPropertyValue("NODE_ID",null);
tC.setPropertyValue("SAML",null);
tC.setPropertyValue("expectErrType","SUCCESS");
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Required Properties from Calling Test Case"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("NODE_USER_ID",callTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL",callTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("NODE_ACCOUNT_ID",callTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",callTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

tC.setPropertyValue("SAML",callTC.getPropertyValue("SAML"));

if (tP.getPropertyValue("versionMinor") == tP.getPropertyValue("versionURLEncode")){	
	tC.setPropertyValue("Policy_Class", URLEncoder.encode("urn:dece:type:policy:UserLinkConsent", "UTF-8"));
}else{
	tC.setPropertyValue("Policy_Class", "urn:dece:type:policy:UserLinkConsent");
}



</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("SetPem");

myTC.setPropertyValue("NODE_ID",tP.getPropertyValue("NODE_ID"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("PolicyCreateSinglePolicyPost_ULC");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="PolicyCreateSinglePolicyPost_ULC"><con:settings/><con:config service="UserPolicyCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{NodeAccountId}/User/{NodeUserId}/Policy/{PolicyClass}" methodName="PolicyCreateSinglePolicyPost" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PolicyCreateSinglePolicyPost_ULC" mediaType="" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="0701_concat.pem" accept="application/xml;charset=UTF-8"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#TestCase#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.settings.CommonSettings@entitizeProperties">false</con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@bind_address"/></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" 
xmlns:dece="${#Project#coordinatorSchema}" 
xmlns:ds="http://www.w3.org/2000/09/xmldsig#" 
xmlns:md="http://www.movielabs.com/md" 
xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:UserLinkConsent</dece:PolicyClass>
      <dece:Resource>urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:${#Project#NODE_ID}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
      <dece:Current CreatedBy="urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID}">
      <dece:Value>urn:dece:type:status:active</dece:Value>
      </dece:Current>
      </dece:ResourceStatus>
</dece:Policy>
</dece:PolicyList>]]></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>assert messageExchange.responseHeaders["#status#"].toString() == "[HTTP/1.1 201 Created]";</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="${#TestCase#NODE_USER_ID_FULL}"/>
  <con:entry key="PolicyClass" value="${#TestCase#Policy_Class}"/>
  <con:entry key="NodeAccountId" value="${#TestCase#NODE_ACCOUNT_ID_FULL}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=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</con:value></con:property><con:property><con:name>tName</con:name><con:value>TC_DECE_50001_DeviceGetCacheScenario_NonCS_DeviceGet_DeviceGet_200_OK</con:value></con:property><con:property><con:name>sName</con:name><con:value>DeviceGetCache_TestCases</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E499C8DCD418350DE0401F0A05996E15</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E499D1BC1CF2CB57E0401F0A079955AE</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>7600</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>status</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>contentType</con:name><con:value>application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>contentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>contentLocation</con:name><con:value>https://qa.q.uvvu.com:7001/rest/1/06/Account/urn:dece:accountid:org:dece:D12F2DD48A10D559E0401F0A059918B0/User/urn:dece:userid:org:dece:D12F2DD48A1ED559E0401F0A059918B0/Policy/urn:dece:type:policy:TermsOfUse</con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>Keep-Alive</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://qa.q.uvvu.com:7001/rest/1/07/Account/urn:dece:accountid:org:dece:E37E9E0090319851E0401F0A05992566/User/urn:dece:userid:org:dece:E37E9E0090589851E0401F0A05992566/Policy/urn:dece:type:policy:TermsOfUse</con:value></con:property><con:property><con:name>Policy_Class</con:name><con:value>urn%3Adece%3Atype%3Apolicy%3AUserLinkConsent</con:value></con:property><con:property><con:name>ENNODE_USER_ID</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AD3CD43AEEE91F252E0401F0A079913BF</con:value></con:property><con:property><con:name>ENNODE_ACCOUNT_ID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AD3CD44C830AA5460E0401F0A079913BD</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Users\raju.ganji\Desktop\DeviceGet_170613/0701_concat.pem</con:value></con:property><con:property><con:name>NODE_ID</con:name><con:value>0701</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AE499C8DCD418350DE0401F0A05996E15</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE499D1BC1CF2CB57E0401F0A079955AE</con:value></con:property><con:property><con:name>ENCODED_NODE_USER_ID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>ENCODED_NODE_ACCOUNT_ID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>ce02e137-2b56-4bd6-a4b9-e1e9fdc05e16</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>46677643-d11e-4e41-a0a4-e6e1d2901adb</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="MUCPolicyCreateAPI" searchProperties="true" id="2f0f4939-78f3-4164-baf1-42530485aa70"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("NODE_USER_ID",null);
tC.setPropertyValue("NODE_ACCOUNT_ID",null);
tC.setPropertyValue("NODE_USER_ID_FULL",null);
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",null);
tC.setPropertyValue("NODE_ID",null);
tC.setPropertyValue("SAML",null);
tC.setPropertyValue("expectErrType","SUCCESS");
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Required Properties from Calling Test Case"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("NODE_USER_ID",callTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL",callTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("NODE_ACCOUNT_ID",callTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",callTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

tC.setPropertyValue("SAML",callTC.getPropertyValue("SAML"));

if (tP.getPropertyValue("versionMinor") == tP.getPropertyValue("versionURLEncode")){	
	tC.setPropertyValue("Policy_Class", URLEncoder.encode("urn:dece:type:policy:ManageUserConsent", "UTF-8"));
}else{
	tC.setPropertyValue("Policy_Class", "urn:dece:type:policy:ManageUserConsent");
}



</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("SetPem");

myTC.setPropertyValue("NODE_ID",tP.getPropertyValue("NODE_ID"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("PolicyCreateSinglePolicyPost_MUC");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="PolicyCreateSinglePolicyPost_MUC"><con:settings/><con:config service="UserPolicyCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{NodeAccountId}/User/{NodeUserId}/Policy/{PolicyClass}" methodName="PolicyCreateSinglePolicyPost" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PolicyCreateSinglePolicyPost_MUC" mediaType="" postQueryString="false" id="5f368efb-3bbc-4d75-bfcc-4bac66be2c45" sslKeystore="RET_concat.pem" accept="application/xml;charset=UTF-8"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#TestCase#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.settings.CommonSettings@entitizeProperties">false</con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@bind_address"/></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<dece:PolicyList xsi:schemaLocation="http://www.decellc.org/schema dece.xsd" 
xmlns:dece="${#Project#coordinatorSchema}" 
xmlns:ds="http://www.w3.org/2000/09/xmldsig#" 
xmlns:md="http://www.movielabs.com/md" 
xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<dece:Policy>
      <dece:PolicyClass>urn:dece:type:policy:ManageUserConsent</dece:PolicyClass>
      <dece:Resource>urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID}</dece:Resource>
      <dece:RequestingEntity>urn:dece:org:org:dece:${#Project#NODE_ID}</dece:RequestingEntity>
      <dece:PolicyAuthority>urn:dece:org:org:dece:coordinator</dece:PolicyAuthority>
      <dece:ResourceStatus>
      <dece:Current CreatedBy="urn:dece:userid:org:dece:${#TestCase#NODE_USER_ID}">
      <dece:Value>urn:dece:type:status:active</dece:Value>
      </dece:Current>
      </dece:ResourceStatus>
</dece:Policy>
</dece:PolicyList>]]></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>assert messageExchange.responseHeaders["#status#"].toString() == "[HTTP/1.1 201 Created]";</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="${#TestCase#NODE_USER_ID_FULL}"/>
  <con:entry key="PolicyClass" value="${#TestCase#Policy_Class}"/>
  <con:entry key="NodeAccountId" value="${#TestCase#NODE_ACCOUNT_ID_FULL}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVbZcuI6EP0VynmcMpbBZnEFqgxkYULClmWSl1uK3IASIzuSzJKvH8mAg8lyuffJpXbr9OlFRzoVeB6WPF8I4JJGrLCah0x4qbVhJJx5ERZUeAzPQXiSeGP/uueVisjDuy1GodtpGP/UXKfkuEFgBiggpmPXHbMGE2RiF1WdSQ1XiFNTrkIk0GVCYiYbRgnZrolKJnJuUc1DJQ/VivVy5cko3AMXClu5FJGxJbUSDWMmZexZ1nK5LC7LxYhPrRJCtvXnujcmM5hjo3m6ySgNxJtbf1IMgEAYkiKJ5taplfM5DYQ3plOGZcJhGyv4LhayUN1SPoGg0xMj2wtBl02idNnGLGKU4JC+Y12fa5CzKCj44TTiVM7m3yZhIw1swoqYxHbYiWHlqR0JlGPIBTbFDNtbrBFMgAMjULgbdRvGyXFdS7fecszEJOJzkV/+Nz7AFhBGMQSm2KW1pXY84BeVap4C8bqMhImgC7jRwxpjAmLbTSDHQxUGHCZ01aNCDehKaHbWPr2D5aYaHToFIf9Pg/aaswG5x2ECzeBtcNe/uBzht+loSPyr19+/V9XFpfxVeW2kBPadU0PW2s3yYCizIdrsuHAfa+0XFAc+4Y/k6p2/j7sIovGQDPu805vx69WQSF/eBF17acFLb7pgL3b58uoi6bvroXtxN1m849Z4eFNLSOTUzy6urOp7x50+XdqVs8GvO2tw67faZyP6Z3Szvn8c8DUbPvBe5c13Lmw6eJg9turTdpXXftP+E+mBDEP7Bfz+fbWPKnH54dq1nadWH+6XjSydPf552+7Mj5PnFyByt9Rj0O0UzlWXsPxZzLSFBuYkdfViLT5CApNGU+/S2uElSu5o4KkebtborHxebdtup9quu6jlnyG3jNx63T5Hvl0t+TuR2bA4oNiO2ITqWFpyN2PzM0Ey9wSwALi5iBKldML4AbGDJS502UgdgogJuI2UPNvV9WvFWcYl/Mwi+zmuOeK16jyvIyWvN5Hssz73JxJ4TpRtOyfKIyA0pqCVWw+2UJMtpCrGG14kMrSLC1xkkCht51pmvZJTcy1B53EImqo1j4IkhGI8i9PSWGLzLZmYiNQ6OrtNj9u3iR3+29VA+QRUOwidSwtUH+HT7WJ77i6R7xN29hPewftJQPXJUgWVnJINk/yvjznRA5INicpoRznzPDTkUK3DhLJAwYKSbNKz+1rJuDr4zV073nDxrZgsFknagKoWOK7gLZ2ihUrWGEiipGl9G70CszIU66h7ICN+EDyz5ykmcsbGEkuYq4kppMsjLv4xCH3xd9Wsr459VeRCqtJJWMmvbO1QPVo04x/fNcQj2k+ZB+qzjHjw0bEvsPbiqDzVvS8pm+qVvgPW38wFiRQsVeoV8X3wrwC+Cp43ZkXOuEg1UM+JhO//FLQsNQxMSJQw2e0YqWFfKlOech2D9+H0CSZV4+x5Rv/9fWbSdAQIqEedoCm+vmU9fQTYdE9ut0E/KW7rvNMud6ouqrf2Fbdeb1WyouTYNT+ZP1v26nQ4482/</con:value></con:property><con:property><con:name>tName</con:name><con:value>00043_DeviceGetCacheScenario_NonCS_DeviceGet_1/07_DeviceGet(If-Modified-Since)_1/06_304_Not_Modified</con:value></con:property><con:property><con:name>sName</con:name><con:value>DeviceGetCache_TestCases</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>0E3F7C15D7C950BAE05305991F0A172A</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>0E3F7BFDC3D7509BE05305991F0A99B6</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>7600</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>status</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>contentType</con:name><con:value>application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>contentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>contentLocation</con:name><con:value>https://qa.q.uvvu.com:7001/rest/1/06/Account/urn:dece:accountid:org:dece:D12F2DD48A10D559E0401F0A059918B0/User/urn:dece:userid:org:dece:D12F2DD48A1ED559E0401F0A059918B0/Policy/urn:dece:type:policy:TermsOfUse</con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>Keep-Alive</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://qa.q.uvvu.com:7001/rest/1/07/Account/urn:dece:accountid:org:dece:E37E9E0090319851E0401F0A05992566/User/urn:dece:userid:org:dece:E37E9E0090589851E0401F0A05992566/Policy/urn:dece:type:policy:TermsOfUse</con:value></con:property><con:property><con:name>Policy_Class</con:name><con:value>urn:dece:type:policy:ManageUserConsent</con:value></con:property><con:property><con:name>ENNODE_USER_ID</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AD3CD43AEEE91F252E0401F0A079913BF</con:value></con:property><con:property><con:name>ENNODE_ACCOUNT_ID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AD3CD44C830AA5460E0401F0A079913BD</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Code_Repo\uv-coordinator-api-regression\Certs\QALP1/RET_concat.pem</con:value></con:property><con:property><con:name>NODE_ID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:0E3F7C15D7C950BAE05305991F0A172A</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:0E3F7BFDC3D7509BE05305991F0A99B6</con:value></con:property><con:property><con:name>ENCODED_NODE_USER_ID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>ENCODED_NODE_ACCOUNT_ID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>ce02e137-2b56-4bd6-a4b9-e1e9fdc05e16</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>46677643-d11e-4e41-a0a4-e6e1d2901adb</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="UserPolicyDeleteAPI" searchProperties="true" id="bd34c029-0c41-4e3e-beb0-c8cb19aa3703"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("NODE_USER_ID",null);
tC.setPropertyValue("NODE_ACCOUNT_ID",null);
tC.setPropertyValue("NODE_USER_ID_FULL",null);
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",null);
tC.setPropertyValue("NODE_ID",null);
tC.setPropertyValue("POLICY_ID",null);
tC.setPropertyValue("SAML",null);
tC.setPropertyValue("expectErrType","SUCCESS");
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Required Properties from Calling Test Case"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("NODE_USER_ID",callTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL",callTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("NODE_ACCOUNT_ID",callTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",callTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_ID",callTC.getPropertyValue("NODE_ID"));
tC.setPropertyValue("POLICY_ID",callTC.getPropertyValue("POLICY_ID"));
tC.setPropertyValue("SAML",callTC.getPropertyValue("SAML"));



</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("SetPem");

myTC.setPropertyValue("NODE_ID",tP.getPropertyValue("NODE_ID"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("PolicyDelete");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="PolicyDelete"><con:settings/><con:config service="UserPolicyDelete" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{NodeAccountId}/User/{NodeUserId}/Policy/{PolicyID}" methodName="Delete" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PolicyDelete" mediaType="application/xml" sslKeystore="RET_concat.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="${#TestCase#SAML}"/>
  &lt;con:entry key="If-Match" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>assert messageExchange.responseHeaders["#status#"].toString() == "[HTTP/1.1 200 OK]";</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="${#TestCase#NODE_USER_ID_FULL}"/>
  <con:entry key="PolicyID" value="${#TestCase#POLICY_ID}"/>
  <con:entry key="NodeAccountId" value="${#TestCase#NODE_ACCOUNT_ID_FULL}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVbbcuI4EP0VynmcMpbN3RWoggALk2RIgJDLy5aQ26Bgy2DJBvL1KxlwMAlZdp9cardOn77oSNcc+55lNzmHUNCA5Ta+x7idWOtaFDI7wJxym2EfuC2IPWre39lWHtn4sEXL9dt17W8XV0qFYq2qVypuRS+SclHHDjF1E01dExcKgMyadOU8gj7jAjNR1yxklnRk6ag4RhW7VLWL5bxZNN+03ARCLrGlSx5pe1IbXtfmQixtw1iv1/l1IR+EM8NCyDRe7u9GZA4+1hrXu4ySQGFj70/yDhDwPJIngW9cGxmfa4fbIzpjWEQh7GM552IhA9UM6eNwOrvS0r3g9JkbJMsbzAJGCfboB1b1uQcxD5xc05sFIRVz/2wSJlLAOmyITswiu9KMLLULgTIMQ451PsfmHmsILoTACOSehv26dnVZ15Kt4xAz7gahz7PL/8YHWAxesARH54e09tQuB/ymUo1rIHafES/iNIY/aliXmADfdxPI5VC5hxBcurmjXA7ohit2xjG9k+WuGm06Ay7+T4OOmrMDmWAvgkb7AaaTmC4MPCvGhlN+GQ+njzfVN/9pVk8IHDsnhrS1u+XJUKZDtNvhduZObfjc64uVHy8cf8Vr3d8G+qDW07Y76XTues/kGTmD3n2h4z+QkEfvzfJkHHnbp/L0Zv7XrQi78MoHL7/M5u2i51t3tNcnr+2nj60YlbubZXXLUK9kbNzV69R62bwuupWOt4VecWLd/pqve8M3dvtiubftXpVNBvfD+JGOKRu2NvS357Tul+NJbz4I78zHdT1N54h/1nY486No+g5EHJZqDPrtXFd2CYufxUxZqKO7iau9VOLDBTChNdQupR12JOWOOrbs4W6NOoVupdWuWFarU0K1bgeVCqhUq5ld1Oy2W+ZBZHYsTijeBMylKpaS3N3Y/EyQ+DYH5kCox0EklY5rPyC2scC5PhvKQxAwDuNAyrPJq7XYWrmLikf8xUcwjxfv3sdyq+X+BGLABmHTFRBmJNlEGUkeAqFLCkq31VhzOddcyFKscBwJz8zHOM8gksoeKpG1rWK1ZHDqLz1QRA0/cCIP8sv5MimMwXdfS8eEJ9ZhZ5wctrNpnf47VED6OFQ5cJVLC2QX4Zu7pXBI5HzCheOED/DNyKHqXMlyipCSHZPsr88pUeORjojM6EA59Tw1ZFCN04TSQE5MSTrn6W0tRVwe+8ahHSucX+WjOI6SBlSUvIUS3lApGsgyRkAiKUzbcbAAZqQoxkW3QEr8JHhqz1KMxJyNBBbgy4nJJcsLrv0RcHXt9+Wkby59U2RCytIJ2IjvbDeefLIoxj++aohNlJ80P8jPOgidz459g3UUR+Ypb31B2Uyt1A2wPTMXJJCwVGpXEB6DfwfwXfCsMS1yykXIgZpGAs7/ySlRqmuYkCBiot/WEsOxUCY8xXYJ9qfTF5hEi9PHGf3315lOkxEgIJ90nCb46o611RFgsyOx3Qf9qrfdTqnYLpdQs3Sst6hlldOiZNg1vpi/Wo7qdDrjjX8A</con:value></con:property><con:property><con:name>tName</con:name><con:value>00037_DeviceGetCacheScenario_CS_DeviceGet_ParentNode_MUC-PolicyDelete_DeviceGet_403_Forbidden</con:value></con:property><con:property><con:name>sName</con:name><con:value>DeviceGetCache_TestCases</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>0E3F7C14FABF6D10E05307991F0A0DAB</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>0E3F7C14524650B4E05305991F0A9DD7</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>status</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>contentType</con:name><con:value>application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>contentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>contentLocation</con:name><con:value>https://qa.q.uvvu.com:7001/rest/1/06/Account/urn:dece:accountid:org:dece:D12F2DD48A10D559E0401F0A059918B0/User/urn:dece:userid:org:dece:D12F2DD48A1ED559E0401F0A059918B0/Policy/urn:dece:type:policy:TermsOfUse</con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>Keep-Alive</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://qa.q.uvvu.com:7001/rest/1/07/Account/urn:dece:accountid:org:dece:E37E9E0090319851E0401F0A05992566/User/urn:dece:userid:org:dece:E37E9E0090589851E0401F0A05992566/Policy/urn:dece:type:policy:TermsOfUse</con:value></con:property><con:property><con:name>Policy_Class</con:name><con:value>urn%3Adece%3Atype%3Apolicy%3ATermsOfUse</con:value></con:property><con:property><con:name>ENNODE_USER_ID</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AD3CD43AEEE91F252E0401F0A079913BF</con:value></con:property><con:property><con:name>ENNODE_ACCOUNT_ID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AD3CD44C830AA5460E0401F0A079913BD</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Code_Repo\uv-coordinator-api-regression\Certs\QALP1/RET_concat.pem</con:value></con:property><con:property><con:name>NODE_ID</con:name><con:value>0701</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:0E3F7BD722BE509FE05305991F0AFDB1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:0E3F7BFE54D650A5E05305991F0A0B26</con:value></con:property><con:property><con:name>ENCODED_NODE_USER_ID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>ENCODED_NODE_ACCOUNT_ID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>POLICY_ID</con:name><con:value>urn:dece:policyid:org:dece:0E3F7BD90FE450B8E05305991F0AC89D</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>ce02e137-2b56-4bd6-a4b9-e1e9fdc05e16</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>46677643-d11e-4e41-a0a4-e6e1d2901adb</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="UserPolicyGetAPI" searchProperties="true" id="aaa9a9c6-92cc-4fbf-8f42-17f648e7c09f"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("NODE_USER_ID",null);
tC.setPropertyValue("NODE_ACCOUNT_ID",null);
tC.setPropertyValue("NODE_USER_ID_FULL",null);
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",null);
tC.setPropertyValue("NODE_ID",null);
tC.setPropertyValue("SAML",null);
tC.setPropertyValue("expectErrType","SUCCESS");
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Required Properties from Calling Test Case"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("NODE_USER_ID",callTC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL",callTC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("NODE_ACCOUNT_ID",callTC.getPropertyValue("NODE_ACCOUNT_ID"));
tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",callTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_ID",callTC.getPropertyValue("NODE_ID"));
tC.setPropertyValue("SAML",callTC.getPropertyValue("SAML"));

if (tP.getPropertyValue("versionMinor") == tP.getPropertyValue("versionURLEncode")){	
	tC.setPropertyValue("Policy_Class", URLEncoder.encode(callTC.getPropertyValue("Policy_Class"), "UTF-8"));
}else{
	tC.setPropertyValue("Policy_Class", callTC.getPropertyValue("Policy_Class"));
}



</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("SetPem");

myTC.setPropertyValue("NODE_ID",tP.getPropertyValue("NODE_ID"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("PolicyGet");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="PolicyGet"><con:settings/><con:config service="UserPolicyCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{NodeAccountId}/User/{NodeUserId}/Policy/{PolicyClass}" methodName="PolicyGet" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PolicyGet" mediaType="application/xml" sslKeystore="RET_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#TestCase#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Query_HostName}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>assert messageExchange.responseHeaders["#status#"].toString() == "[HTTP/1.1 200 OK]";</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="NodeUserId" value="${#TestCase#NODE_USER_ID_FULL}"/>
  <con:entry key="PolicyClass" value="${#TestCase#Policy_Class}"/>
  <con:entry key="NodeAccountId" value="${#TestCase#NODE_ACCOUNT_ID_FULL}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract PolicyID"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('PolicyGet');
def expXML = tStep.httpRequest.response.getResponseContent();

String status     = null;
String connection = null;
String contentType   = null;
String contentLength = null;
String contentLocation = null;

tStep.httpRequest.response.responseHeaders.each() { header, value ->
                switch (header) {
                                case "Location": 
                                                contentLocation = value[0];
                                                break;
                                case "#status#": 
                                                status = value[0]; 
                                                break;
                                case "Connection": 
                                                connection = value[0]; 
                                                break;
                                case "Content-Type": 
                                                contentType = value[0]; 
                                                break;
                                case "Content-Length": 
                                                contentLength = value[0]; 
                                                break;
                                case "Transfer-Encoding": 
                                                httpContentEncoding = value[0]; 
                                                break;
                }
}


tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);

String policyWasFound = "false";
String xmlPolicyClass = "";

/*
*  We can assume that if we get returned an HTTP status 
*  of 'HTTP/1.1 200 OK' the policy was found.  However,
*  it is never a bad idea to doublecheck.
*/

/*
*  The body should not be null...something should be
*  there.
*/
assert expXML.size() > 0;

if (expXML != null) {
                def myXML = new XmlSlurper().parseText(expXML);

                xmlPolicyClass = myXML.Policy[0].PolicyClass.text();
}
                                
if (status == "HTTP/1.1 200 OK" || xmlPolicyClass == tcPolicyClass) {
                policyWasFound = "true";
                def PolicyID = context.expand( '${#TestCase#XMLbody#declare namespace ns1=\'${#Project#coordinatorSchema}\'; //ns1:PolicyList[1]/ns1:Policy[1]/@PolicyID}' )
                log.info "================="+PolicyID
                tC.setPropertyValue("POLICY_ID",PolicyID);
}

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)
if (tP.getPropertyValue("versionMinor") == tP.getPropertyValue("versionURLEncode")){	
callTC.setPropertyValue("POLICY_ID", URLEncoder.encode(tC.getPropertyValue("POLICY_ID"), "UTF-8"));
}else{
	callTC.setPropertyValue("POLICY_ID", tC.getPropertyValue("POLICY_ID"));
}
 </script></con:config></con:testStep><con:properties><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVbbcuI4EP0VynmcMpbN3RWoggALk2RIgJDLy5aQ26Bgy2DJBvL1KxlwMAlZdp9cardOn77oSNcc+55lNzmHUNCA5Ta+x7idWOtaFDI7wJxym2EfuC2IPWre39lWHtn4sEXL9dt17W8XV0qFYq2qVypuRS+SclHHDjF1E01dExcKgMyadOU8gj7jAjNR1yxklnRk6ag4RhW7VLWL5bxZNN+03ARCLrGlSx5pe1IbXtfmQixtw1iv1/l1IR+EM8NCyDRe7u9GZA4+1hrXu4ySQGFj70/yDhDwPJIngW9cGxmfa4fbIzpjWEQh7GM552IhA9UM6eNwOrvS0r3g9JkbJMsbzAJGCfboB1b1uQcxD5xc05sFIRVz/2wSJlLAOmyITswiu9KMLLULgTIMQ451PsfmHmsILoTACOSehv26dnVZ15Kt4xAz7gahz7PL/8YHWAxesARH54e09tQuB/ymUo1rIHafES/iNIY/aliXmADfdxPI5VC5hxBcurmjXA7ohit2xjG9k+WuGm06Ay7+T4OOmrMDmWAvgkb7AaaTmC4MPCvGhlN+GQ+njzfVN/9pVk8IHDsnhrS1u+XJUKZDtNvhduZObfjc64uVHy8cf8Vr3d8G+qDW07Y76XTues/kGTmD3n2h4z+QkEfvzfJkHHnbp/L0Zv7XrQi78MoHL7/M5u2i51t3tNcnr+2nj60YlbubZXXLUK9kbNzV69R62bwuupWOt4VecWLd/pqve8M3dvtiubftXpVNBvfD+JGOKRu2NvS357Tul+NJbz4I78zHdT1N54h/1nY486No+g5EHJZqDPrtXFd2CYufxUxZqKO7iau9VOLDBTChNdQupR12JOWOOrbs4W6NOoVupdWuWFarU0K1bgeVCqhUq5ld1Oy2W+ZBZHYsTijeBMylKpaS3N3Y/EyQ+DYH5kCox0EklY5rPyC2scC5PhvKQxAwDuNAyrPJq7XYWrmLikf8xUcwjxfv3sdyq+X+BGLABmHTFRBmJNlEGUkeAqFLCkq31VhzOddcyFKscBwJz8zHOM8gksoeKpG1rWK1ZHDqLz1QRA0/cCIP8sv5MimMwXdfS8eEJ9ZhZ5wctrNpnf47VED6OFQ5cJVLC2QX4Zu7pXBI5HzCheOED/DNyKHqXMlyipCSHZPsr88pUeORjojM6EA59Tw1ZFCN04TSQE5MSTrn6W0tRVwe+8ahHSucX+WjOI6SBlSUvIUS3lApGsgyRkAiKUzbcbAAZqQoxkW3QEr8JHhqz1KMxJyNBBbgy4nJJcsLrv0RcHXt9+Wkby59U2RCytIJ2IjvbDeefLIoxj++aohNlJ80P8jPOgidz459g3UUR+Ypb31B2Uyt1A2wPTMXJJCwVGpXEB6DfwfwXfCsMS1yykXIgZpGAs7/ySlRqmuYkCBiot/WEsOxUCY8xXYJ9qfTF5hEi9PHGf3315lOkxEgIJ90nCb46o611RFgsyOx3Qf9qrfdTqnYLpdQs3Sst6hlldOiZNg1vpi/Wo7qdDrjjX8A</con:value></con:property><con:property><con:name>tName</con:name><con:value>00037_DeviceGetCacheScenario_CS_DeviceGet_ParentNode_MUC-PolicyDelete_DeviceGet_403_Forbidden</con:value></con:property><con:property><con:name>sName</con:name><con:value>DeviceGetCache_TestCases</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>0E3F7BD722BE509FE05305991F0AFDB1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>0E3F7BFE54D650A5E05305991F0A0B26</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>7600</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>status</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>contentType</con:name><con:value>application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>contentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><![CDATA[<PolicyList xmlns="http://www.decellc.org/schema/2015/03/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v2.2/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Policy PolicyID="urn:dece:policyid:org:dece:0E3F7BD90FE450B8E05305991F0AC89D">
      <PolicyClass>urn:dece:type:policy:ManageUserConsent</PolicyClass>
      <Resource>urn:dece:userid:org:dece:0E3F7BD722BE509FE05305991F0AFDB1</Resource>
      <RequestingEntity>urn:dece:org:org:dece:RET</RequestingEntity>
      <PolicyAuthority>urn:dece:role:coordinator</PolicyAuthority>
      <ResourceStatus>
         <Current CreationDate="2015-02-04T07:58:53.000Z" CreatedBy="urn:dece:userid:org:dece:0E3F7BD722BE509FE05305991F0AFDB1">
            <Value>urn:dece:type:status:active</Value>
         </Current>
      </ResourceStatus>
   </Policy>
</PolicyList>]]></con:value></con:property><con:property><con:name>contentLocation</con:name><con:value>https://qa.q.uvvu.com:7001/rest/1/06/Account/urn:dece:accountid:org:dece:D12F2DD48A10D559E0401F0A059918B0/User/urn:dece:userid:org:dece:D12F2DD48A1ED559E0401F0A059918B0/Policy/urn:dece:type:policy:TermsOfUse</con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 200 OK</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>close</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpContentLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>Policy_Class</con:name><con:value>urn:dece:type:policy:ManageUserConsent</con:value></con:property><con:property><con:name>ENNODE_USER_ID</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AD3CD43AEEE91F252E0401F0A079913BF</con:value></con:property><con:property><con:name>ENNODE_ACCOUNT_ID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AD3CD44C830AA5460E0401F0A079913BD</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Code_Repo\uv-coordinator-api-regression\Certs\QALP1/RET_concat.pem</con:value></con:property><con:property><con:name>NODE_ID</con:name><con:value>0701</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:0E3F7BD722BE509FE05305991F0AFDB1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:0E3F7BFE54D650A5E05305991F0A0B26</con:value></con:property><con:property><con:name>ENCODED_NODE_USER_ID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>ENCODED_NODE_ACCOUNT_ID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>PolicyID</con:name><con:value>urn:dece:policyid:org:dece:E49C70AAFF84613CE0401F0A07991C29</con:value></con:property><con:property><con:name>policyExists</con:name><con:value>true</con:value></con:property><con:property><con:name>POLICY_ID</con:name><con:value>urn:dece:policyid:org:dece:0E3F7BD90FE450B8E05305991F0AC89D</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>ce02e137-2b56-4bd6-a4b9-e1e9fdc05e16</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>46677643-d11e-4e41-a0a4-e6e1d2901adb</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="LicAppCreateAPI" searchProperties="true" id="e2410dc1-af56-4617-866a-58c708217c3b"><con:settings/><con:testStep type="groovy" name="Establish Properties" id="ab0871f9-7d5c-4995-9ab2-885c48443ecc">
        <con:settings/>
        <con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbgen = new generalUtils.generalUtils(log);


tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",null);
tC.setPropertyValue("NODE_ID",null);
tC.setPropertyValue("SAML",null);
tC.setPropertyValue("licappapplication", null);
tC.setPropertyValue("licappManufacturer", null);
tC.setPropertyValue("licappModel", null);</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Extract Properties from Calling Test Case" id="ce88ab89-522b-480b-9332-7baab988196e">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def acctO = new dbUtils.dbAccount(log,tP.getPropertyValue("targetDECESystem"));

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)



tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",callTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("SAML",callTC.getPropertyValue("SAML"));
tC.setPropertyValue("licappapplication",callTC.getPropertyValue("licappapplication"));
tC.setPropertyValue("licappManufacturer",callTC.getPropertyValue("licappManufacturer"));
tC.setPropertyValue("licappModel",callTC.getPropertyValue("licappModel"));
</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Set pem" id="d511c28f-dede-42b3-b8ce-9e5cb751c5ec"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("SetPem");

myTC.setPropertyValue("NODE_ID",tP.getPropertyValue("NODE_ID"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("POST - LegacyDeviceADD");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="LicApp_Create"><con:settings/><con:config service="LicApp" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/LicApp" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="LicApp_Create" mediaType="application/xml" postQueryString="false" sslKeystore="0701_concat.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="${#TestCase#SAML}"/>
  &lt;con:entry key="x-dece-ApplicationAuthorization" value="dclient-basic w0rnh4lz4bfuaxasn7qu:A3D90BF121838C67444D58AC6D6554A6"/>
&lt;/xml-fragment></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Device_HostName}</con:endpoint><con:request><![CDATA[<LicApp LicAppHandle="3" Embedded="false" xmlns="${#Project#coordinatorSchema}" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">    
  <DisplayName>licAppDisplayName24</DisplayName> 
   <Manufacturer>${#TestCase#licappManufacturer}</Manufacturer>
   <Model>${#TestCase#licappModel}</Model> 
   <Application>${#TestCase#licappapplication}</Application>  
   <MediaProfile>urn:dece:type:mediaprofile:hd</MediaProfile> 
   <MediaProfile>urn:dece:type:mediaprofile:sd</MediaProfile>  
   <MediaProfile>urn:dece:type:mediaprofile:pd</MediaProfile> 
   <Brand Language="zh">licAppBrand</Brand> 
   <SerialNo>877981</SerialNo>  
<!--   <Image Height="81" Width="75" MimeType="MimeType1">http://www.oxygenxml.com/</Image> -->
   <DeviceInfo>       
      <DisplayName>DeviceInfoDisplayName34</DisplayName>
      <Manufacturer>DeviceInfoManufacturer28</Manufacturer>
      <Model>DeviceInfoModel48</Model> 
      <Brand Language="en-US">DeviceInfoBrand40</Brand>
      <SerialNo>1127431</SerialNo>   
<!--      <Image Height="50" Width="50" MimeType="MimeType1">http://www.oxygenxml.com/</Image>-->
   </DeviceInfo>
<!--   <DRMClientRef>-->
<!--      <DRMClientID>urn:dece:drm:adobe:3.0</DRMClientID>-->
<!--      <AttestationManufacturer>DRMClientRefAttestationManufacturer</AttestationManufacturer>-->
<!--      <AttestationModel>DRMClientRefAttestationModel</AttestationModel>-->
<!--      <AttestationApplication>DRMClientRefAttestationApplication</AttestationApplication>-->
<!--   </DRMClientRef> -->
</LicApp>]]></con:request><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>assert messageExchange.responseHeaders["#status#"].toString() == "[HTTP/1.1 201 Created]";</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccountID" value="${#TestCase#NODE_ACCOUNT_ID_FULL}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract_LicAppID"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('LicApp_Create');
def expXML = tStep.httpRequest.response.getResponseContent();
String major = context.expand( '${#Project#versionMajor}' );
String minor = context.expand( '${#Project#versionMinor}' );
String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("httpLocation", contentLocation);

assert context.expand( '${#TestCase#httpLocation}') != null;

def a = context.expand( '${#TestCase#httpLocation}');
def b = a.toURL();
def urlStr = b.getPath();

if (tP.getPropertyValue("versionMinor") != tP.getPropertyValue("versionURLEncode")){
	assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*/LicApp/urn:dece:licappid:org:dece:[0-9,A-F]*");
    	int lastColon = urlStr.lastIndexOf('/');
    	licAppID     = urlStr.substring(lastColon + 1);
}else {
	assert b.getPath().matches("/rest/$major/$minor/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3A[0-9,A-F]*/LicApp/urn%3Adece%3Alicappid%3Aorg%3Adece%3A[0-9,A-F]*");
     int lastColon = urlStr.lastIndexOf('/');
     licAppID     = urlStr.substring(lastColon + 1);
    
    }


def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)
callTC.setPropertyValue("LIC_APP_ID", licAppID);


</script></con:config></con:testStep><con:properties><con:property><con:name>tName</con:name><con:value>00043_DeviceGetCacheScenario_NonCS_DeviceGet_1/07_DeviceGet(If-Modified-Since)_1/06_304_Not_Modified</con:value></con:property><con:property><con:name>sName</con:name><con:value>DeviceGetCache_TestCases</con:value></con:property><con:property><con:name>NODE_ID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:0E3F7C1565C16D12E05307991F0A994E</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVbbcuI4EP0VynncMpZvEFyBKi4hIYGEACFhXraELBtlbJmRZCD5+pUMeAwhGWafqG5ap4/U3ad9xWEcWV6Tc8wESWhpE0eUe5m3rqWMegnkhHsUxph7Annj5qDvWWXgwf0RrdTr1LV/gQkBnIOqbmMX6k7VCvRatVbT7Sqy5n5gg9ocyVDOU9yjXEAq6poFTFcHlg6cCbj0gOWZ1bLt2j+00hQzLrFlSBloO1IbXtcWQiw9w1iv1+W1XU5YaFgAmMbroD9GCxxDrXG1vVGWiDV28ajsY4SjCJVREhtXxkHMlc+9MQkpFCnDu1z+V7mAAWqGjPE5CS+0/Cz2ezRIMrMNaUIJghH5gOp9BlgsEr/UjMKEEbGIv7yECRSwjjdIR6ZDLzTjkNqZQAcMGYc6X0BzhzXCAWaYIlx6HvXq2sV5VcuOThikPEhYzA/Nv+OD6QpHyRL7Ot9fa0ftfMATL9W4wsjrURSlnKzwg2rWJUSY76qJ0flQpSHDAdn0CZcNuuGKnVGkd2RuX6NDQszF/ylQoThbkCmMUtx4m85mIEk/2j8rLzW2niz4iN5PXkbG+rKeESgGZ468tFvzqCnzJtqeGLSC4bDde2p2Q7PvOE9vs/avOKX0sT14E6POkgz7s6eFm67e19Pp5cT/MV6hBzZYk5e7m4fRxr/s3gQrO6T9+9fZsHUXjCPcur6tTB1/OIjtYQDuF4b7NHtdOve31e59WAmoG72z5wl/uSUtf0GQeU3CxWPvreo4/s3d4Pmf6c0khh8Qm+mmQu3BkLipxSbOoJ5fp8D/0Lef+XE6f8NI7E3VBr1OqSurBMX3YqY8xNeDLNRbKvHhAlOhNdQppR1eKuWO+J6s4dYG13a32rVA1QWdSsd0roFrAzk6Zhc0W24V7EVmy+KIYjuhAVG5lORu2+Z7gij25hgyzLRvkDpQwNJDIh7pI2sGArMDhTXNosKqtv4S6Pi/fU4Z4xMVwFWaFpbvhU+oONir+DEX67TaG3v8pr8iKC9nvpSkVsnuzrScy2n6Bct+OV2tUiXmXlVNMZOzYCgeBrCMMUapnL/3SfITUyNHMc4Su/3Nj5Pn/kOKqVjQsYACx7JbSpl5xnYbY662W4/6eHPu6jxIKQsh8Eac8rUjuZkV42+XN/KQipPuofxZJ8zPL3gKq5BH3lMuN0FoqCwldO+/h0RNRz4hKJGwRI5oworgpwBOJT905o+ccxGCkXkq8Nf/lNTs1TWIUJJS0etomaOoBxlP8b7E3u+gTzCZ5OTfIOTPHyE6yVoAYfnlwkmGr1aJxyUgDQuaskv6SVbapltx26aUFasoK7Wac50/ygG7xif3Z0/hnY57vPEf</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Code_Repo\uv-coordinator-api-regression\Certs\QALP1/RET_concat.pem</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value>https://qa.d.uvvu.com:7001/rest/2015/02/Account/urn:dece:accountid:org:dece:0E3F7C1565C16D12E05307991F0A994E/LicApp/urn:dece:licappid:org:dece:0E3F7BCE4AB65093E05305991F0A470B</con:value></con:property><con:property><con:name>LIC_APP_ID</con:name><con:value>urn%3Adece%3Alicappid%3Aorg%3Adece%3AE49CC1411724925BE0401F0A059939E5</con:value></con:property><con:property><con:name>licappapplication</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">appid-hKqnPMNYWHC112</con:value></con:property><con:property><con:name>licappManufacturer</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">manfact-9728817886475</con:value></con:property><con:property><con:name>licappModel</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">model-3A65F92B71137</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>d511c28f-dede-42b3-b8ce-9e5cb751c5ec</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ab0871f9-7d5c-4995-9ab2-885c48443ecc</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ce88ab89-522b-480b-9332-7baab988196e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="LicAppGetAPI" searchProperties="true" id="6d844d49-61d1-478a-9cb7-9abb7e5c801e"><con:settings/><con:testStep type="groovy" name="Set pem"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("SetPem");

myTC.setPropertyValue("NODE_ID",tP.getPropertyValue("NODE_ID"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("LicApp_Get");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="LicApp_Get"><con:settings/><con:config service="LicApp" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/LicApp/{LicAppID}?LicAppHandle={LicAppHandle}" methodName="LicAppGet" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="LicApp_Get" mediaType="application/xml" sslKeystore="0701_concat.pem"><con:settings/><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract_LicAppID"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('LicApp_Create');
def expXML = tStep.httpRequest.response.getResponseContent();
String major = context.expand( '${#Project#versionMajor}' );
String minor = context.expand( '${#Project#versionMinor}' );
String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

tC.setPropertyValue("httpLocation", contentLocation);

assert context.expand( '${#TestCase#httpLocation}') != null;

def a = context.expand( '${#TestCase#httpLocation}');
def b = a.toURL();
def urlStr = b.getPath();

if (tP.getPropertyValue("versionMinor") != tP.getPropertyValue("versionURLEncode")){
	assert b.getPath().matches("/rest/$major/$minor/Account/urn:dece:accountid:org:dece:[0-9,A-F]*/LicApp/urn:dece:licappid:org:dece:[0-9,A-F]*");
    	int lastColon = urlStr.lastIndexOf('/');
    	licAppID     = urlStr.substring(lastColon + 1);
}else {
	assert b.getPath().matches("/rest/$major/$minor/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3A[0-9,A-F]*/LicApp/urn%3Adece%3Alicappid%3Aorg%3Adece%3A[0-9,A-F]*");
     int lastColon = urlStr.lastIndexOf('/');
     licAppID     = urlStr.substring(lastColon + 1);
    
    }


def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)
callTC.setPropertyValue("LicAppID", licAppID);


</script></con:config></con:testStep><con:properties><con:property><con:name>tName</con:name><con:value>TC_DECE_50001_DeviceGetCacheScenario_NonCS_DeviceGet_DeviceGet_200_OK</con:value></con:property><con:property><con:name>sName</con:name><con:value>DeviceGetCache_TestCases</con:value></con:property><con:property><con:name>NODE_ID</con:name><con:value>0701</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE49CC1411719925BE0401F0A059939E5</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=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</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Users\raju.ganji\Desktop\DeviceGet_170613/0701_concat.pem</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value>https://qa.d.uvvu.com:7001/rest/1/07/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE49ACC5DB3BC2A43E0401F0A059966E7/LicApp/urn%3Adece%3Alicappid%3Aorg%3Adece%3AE49B021A38CC0F36E0401F0A059951E3</con:value></con:property><con:property><con:name>LIC_APP_ID</con:name><con:value>urn%3Adece%3Alicappid%3Aorg%3Adece%3AE49CC1411733925BE0401F0A059939E5</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>d511c28f-dede-42b3-b8ce-9e5cb751c5ec</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="LicAppGetAPIforDevice" searchProperties="true" id="9c10df64-f95f-4cfc-ad98-9748f33aded9"><con:settings/><con:testStep type="groovy" name="Set pem"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("SetPem");

myTC.setPropertyValue("NODE_ID",tP.getPropertyValue("NODE_ID"));

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("LicApp_Get");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="LicApp_Get"><con:settings/><con:config service="LicApp" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/LicApp/{LicAppID}" methodName="LicAppGet" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="LicApp_Get" mediaType="application/xml" sslKeystore="RET_concat.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="${#TestCase#SAML}"/>
  &lt;con:entry key="x-dece-ApplicationAuthorization" value="dclient-basic w0rnh4lz4bfuaxasn7qu:A3D90BF121838C67444D58AC6D6554A6"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#Project#Device_HostName}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>assert messageExchange.responseHeaders["#status#"].toString() == "[HTTP/1.1 200 OK]";</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="AccountID" value="${#TestCase#NODE_ACCOUNT_ID_FULL}"/>
  <con:entry key="LicAppID" value="${#TestCase#LIC_APP_ID}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="transfer" name="PropertyTransfer DomainID"><con:settings/><con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>DomainID</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>LicApp_Get</con:sourceStep><con:sourcePath>declare namespace ns1='${#Project#coordinatorSchema}';
//ns1:LicApp[1]/@DomainID</con:sourcePath><con:targetType>Domain_ID</con:targetType><con:targetStep>#TestCase#</con:targetStep><con:targetPath/></con:transfers><con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" useXQuery="false" entitize="false" transferChildNodes="false"><con:name>DeviceID</con:name><con:sourceType>ResponseAsXml</con:sourceType><con:sourceStep>LicApp_Get</con:sourceStep><con:sourcePath>declare namespace ns1='${#Project#coordinatorSchema}';
//ns1:LicApp[1]/@DeviceID</con:sourcePath><con:targetType>Device_ID</con:targetType><con:targetStep>#TestCase#</con:targetStep></con:transfers></con:config></con:testStep><con:testStep type="groovy" name="Return DomainID" id="64ce9e6b-201a-4e08-a959-26978cf3b323"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname);


if (tP.getPropertyValue("versionMinor") == tP.getPropertyValue("versionURLEncode")){	
	callTC.setPropertyValue("Domain_ID", URLEncoder.encode(tC.getPropertyValue("Domain_ID"), "UTF-8"));
	callTC.setPropertyValue("Device_ID", URLEncoder.encode(tC.getPropertyValue("Device_ID"), "UTF-8"));
}else{
	callTC.setPropertyValue("Domain_ID", tC.getPropertyValue("Domain_ID"));
	callTC.setPropertyValue("Device_ID", tC.getPropertyValue("Device_ID"));
}</script></con:config></con:testStep><con:properties><con:property><con:name>tName</con:name><con:value>00043_DeviceGetCacheScenario_NonCS_DeviceGet_1/07_DeviceGet(If-Modified-Since)_1/06_304_Not_Modified</con:value></con:property><con:property><con:name>sName</con:name><con:value>DeviceGetCache_TestCases</con:value></con:property><con:property><con:name>NODE_ID</con:name><con:value>RET</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:0E3F7C1565C16D12E05307991F0A994E</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVbbcuI4EP0VynncMpZvEFyBKi4hIYGEACFhXraELBtlbJmRZCD5+pUMeAwhGWafqG5ap4/U3ad9xWEcWV6Tc8wESWhpE0eUe5m3rqWMegnkhHsUxph7Annj5qDvWWXgwf0RrdTr1LV/gQkBnIOqbmMX6k7VCvRatVbT7Sqy5n5gg9ocyVDOU9yjXEAq6poFTFcHlg6cCbj0gOWZ1bLt2j+00hQzLrFlSBloO1IbXtcWQiw9w1iv1+W1XU5YaFgAmMbroD9GCxxDrXG1vVGWiDV28ajsY4SjCJVREhtXxkHMlc+9MQkpFCnDu1z+V7mAAWqGjPE5CS+0/Cz2ezRIMrMNaUIJghH5gOp9BlgsEr/UjMKEEbGIv7yECRSwjjdIR6ZDLzTjkNqZQAcMGYc6X0BzhzXCAWaYIlx6HvXq2sV5VcuOThikPEhYzA/Nv+OD6QpHyRL7Ot9fa0ftfMATL9W4wsjrURSlnKzwg2rWJUSY76qJ0flQpSHDAdn0CZcNuuGKnVGkd2RuX6NDQszF/ylQoThbkCmMUtx4m85mIEk/2j8rLzW2niz4iN5PXkbG+rKeESgGZ468tFvzqCnzJtqeGLSC4bDde2p2Q7PvOE9vs/avOKX0sT14E6POkgz7s6eFm67e19Pp5cT/MV6hBzZYk5e7m4fRxr/s3gQrO6T9+9fZsHUXjCPcur6tTB1/OIjtYQDuF4b7NHtdOve31e59WAmoG72z5wl/uSUtf0GQeU3CxWPvreo4/s3d4Pmf6c0khh8Qm+mmQu3BkLipxSbOoJ5fp8D/0Lef+XE6f8NI7E3VBr1OqSurBMX3YqY8xNeDLNRbKvHhAlOhNdQppR1eKuWO+J6s4dYG13a32rVA1QWdSsd0roFrAzk6Zhc0W24V7EVmy+KIYjuhAVG5lORu2+Z7gij25hgyzLRvkDpQwNJDIh7pI2sGArMDhTXNosKqtv4S6Pi/fU4Z4xMVwFWaFpbvhU+oONir+DEX67TaG3v8pr8iKC9nvpSkVsnuzrScy2n6Bct+OV2tUiXmXlVNMZOzYCgeBrCMMUapnL/3SfITUyNHMc4Su/3Nj5Pn/kOKqVjQsYACx7JbSpl5xnYbY662W4/6eHPu6jxIKQsh8Eac8rUjuZkV42+XN/KQipPuofxZJ8zPL3gKq5BH3lMuN0FoqCwldO+/h0RNRz4hKJGwRI5oworgpwBOJT905o+ccxGCkXkq8Nf/lNTs1TWIUJJS0etomaOoBxlP8b7E3u+gTzCZ5OTfIOTPHyE6yVoAYfnlwkmGr1aJxyUgDQuaskv6SVbapltx26aUFasoK7Wac50/ygG7xif3Z0/hnY57vPEf</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Code_Repo\uv-coordinator-api-regression\Certs\QALP1/RET_concat.pem</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value>https://qa.d.uvvu.com:7001/rest/1/07/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE49ACC5DB3BC2A43E0401F0A059966E7/LicApp/urn%3Adece%3Alicappid%3Aorg%3Adece%3AE49B021A38CC0F36E0401F0A059951E3</con:value></con:property><con:property><con:name>Domain_ID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:domainid:dece:0E3F657130241CFCE05307991F0A14F2</con:value></con:property><con:property><con:name>LIC_APP_ID</con:name><con:value>urn:dece:licappid:org:dece:0E3F7BCE4AB65093E05305991F0A470B</con:value></con:property><con:property><con:name>Device_ID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:deviceid:org:dece:0E3F7BCE4AB45093E05305991F0A470B</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>d511c28f-dede-42b3-b8ce-9e5cb751c5ec</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>64ce9e6b-201a-4e08-a959-26978cf3b323</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="LicAppjoinTriggerGetAPI" searchProperties="true" id="0eb7d126-51ba-4dcf-8fec-4dd9f4d09d30"><con:settings/><con:testStep type="groovy" name="Set pem" id="fad66464-d1f2-40a4-835a-a88c291e18f4"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("SetPem");

myTC.setPropertyValue("NODE_ID",tP.getPropertyValue("NODE_ID"));
myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("LicAppjoinTriggerGet");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="LicAppjoinTriggerGet" id="16ea4671-4360-498b-9674-57e8c74b4d0a"><con:settings/><con:config service="LicAppJoinTriggerGet" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{ACCT}/Device/{DEVICE}/LicApp/{LICAPPID}/JoinTrigger/{DRMID}" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="LicAppjoinTriggerGet" mediaType="application/xml" sslKeystore="0701_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="${#TestCase#SAML}"/>
  &lt;con:entry key="x-dece-ApplicationAuthorization" value="dclient-basic w0rnh4lz4bfuaxasn7qu:A3D90BF121838C67444D58AC6D6554A6"/>
&lt;/xml-fragment></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Device_HostName}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>assert messageExchange.responseHeaders["#status#"].toString() == "[HTTP/1.1 200 OK]";</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="DEVICE" value="${#TestCase#Device_ID}"/>
  <con:entry key="LICAPPID" value="${#TestCase#LIC_APP_ID}"/>
  <con:entry key="DRMID" value="${#TestCase#DRM_ID}"/>
  <con:entry key="ACCT" value="${#TestCase#NODE_ACCOUNT_ID_FULL}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>tName</con:name><con:value>00007_DeviceGetCacheScenario_NonCS_DeviceGet_DeviceJoin_DeviceGet_200_OK</con:value></con:property><con:property><con:name>sName</con:name><con:value>DeviceGetCache_TestCases</con:value></con:property><con:property><con:name>NODE_ID</con:name><con:value>0701</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:E7CF4E5E969BCD28E0401F0A0599574F</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZdc6pIEH3Pr6DIYwoZ8RNKrVKJuySauDEmli9b49DgJDAYZvDj/vo7oBg1JuvdJ6ubntNnprtP2+A4DAyrzTnEgkZMceym+q/nlcA1qxWtXsdVrVx2kVavIUOrG24dGzNUqxqmqjicJ+AwLjATTdVAxZJWRBoqPaOqZZSsYrlQr5emqvICMZfQMqSAVGUdBoxbWdqmmsTMijCn3GI4BG4JYo3ag74lIy2cc1JbjS3LLGHcmguxsHSdFFwgEASkQKJQb+hHMQ2XWyPqMyySGHY5Xd5Ud2dXq1VhVSpEsa8bCCEdmbqMcTn1r9XWVX4YXId50dbuYhYxSnBAf+GU1ADEPHKVduBHMRXz8Bvool5EKbQGa6KRYpldq/pngozdhUhHJGOONT7HxRzsCTyIgRFQxk9OU72+rILbs88xZtyL4pCf2H9GCdgSgmgBrsbzm+XsLkc881ytBhDLYSRIOF3CQ9omC0yAK8MYPLruUy6bz+VKVn5lzfMOA/InJWnohzwlbf3My9jUBy7+T70Oa7VFecFBAq1wUK0+LzbJwogezPsqW7/f2x/opXTTHTQzCofBW1L7Uu/s00bd99XuUNCZPUZGrzc2uu3isv86Nc3p6J+S0Z9Uze4mqdzYj6Eb6uhhWEeeXh5hezx3omJ450+CzmQqgd7XMF58vFZWy6t7o2247fuXxSoQb/2np47/4Zh+Yhh1Mh2I+8mL99Qv/bqB+ep9U5q9Pdt3Y/tm6E2qfNlx794WZUr8v+5878F4rV+xsD0dDhnw8Xv5485B0d9+8/NOh3c4duZyMEpmb0BEbqat4dhKT9YLi5+lJfVQV/OyUGuR6hMXwITaSk+lsmIlUnyoa8libu3bWrdXvq3cmlXT7tpG/RaVUbGH2qhimpVauZfrz5bFCcVuxDya5koVdts/PxMkoTUDHEOs/oBkY4GVh0g8sse47QmIj0XYPBThtMO/BTr9lueUMS5NA3iapgPyveCM0KNc6E+5GOcXgp7jt90lJfty7neQlDDZ5JnMczlWH7jgFpLlMkl13qqlAxzLmdCLOqrpIyCJnMLNc/QOTN9D6BcJYH7t08x7/zG/RMzZSGABoWwVJTMv2H4j4On2c5gL60tX61FKWQUBa3HO1w3kkkwZ/7hHiUXSOOkeyp9VFLv7C57DOsgj7ylXnqDMT61U7jafE5KOxn48SCRhqZzPKD4EPwdwLvmxc//Iey5CxHSWCPj+i5IOXlPFhEQJE46tZo5DMch4is0CrM+gLzCZ4Ow2yJp/u0Emg/6IzCHE6j6W/newRrN2ISBPcZpxaapr+WdIJmf+gfjsCH6jP52f9Of4Jq0v7q+egzc9nYfWbw==</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Users\raju.ganji\Desktop\DeviceGet_170613/0701_concat.pem</con:value></con:property><con:property><con:name>httpLocation</con:name><con:value>https://qa.d.uvvu.com:7001/rest/1/07/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE49ACC5DB3BC2A43E0401F0A059966E7/LicApp/urn%3Adece%3Alicappid%3Aorg%3Adece%3AE49B021A38CC0F36E0401F0A059951E3</con:value></con:property><con:property><con:name>LIC_APP_ID</con:name><con:value>urn:dece:licappid:org:dece:E7CEF1F1DC8902CDE0401F0A0799116E</con:value></con:property><con:property><con:name>Device_ID</con:name><con:value>urn:dece:deviceid:org:dece:E7CEF1F1DC8702CDE0401F0A0799116E</con:value></con:property><con:property><con:name>ExpectedReturnCodeGet</con:name><con:value>200</con:value></con:property><con:property><con:name>ETagResponseType</con:name><con:value>UnMatch</con:value></con:property><con:property><con:name>DRM_ID</con:name><con:value>urn:dece:drm:marlin:1.2</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>d511c28f-dede-42b3-b8ce-9e5cb751c5ec</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="LegacyDeviceCreateAPI" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="c57430b7-e5fb-4784-bf22-aa9db3899515"><con:settings/><con:testStep type="groovy" name="RandomNumberGenerated" id="f0322a57-0510-4376-9eaf-87f30c221bd0"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
  def tS = tC.getTestSuite();
  def tP = tS.getProject();

def random = new Random();
def randomIntId = random.nextInt(999999-100001+1)+100001;

tC.setPropertyValue("deviceid_xml", "urn:dece:deviceid:org:dece:"+randomIntId.toString());</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("SetPem");

myTC.setPropertyValue("NODE_ID",tP.getPropertyValue("NODE_ID"));

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("POST - LegacyDeviceADD");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="POST - LegacyDeviceADD"><con:settings/><con:config service="LegacyDeviceAdd_Retailer" methodName="POST LegacyDeviceAdd" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/LegacyDevice" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="POST - LegacyDeviceADD" mediaType="application/xml" accept="" postQueryString="false" sslKeystore="RET_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#TestCase#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<dece:Device 
IsLegacy="true" 
DeviceID="${#TestCase#deviceid_xml}"
xsi:schemaLocation="http://www.decellc.org/schema/2012/12/dece dece.xsd"
xmlns:dece="${#Project#coordinatorSchema}" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
	<dece:DisplayName>String</dece:DisplayName>
	<dece:Manufacturer>String</dece:Manufacturer>
	<dece:Model>String</dece:Model>
	<dece:Brand Language="en-us">String</dece:Brand>
	<dece:SerialNo>String</dece:SerialNo>
	<dece:Image MimeType="String" Width="2" Height="2">http://www.altova.com</dece:Image>
	<dece:PolicyList PolicyListID="urn:dece:">
		<dece:Policy PolicyID="http://www.altova.com">
			<dece:PolicyClass>urn:dece:</dece:PolicyClass>
			<dece:Resource>http://www.altova.com</dece:Resource>
			<dece:RequestingEntity>urn:dece:</dece:RequestingEntity>
			<dece:PolicyAuthority>urn:dece:role:coordinator</dece:PolicyAuthority>
			<dece:ResourceStatus>
				<dece:Current CreationDate="2001-12-17T09:30:47Z" CreatedBy="urn:dece:" ModificationDate="2001-12-17T09:30:47Z" DeletionDate="2001-12-17T09:30:47Z" ModifiedBy="urn:dece:" DeletedBy="urn:dece:">
					<dece:Value>urn:dece:type:status:active</dece:Value>
					<dece:Description>String</dece:Description>
				</dece:Current>
				<dece:History>
					<dece:Prior ModificationDate="2001-12-17T09:30:47Z" ModifiedBy="urn:dece:">
						<dece:Value>urn:dece:type:status:active</dece:Value>
						<dece:Description>String</dece:Description>
					</dece:Prior>
				</dece:History>
			</dece:ResourceStatus>
		</dece:Policy>
	</dece:PolicyList>
</dece:Device>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="AccountID" value="${#TestCase#NODE_ACCOUNT_ID_FULL}" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extact The Response Header"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('POST - LegacyDeviceADD');
def expXML = tStep.httpRequest.response.getResponseContent();

String status     = null;
String connection = null;
String contentType   = null;
String contentLength = null;
String contentLocation = null;


/*
def status     = tStep.httpRequest.response.responseHeaders["#status#"]; 
def connection = tStep.httpRequest.response.responseHeaders["Connection"];
def contentType   = tStep.httpRequest.response.responseHeaders["Content-Type"];
def contentLength = tStep.httpRequest.response.responseHeaders["Content-Length"];
def contentLocation = tStep.httpRequest.response.responseHeaders["Location"];
*/

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}


tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Process The Response and Header"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def ExpectedReturnCode = tC.getPropertyValue("ExpectedReturnCodeCreate");
def httpStatus 			= tC.getPropertyValue("httpStatus");

log.info "ExpectedReturnCode \"" + ExpectedReturnCode;
log.info "httpStatus  \"" + httpStatus ;
 
switch (ExpectedReturnCode) {
	case "412":  
		if (httpStatus != "HTTP/1.1 412 Precondition Failed") {
			assert 1 == 2;
		}
	break;
	case "200":  
		if (httpStatus != "HTTP/1.1 200 OK") {
			assert 1 == 2;
		}
	break;
	case "201":  
		if (httpStatus != "HTTP/1.1 201 Created") {
			assert 1 == 2;
		}
	break;
	case "202":  
		if (httpStatus != "HTTP/1.1 202 Accepted") {
			assert 1 == 2;
		}
	break;
	case "400":  
		if (httpStatus != "HTTP/1.1 400 Bad Request") {
			assert 1 == 2;
		}
	break;
	case "401":  
		if (httpStatus != "HTTP/1.1 401 Unauthorized") {
			assert 1 == 2;
		}
	break;
	case "403":  
		if (httpStatus != "HTTP/1.1 403 Forbidden") {
			assert 1 == 2;
		}
	break;
	case "404":  
		if (httpStatus != "HTTP/1.1 404 Not Found") {
			assert 1 == 2;
		}
	break;
	case "405":  
		if (httpStatus != "HTTP/1.1 405 Method Not Allowed") {
			assert 1 == 2;
		}
	break;
	case "409":  
		if (httpStatus != "HTTP/1.1 409 Conflict") {
			assert 1 == 2;
		}
	break;
	default:
	 		assert 1 == 2;
	break; 	
	
}


</script></con:config></con:testStep><con:testStep type="groovy" name="Return LegacyDeviceId"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

if (tP.getPropertyValue("versionMinor") == tP.getPropertyValue("versionURLEncode")){	
callTC.setPropertyValue("Device_ID", URLEncoder.encode(tC.getPropertyValue("deviceid_xml"), "UTF-8"));
}else{
	callTC.setPropertyValue("Device_ID", tC.getPropertyValue("deviceid_xml"));
}</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>001234</con:value></con:property><con:property><con:name>rtrnodeid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>username</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>DeviceID</con:name><con:value>urn:dece:deviceid:org:dece:${#TestCase#RandomNumberGenerated}</con:value></con:property><con:property><con:name>tName</con:name><con:value>00030_DeviceGetCacheScenario_NonCS_DeviceGet_LegacyDeviceDelete_DeviceGet(If-Modified-Since)_404_NotFound</con:value></con:property><con:property><con:name>sName</con:name><con:value>DeviceGetCache_TestCases</con:value></con:property><con:property><con:name>AccountID</con:name><con:value>urn:dece:accountid:org:dece:AA0099E8143702A4E0401F0A059951A8</con:value></con:property><con:property><con:name>RandomNumberGenerated</con:name><con:value>221023</con:value></con:property><con:property><con:name>ExpectedReturnCodeCreate</con:name><con:value>201</con:value></con:property><con:property><con:name>ExpectedReturnCodeUpdate</con:name><con:value>200</con:value></con:property><con:property><con:name>ExpectedReturnCodeGet</con:name><con:value>200</con:value></con:property><con:property><con:name>ExpectedReturnCodeDelete</con:name><con:value>200</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Legacy Device has been created successfully</con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>close</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>43</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://qa.q.uvvu.com:7001/rest/2015/02/Account/urn:dece:accountid:org:dece:0E3F7BFE548C50A5E05305991F0A0B26/Domain/urn:dece:domainid:dece:0E3F6571301A1CFCE05307991F0A14F2/Device/urn:dece:deviceid:org:dece:895864</con:value></con:property><con:property><con:name>encodedparam</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>encodedValueOfSpecialSymbols</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>deviceid_xml</con:name><con:value>urn:dece:deviceid:org:dece:895864</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Code_Repo\uv-coordinator-api-regression\Certs\QALP1/RET_concat.pem</con:value></con:property><con:property><con:name>NODE_ID</con:name><con:value>0701</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVbbcuI4EP0VyvOYMhYGJ9gVqHICTEgmlwGSmcnLlpDboGBLRJLBydePZMABcll2n1xqt06fvuhIpxKniRuEUoJQlLNKniZMBoW1ZWWCBRxLKgOGU5CBIsEwvP4RuFUU4M0Wq9LvtKx/6s3jY4j9mt2M3abdqNXHNnaxbxNoojrCCPtxXbtKmUGfSYWZalkuqnk2cm3UGKGTwDsO6rWq77uPVuUBhNTY2qWKrDWpXLasqVLzwHGWy2V1Wa9yMXFchGrO7+sfQzKFFFvt01VGRSDRXvuTagQEkoRUCU+dU2fH5zSSwZBOGFaZgHWs6LNYyEG+o30iSSffrHIvRH0W82J5jhlnlOCEvmJTn2tQUx5VwmTCBVXT9NMkasgA25ATm9Qa7Jvl7FI7EGiHoZDYllNcW2MNIAYBjEDlftBvWd8O61qxdSQwkzEXqdxd/jc+wBaQ8DlEttyktaZ2OOAHlWqfAgn6jCSZpAu4McM6xwTkuptADoeq3AmIaf6DSj2guTTsnG16e8tVNTp0AlL9nwZtNWcF8oCTDNrx/c+HUP2GWoZlRGbfR+Ppq8iWOOX3rYLAtnNhKFu7Wu4NZTlEqx354OTllwiXVxfHlF9czh/O7h6foZGfTI7Ry/3PcPpnMb8ZPfUHT/x65IjJPeeXD25j1iVDfpvHV/5J47KZy86ZJ+rff8b4Ih6/Ph71bqOkf3eRdmYohOcjPOa/zvvi6KHRH4Uwvuv6Lzm7m2HmUPfo+nIGR94IN26G2etFfLO4fJp1/WdvelXP00bnYnQ7mZ09XaE/rTKdLf67ts2ZH2bjJyBqszRj0O9UerpLWH0tZsZCIzsuXIO5ER+pgCmrbXYZ7QgyLXc0CnQPV2vUrfdOzutht9dAHvL9LvLqyPP9Wg+FoYd6G5FZsdijeM5ZTE0sI7mrsfmaIEkDCSwCYS94ppVOWl8gdrDClT4b6EPAmYQR1/K8FEvuxnGaTBuUeb6iNRXHSCRW5YarW3YrwliB2JHkGtqR5AEQOqdgdNuMtdRzLZUuxTNeZCqpVRe4yiDTyi6MyAZuo+k5kqbzBAxRJ+VRlkB1Pp0XhXHk6uvamMjCOuiOisP2aVr7/zYV0D4RNQ7S5HIGuovwwd3ibhL5POH6dsIb+DCLqDlXupxKULJisvvrbUrMeJQjojPaUC499w07qM5+QmWgaEFJOeflba1FXB/79qYdz7j6XM0Wi6xowImRN6HhHZOig1xnCCTTwvQy4jNgToniHHQLlMT3gpf2XYqZmrKhwgpSPTGVYnnAtT8Eaa79vp70/NA3xU5IXToFufrIdp7oJ4th/OWrhgTE+Gnznf4suYjeOvYB1lYcnae+9RVlE7MyN8DLJ3NBuIalWru42Ab/COCj4LvGssglF6UHapwp+PxPxYhSy8KE8IypfscqDNtCWfBUL3MI3pzewRRaXD7O6L+/zmxajAAB/aSTtMA3d2xgjgCbbIntOug7vT3rdb1G89xDobett+jMPS6LssOu/c783rJVp/0Zb/8F</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:0E3F7BFE548C50A5E05305991F0A0B26</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>f0322a57-0510-4376-9eaf-87f30c221bd0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="LegacyDeviceUpdateAPI" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="d7f8ab78-9896-4345-a47e-b7678e5ad1c2"><con:settings/><con:testStep type="groovy" name="Copy of Set pem"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("SetPem");

myTC.setPropertyValue("NODE_ID",tP.getPropertyValue("NODE_ID"));

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("PUT - LegacyDevicePUT");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="groovy" name="Set DeviceID for XML"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


tC.setPropertyValue("Device_ID_xml", URLDecoder.decode(tC.getPropertyValue("Device_ID"), "UTF-8"));</script></con:config></con:testStep><con:testStep type="restrequest" name="PUT - LegacyDevicePUT"><con:settings/><con:config service="LegacyDeviceAdd_Retailer" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/LegacyDevice/{DeviceID}" methodName="PUT LegacyDeviceAdd" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PUT - LegacyDevicePUT" mediaType="application/xml" postQueryString="false" sslKeystore="RET_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="${#TestCase#SAML}"/>
  &lt;con:entry key="If-Match" value="*"/>
&lt;/xml-fragment></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<dece:Device 
IsLegacy="true" 
DeviceID="${#TestCase#Device_ID_xml}" 
xsi:schemaLocation="http://www.decellc.org/schema dece.xsd"
xmlns:dece="${#Project#coordinatorSchema}" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
	<dece:DisplayName>String</dece:DisplayName>
	<dece:Manufacturer>String</dece:Manufacturer>
	<dece:Model>String</dece:Model>
	<dece:Brand Language="en-us">String</dece:Brand>
	<dece:SerialNo>String</dece:SerialNo>
	<dece:Image MimeType="String" Width="2" Height="2">http://www.altova.com</dece:Image>
	<dece:PolicyList PolicyListID="urn:dece:">
		<dece:Policy PolicyID="http://www.altova.com">
			<dece:PolicyClass>urn:dece:</dece:PolicyClass>
			<dece:Resource>http://www.altova.com</dece:Resource>
			<dece:RequestingEntity>urn:dece:</dece:RequestingEntity>
			<dece:PolicyAuthority>urn:dece:role:coordinator</dece:PolicyAuthority>
			<dece:ResourceStatus>
				<dece:Current CreationDate="2001-12-17T09:30:47Z" CreatedBy="urn:dece:" ModificationDate="2001-12-17T09:30:47Z" DeletionDate="2001-12-17T09:30:47Z" ModifiedBy="urn:dece:" DeletedBy="urn:dece:">
					<dece:Value>urn:dece:type:status:active</dece:Value>
					<dece:Description>String</dece:Description>
				</dece:Current>
				<dece:History>
					<dece:Prior ModificationDate="2001-12-17T09:30:47Z" ModifiedBy="urn:dece:">
						<dece:Value>urn:dece:type:status:active</dece:Value>
						<dece:Description>String</dece:Description>
					</dece:Prior>
				</dece:History>
			</dece:ResourceStatus>
		</dece:Policy>
	</dece:PolicyList>
</dece:Device>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="DeviceID" value="${#TestCase#Device_ID}"/>
  <con:entry key="AccountID" value="${#TestCase#NODE_ACCOUNT_ID_FULL}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extact The Response Header"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('PUT - LegacyDevicePUT');
def expXML = tStep.httpRequest.response.getResponseContent();

String status     = null;
String connection = null;
String contentType   = null;
String contentLength = null;
String contentLocation = null;


/*
def status     = tStep.httpRequest.response.responseHeaders["#status#"]; 
def connection = tStep.httpRequest.response.responseHeaders["Connection"];
def contentType   = tStep.httpRequest.response.responseHeaders["Content-Type"];
def contentLength = tStep.httpRequest.response.responseHeaders["Content-Length"];
def contentLocation = tStep.httpRequest.response.responseHeaders["Location"];
*/

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}


tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Process The Response and Header"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def ExpectedReturnCode = tC.getPropertyValue("ExpectedReturnCodeUpdate");
def httpStatus 	   = tC.getPropertyValue("httpStatus");

log.info "ExpectedReturnCode \"" + ExpectedReturnCode;
log.info "httpStatus  \"" + httpStatus ;
 
switch (ExpectedReturnCode) {
	case "412":  
		if (httpStatus != "HTTP/1.1 412 Precondition Failed") {
			assert 1 == 2;
		}
	break;
	case "200":  
		if (httpStatus != "HTTP/1.1 200 OK") {
			assert 1 == 2;
		}
	break;
	case "201":  
		if (httpStatus != "HTTP/1.1 201 Created") {
			assert 1 == 2;
		}
	break;
	case "202":  
		if (httpStatus != "HTTP/1.1 202 Accepted") {
			assert 1 == 2;
		}
	break;
	case "400":  
		if (httpStatus != "HTTP/1.1 400 Bad Request") {
			assert 1 == 2;
		}
	break;
	case "401":  
		if (httpStatus != "HTTP/1.1 401 Unauthorized") {
			assert 1 == 2;
		}
	break;
	case "403":  
		if (httpStatus != "HTTP/1.1 403 Forbidden") {
			assert 1 == 2;
		}
	break;
	case "404":  
		if (httpStatus != "HTTP/1.1 404 Not Found") {
			assert 1 == 2;
		}
	break;
	case "405":  
		if (httpStatus != "HTTP/1.1 405 Method Not Allowed") {
			assert 1 == 2;
		}
	break;
	case "409":  
		if (httpStatus != "HTTP/1.1 409 Conflict") {
			assert 1 == 2;
		}
	break;
	default:
	 		assert 1 == 2;
	break; 	
	
}


</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>001234</con:value></con:property><con:property><con:name>rtrnodeid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>username</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>DeviceID</con:name><con:value>urn%3Adece%3Adeviceid%3Aorg%3Adece%3A${#TestCase#RandomNumberGenerated}</con:value></con:property><con:property><con:name>tName</con:name><con:value>00027_DeviceGetCacheScenario_NonCS_DeviceGet_LegacyDeviceUpdate_DeviceGet(If-Modified-Since)_200_OK</con:value></con:property><con:property><con:name>sName</con:name><con:value>DeviceGetCache_TestCases</con:value></con:property><con:property><con:name>AccountID</con:name><con:value>urn:dece:accountid:org:dece:AA0099E8143702A4E0401F0A059951A8</con:value></con:property><con:property><con:name>RandomNumberGenerated</con:name><con:value>221023</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value>Legacy Device has been updated successfully</con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 200 OK</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">close</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>43</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://qa.q.uvvu.com:7001/rest/2015/02/Account/urn:dece:accountid:org:dece:0E3F7C14521450B4E05305991F0A9DD7/Domain/urn:dece:domainid:dece:0E3F721FF36F1D08E05307991F0AB2EC/Device/urn:dece:deviceid:org:dece:441861</con:value></con:property><con:property><con:name>ExpectedReturnCodeCreate</con:name><con:value>303</con:value></con:property><con:property><con:name>ExpectedReturnCodeUpdate</con:name><con:value>200</con:value></con:property><con:property><con:name>ExpectedReturnCodeGet</con:name><con:value>200</con:value></con:property><con:property><con:name>ExpectedReturnCodeDelete</con:name><con:value>200</con:value></con:property><con:property><con:name>encodedValueOfSpecialSymbols</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>encodedparam</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>deviceid_xml</con:name><con:value>urn:dece:deviceid:org:dece:221023</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Code_Repo\uv-coordinator-api-regression\Certs\QALP1/RET_concat.pem</con:value></con:property><con:property><con:name>NODE_ID</con:name><con:value>0701</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZrb+o4EP0rKPdjlXfCIypIgbRdSmlZ6Gvvl5VxDLgkdoidAP31awdICX0su1Ir5Ml45szM8bEvGYgjy/MZQynHlNQ2cUSYV1jbSpYSjwKGmUdAjJjHoTfxh3eepRkeOGxRav2grfztTq2G2wKhCp2poToImmoTupbqQrfuwlndss2pcGUsQ33COCC8rViG6aqGpRrOo9HwXEf8aWaz8VupPaOUidjCRTOUPagNaysLzhNP19frtba2NZrOdcswTP11eDeBCxQDpXO5q6hIlHb2/lALEURRBDVIY/1Sr/hchsyb4DkBPEvRPlf4XS5DN1q68AkZnv9Syr0o7JMZLZY9QCjBEET4Hcj+DBFf0LDmR3OaYr6Ivy3CNGRgFW2gCk2H/FL0KrQzA1UQpgyobAHMfawxmqEUEYhqT+N+W/l13tSKrY8pIGxG05hVl/8NDyI5imiCQpUdytpDOz/gF53qXCLo9QmMMoZzdC/JmgCI2H6aCJ4fqjZK0Qxv7jATBN0wiU4/hney3HUjwHPE+P8Z0NFwdkGeQZShTnNB69nbxS2sv+dvdDvwl8H89SFC96urdgHg2LkwlKPdLU9IWZJotyO6mz4/j4hpTR/5aLnGy+Zy7K+vnQYNfr/r0yf/j5vh8mIc4M1iEF68DOfJ++3ttNcF3eGrM84iO0gjcwBm26WdbseRbTe6fG0PnmdJ9DTqW9QMlzyJ/npZ5Tf12166aMCXQUb+HGGX2pvkZbvS01Z+ZT055vC54d8QfwnZZFNnq6ecXvvT7nqcG5MoHti+3y7LOcJftR3O/CSbviHID0tJg35QuxZTAvxnMZMWHKqzwtVLpPgwjghXOnKX1A4vE3KHQ0/McLc2ruzrRvc6aDm26Rot98pwbcNttcxrw+81A+cgMjsUJxB7lMywzCUld0ebnwHC2GOIhChVc5oJpWPKDxEDwEGtT8biEFDC0CMV8kzIKqm3oE3WW+vNJbbzFjfnTeootXvKH8hD6s84SiuSbBoVSR4jiBOMpG5LWjPBa8ZFK1Ygz3hkajnQCMqEsqdSZD3Labo6w3ESIQlUj2mYRUhLFknRGJ3tfi0VQFZYx1ePxWH7tqzTb4cOCJ8QSwcma+kiMUX0xd3iHAr5vmD7uOBDeD8LsTxXop08xXCHpPrpgyWSHiVFREUHyKXnqaESVT8tqEwU5hiWPC9vayHi4th3DuNYAW2lZXmeFQNoSHlLRXhdlqgblj5BMBPCtH2kS0T0Mop+1i1QAj9JXtqrEDO+IBMOOIoFY2rF8oxrf4KYvPb7gumbc98UlZSidRxt+Fe2XiSeLBLxj68a6EHpJ8wj8bOmafgxsS9iHeURdYpbn2Mylyt5A2y/4QWkIiwW2kXT4+BfBfgqedVYNrnEwgWhphlH33+pSVFqKwBCmhHeD5TCcCyUBU6+TZD34fQpTKHF5eMM//vrTMUFBSASTzqGi/jyjvXkESDzI7HdJ/2ktz3TcS3xb3SdY71tBUGjbEoFXeeT+bPlqE+nHO/8Aw==</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:0E3F7C14521450B4E05305991F0A9DD7</con:value></con:property><con:property><con:name>Device_ID</con:name><con:value>urn:dece:deviceid:org:dece:441861</con:value></con:property><con:property><con:name>Device_ID_xml</con:name><con:value>urn:dece:deviceid:org:dece:441861</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="LegacyDeviceDeleteAPI" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="027e0746-d298-4005-b400-6d8ba943d41f"><con:settings/><con:testStep type="groovy" name="Copy of Set pem"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("SetPem");

myTC.setPropertyValue("NODE_ID",tP.getPropertyValue("NODE_ID"));

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("DELETE - LegacyDeviceDELETE");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="DELETE - LegacyDeviceDELETE"><con:settings/><con:config service="LegacyDeviceAdd_Retailer" methodName="DELETE LegacyDeviceAdd" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/LegacyDevice/{DeviceID}" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="DELETE - LegacyDeviceDELETE" mediaType="application/xml" accept="" postQueryString="false" sslKeystore="RET_concat.pem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="${#TestCase#SAML}"/>
  &lt;con:entry key="If-Match" value="*"/>
&lt;/xml-fragment></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<!--Build 7.5 Sample XML file generated by XMLSpy v2008 rel. 2 sp1 (http://www.altova.com)-->
<dece:Device UpdatedDate="2001-12-17T09:30:47.0Z" 
CreatedDate="2001-12-17T09:30:47.0Z" 
DeviceID="urn:dece:deviceid:org:dece:${#TestCase#RandomNumberGenerated}"  
xsi:schemaLocation="http://www.decellc.org/schema/2010/10/dece dece.xsd" 
xmlns:dece="http://www.decellc.org/schema/2011/08/coordinator" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
	<dece:DisplayName>String</dece:DisplayName>
	<dece:Brand Language="en-US">String</dece:Brand>
	<dece:Manufacturer Language="en-US">String</dece:Manufacturer>
	<dece:Model>String</dece:Model>
	<dece:SerialNo>String</dece:SerialNo>
	<dece:Image  MimeType="String" Width="3" Height="2">http://www.altova.com</dece:Image>	
	<dece:SponsoringServiceProvider>urn:dece:</dece:SponsoringServiceProvider>			
	<dece:ContentProfileSupport>portabledefinition</dece:ContentProfileSupport>
	<dece:DRMClientList>
		<dece:DRMClient DRMClientID="urn:dece:drmclientid:adobe:${#TestCase#RandomNumberGenerated}" 
			CreationDate="2009-12-17T09:30:47.0Z"  
			DeletionDate="2020-12-17T09:30:47.0Z">
			<dece:DisplayName>String</dece:DisplayName>
			<dece:DRMSupported>urn:dece:drm:OpenMG:0.1</dece:DRMSupported>
			<dece:NativeDRMClientID>UjBsR09EbGhjZ0dTQUxNQUFBUUNBRU1tQ1p0dU1GUXhEUzhi</dece:NativeDRMClientID>
			<dece:DECEProtocolVersion>urn:dece:protocolversion:legacy</dece:DECEProtocolVersion>
			<dece:ResourceStatus>
				<dece:Current>
					<dece:Value>urn:dece:type:status:deleted</dece:Value>
					<dece:Description>2009-14-17T09:30:47.0Z</dece:Description>					
				</dece:Current>
				<dece:History>
					<dece:Prior>
						<dece:Value>urn:dece:type:status:deleted</dece:Value>
						<dece:Description>2009-12-17T09:30:47.0Z</dece:Description>
					</dece:Prior>
				</dece:History>
			</dece:ResourceStatus>
		</dece:DRMClient>
	</dece:DRMClientList>
</dece:Device>]]></con:request><con:assertion type="GroovyScriptAssertion" disabled="true"><con:configuration><scriptText>assert ((com.eviware.soapui.support.types.StringList)messageExchange.responseHeaders["#status#"]).containsValue("HTTP/1.1 200 OK")</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="DeviceID" value="${#TestCase#Device_ID}"/>
  <con:entry key="AccountID" value="${#TestCase#NODE_ACCOUNT_ID_FULL}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extact The Response Header"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('DELETE - LegacyDeviceDELETE');
def expXML = tStep.httpRequest.response.getResponseContent();

String status     = null;
String connection = null;
String contentType   = null;
String contentLength = null;
String contentLocation = null;


/*
def status     = tStep.httpRequest.response.responseHeaders["#status#"]; 
def connection = tStep.httpRequest.response.responseHeaders["Connection"];
def contentType   = tStep.httpRequest.response.responseHeaders["Content-Type"];
def contentLength = tStep.httpRequest.response.responseHeaders["Content-Length"];
def contentLocation = tStep.httpRequest.response.responseHeaders["Location"];
*/

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}


tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
</script></con:config></con:testStep><con:testStep type="groovy" name="Process The Response and Header"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def ExpectedReturnCode       = tC.getPropertyValue("ExpectedReturnCodeDelete");
def httpStatus 			= tC.getPropertyValue("httpStatus");


log.info "ExpectedReturnCode \"" + ExpectedReturnCode;
 
switch (ExpectedReturnCode) {
	case "412":  
		if (httpStatus != "HTTP/1.1 412 Precondition Failed") {
			assert 1 == 2;
		}
	break;
	case "200":  
		if (httpStatus != "HTTP/1.1 200 OK") {
			assert 1 == 2;
		}
	break;
	case "201":  
		if (httpStatus != "HTTP/1.1 201 Created") {
			assert 1 == 2;
		}
	break;
	case "202":  
		if (httpStatus != "HTTP/1.1 202 Accepted") {
			assert 1 == 2;
		}
	break;
	case "400":  
		if (httpStatus != "HTTP/1.1 400 Bad Request") {
			assert 1 == 2;
		}
	break;
	case "401":  
		if (httpStatus != "HTTP/1.1 401 Unauthorized") {
			assert 1 == 2;
		}
	break;
	case "403":  
		if (httpStatus != "HTTP/1.1 403 Forbidden") {
			assert 1 == 2;
		}
	break;
	case "404":  
		if (httpStatus != "HTTP/1.1 404 Not Found") {
			assert 1 == 2;
		}
	break;
	case "405":  
		if (httpStatus != "HTTP/1.1 405 Method Not Allowed") {
			assert 1 == 2;
		}
	break;
	case "409":  
		if (httpStatus != "HTTP/1.1 409 Conflict") {
			assert 1 == 2;
		}
	break;
	default:
	 		assert 1 == 2;
	break; 	
	
}


</script></con:config></con:testStep><con:properties><con:property><con:name>nodeid</con:name><con:value>001234</con:value></con:property><con:property><con:name>rtrnodeid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>username</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>password</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountoid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>useroid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rightstokenidFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUUID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assert</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>DeviceID</con:name><con:value>urn%3Adece%3Adeviceid%3Aorg%3Adece%3A${#TestCase#RandomNumberGenerated}</con:value></con:property><con:property><con:name>tName</con:name><con:value>00030_DeviceGetCacheScenario_NonCS_DeviceGet_LegacyDeviceDelete_DeviceGet(If-Modified-Since)_404_NotFound</con:value></con:property><con:property><con:name>sName</con:name><con:value>DeviceGetCache_TestCases</con:value></con:property><con:property><con:name>AccountID</con:name><con:value>urn:dece:accountid:org:dece:AA0099E8143702A4E0401F0A059951A8</con:value></con:property><con:property><con:name>RandomNumberGenerated</con:name><con:value>221023</con:value></con:property><con:property><con:name>ExpectedReturnCodeCreate</con:name><con:value>201</con:value></con:property><con:property><con:name>ExpectedReturnCodeUpdate</con:name><con:value>200</con:value></con:property><con:property><con:name>ExpectedReturnCodeGet</con:name><con:value>200</con:value></con:property><con:property><con:name>ExpectedReturnCodeDelete</con:name><con:value>200</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value>Legacy Device record deleted successfully</con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 200 OK</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>close</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>text/plain;charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>41</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>encodedValueOfSpecialSymbols</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>encodedparam</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Code_Repo\uv-coordinator-api-regression\Certs\QALP1/RET_concat.pem</con:value></con:property><con:property><con:name>NODE_ID</con:name><con:value>0701</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVbbcuI4EP0VyvOYMhYGJ9gVqHICTEgmlwGSmcnLlpDboGBLRJLBydePZMABcll2n1xqt06fvuhIpxKniRuEUoJQlLNKniZMBoW1ZWWCBRxLKgOGU5CBIsEwvP4RuFUU4M0Wq9LvtKx/6s3jY4j9mt2M3abdqNXHNnaxbxNoojrCCPtxXbtKmUGfSYWZalkuqnk2cm3UGKGTwDsO6rWq77uPVuUBhNTY2qWKrDWpXLasqVLzwHGWy2V1Wa9yMXFchGrO7+sfQzKFFFvt01VGRSDRXvuTagQEkoRUCU+dU2fH5zSSwZBOGFaZgHWs6LNYyEG+o30iSSffrHIvRH0W82J5jhlnlOCEvmJTn2tQUx5VwmTCBVXT9NMkasgA25ATm9Qa7Jvl7FI7EGiHoZDYllNcW2MNIAYBjEDlftBvWd8O61qxdSQwkzEXqdxd/jc+wBaQ8DlEttyktaZ2OOAHlWqfAgn6jCSZpAu4McM6xwTkuptADoeq3AmIaf6DSj2guTTsnG16e8tVNTp0AlL9nwZtNWcF8oCTDNrx/c+HUP2GWoZlRGbfR+Ppq8iWOOX3rYLAtnNhKFu7Wu4NZTlEqx354OTllwiXVxfHlF9czh/O7h6foZGfTI7Ry/3PcPpnMb8ZPfUHT/x65IjJPeeXD25j1iVDfpvHV/5J47KZy86ZJ+rff8b4Ih6/Ph71bqOkf3eRdmYohOcjPOa/zvvi6KHRH4Uwvuv6Lzm7m2HmUPfo+nIGR94IN26G2etFfLO4fJp1/WdvelXP00bnYnQ7mZ09XaE/rTKdLf67ts2ZH2bjJyBqszRj0O9UerpLWH0tZsZCIzsuXIO5ER+pgCmrbXYZ7QgyLXc0CnQPV2vUrfdOzutht9dAHvL9LvLqyPP9Wg+FoYd6G5FZsdijeM5ZTE0sI7mrsfmaIEkDCSwCYS94ppVOWl8gdrDClT4b6EPAmYQR1/K8FEvuxnGaTBuUeb6iNRXHSCRW5YarW3YrwliB2JHkGtqR5AEQOqdgdNuMtdRzLZUuxTNeZCqpVRe4yiDTyi6MyAZuo+k5kqbzBAxRJ+VRlkB1Pp0XhXHk6uvamMjCOuiOisP2aVr7/zYV0D4RNQ7S5HIGuovwwd3ibhL5POH6dsIb+DCLqDlXupxKULJisvvrbUrMeJQjojPaUC499w07qM5+QmWgaEFJOeflba1FXB/79qYdz7j6XM0Wi6xowImRN6HhHZOig1xnCCTTwvQy4jNgToniHHQLlMT3gpf2XYqZmrKhwgpSPTGVYnnAtT8Eaa79vp70/NA3xU5IXToFufrIdp7oJ4th/OWrhgTE+Gnznf4suYjeOvYB1lYcnae+9RVlE7MyN8DLJ3NBuIalWru42Ab/COCj4LvGssglF6UHapwp+PxPxYhSy8KE8IypfscqDNtCWfBUL3MI3pzewRRaXD7O6L+/zmxajAAB/aSTtMA3d2xgjgCbbIntOug7vT3rdb1G89xDobett+jMPS6LssOu/c783rJVp/0Zb/8F</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:0E3F7BFE548C50A5E05305991F0A0B26</con:value></con:property><con:property><con:name>Device_ID</con:name><con:value>urn:dece:deviceid:org:dece:895864</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DeviceGetAPI" searchProperties="true" id="cd832c63-0805-4d38-9422-ecbd0be3a0a6">
      <con:settings/>
      
      
      <con:testStep type="groovy" name="Set pem" id="26b52774-c88b-42d7-8621-4be1064f2ba1"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("SetPem");

myTC.setPropertyValue("NODE_ID",tP.getPropertyValue("NODE_ID"));

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("DeviceGetRequest");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep>
      <con:testStep type="restrequest" name="DeviceGetRequest">
        <con:settings/>
        <con:config service="DeviceGet" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/Domain/{DomainID}/Device/{DeviceID}" methodName="DeviceGet_Request" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="DeviceGetRequest" mediaType="application/xml" sslKeystore="RET_concat.pem" accept="application/xml">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#TestCase#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting>
            <con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting><con:setting id="com.eviware.soapui.settings.CommonSettings@entitizeProperties">false</con:setting></con:settings>
            <con:endpoint>${#Project#Query_HostName}</con:endpoint>
            <con:request/>
            <con:credentials>
              <con:domain/>
            <con:authType>Global HTTP Settings</con:authType></con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters>
  <con:entry key="DeviceID" value="${#TestCase#Device_ID}"/>
  <con:entry key="AccountID" value="${#TestCase#NODE_ACCOUNT_ID_FULL}"/>
  <con:entry key="DomainID" value="${#TestCase#Domain_ID}"/>
</con:parameters>
          </con:restRequest>
        </con:config>
      </con:testStep><con:testStep type="groovy" name="Extact The Response Header"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('DeviceGetRequest');
def expXML = tStep.httpRequest.response.getResponseContent();

String status     = null;
String connection = null;
String contentType   = null;
String contentLength = null;
String contentLocation = null;
String ETag = null;
String LastModified = null;

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	     case "ETag": 
			ETag = value[0]; 
			break;
		case "Last-Modified": 
			LastModified = value[0]; 
			break;
	}
}


tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
tC.setPropertyValue("httpContentLocation", contentLocation);

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)


if(tC.getPropertyValue("ExpectedReturnCodeGet")== "200"){

	if (tC.getPropertyValue ("ETagResponseType") == "UnMatch"){

                tC.setPropertyValue("DeviceGetETagPrior", tC.getPropertyValue('DeviceGetETag'));
                tC.setPropertyValue("DeviceGetETag", ETag);
			callTC.setPropertyValue("DeviceGetETag", ETag);
			callTC.setPropertyValue("DeviceGetLastModified", LastModified);
                log.info "DeviceGetETag = "+tC.getPropertyValue('DeviceGetETag')+ ", DeviceGetETagPrior = "+tC.getPropertyValue('DeviceGetETagPrior');

                assert tC.getPropertyValue('DeviceGetETag') != tC.getPropertyValue('DeviceGetETagPrior')
              
                }

	else if (tC.getPropertyValue ("ETagResponseType") == "Match"){
                
                tC.setPropertyValue("DeviceGetETagPrior", tC.getPropertyValue('DeviceGetETag'));
                tC.setPropertyValue("DeviceGetETag", ETag);
			callTC.setPropertyValue("DeviceGetETag", ETag);
			callTC.setPropertyValue("DeviceGetLastModified", LastModified);
                log.info "DeviceGetETag = "+tC.getPropertyValue('DeviceGetETag')+ ", DeviceGetETagPrior = "+tC.getPropertyValue('DeviceGetETagPrior');
                assert tC.getPropertyValue('DeviceGetETag') == tC.getPropertyValue('DeviceGetETagPrior')
	} else if (tC.getPropertyValue ("ETagResponseType") == "FAILURE" ){
                log.info "Not Validating the ETag since expected response type is error... ";
	}

	
}

</script></con:config></con:testStep><con:testStep type="groovy" name="Process The Response and Header"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def ExpectedReturnCode       = tC.getPropertyValue("ExpectedReturnCodeGet");
def httpStatus 			= tC.getPropertyValue("httpStatus");

log.info "ExpectedReturnCode \"" + ExpectedReturnCode;
log.info "httpStatus  \"" + httpStatus ;
 
switch (ExpectedReturnCode) {
	case "412":  
		if (httpStatus != "HTTP/1.1 412 Precondition Failed") {
			assert 1 == 2;
		}
	break;
	case "200":  
		if (httpStatus != "HTTP/1.1 200 OK") {
			assert 1 == 2;
		}
	break;
	case "201":  
		if (httpStatus != "HTTP/1.1 201 Created") {
			assert 1 == 2;
		}
	break;
	case "202":  
		if (httpStatus != "HTTP/1.1 202 Accepted") {
			assert 1 == 2;
		}
	break;
	case "400":  
		if (httpStatus != "HTTP/1.1 400 Bad Request") {
			assert 1 == 2;
		}
	break;
	case "401":  
		if (httpStatus != "HTTP/1.1 401 Unauthorized") {
			assert 1 == 2;
		}
	break;
	case "403":  
		if (httpStatus != "HTTP/1.1 403 Forbidden") {
			assert 1 == 2;
		}
	break;
	case "404":  
		if (httpStatus != "HTTP/1.1 404 Not Found") {
			assert 1 == 2;
		}
	break;
	case "405":  
		if (httpStatus != "HTTP/1.1 405 Method Not Allowed") {
			assert 1 == 2;
		}
	break;
	case "409":  
		if (httpStatus != "HTTP/1.1 409 Conflict") {
			assert 1 == 2;
		}
	break;
	default:
	 		assert 1 == 2;
	break; 	
	
}


</script></con:config></con:testStep><con:properties>
        <con:property>
          <con:name>TCaseName</con:name>
          <con:value>TC_DECE_00011_DeviceGet_RetailerCS_FUNC_with_Inactive_ DeviceID</con:value>
        </con:property>
        <con:property>
          <con:name>TSuiteName</con:name>
          <con:value>DeviceGet  Retailer_CS Test Cases_R4</con:value>
        </con:property>
        <con:property>
          <con:name>AccountID</con:name>
          <con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3ADEF5738E543A633AE0401F0A05990CC0</con:value>
        </con:property>
        <con:property>
          <con:name>FeedRTDReq</con:name>
          <con:value>OK</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>0702</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceID</con:name>
          <con:value>urn%3Adece%3Adeviceid%3Aorg%3Adece%3ADEF585C6AEA11471E0401F0A07994634</con:value>
        </con:property>
        <con:property>
          <con:name>DomainID</con:name>
          <con:value>urn%3Adece%3Adomainid%3Adece%3ADEF587A47AF1508CE0401F0A07994D03</con:value>
        </con:property>
      <con:property><con:name>keyStorePath</con:name><con:value>C:\Code_Repo\uv-coordinator-api-regression\Certs\QALP1/RET_concat.pem</con:value></con:property><con:property><con:name>tName</con:name><con:value>00043_DeviceGetCacheScenario_NonCS_DeviceGet_1/07_DeviceGet(If-Modified-Since)_1/06_304_Not_Modified</con:value></con:property><con:property><con:name>sName</con:name><con:value>DeviceGetCache_TestCases</con:value></con:property><con:property><con:name>NODE_ID</con:name><con:value>0702</con:value></con:property><con:property><con:name>Domain_ID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:domainid:dece:0E3F657130241CFCE05307991F0A14F2</con:value></con:property><con:property><con:name>Device_ID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:deviceid:org:dece:0E3F7BCE4AB45093E05305991F0A470B</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:0E3F7BFDC3D7509BE05305991F0A99B6</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVbZcuI6EP0VynmcMpbBZnEFqgxkYULClmWSl1uK3IASIzuSzJKvH8mAg8lyuffJpXbr9OlFRzoVeB6WPF8I4JJGrLCah0x4qbVhJJx5ERZUeAzPQXiSeGP/uueVisjDuy1GodtpGP/UXKfkuEFgBiggpmPXHbMGE2RiF1WdSQ1XiFNTrkIk0GVCYiYbRgnZrolKJnJuUc1DJQ/VivVy5cko3AMXClu5FJGxJbUSDWMmZexZ1nK5LC7LxYhPrRJCtvXnujcmM5hjo3m6ySgNxJtbf1IMgEAYkiKJ5taplfM5DYQ3plOGZcJhGyv4LhayUN1SPoGg0xMj2wtBl02idNnGLGKU4JC+Y12fa5CzKCj44TTiVM7m3yZhIw1swoqYxHbYiWHlqR0JlGPIBTbFDNtbrBFMgAMjULgbdRvGyXFdS7fecszEJOJzkV/+Nz7AFhBGMQSm2KW1pXY84BeVap4C8bqMhImgC7jRwxpjAmLbTSDHQxUGHCZ01aNCDehKaHbWPr2D5aYaHToFIf9Pg/aaswG5x2ECzeBtcNe/uBzht+loSPyr19+/V9XFpfxVeW2kBPadU0PW2s3yYCizIdrsuHAfa+0XFAc+4Y/k6p2/j7sIovGQDPu805vx69WQSF/eBF17acFLb7pgL3b58uoi6bvroXtxN1m849Z4eFNLSOTUzy6urOp7x50+XdqVs8GvO2tw67faZyP6Z3Szvn8c8DUbPvBe5c13Lmw6eJg9turTdpXXftP+E+mBDEP7Bfz+fbWPKnH54dq1nadWH+6XjSydPf552+7Mj5PnFyByt9Rj0O0UzlWXsPxZzLSFBuYkdfViLT5CApNGU+/S2uElSu5o4KkebtborHxebdtup9quu6jlnyG3jNx63T5Hvl0t+TuR2bA4oNiO2ITqWFpyN2PzM0Ey9wSwALi5iBKldML4AbGDJS502UgdgogJuI2UPNvV9WvFWcYl/Mwi+zmuOeK16jyvIyWvN5Hssz73JxJ4TpRtOyfKIyA0pqCVWw+2UJMtpCrGG14kMrSLC1xkkCht51pmvZJTcy1B53EImqo1j4IkhGI8i9PSWGLzLZmYiNQ6OrtNj9u3iR3+29VA+QRUOwidSwtUH+HT7WJ77i6R7xN29hPewftJQPXJUgWVnJINk/yvjznRA5INicpoRznzPDTkUK3DhLJAwYKSbNKz+1rJuDr4zV073nDxrZgsFknagKoWOK7gLZ2ihUrWGEiipGl9G70CszIU66h7ICN+EDyz5ykmcsbGEkuYq4kppMsjLv4xCH3xd9Wsr459VeRCqtJJWMmvbO1QPVo04x/fNcQj2k+ZB+qzjHjw0bEvsPbiqDzVvS8pm+qVvgPW38wFiRQsVeoV8X3wrwC+Cp43ZkXOuEg1UM+JhO//FLQsNQxMSJQw2e0YqWFfKlOech2D9+H0CSZV4+x5Rv/9fWbSdAQIqEedoCm+vmU9fQTYdE9ut0E/KW7rvNMud6ouqrf2Fbdeb1WyouTYNT+ZP1v26nQ4482/</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><![CDATA[<Device DeviceID="urn:dece:deviceid:org:dece:0E3F7BCE4AB45093E05305991F0A470B" IsLegacy="false" xmlns="http://www.decellc.org/schema/2015/03/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v2.2/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <DisplayName>DeviceInfoDisplayName34</DisplayName>
   <Manufacturer>DeviceInfoManufacturer28</Manufacturer>
   <Model>DeviceInfoModel48</Model>
   <Brand Language="en-US">DeviceInfoBrand40</Brand>
   <SerialNo>1127431</SerialNo>
   <LicAppID>urn:dece:licappid:org:dece:0E3F7BCE4AB65093E05305991F0A470B</LicAppID>
   <ResourceStatus>
      <Current CreationDate="2015-02-04T08:02:24.882Z" CreatedBy="urn:dece:org:org:dece:device">
         <Value>urn:dece:type:status:pending</Value>
         <Description>Device Created</Description>
      </Current>
   </ResourceStatus>
</Device>]]></con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 200 OK</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>close</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpContentLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>ExpectedReturnCodeGet</con:name><con:value>200</con:value></con:property><con:property><con:name>ETagResponseType</con:name><con:value>UnMatch</con:value></con:property><con:property><con:name>DeviceGetETagPrior</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">"0E3F7BCE4AA45093E05305991F0A470B:DD96AB08"</con:value></con:property><con:property><con:name>DeviceGetETag</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">"0E3F7BD8C9CC6D0EE05307991F0A3BB7:E1A98F5E"</con:value></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>26b52774-c88b-42d7-8621-4be1064f2ba1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="AccountPolicyDeleteAPI" searchProperties="true" id="8afd5a6d-82cd-4495-975c-073ad78544ac"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",null);
tC.setPropertyValue("NODE_ID",null);
tC.setPropertyValue("POLICY_ID",null);
tC.setPropertyValue("SAML",null);
tC.setPropertyValue("expectErrType","SUCCESS");
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Required Properties from Calling Test Case"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",callTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_ID",callTC.getPropertyValue("NODE_ID"));
tC.setPropertyValue("POLICY_ID",callTC.getPropertyValue("POLICY_ID"));
tC.setPropertyValue("SAML",callTC.getPropertyValue("SAML"));



</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("SetPem");

myTC.setPropertyValue("NODE_ID",tP.getPropertyValue("NODE_ID"));

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("PolicyDelete");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="PolicyDelete"><con:settings/><con:config service="AccountPolicyDelete" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{NodeAccountId}/Policy/{PolicyID}" methodName="Delete" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PolicyDelete" mediaType="application/xml" sslKeystore="RET_concat.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="${#TestCase#SAML}"/>
  &lt;con:entry key="If-Match" value="*"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>${#Project#Provision_HostName}</con:endpoint><con:request/><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>assert messageExchange.responseHeaders["#status#"].toString() == "[HTTP/1.1 200 OK]";</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="PolicyID" value="${#TestCase#POLICY_ID}"/>
  <con:entry key="NodeAccountId" value="${#TestCase#NODE_ACCOUNT_ID_FULL}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVbbcps6FP0VD33sYC6+EJjYMzhOprS5jZ0mxC9niNhgpSCwJMDJ11fCNjWuk+NznhhtttZe+6IlnbMgTUzHZQwoxxnprNOEMKe2jpSCEicLGGYOCVJgDkfO3L25dsyu7gS7LUrHm46Uf/ReaL1EwzPVCK1I7Ucvlmr3IqQODTt4MdAQQtMWrowV4BHGA8JHiqkbA1U3Vb3/oFvOwHJ6dtc8sxZK5xEoE9jCpasrW1JrNlKWnOeOplVV1a163YzGmqnrhubfXM/REtJAGZ9vMqoD0fHWH3VDQJAkqIuyVDvXWj7nIXPmOCYBLyhsY4UfxdI13daET8hw/EVp9kLokSirlxcByQhGQYLfA1mfG+DLLOy4SZxRzJfph0kYugRWYY1UZPTJF0VrUzsRqMWQskBly8DYYs0gAgoEQefnzBspX07rWr31gQaERRlNWXv53/gAKSHJcghVtktrS+10wCOVGp8DcjyCkoLhEm7lsOYBArbtJqDToTr3FCK8vsZMDOiaSXbaPr2D5aYaUxwD4/+nQXvN2YA8BkkBY/8xukEFfjDWE3ulPT17vs3ibyx71eNRTWDfuTY0rd0sD4ayGaLNjjLPr9deZTz5+XyI9Vlq9DVW+Z7fc+3H995ilmrU+/F6+bUw7szFPIq0xzCuygymKLF/3g7W96tq6JdPg8H33tfe0yye3xTUfs5Y9HUV+8/vl7DAU/PdCsu3X9Wvt34ZTs0n/xo9Xw+nPxb6j7vFykO2O7t9Xfo3K1qh73581ZtQ/5EV1WT+7fuCVv7P5Pk13aZ7wL9t2535efHyCojvlnIMvGnnSnQp4J+LmbTgUI1qVyeX4sM4EK6M5S6pHU4h5A6HjujhZq1f9q6sC6N/5brWcGrol/qgp1u2bVzprj51JzuR2bA4oHiRkQjLWFJyN2PzOUGUOgxICFQts0IoHVM+QZwGPOh4ZCYOQUYYPGRCnosh7r/yPssxAiMm0Spc2wlZVabSuc34HbmjbsSBtjTZ0FuaPAOEcwxSuOVcMzHYjItarIKy4InRLYMugUJIO5Uq65j9s4HGcJonIJlqaRYWCXTzZV5XRmObr6kGiNXW2eVDfdo+zOvw364EwifE0oHJXCYg2ghHLhdzl8jHCff2E97Bu0WI5cES9eQUow2T9q8/YyLno5kRkdGOcuN5aGihaocJNYHCEqNm0JvrWqi4OPfjXTtWQXfVLcqyqBtgSX2jAl6TKWq6qc0BFUKZ3h6yX0C0BkU76RpoiB8Eb+xtigVfkjkPOKRiYjr18oR7fw5M3vueGPX1qY+KVkhROg5rfsx2kYg3i2T86bMGOUj6CfO9+FQZDf907AjWXhyRp7j2OSaxXMkr4O2DuUCZgMVCvDK6D34M4FjwtrEpcsOFi4F6KTh8/KcjVWmkBAhlBeHeVKkN+0pZ8+RvOTh/nP6CqcW4eZ3hf3+eqbgeAQTiTcdwjS8vWUceARLvqe026BHBHUyts8lAn7i14A42gmtYptsUpcVu/Jf5b8tenQ5nfPwb</con:value></con:property><con:property><con:name>tName</con:name><con:value>00035_DeviceGetCacheScenario_CS_DeviceGet_ParentNode_MAC-PolicyDelete_DeviceGet_403_Forbidden</con:value></con:property><con:property><con:name>sName</con:name><con:value>DeviceGetCache_TestCases</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E49D97D966C55C41E0401F0A059914BD</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E49D97D966C35C41E0401F0A059914BD</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>status</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>contentType</con:name><con:value>application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>contentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>contentLocation</con:name><con:value>https://qa.q.uvvu.com:7001/rest/1/06/Account/urn:dece:accountid:org:dece:D12F2DD48A10D559E0401F0A059918B0/User/urn:dece:userid:org:dece:D12F2DD48A1ED559E0401F0A059918B0/Policy/urn:dece:type:policy:TermsOfUse</con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>Keep-Alive</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>httpContentLocation</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://qa.q.uvvu.com:7001/rest/1/07/Account/urn:dece:accountid:org:dece:E37E9E0090319851E0401F0A05992566/User/urn:dece:userid:org:dece:E37E9E0090589851E0401F0A05992566/Policy/urn:dece:type:policy:TermsOfUse</con:value></con:property><con:property><con:name>Policy_Class</con:name><con:value>urn%3Adece%3Atype%3Apolicy%3ATermsOfUse</con:value></con:property><con:property><con:name>ENNODE_USER_ID</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AD3CD43AEEE91F252E0401F0A079913BF</con:value></con:property><con:property><con:name>ENNODE_ACCOUNT_ID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AD3CD44C830AA5460E0401F0A079913BD</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Code_Repo\uv-coordinator-api-regression\Certs\QALP1/RET_concat.pem</con:value></con:property><con:property><con:name>NODE_ID</con:name><con:value>0701</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AE49D97E6DD6C8044E0401F0A059914C7</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:0E3F7C15D78B50BAE05305991F0A172A</con:value></con:property><con:property><con:name>ENCODED_NODE_USER_ID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>ENCODED_NODE_ACCOUNT_ID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>POLICY_ID</con:name><con:value>urn:dece:policyid:org:dece:0E3F7C124C8450B0E05305991F0A4002</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>ce02e137-2b56-4bd6-a4b9-e1e9fdc05e16</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>46677643-d11e-4e41-a0a4-e6e1d2901adb</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="AccountPolicyGetAPI" searchProperties="true" id="6180cb87-4ade-491e-80f5-bf48bbccdbaa"><con:settings/><con:testStep type="groovy" name="Establish Test Case Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",null);
tC.setPropertyValue("NODE_ID",null);
tC.setPropertyValue("SAML",null);
tC.setPropertyValue("expectErrType","SUCCESS");
</script></con:config></con:testStep><con:testStep type="groovy" name="Extract Required Properties from Calling Test Case"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",callTC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_ID",callTC.getPropertyValue("NODE_ID"));
tC.setPropertyValue("SAML",callTC.getPropertyValue("SAML"));

if (tP.getPropertyValue("versionMinor") == tP.getPropertyValue("versionURLEncode")){	
	tC.setPropertyValue("Policy_Class", URLEncoder.encode(callTC.getPropertyValue("Policy_Class"), "UTF-8"));
}else{
	tC.setPropertyValue("Policy_Class", callTC.getPropertyValue("Policy_Class"));
}



</script></con:config></con:testStep><con:testStep type="groovy" name="Set pem"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("SetPem");

myTC.setPropertyValue("NODE_ID",tP.getPropertyValue("NODE_ID"));

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("PolicyGet");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="PolicyGet"><con:settings/><con:config service="AccountPolicyCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{NodeAccountId}/Policy/{PolicyClass}" methodName="Get" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="PolicyGet" mediaType="application/xml" sslKeystore="RET_concat.pem" accept=""><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Authorization" value="${#TestCase#SAML}" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>${#Project#Query_HostName}</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="PolicyClass" value="${#TestCase#Policy_Class}"/>
  <con:entry key="NodeAccountId" value="${#TestCase#NODE_ACCOUNT_ID_FULL}"/>
</con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extract PolicyID"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('PolicyGet');
def expXML = tStep.httpRequest.response.getResponseContent();

String status     = null;
String connection = null;
String contentType   = null;
String contentLength = null;
String contentLocation = null;

tStep.httpRequest.response.responseHeaders.each() { header, value ->
                switch (header) {
                                case "Location": 
                                                contentLocation = value[0];
                                                break;
                                case "#status#": 
                                                status = value[0]; 
                                                break;
                                case "Connection": 
                                                connection = value[0]; 
                                                break;
                                case "Content-Type": 
                                                contentType = value[0]; 
                                                break;
                                case "Content-Length": 
                                                contentLength = value[0]; 
                                                break;
                                case "Transfer-Encoding": 
                                                httpContentEncoding = value[0]; 
                                                break;
                }
}


tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);

String policyWasFound = "false";
String xmlPolicyClass = "";

/*
*  We can assume that if we get returned an HTTP status 
*  of 'HTTP/1.1 200 OK' the policy was found.  However,
*  it is never a bad idea to doublecheck.
*/

/*
*  The body should not be null...something should be
*  there.
*/
assert expXML.size() > 0;

if (expXML != null) {
                def myXML = new XmlSlurper().parseText(expXML);

                xmlPolicyClass = myXML.Policy[0].PolicyClass.text();
}
                                
if (status == "HTTP/1.1 200 OK" || xmlPolicyClass == tcPolicyClass) {
                policyWasFound = "true";
                def PolicyID = context.expand( '${#TestCase#XMLbody#declare namespace ns1=\'${#Project#coordinatorSchema}\'; //ns1:PolicyList[1]/ns1:Policy[1]/@PolicyID}' )
                log.info "================="+PolicyID
                tC.setPropertyValue("POLICY_ID",PolicyID);
}

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)
if (tP.getPropertyValue("versionMinor") == tP.getPropertyValue("versionURLEncode")){	
callTC.setPropertyValue("POLICY_ID", URLEncoder.encode(tC.getPropertyValue("POLICY_ID"), "UTF-8"));
}else{
	callTC.setPropertyValue("POLICY_ID", tC.getPropertyValue("POLICY_ID"));
}
 </script></con:config></con:testStep><con:properties><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVbbcps6FP0VD33sYC6+EJjYMzhOprS5jZ0mxC9niNhgpSCwJMDJ11fCNjWuk+NznhhtttZe+6IlnbMgTUzHZQwoxxnprNOEMKe2jpSCEicLGGYOCVJgDkfO3L25dsyu7gS7LUrHm46Uf/ReaL1EwzPVCK1I7Ucvlmr3IqQODTt4MdAQQtMWrowV4BHGA8JHiqkbA1U3Vb3/oFvOwHJ6dtc8sxZK5xEoE9jCpasrW1JrNlKWnOeOplVV1a163YzGmqnrhubfXM/REtJAGZ9vMqoD0fHWH3VDQJAkqIuyVDvXWj7nIXPmOCYBLyhsY4UfxdI13daET8hw/EVp9kLokSirlxcByQhGQYLfA1mfG+DLLOy4SZxRzJfph0kYugRWYY1UZPTJF0VrUzsRqMWQskBly8DYYs0gAgoEQefnzBspX07rWr31gQaERRlNWXv53/gAKSHJcghVtktrS+10wCOVGp8DcjyCkoLhEm7lsOYBArbtJqDToTr3FCK8vsZMDOiaSXbaPr2D5aYaUxwD4/+nQXvN2YA8BkkBY/8xukEFfjDWE3ulPT17vs3ibyx71eNRTWDfuTY0rd0sD4ayGaLNjjLPr9deZTz5+XyI9Vlq9DVW+Z7fc+3H995ilmrU+/F6+bUw7szFPIq0xzCuygymKLF/3g7W96tq6JdPg8H33tfe0yye3xTUfs5Y9HUV+8/vl7DAU/PdCsu3X9Wvt34ZTs0n/xo9Xw+nPxb6j7vFykO2O7t9Xfo3K1qh73581ZtQ/5EV1WT+7fuCVv7P5Pk13aZ7wL9t2535efHyCojvlnIMvGnnSnQp4J+LmbTgUI1qVyeX4sM4EK6M5S6pHU4h5A6HjujhZq1f9q6sC6N/5brWcGrol/qgp1u2bVzprj51JzuR2bA4oHiRkQjLWFJyN2PzOUGUOgxICFQts0IoHVM+QZwGPOh4ZCYOQUYYPGRCnosh7r/yPssxAiMm0Spc2wlZVabSuc34HbmjbsSBtjTZ0FuaPAOEcwxSuOVcMzHYjItarIKy4InRLYMugUJIO5Uq65j9s4HGcJonIJlqaRYWCXTzZV5XRmObr6kGiNXW2eVDfdo+zOvw364EwifE0oHJXCYg2ghHLhdzl8jHCff2E97Bu0WI5cES9eQUow2T9q8/YyLno5kRkdGOcuN5aGihaocJNYHCEqNm0JvrWqi4OPfjXTtWQXfVLcqyqBtgSX2jAl6TKWq6qc0BFUKZ3h6yX0C0BkU76RpoiB8Eb+xtigVfkjkPOKRiYjr18oR7fw5M3vueGPX1qY+KVkhROg5rfsx2kYg3i2T86bMGOUj6CfO9+FQZDf907AjWXhyRp7j2OSaxXMkr4O2DuUCZgMVCvDK6D34M4FjwtrEpcsOFi4F6KTh8/KcjVWmkBAhlBeHeVKkN+0pZ8+RvOTh/nP6CqcW4eZ3hf3+eqbgeAQTiTcdwjS8vWUceARLvqe026BHBHUyts8lAn7i14A42gmtYptsUpcVu/Jf5b8tenQ5nfPwb</con:value></con:property><con:property><con:name>tName</con:name><con:value>00035_DeviceGetCacheScenario_CS_DeviceGet_ParentNode_MAC-PolicyDelete_DeviceGet_403_Forbidden</con:value></con:property><con:property><con:name>sName</con:name><con:value>DeviceGetCache_TestCases</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E49DA0E56DB85076E0401F0A05994921</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E49DA0E56D5A5076E0401F0A05994921</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>7600</con:value></con:property><con:property><con:name>expectErrType</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value></con:property><con:property><con:name>status</con:name><con:value>HTTP/1.1 201 Created</con:value></con:property><con:property><con:name>contentType</con:name><con:value>application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>contentLength</con:name><con:value>0</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><![CDATA[<PolicyList xmlns="http://www.decellc.org/schema/2015/03/coordinator" xmlns:ns2="http://www.movielabs.com/schema/md/v2.2/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Policy PolicyID="urn:dece:policyid:org:dece:0E3F7C124C8450B0E05305991F0A4002">
      <PolicyClass>urn:dece:type:policy:ManageAccountConsent</PolicyClass>
      <Resource>urn:dece:accountid:org:dece:0E3F7C15D78B50BAE05305991F0A172A</Resource>
      <RequestingEntity>urn:dece:org:org:dece:RET</RequestingEntity>
      <PolicyAuthority>urn:dece:role:coordinator</PolicyAuthority>
      <ResourceStatus>
         <Current CreationDate="2015-02-04T07:57:47.000Z" CreatedBy="urn:dece:userid:org:dece:0E3F7C14FAA76D10E05307991F0A0DAB">
            <Value>urn:dece:type:status:active</Value>
         </Current>
      </ResourceStatus>
   </Policy>
</PolicyList>]]></con:value></con:property><con:property><con:name>contentLocation</con:name><con:value>https://qa.q.uvvu.com:7001/rest/1/06/Account/urn:dece:accountid:org:dece:D12F2DD48A10D559E0401F0A059918B0/User/urn:dece:userid:org:dece:D12F2DD48A1ED559E0401F0A059918B0/Policy/urn:dece:type:policy:TermsOfUse</con:value></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 200 OK</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>close</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value>application/xml;charset=UTF-8</con:value></con:property><con:property><con:name>httpContentLength</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpContentLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>Policy_Class</con:name><con:value>urn:dece:type:policy:ManageAccountConsent</con:value></con:property><con:property><con:name>ENNODE_USER_ID</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AD3CD43AEEE91F252E0401F0A079913BF</con:value></con:property><con:property><con:name>ENNODE_ACCOUNT_ID</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AD3CD44C830AA5460E0401F0A079913BD</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Code_Repo\uv-coordinator-api-regression\Certs\QALP1/RET_concat.pem</con:value></con:property><con:property><con:name>NODE_ID</con:name><con:value>0701</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AE49DA0E56DB85076E0401F0A05994921</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:0E3F7C15D78B50BAE05305991F0A172A</con:value></con:property><con:property><con:name>ENCODED_NODE_USER_ID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>ENCODED_NODE_ACCOUNT_ID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>PolicyID</con:name><con:value>urn:dece:policyid:org:dece:E49C70AAFF84613CE0401F0A07991C29</con:value></con:property><con:property><con:name>policyExists</con:name><con:value>true</con:value></con:property><con:property><con:name>POLICY_ID</con:name><con:value>urn:dece:policyid:org:dece:0E3F7C124C8450B0E05305991F0A4002</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>ce02e137-2b56-4bd6-a4b9-e1e9fdc05e16</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>46677643-d11e-4e41-a0a4-e6e1d2901adb</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DeviceGetAPIwithIf-None-Match" searchProperties="true" id="d614eb05-6135-472f-accb-fbdcf0721ea6">
      <con:settings/>
      
      
      <con:testStep type="groovy" name="Set pem"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("SetPem");

myTC.setPropertyValue("NODE_ID",tP.getPropertyValue("NODE_ID"));

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("DeviceGetRequest");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep>
      <con:testStep type="restrequest" name="DeviceGetRequest">
        <con:settings/>
        <con:config service="DeviceGet" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/Domain/{DomainID}/Device/{DeviceID}" methodName="DeviceGet_Request" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="DeviceGetRequest" mediaType="application/xml" sslKeystore="RET_concat.pem" accept="application/xml">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Authorization" value="${#TestCase#SAML}"/>
  &lt;con:entry key="If-None-Match" value="${#TestCase#ETag}"/>
&lt;/xml-fragment></con:setting>
            <con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting><con:setting id="com.eviware.soapui.settings.CommonSettings@entitizeProperties">false</con:setting></con:settings>
            <con:endpoint>${#Project#Query_HostName}</con:endpoint>
            <con:request/>
            <con:credentials>
              <con:domain/>
            <con:authType>Global HTTP Settings</con:authType></con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters>
  <con:entry key="DeviceID" value="${#TestCase#Device_ID}"/>
  <con:entry key="AccountID" value="${#TestCase#NODE_ACCOUNT_ID_FULL}"/>
  <con:entry key="DomainID" value="${#TestCase#Domain_ID}"/>
</con:parameters>
          </con:restRequest>
        </con:config>
      </con:testStep><con:testStep type="groovy" name="Extact The Response Header"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('DeviceGetRequest');
def expXML = tStep.httpRequest.response.getResponseContent();

String status     = null;
String connection = null;
String contentType   = null;
String contentLength = null;
String contentLocation = null;
String ETag = null;
String LastModified = null;

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	     case "ETag": 
			ETag = value[0]; 
			break;
		case "Last-Modified": 
			LastModified = value[0]; 
			break;
	}
}


tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
tC.setPropertyValue("httpContentLocation", contentLocation);

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)


if(tC.getPropertyValue("ExpectedReturnCodeGet")== "200"){

	if (tC.getPropertyValue ("ETagResponseType") == "UnMatch"){

                tC.setPropertyValue("DeviceGetETagPrior", tC.getPropertyValue('DeviceGetETag'));
                tC.setPropertyValue("DeviceGetETag", ETag);
			callTC.setPropertyValue("DeviceGetETag", ETag);
                log.info "DeviceGetETag = "+tC.getPropertyValue('DeviceGetETag')+ ", DeviceGetETagPrior = "+tC.getPropertyValue('DeviceGetETagPrior');

                assert tC.getPropertyValue('DeviceGetETag') != tC.getPropertyValue('DeviceGetETagPrior')
              
                }

	else if (tC.getPropertyValue ("ETagResponseType") == "Match"){
                
                tC.setPropertyValue("DeviceGetETagPrior", tC.getPropertyValue('DeviceGetETag'));
                tC.setPropertyValue("DeviceGetETag", ETag);
			callTC.setPropertyValue("DeviceGetETag", ETag);
                log.info "DeviceGetETag = "+tC.getPropertyValue('DeviceGetETag')+ ", DeviceGetETagPrior = "+tC.getPropertyValue('DeviceGetETagPrior');
                assert tC.getPropertyValue('DeviceGetETag') == tC.getPropertyValue('DeviceGetETagPrior')
	} else if (tC.getPropertyValue ("ETagResponseType") == "FAILURE" ){
                log.info "Not Validating the ETag since expected response type is error... ";
	}

	
}

</script></con:config></con:testStep><con:testStep type="groovy" name="Process The Response and Header"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def ExpectedReturnCode       = tC.getPropertyValue("ExpectedReturnCodeGet");
def httpStatus 			= tC.getPropertyValue("httpStatus");

log.info "ExpectedReturnCode \"" + ExpectedReturnCode;
log.info "httpStatus  \"" + httpStatus ;
 
switch (ExpectedReturnCode) {
	case "412":  
		if (httpStatus != "HTTP/1.1 412 Precondition Failed") {
			assert 1 == 2;
		}
	case "304":  
		if (httpStatus != "HTTP/1.1 304 Not Modified") {
			assert 1 == 2;
		}
	break;
	case "200":  
		if (httpStatus != "HTTP/1.1 200 OK") {
			assert 1 == 2;
		}
	break;
	case "201":  
		if (httpStatus != "HTTP/1.1 201 Created") {
			assert 1 == 2;
		}
	break;
	case "202":  
		if (httpStatus != "HTTP/1.1 202 Accepted") {
			assert 1 == 2;
		}
	break;
	case "400":  
		if (httpStatus != "HTTP/1.1 400 Bad Request") {
			assert 1 == 2;
		}
	break;
	case "401":  
		if (httpStatus != "HTTP/1.1 401 Unauthorized") {
			assert 1 == 2;
		}
	break;
	case "403":  
		if (httpStatus != "HTTP/1.1 403 Forbidden") {
			assert 1 == 2;
		}
	break;
	case "404":  
		if (httpStatus != "HTTP/1.1 404 Not Found") {
			assert 1 == 2;
		}
	break;
	case "405":  
		if (httpStatus != "HTTP/1.1 405 Method Not Allowed") {
			assert 1 == 2;
		}
	break;
	case "409":  
		if (httpStatus != "HTTP/1.1 409 Conflict") {
			assert 1 == 2;
		}
	break;
	default:
	 		assert 1 == 2;
	break; 	
	
}


</script></con:config></con:testStep><con:properties>
        <con:property>
          <con:name>TCaseName</con:name>
          <con:value>TC_DECE_00011_DeviceGet_RetailerCS_FUNC_with_Inactive_ DeviceID</con:value>
        </con:property>
        <con:property>
          <con:name>TSuiteName</con:name>
          <con:value>DeviceGet  Retailer_CS Test Cases_R4</con:value>
        </con:property>
        <con:property>
          <con:name>AccountID</con:name>
          <con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3ADEF5738E543A633AE0401F0A05990CC0</con:value>
        </con:property>
        <con:property>
          <con:name>FeedRTDReq</con:name>
          <con:value>OK</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>0702</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceID</con:name>
          <con:value>urn%3Adece%3Adeviceid%3Aorg%3Adece%3ADEF585C6AEA11471E0401F0A07994634</con:value>
        </con:property>
        <con:property>
          <con:name>DomainID</con:name>
          <con:value>urn%3Adece%3Adomainid%3Adece%3ADEF587A47AF1508CE0401F0A07994D03</con:value>
        </con:property>
      <con:property><con:name>keyStorePath</con:name><con:value>C:\Code_Repo\uv-coordinator-api-regression\Certs\QALP1/RET_concat.pem</con:value></con:property><con:property><con:name>tName</con:name><con:value>00042_DeviceGetCacheScenario_NonCS_DeviceGet_1/07_DeviceGet(If-Non-Match)_1/06__304_Not_Modified</con:value></con:property><con:property><con:name>sName</con:name><con:value>DeviceGetCache_TestCases</con:value></con:property><con:property><con:name>NODE_ID</con:name><con:value>0701</con:value></con:property><con:property><con:name>Domain_ID</con:name><con:value>urn%3Adece%3Adomainid%3Adece%3A0E3F721FF37B1D08E05307991F0AB2EC</con:value></con:property><con:property><con:name>Device_ID</con:name><con:value>urn%3Adece%3Adeviceid%3Aorg%3Adece%3A0E3F7BD72325509FE05305991F0AFDB1</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3A0E3F7C14524E50B4E05305991F0A9DD7</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVbbcuI4EP0VyvM4ZSyDzcUVqCKBzDCBXIBksvOypchtUGLLRpLN5etXMsGDGZJl98mlduv06YuOdCFwFNa8nhDAJY1ZZR2FTHi5tWOknHkxFlR4DEcgPEm8aW888mpV5OH9FqMy7HeMvwH5jbpDHLOO62A6tVbbxLbTNhvNhhs0G04LGki5CpHCkAmJmewYNWS7JqqZyJmhlodsr96stpz2L6PyBFwobOVSVbt2pNaiYyykTDzLWq1W1VW9GvO5VUPItp7HoylZQISN7sUuozwQ7777k6oPBMKQVEkcWRdWyefCF96UzhmWKYf3WP5HsZCF2pby8QWdfzGKveAPWRDnyyvMYkYJDukW6/qMQS5iv9IL5zGnchF9mISNNLAJa2IS22FfDKtM7UygEkMusCkW2H7HmkAAHBiByuNk2DG+nNe1fOuMYyaCmEeivPxvfIBlEMYJ+KbYp/VO7XzAE5XqXgDxhoyEqaAZ3OphTTAB8d5NIOdDVe45BHQ9okIN6FpodtYhvaPlrhp9Ogch/0+DDpqzA3nCYQpde+S4T6uvvttADE1+3tBWkCAUzAh+6+QEDp1zQ9Ha3fJoKIsh2u1g6KHx1+THdrn6uu0v1pG13Gzbg59X8WL0fI2bBJY/NtnDQMzwt6u74W09+D6YjcPHxcNX7D5cD+b3j8NgXb9f9durxds3NHtuiehmMho/P/Sd3ni5bq6d2bT34kpsjYP5a9+NWr54oZsG8vng10tj27gZL2uT6Dt+AjK+sfAo217arW88myeSzZqPy2HGkuRy1oo7RToH/Mu2/Zmfpi+vQOR+qcdg2K9cqy5h+bmYaQv1zSB39RItPkICk0ZX79La4aVK7qjvqR7u1mhQv25e2Y5bc3suunQGyK0jt922r1Gv3e839yKzY3FE8SpmAdWxtOTuxuZzgiTyBDAfuJnFqVI6YXyC2McSV4Zsog5BzATMYiXP2Tpx5hy9bnirueAxe63zDBLyZlRuY3nH7ngvkMBLkmzbJUmeAKEJBa3beqyFmmshVSmWOEtlaFczXGWQKmXnWmS9mtNyLUGjJARN1IpiPw2hmiySvDCW2H1rJiYit04Gs/ywfZjW8b99BZSPT7WD0LlcguoinLhbavtEPk7YOUx4D99LfarPlSqn5JTsmJR//Z4SPR7FiKiM9pQLz2NDCdU6TqgI5GeUFHNe3NZKxNWx7+7bscTVZTXNsjRvQFPLG1fwlk7RQjVrCiRVwrSZxW/ArALFOusWKIgfBS/sZYqpXLCpxBIiNTGVfHnGtT8Foa/9oZr09blvilJIVToJa3nKdhWqJ4tm/OmrhnhE+ynzvfqsYu7/7tgJrIM4Kk9160vK5nqlb4DNB3NBYgVLlXbF/BD8FMCp4GVjUeSCi1QD9ZJK+PhPRYtSx8CExCmTw76RGw6FMucpNwl4v53+gMm1uHic0X9/nZk0HwEC6kknaI6v71hPHwE2PxDb96Cn9dYZfKa3ZXbdP8x/Wg7qdDzj3X8A</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 304 Not Modified</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>close</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpContentLength</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpContentLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>ExpectedReturnCodeGet</con:name><con:value>304</con:value></con:property><con:property><con:name>ETagResponseType</con:name><con:value>FAILURE</con:value></con:property><con:property><con:name>DeviceGetETagPrior</con:name><con:value>"0E3F1071764771C1E05305991F0A383E:A40DC0EE"</con:value></con:property><con:property><con:name>DeviceGetETag</con:name><con:value>"0E3F7BCE49AD5093E05305991F0A470B:D2C57A94"</con:value></con:property><con:property><con:name>ETag</con:name><con:value>"0E3F7BCE4AA45093E05305991F0A470B:DD96AB08"</con:value></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>26b52774-c88b-42d7-8621-4be1064f2ba1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DeviceGetAPIwithIf-Modified-Since" searchProperties="true" id="9c40404c-1a9c-4e8c-993d-fae7b4056716">
      <con:settings/>
      
      
      <con:testStep type="groovy" name="Set pem"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("SetPem");

myTC.setPropertyValue("NODE_ID",tP.getPropertyValue("NODE_ID"));

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("DeviceGetRequest");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep>
      <con:testStep type="restrequest" name="DeviceGetRequest">
        <con:settings/>
        <con:config service="DeviceGet" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Account/{AccountID}/Domain/{DomainID}/Device/{DeviceID}" methodName="DeviceGet_Request" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="DeviceGetRequest" mediaType="application/xml" sslKeystore="RET_concat.pem" accept="application/xml">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="If-Modified-Since" value="${#TestCase#Last-Modified}"/>
  &lt;con:entry key="Authorization" value="${#TestCase#SAML}"/>
  &lt;con:entry key="If-None-Match" value="${#TestCase#ETag}"/>
&lt;/xml-fragment></con:setting>
            <con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting><con:setting id="com.eviware.soapui.settings.CommonSettings@entitizeProperties">false</con:setting></con:settings>
            <con:endpoint>${#Project#Query_HostName}</con:endpoint>
            <con:request/>
            <con:credentials>
              <con:domain/>
            <con:authType>Global HTTP Settings</con:authType></con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters>
  <con:entry key="DeviceID" value="${#TestCase#Device_ID}"/>
  <con:entry key="AccountID" value="${#TestCase#NODE_ACCOUNT_ID_FULL}"/>
  <con:entry key="DomainID" value="${#TestCase#Domain_ID}"/>
</con:parameters>
          </con:restRequest>
        </con:config>
      </con:testStep><con:testStep type="groovy" name="Extact The Response Header"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep  = tC.getTestStepByName('DeviceGetRequest');
def expXML = tStep.httpRequest.response.getResponseContent();

String status     = null;
String connection = null;
String contentType   = null;
String contentLength = null;
String contentLocation = null;
String ETag = null;
String LastModified = null;

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	     case "ETag": 
			ETag = value[0]; 
			break;
		case "Last-Modified": 
			LastModified = value[0]; 
			break;
	}
}


tC.setPropertyValue("XMLbody", expXML);
tC.setPropertyValue("httpStatus", status);
tC.setPropertyValue("httpConnect", connection);
tC.setPropertyValue("httpContentType", contentType);
tC.setPropertyValue("httpContentLength", contentLength);
tC.setPropertyValue("httpContentLocation", contentLocation);
tC.setPropertyValue("httpContentLocation", contentLocation);

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)


if(tC.getPropertyValue("ExpectedReturnCodeGet")== "200"){

	if (tC.getPropertyValue ("ETagResponseType") == "UnMatch"){

                tC.setPropertyValue("DeviceGetETagPrior", tC.getPropertyValue('DeviceGetETag'));
                tC.setPropertyValue("DeviceGetETag", ETag);
			callTC.setPropertyValue("DeviceGetETag", ETag);
                log.info "DeviceGetETag = "+tC.getPropertyValue('DeviceGetETag')+ ", DeviceGetETagPrior = "+tC.getPropertyValue('DeviceGetETagPrior');

                assert tC.getPropertyValue('DeviceGetETag') != tC.getPropertyValue('DeviceGetETagPrior')
              
                }

	else if (tC.getPropertyValue ("ETagResponseType") == "Match"){
                
                tC.setPropertyValue("DeviceGetETagPrior", tC.getPropertyValue('DeviceGetETag'));
                tC.setPropertyValue("DeviceGetETag", ETag);
			callTC.setPropertyValue("DeviceGetETag", ETag);
                log.info "DeviceGetETag = "+tC.getPropertyValue('DeviceGetETag')+ ", DeviceGetETagPrior = "+tC.getPropertyValue('DeviceGetETagPrior');
                assert tC.getPropertyValue('DeviceGetETag') == tC.getPropertyValue('DeviceGetETagPrior')
	} else if (tC.getPropertyValue ("ETagResponseType") == "FAILURE" ){
                log.info "Not Validating the ETag since expected response type is error... ";
	}

	
}

</script></con:config></con:testStep><con:testStep type="groovy" name="Process The Response and Header"><con:settings/><con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def ExpectedReturnCode       = tC.getPropertyValue("ExpectedReturnCodeGet");
def httpStatus 			= tC.getPropertyValue("httpStatus");

log.info "ExpectedReturnCode \"" + ExpectedReturnCode;
log.info "httpStatus  \"" + httpStatus ;
 
switch (ExpectedReturnCode) {
	case "412":  
		if (httpStatus != "HTTP/1.1 412 Precondition Failed") {
			assert 1 == 2;
		}
	case "304":  
		if (httpStatus != "HTTP/1.1 304 Not Modified") {
			assert 1 == 2;
		}
	break;
	case "200":  
		if (httpStatus != "HTTP/1.1 200 OK") {
			assert 1 == 2;
		}
	break;
	case "201":  
		if (httpStatus != "HTTP/1.1 201 Created") {
			assert 1 == 2;
		}
	break;
	case "202":  
		if (httpStatus != "HTTP/1.1 202 Accepted") {
			assert 1 == 2;
		}
	break;
	case "400":  
		if (httpStatus != "HTTP/1.1 400 Bad Request") {
			assert 1 == 2;
		}
	break;
	case "401":  
		if (httpStatus != "HTTP/1.1 401 Unauthorized") {
			assert 1 == 2;
		}
	break;
	case "403":  
		if (httpStatus != "HTTP/1.1 403 Forbidden") {
			assert 1 == 2;
		}
	break;
	case "404":  
		if (httpStatus != "HTTP/1.1 404 Not Found") {
			assert 1 == 2;
		}
	break;
	case "405":  
		if (httpStatus != "HTTP/1.1 405 Method Not Allowed") {
			assert 1 == 2;
		}
	break;
	case "409":  
		if (httpStatus != "HTTP/1.1 409 Conflict") {
			assert 1 == 2;
		}
	break;
	default:
	 		assert 1 == 2;
	break; 	
	
}


</script></con:config></con:testStep><con:properties>
        <con:property>
          <con:name>TCaseName</con:name>
          <con:value>TC_DECE_00011_DeviceGet_RetailerCS_FUNC_with_Inactive_ DeviceID</con:value>
        </con:property>
        <con:property>
          <con:name>TSuiteName</con:name>
          <con:value>DeviceGet  Retailer_CS Test Cases_R4</con:value>
        </con:property>
        <con:property>
          <con:name>AccountID</con:name>
          <con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3ADEF5738E543A633AE0401F0A05990CC0</con:value>
        </con:property>
        <con:property>
          <con:name>FeedRTDReq</con:name>
          <con:value>OK</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>0702</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceID</con:name>
          <con:value>urn%3Adece%3Adeviceid%3Aorg%3Adece%3ADEF585C6AEA11471E0401F0A07994634</con:value>
        </con:property>
        <con:property>
          <con:name>DomainID</con:name>
          <con:value>urn%3Adece%3Adomainid%3Adece%3ADEF587A47AF1508CE0401F0A07994D03</con:value>
        </con:property>
      <con:property><con:name>keyStorePath</con:name><con:value>C:\Code_Repo\uv-coordinator-api-regression\Certs\QALP1/RET_concat.pem</con:value></con:property><con:property><con:name>tName</con:name><con:value>00043_DeviceGetCacheScenario_NonCS_DeviceGet_1/07_DeviceGet(If-Modified-Since)_1/06_304_Not_Modified</con:value></con:property><con:property><con:name>sName</con:name><con:value>DeviceGetCache_TestCases</con:value></con:property><con:property><con:name>NODE_ID</con:name><con:value>0701</con:value></con:property><con:property><con:name>Domain_ID</con:name><con:value>urn%3Adece%3Adomainid%3Adece%3A0E3F657130241CFCE05307991F0A14F2</con:value></con:property><con:property><con:name>Device_ID</con:name><con:value>urn%3Adece%3Adeviceid%3Aorg%3Adece%3A0E3F7BCE4AB45093E05305991F0A470B</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3A0E3F7BFDC3D7509BE05305991F0A99B6</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVbZcuI6EP0VynmcMpbBZnEFqgxkYULClmWSl1uK3IASIzuSzJKvH8mAg8lyuffJpXbr9OlFRzoVeB6WPF8I4JJGrLCah0x4qbVhJJx5ERZUeAzPQXiSeGP/uueVisjDuy1GodtpGP/UXKfkuEFgBiggpmPXHbMGE2RiF1WdSQ1XiFNTrkIk0GVCYiYbRgnZrolKJnJuUc1DJQ/VivVy5cko3AMXClu5FJGxJbUSDWMmZexZ1nK5LC7LxYhPrRJCtvXnujcmM5hjo3m6ySgNxJtbf1IMgEAYkiKJ5taplfM5DYQ3plOGZcJhGyv4LhayUN1SPoGg0xMj2wtBl02idNnGLGKU4JC+Y12fa5CzKCj44TTiVM7m3yZhIw1swoqYxHbYiWHlqR0JlGPIBTbFDNtbrBFMgAMjULgbdRvGyXFdS7fecszEJOJzkV/+Nz7AFhBGMQSm2KW1pXY84BeVap4C8bqMhImgC7jRwxpjAmLbTSDHQxUGHCZ01aNCDehKaHbWPr2D5aYaHToFIf9Pg/aaswG5x2ECzeBtcNe/uBzht+loSPyr19+/V9XFpfxVeW2kBPadU0PW2s3yYCizIdrsuHAfa+0XFAc+4Y/k6p2/j7sIovGQDPu805vx69WQSF/eBF17acFLb7pgL3b58uoi6bvroXtxN1m849Z4eFNLSOTUzy6urOp7x50+XdqVs8GvO2tw67faZyP6Z3Szvn8c8DUbPvBe5c13Lmw6eJg9turTdpXXftP+E+mBDEP7Bfz+fbWPKnH54dq1nadWH+6XjSydPf552+7Mj5PnFyByt9Rj0O0UzlWXsPxZzLSFBuYkdfViLT5CApNGU+/S2uElSu5o4KkebtborHxebdtup9quu6jlnyG3jNx63T5Hvl0t+TuR2bA4oNiO2ITqWFpyN2PzM0Ey9wSwALi5iBKldML4AbGDJS502UgdgogJuI2UPNvV9WvFWcYl/Mwi+zmuOeK16jyvIyWvN5Hssz73JxJ4TpRtOyfKIyA0pqCVWw+2UJMtpCrGG14kMrSLC1xkkCht51pmvZJTcy1B53EImqo1j4IkhGI8i9PSWGLzLZmYiNQ6OrtNj9u3iR3+29VA+QRUOwidSwtUH+HT7WJ77i6R7xN29hPewftJQPXJUgWVnJINk/yvjznRA5INicpoRznzPDTkUK3DhLJAwYKSbNKz+1rJuDr4zV073nDxrZgsFknagKoWOK7gLZ2ihUrWGEiipGl9G70CszIU66h7ICN+EDyz5ykmcsbGEkuYq4kppMsjLv4xCH3xd9Wsr459VeRCqtJJWMmvbO1QPVo04x/fNcQj2k+ZB+qzjHjw0bEvsPbiqDzVvS8pm+qVvgPW38wFiRQsVeoV8X3wrwC+Cp43ZkXOuEg1UM+JhO//FLQsNQxMSJQw2e0YqWFfKlOech2D9+H0CSZV4+x5Rv/9fWbSdAQIqEedoCm+vmU9fQTYdE9ut0E/KW7rvNMud6ouqrf2Fbdeb1WyouTYNT+ZP1v26nQ4482/</con:value></con:property><con:property><con:name>XMLbody</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpStatus</con:name><con:value>HTTP/1.1 304 Not Modified</con:value></con:property><con:property><con:name>httpConnect</con:name><con:value>close</con:value></con:property><con:property><con:name>httpContentType</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpContentLength</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>httpContentLocation</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>ExpectedReturnCodeGet</con:name><con:value>304</con:value></con:property><con:property><con:name>ETagResponseType</con:name><con:value>FAILURE</con:value></con:property><con:property><con:name>DeviceGetETagPrior</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">"0E3F7BD8C8996D0EE05307991F0A3BB7:14A5CC22"</con:value></con:property><con:property><con:name>DeviceGetETag</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">"0E3F7C3B580B509DE05305991F0A1A07:BADC14C4"</con:value></con:property><con:property><con:name>ETag</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">"0E3F7BD8C9CC6D0EE05307991F0A3BB7:E1A98F5E"</con:value></con:property><con:property><con:name>Last-Modified</con:name><con:value>Wed, 04 Feb 2015 08:02:25 GMT</con:value></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>26b52774-c88b-42d7-8621-4be1064f2ba1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="AttestationDataCreate API" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="8402541f-043c-4594-849d-e8c01b4ff87e">
      <con:settings/>
      <con:testStep type="groovy" name="Establish Properties">
        <con:settings/>
        <con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbgen = new generalUtils.generalUtils(log);


tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",null);
tC.setPropertyValue("expectAttestationCreateResponse",null);
tC.setPropertyValue("NODE_ID",null);
tC.setPropertyValue("ORG_ID",null);
tC.setPropertyValue("DRM_ID",null);
tC.setPropertyValue("licappserial", dbgen.randomUUID());
tC.setPropertyValue("licappapplication", "appid-" + dbgen.randomAlphaString(11));
tC.setPropertyValue("licappManufacturer", "manfact-" + dbgen.randomNumericString(11));
tC.setPropertyValue("licappModel", "model-" + dbgen.randomHexString(11));</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract Properties from Calling Test Case">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def acctO = new dbUtils.dbAccount(log,tP.getPropertyValue("targetDECESystem"));

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)


tC.setPropertyValue("NODE_ID",callTC.getPropertyValue("NODE_ID"));
tC.setPropertyValue("DRM_ID",callTC.getPropertyValue("DRM_ID"));
tC.setPropertyValue("ORG_ID",callTC.getPropertyValue("ORG_ID"));

if (tC.getPropertyValue("expectAttestationCreateResponse") == "null" ||
	tC.getPropertyValue("expectAttestationCreateResponse") == null) {
	tC.setPropertyValue("expectAttestationCreateResponse","SUCCESS");
}</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Store the Node's Current Role then Set to 'urn:dece:role:coordinator:caf'">
        <con:settings/>
        <con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def util;
tC.setPropertyValue("savedRole",null);

String role = "";

/*
*  Save the current role...
*/
try {
	utils = new dbUtils.dbNode(log,tP.getPropertyValue("targetDECESystem"));
	role = utils.nodeGetRole(tC.getPropertyValue("NODE_ID"));
	log.info role;
} 
catch (Throwable e) {
	log.info "Error during dbUtils GetRole - $e";
}
finally {
	tC.setPropertyValue("savedRole", role);
}
/*
*  Now change the role...
*/
try {
	assert utils.nodeSetRole(tC.getPropertyValue("NODE_ID"),"urn:dece:role:coordinator:caf") == 1;
} 
catch (Throwable e) {
	log.info "Error during dbUtils SetRole- $e";
}</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Establish Attestation Request Body">
        <con:settings/>
        <con:config><script><![CDATA[import java.text.SimpleDateFormat;
import java.text.DateFormat;
import java.util.Date;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def genUtils = new generalUtils.generalUtils(log);

tC.setPropertyValue("requestBody",null);

def coordinatorSchema = tP.getPropertyValue("coordinatorSchema");

def licappImageHeight = genUtils.randomNumber(20,100);
def licappImageWidth = genUtils.randomNumber(20,100);

String xmldrmid = "";
String xmlDRMDomain = "";
String drmid = tC.getPropertyValue("DRM_ID").toString();
String serial = tC.getPropertyValue("licappserial");

tC.setPropertyValue("licappapplication", "appid-hKqnPMNYWHC" + genUtils.randomNumber(20,100).toString());
tC.setPropertyValue("licappManufacturer", "manfact-97288178864" + genUtils.randomNumber(20,100).toString());
tC.setPropertyValue("licappModel", "model-3A65F92B711" + genUtils.randomNumber(20,100).toString());

String licappapplication = tC.getPropertyValue("licappapplication");
String licappManufacturer = tC.getPropertyValue("licappManufacturer");
String licappModel = tC.getPropertyValue("licappModel");

String orgid = tC.getPropertyValue("ORG_ID");

tC.setPropertyValue("licappImageHeight",licappImageHeight.toString());
tC.setPropertyValue("licappImageWidth",licappImageWidth.toString());

DateFormat ymd = new SimpleDateFormat("yyyy-MM-dd");
Date date = new Date();
String ymdDate = ymd.format(date) + "T09:30:49Z";

//String ymdDate = "2013-01-29" + "T09:30:47Z";

String body = """<?xml version="1.0" encoding="UTF-8"?>
<dutil:AttestationData AttestationEffectiveDate="$ymdDate" OrganizationID="$orgid" 
	AttestationID="urn:dece:" AttestationExpirationDate="2020-12-31T09:30:47Z" 
	xsi:schemaLocation="http://www.decellc.org/schema/2010/10/dece/util 
	dece-dcoord-admin.xsd" xmlns:dece="$coordinatorSchema" 
	xmlns:dutil="http://www.decellc.org/schema/2010/10/dece/util" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  	    <dutil:DRMID>$drmid</dutil:DRMID>
	    <dutil:AttestationManufacturer>$licappManufacturer</dutil:AttestationManufacturer>
	    <dutil:AttestationModel>$licappModel</dutil:AttestationModel>
	   <dutil:AttestationApplication>$licappapplication</dutil:AttestationApplication>
</dutil:AttestationData>""";

log.info body;

tC.setPropertyValue("requestBody", body);]]></script></con:config>
      </con:testStep>
      
      <con:testStep type="groovy" name="Set Pem"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("SetPem");

myTC.setPropertyValue("NODE_ID",tP.getPropertyValue("NODE_ID"));

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("POST - AttestationDataCreate");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="POST - AttestationDataCreate">
        <con:settings/>
        <con:config service="AttestationDataCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Attestation" methodName="POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="POST - AttestationDataCreate" mediaType="application/xml" postQueryString="false" accept="" sslKeystore="0701_concat.pem">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            <con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">false</con:setting></con:settings>
            <con:endpoint>${#Project#Provision_HostName}</con:endpoint>
            <con:request>${#TestCase#requestBody}</con:request>
            <con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="934d5ebe-0cde-4124-9c5a-84d940a69773"><con:configuration><scriptText>assert messageExchange.responseHeaders["#status#"].toString() == "[HTTP/1.1 201 Created]";</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters/>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify Attestation Response">
        <con:settings/>
        <con:config><script>import org.xml.sax.SAXException; 
import org.xml.sax.SAXParseException; 

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep = tC.getTestStepByName('POST - AttestationDataCreate');
def myXML;

tC.setPropertyValue("attestionId", null);
tC.setPropertyValue("attestionIdFULL", null);
tC.setPropertyValue("attestionId_" + tC.getPropertyValue("counter"), null);
tC.setPropertyValue("attestionIdFULL_" + tC.getPropertyValue("counter"), null);

int errSize = 0;
int i = 0;
boolean expectLocation = null;
boolean performBodyValidations = true;
String xmlData = "";
String errId = "";
String respstatus = null;
String respconnection = null;
String respcontentType = null;
String respcontentLength = null;
String respLocation = null;
String respbody = null;
String expectstatus = null;
String expectconnection = null;
String expectcontentType = null;
String expectcontentLength = null;
String urnError = tP.getPropertyValue("urnError").toString();
String major = tP.getPropertyValue("versionMajor").toString();
String minor = tP.getPropertyValue("versionMinor").toString();
String errorHost  = "http://error.decellc.org";
String errorLinkBase = "$errorHost/en/ErrorList.html#";

try {
	respbody = tStep.httpRequest.response.getResponseContent().toString();
} catch (e) {
	log.info "getResponseContent failure! - $e";
} finally {
	tStep.httpRequest.response.responseHeaders.each() { header, value ->
		switch (header) {
			case "Location": 
				respLocation = value[0];
				break;
			case "#status#": 
				respstatus = value[0]; 
				break;
			case "Connection": 
				respconnection = value[0]; 
				break;
			case "Content-Type": 
				respcontentType = value[0]; 
				break;
			case "Content-Length": 
				respcontentLength = value[0]; 
				break;
			case "Transfer-Encoding": 
				resphttpContentEncoding = value[0]; 
				break;
		}
	}
}

log.info "expectAttestationCreateResponse -- [" + tC.getPropertyValue("expectAttestationCreateResponse") + "]";

switch (tC.getPropertyValue("expectAttestationCreateResponse")) {
	default:
		expectstatus = "HTTP/1.1 201 Created";
		expectconnection = "Keep-Alive";
		expectcontentType = "application/xml;charset=UTF-8";
		expectcontentLength = "0";
		expectLocation = true;
		performBodyValidations = false;
	break;
}

/*
*   -------------------- ERROR --------------------
*/
if (tC.getPropertyValue("expectAttestationCreateResponse") != "SUCCESS" &amp;&amp; performBodyValidations == true) {
	try {
		myXML = new XmlSlurper().parseText(respbody);
	} catch (IOException e) {
		log.info "ERROR!  XmlSlurper.parseText IOException error -- $e";
	} catch (SAXException e) {
		log.info "ERROR!  XmlSlurper.parseText SAXException error -- $e";
	}
	finally {
		log.info "-----  HTTP BODY VERFICATION for ERROR -------";
		String[] errs = tC.getPropertyValue("expectDRMResponseCreate").toString().split(",");
		errSize = errs.size();
				
		log.info "SIZE -- Error.size is $errSize";
		assert myXML.Error.size() == errSize;
		log.info "SIZE -- Reason.size is $errSize";
		assert myXML.Error.Reason.size() == errSize;
		log.info "SIZE -- OriginalRequest.size is $errSize";
		assert myXML.Error.OriginalRequest.size() == errSize;
		log.info "SIZE -- ErrorLink.size is $errSize";
		assert myXML.Error.ErrorLink.size() == errSize;

		/*
		*  Extract the error information
		*/
		for (String err : errs) {
			tC.setPropertyValue("errorStatusCode",null);
			tC.setPropertyValue("errorReason",null);
			tC.setPropertyValue("errorID",null);

			log.info "-----  Error validation [$i] for $err -------";
			try {
				def a = new dbUtils.dbErrors(log,tP.getPropertyValue("targetSystem"));
				
				xmlData = a.errGetIdInfo(err);
	
				assert xmlData.trim().length() > 1;

				def myXMLerr = new XmlSlurper().parseText(xmlData);

				log.info myXML.ResultSet.Row.size();
				tC.setPropertyValue("errorStatusCode", myXMLerr.ResultSet.Row[0].STATUS_CODE.toString());
				tC.setPropertyValue("errorReason", myXMLerr.ResultSet.Row[0].REASON.toString());
				tC.setPropertyValue("errorID", myXMLerr.ResultSet.Row[0].ERROR_ID.toString());

				/*
				*  The DB does not contain the complete HTTP status
				*  string, only the code.  Thus, we must adjust.
				*/
				switch (tC.getPropertyValue("errorStatusCode")) {
					case "400":
						tC.setPropertyValue("errorStatusCode","HTTP/1.1 400 Bad Request");
						break;
					case "403":
						tC.setPropertyValue("errorStatusCode","HTTP/1.1 403 Forbidden");
						break;
					case "404":
						tC.setPropertyValue("errorStatusCode","HTTP/1.1 404 Not Found");
						break;	
					case "409":
						tC.setPropertyValue("errorStatusCode","HTTP/1.1 409 Conflict");
						break;
				}
				
				/*
				*  The status code returned will be that of the 
				*  first error encountered. 
				*/
				if (i == 0) {
					expectstatus = tC.getPropertyValue("errorStatusCode");
				}
			}
			catch (Throwable e) {
				log.info "STEP FAILURE! --- " + e;
			}
			finally {
				String respErrorCode = myXML.Error[i].@ErrorID.toString();
				String respReason = myXML.Error[i].Reason.toString();
				String respErrorLink = myXML.Error[i].ErrorLink.toString();
				String expectErrorCode = urnError + tC.getPropertyValue("errorID").toString();
				String expectReason = tC.getPropertyValue("errorReason").toString();
				String expectErrorLink = errorLinkBase + tC.getPropertyValue("errorID").toString();

				// ErrorCode
				this.log.info "expectErrorCode [$expectErrorCode] - respErrorCode[$respErrorCode]";
				assert respErrorCode == expectErrorCode;

				// Reason
				this.log.info "expectReason [$expectReason] - respReason[$respReason]";
				assert respReason == expectReason;

				// ErrorLink
				this.log.info "expectErrorLink [$expectErrorLink] - respErrorLink[$respErrorLink]";
				assert respErrorLink == expectErrorLink;
			}
			i++;
		}
	}
} else {
	log.info "-----  HTTP BODY VERFICATION for SUCCESS -------";
	if (expectLocation) {
		/*
		*   -------------------- SUCCESS --------------------
		*/
		String proto = "";
		String hostie = "";
		String rPort = "";
		String attestionId = "";
		String attestionIdFULL = "";
		String attestionFile = "";
		String rdrmdmid = "";
		String tempBuff = "";
		
		try {
			URL aURL = new URL(respLocation);

			proto = aURL.getProtocol();
			hostie = aURL.getHost();
			rPort = aURL.getPort();
			attestionFile = aURL.getFile();
	
		} catch (MalformedURLException e) {
			log.info "ERROR!  Failed to parse URL - $respLocation - $e";
		} finally {
			log.info "Location proto[$proto] == https";
			assert proto == "https";

			log.info "Location hostie[$hostie] == [" + tP.getPropertyValue("targetDECEHostq") + "]";
			//assert hostie == tP.getPropertyValue("targetDECEHost");

			log.info "Location rPort[$rPort] == [" + tP.getPropertyValue("AppPort") + "]";
			assert rPort == tP.getPropertyValue("AppPort");

			log.info "Location attestionFile[$attestionFile]";
				
			if (attestionFile.length() > 0) {
				int lastSlash = attestionFile.lastIndexOf('/');
				attestionIdFULL = attestionFile.substring(lastSlash + 1);
				if (attestionIdFULL.length() > 0) {					
					attestionId = attestionIdFULL.replace(tP.getPropertyValue("urnAttestation").toString(),"").replace("%3A", ":");					
				}
			}
			log.info "attestionId [$attestionId]";
			log.info "attestionIdFULL [$attestionIdFULL]";

			tC.setPropertyValue("attestionId", attestionId);
			tC.setPropertyValue("attestionIdFULL", attestionIdFULL);
			tC.setPropertyValue("attestionId_" + tC.getPropertyValue("counter"), attestionId);
			tC.setPropertyValue("attestionIdFULL_" + tC.getPropertyValue("counter"), attestionIdFULL);
		}
	}
}
/*
*  HTTP Header Checkes...
*/
log.info "----- HTTP Header Validations ------";

log.info "expectstatus[$expectstatus] - respstatus[$respstatus]";
assert expectstatus == respstatus;

log.info "expectconnection[$expectconnection] - respconnection[$respconnection]";
assert expectconnection == respconnection;

if (expectcontentLength == "0") {
	log.info "expectcontentLength[$expectcontentLength] - respcontentLength[$respcontentLength]";
	//assert respcontentLength == expectcontentLength;
	assert respcontentLength.toInteger() > 0;
} else {
	log.info "respcontentLength[$respcontentLength] - Greater than zero";
	assert respcontentLength.toInteger() > 0;
}

if (expectLocation) {
	log.info "respLocation[$respLocation] - Location Header Present in Response";
	assert respLocation.length() > 1;
} else {
	log.info "respLocation[$respLocation] - Location Header NOT Present in Response";
	assert respLocation == null;
}

log.info "expectcontentType[$expectcontentType] - respcontentType[$respcontentType]";
assert expectcontentType == respcontentType;</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify DEVICE_ATTESTATION_DATA row" disabled="true">
        <con:settings/>
        <con:config><script>import org.xml.sax.SAXException; 
import org.xml.sax.SAXParseException; 

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("drmClientTriggerOID", null);
tC.setPropertyValue("drmDomainJoinSessionId", null);
tC.setPropertyValue("drmClientTriggerTypeRefOID", null);
tC.setPropertyValue("row",null);

String row = "";

def a;

log.info "expectAttestationCreateResponse[" + tC.getPropertyValue("expectAttestationCreateResponse") + "]";

if (tC.getPropertyValue("expectAttestationCreateResponse") == "SUCCESS") {
	try {
		a = new dbUtils.dbDevice(this.log,tP.getPropertyValue("targetDECESystem"));
		row = a.DeviceGetAttestion(tC.getPropertyValue("attestionIdFULL").replace("%3A",":"));
		tC.setPropertyValue("row",row);
		log.info "row[$row]";
	} catch (Throwable e) {
		log.info "ERROR during dbDevice! -- $e";
	} finally {
		assert row.length() > 0;
	}

	try {
		def myXML = new XmlSlurper().parseText(row);

		String rDEVICE_ATTESTATION_DATA_OID = myXML.ResultSet.Row.DEVICE_ATTESTATION_DATA_OID;
		String rMANUFACTURER = myXML.ResultSet.Row.MANUFACTURER;
		String rMODEL = myXML.ResultSet.Row.MODEL;
		String rORGANIZATION_ID = myXML.ResultSet.Row.ORGANIZATION_ID;
		String rATTESTATION_ID = myXML.ResultSet.Row.ATTESTATION_ID;
		String rEFFECTIVE_DATE = myXML.ResultSet.Row.EFFECTIVE_DATE;
		String rEXPIRATION_DATE = myXML.ResultSet.Row.EXPIRATION_DATE;
		String rAPPLICATION = myXML.ResultSet.Row.APPLICATION;
		String rSTATUS = myXML.ResultSet.Row.STATUS;

	}
	catch (IOException e) {
		log.info "ERROR!  myXML IOException! -- $e";
	}
	catch (SAXException e) {
		log.info "ERROR!  myXML SAXException! -- $e";
	}
	finally {
		log.info "ASSERT - MANUFACTURER[$rMANUFACTURER] == [" + tC.getPropertyValue("licappManufacturer") + "]";
		assert rMANUFACTURER == tC.getPropertyValue("licappManufacturer");

		log.info "ASSERT - MODEL[$rMODEL] == [" + tC.getPropertyValue("licappModel") + "]";
		assert rMODEL == tC.getPropertyValue("licappModel");

		log.info "ASSERT - MODEL[$rMODEL] == [" + tC.getPropertyValue("licappModel") + "]";
		assert rMODEL == tC.getPropertyValue("licappModel");

		log.info "ASSERT - ORGANIZATION_ID[$rORGANIZATION_ID] == [" + tC.getPropertyValue("orgid") + "]";
		assert rORGANIZATION_ID == tC.getPropertyValue("orgid");
		
		log.info "ASSERT - APPLICATION[$rAPPLICATION] == [" + tC.getPropertyValue("licappapplication") + "]";
		assert rAPPLICATION == tC.getPropertyValue("licappapplication");		
		
		log.info "ASSERT - STATUS[$rSTATUS] == [pending]";
		assert rSTATUS == "pending";	


	}
}</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Restore Node's Role">
        <con:settings/>
        <con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def util;

/*
*  Now change the role...
*/
try {
	utils = new dbUtils.dbNode(log,tP.getPropertyValue("targetDECESystem"));
	assert utils.nodeSetRole(tC.getPropertyValue("NODE_ID"),tC.getPropertyValue("savedRole")) == 1;
} 
catch (Throwable e) {
	log.info "Error during dbUtils SetRole- $e";
}</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Return Properties to Calling Test Case">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def toTCName = tC.getPropertyValue("tName");
def toTSName = tC.getPropertyValue("sName")

String cnt = tC.getPropertyValue("counter").toString();

//
//  Transfer all the properites created in this test case
//  to the calling testcase.
//
if (toTCName != "" &amp;&amp; toTSName != "") {
	def toTC = testRunner.testCase.testSuite.project.getTestSuiteByName(toTSName).getTestCaseByName(toTCName);

	Map testCasePropertiesMap = tC.getProperties();
	Set testCasePropertiesKeySet = testCasePropertiesMap.keySet();
	Iterator iter = testCasePropertiesKeySet.iterator();
	
	while(iter.hasNext()){
		String testCasePropertyKey = (String)iter.next();

		switch (testCasePropertyKey) {
			case "licappId":
			case "licappIdFULL":
			case "licappserial":
			case "licappapplication":
			case "licappManufacturer":
			case "licappModel":
			case "attestionId":
			case "attestionIdFULL":
				toTC.setPropertyValue(testCasePropertyKey,tC.getPropertyValue(testCasePropertyKey));	
				toTC.setPropertyValue(testCasePropertyKey + "_" + cnt,tC.getPropertyValue(testCasePropertyKey));	
			break;
		}
	}
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Update DEVICE_ATTESTATION_DATA EFFECTIVE_DATE"><con:settings/><con:config><script>import groovy.sql.Sql;

def tC  = testRunner.getTestCase();
def testSuite = tC.getTestSuite();
def testProject = testSuite.getProject();

def userName = testProject.getPropertyValue("DBUsername")
def passWord = testProject.getPropertyValue("DBPassword")
def db = [url:'jdbc:oracle:thin:@10.31.153.5:2115/stdecqpdb_stdecqa.neustar.com', user: userName, password: passWord, driver:'oracle.jdbc.driver.OracleDriver'];
def sql = Sql.newInstance(db.url, db.user, db.password, db.driver);

def userNameDM = testProject.getPropertyValue("DBUsernameDM")
def passWordDM = testProject.getPropertyValue("DBPasswordDM")
def dbDM = [url:'jdbc:oracle:thin:@stdeqp-clu1-scan.va.neustar.com:2115/stdecqpdb_stdecqa.neustar.com', user: userName, password: passWord, driver:'oracle.jdbc.driver.OracleDriver'];
//def sqlDM = Sql.newInstance(dbDM.url, dbDM.user, dbDM.password, dbDM.driver);

String licappapplication = tC.getPropertyValue("licappapplication");
String licappManufacturer = tC.getPropertyValue("licappManufacturer");
String licappModel = tC.getPropertyValue("licappModel");

sqlStr = """
update
DEVICE_ATTESTATION_DATA
set
status = 'active',
EFFECTIVE_DATE = (select sysdate - interval '1' year from dual)
where
MANUFACTURER = '$licappManufacturer'
and
MODEL = '$licappModel'
and
APPLICATION = '$licappapplication'
""";
log.info sqlStr;
sql.executeUpdate(sqlStr);

sql.close();
//sqlDM.close();

log.info "Woohoo!";</script></con:config></con:testStep><con:properties>
        
        <con:property><con:name>tName</con:name><con:value>00007_DeviceGetCacheScenario_NonCS_DeviceGet_DeviceJoin_DeviceGet_200_OK</con:value></con:property><con:property><con:name>sName</con:name><con:value>DeviceGetCache_TestCases</con:value></con:property><con:property><con:name>savedRole</con:name><con:value>urn:dece:role:retailer</con:value></con:property><con:property><con:name>row</con:name><con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <DEVICE_ATTESTATION_DATA_OID>D341AC9A745545D3E0401F0A0F99295D</DEVICE_ATTESTATION_DATA_OID>
      <MANUFACTURER>manfact-9728817886442</MANUFACTURER>
      <MODEL>model-3A65F92B71157</MODEL>
      <ORGANIZATION_ID>urn:dece:org:org:dece:o:C390F5ADA7096E65E0401F0A0F992271</ORGANIZATION_ID>
      <ATTESTATION_ID>urn:dece:attestation:manfact-9728817886442:model-3A65F92B71157</ATTESTATION_ID>
      <EFFECTIVE_DATE>oracle.sql.TIMESTAMP@1f9f3829</EFFECTIVE_DATE>
      <EXPIRATION_DATE>oracle.sql.TIMESTAMP@e201bf7</EXPIRATION_DATE>
      <DRM_OID>4</DRM_OID>
      <APPLICATION>appid-hKqnPMNYWHC58</APPLICATION>
      <STATUS>active</STATUS>
    </Row>
  </ResultSet>
</Results>]]></con:value></con:property><con:property><con:name>requestBody</con:name><con:value><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<dutil:AttestationData AttestationEffectiveDate="2013-10-03T09:30:49Z" OrganizationID="urn:dece:org:org:dece:o:700031" 
	AttestationID="urn:dece:" AttestationExpirationDate="2020-12-31T09:30:47Z" 
	xsi:schemaLocation="http://www.decellc.org/schema/2010/10/dece/util 
	dece-dcoord-admin.xsd" xmlns:dece="http://www.decellc.org/schema/2013/06/coordinator" 
	xmlns:dutil="http://www.decellc.org/schema/2010/10/dece/util" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  	    <dutil:DRMID>urn:dece:drm:marlin:1.2</dutil:DRMID>
	    <dutil:AttestationManufacturer>manfact-97288178864119</dutil:AttestationManufacturer>
	    <dutil:AttestationModel>model-3A65F92B71171</dutil:AttestationModel>
	   <dutil:AttestationApplication>appid-hKqnPMNYWHC52</dutil:AttestationApplication>
</dutil:AttestationData>]]></con:value></con:property><con:property><con:name>orgid</con:name><con:value>urn:dece:org:org:dece:o:ISC_R1</con:value></con:property><con:property><con:name>nodeid</con:name><con:value>C0CEF8E08CE1C7D6E0401F0A0599120B</con:value></con:property><con:property><con:name>licappserial</con:name><con:value>eeca8c5d-2bcb-48bd-b7ec-7508e4e510a0</con:value></con:property><con:property><con:name>licappModel</con:name><con:value>model-3A65F92B71171</con:value></con:property><con:property><con:name>licappManufacturer</con:name><con:value>manfact-97288178864119</con:value></con:property><con:property><con:name>licappImageWidth</con:name><con:value>37</con:value></con:property><con:property><con:name>licappImageHeight</con:name><con:value>41</con:value></con:property><con:property><con:name>licappapplication</con:name><con:value>appid-hKqnPMNYWHC52</con:value></con:property><con:property><con:name>expectAttestationCreateResponse</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>drmid</con:name><con:value>urn:dece:drm:adobe:3.0</con:value></con:property><con:property><con:name>drmDomainJoinSessionId</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>drmClientTriggerTypeRefOID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>drmClientTriggerOID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>attestionId_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:attestation:manfact-97288178864119:model-3A65F92B71171</con:value></con:property>
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
      <con:property><con:name>attestionIdFULL_1</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:attestation:manfact-97288178864119:model-3A65F92B71171</con:value></con:property><con:property><con:name>attestionIdFULL</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:attestation:manfact-97288178864119:model-3A65F92B71171</con:value></con:property><con:property><con:name>attestionId</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:attestation:manfact-97288178864119:model-3A65F92B71171</con:value></con:property><con:property><con:name>accountidFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>accountIdInUrl</con:name><con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3AE3EF06642C54C528E0401F0A07997C17</con:value></con:property><con:property><con:name>userIdInUrl</con:name><con:value>urn%3Adece%3Auserid%3Aorg%3Adece%3AE3EF06642C68C528E0401F0A07997C17</con:value></con:property><con:property><con:name>NODE_ID</con:name><con:value>0701</con:value></con:property><con:property><con:name>Username</con:name><con:value>firstfau_20130902_114941</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>ORG_ID</con:name><con:value>urn:dece:org:org:dece:o:700031</con:value></con:property><con:property><con:name>DRM_ID</con:name><con:value>urn:dece:drm:marlin:1.2</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Users\raju.ganji\Desktop\DeviceGet_170613/0701_concat.pem</con:value></con:property></con:properties>
      <con:reportParameters/>
    </con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="AttestationDataGet API" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="8998bf8b-599c-400d-a70f-75951d0525ee">
      <con:settings/>
      
      
      <con:testStep type="groovy" name="Establish Properties" id="953b7e58-cc0f-4095-9f6c-7a6a864a4364">
        <con:settings/>
        <con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def dbgen = new generalUtils.generalUtils(log);


tC.setPropertyValue("expectAttestationGetResponse",null);
tC.setPropertyValue("NODE_ID",null);
tC.setPropertyValue("attestionIdFULL", null);</script></con:config>
      </con:testStep>
      
      
      <con:testStep type="groovy" name="Extract Properties from Calling Test Case" id="e7f94899-d5b0-496d-8fd1-dd1e223c3aa7">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def acctO = new dbUtils.dbAccount(log,tP.getPropertyValue("targetDECESystem"));

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)


tC.setPropertyValue("NODE_ID",callTC.getPropertyValue("NODE_ID"));
tC.setPropertyValue("attestionIdFULL",callTC.getPropertyValue("attestionIdFULL"));

if (tC.getPropertyValue("expectAttestationGetResponse") == "null" ||
	tC.getPropertyValue("expectAttestationGetResponse") == null) {
	tC.setPropertyValue("expectAttestationGetResponse","SUCCESS");
}</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Store the Node's Current Role then Set to 'urn:dece:role:coordinator:caf'">
        <con:settings/>
        <con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def util;
tC.setPropertyValue("savedRole",null);

String role = "";

/*
*  Save the current role...
*/
try {
	utils = new dbUtils.dbNode(log,tP.getPropertyValue("targetDECESystem"));
	role = utils.nodeGetRole(tC.getPropertyValue("NODE_ID"));
	log.info role;
} 
catch (Throwable e) {
	log.info "Error during dbUtils GetRole - $e";
}
finally {
	tC.setPropertyValue("savedRole", role);
}
/*
*  Now change the role...
*/
try {
	assert utils.nodeSetRole(tC.getPropertyValue("NODE_ID"),"urn:dece:role:coordinator:caf") == 1;
} 
catch (Throwable e) {
	log.info "Error during dbUtils SetRole- $e";
}</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Set Pem"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("SetPem");

myTC.setPropertyValue("NODE_ID",tP.getPropertyValue("NODE_ID"));

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("GET - AttestationDataGet");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep>
      
      <con:testStep type="restrequest" name="GET - AttestationDataGet">
        <con:settings/>
        <con:config service="AttestationDataGet" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/Attestation/{AttestationID}" methodName="GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="GET - AttestationDataGet" mediaType="application/xml" sslKeystore="0701_concat.pem" accept="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            <con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">true</con:setting></con:settings>
            <con:endpoint>${#Project#Provision_HostName}</con:endpoint>
            <con:request/>
            <con:assertion type="GroovyScriptAssertion" name="Script Assertion" id="84bb4784-c273-4d20-9588-3370608c7876"><con:configuration><scriptText>assert messageExchange.responseHeaders["#status#"].toString() == "[HTTP/1.1 200 OK]";</scriptText></con:configuration></con:assertion><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters><entry key="AttestationID" value="${#TestCase#attestionIdFULL}" xmlns="http://eviware.com/soapui/config"/></con:parameters>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify AttestationGet Response">
        <con:settings/>
        <con:config><script>import org.xml.sax.SAXException; 
import org.xml.sax.SAXParseException; 

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep = tC.getTestStepByName('GET - AttestationDataGet');
def myXML;

tC.setPropertyValue("licappserial", null);
tC.setPropertyValue("licappserial_" + tC.getPropertyValue("counter"), null);
tC.setPropertyValue("licappapplication", null);
tC.setPropertyValue("licappapplication_" + tC.getPropertyValue("counter"), null);
tC.setPropertyValue("licappManufacturer", null);
tC.setPropertyValue("licappManufacturer_" + tC.getPropertyValue("counter"), null);
tC.setPropertyValue("licappModel", null);
tC.setPropertyValue("licappModel_" + tC.getPropertyValue("counter"), null);

int errSize = 0;
int i = 0;
boolean expectLocation = null;
boolean performBodyValidations = true;
String xmlData = "";
String errId = "";
String respstatus = null;
String respconnection = null;
String respcontentType = null;
String respcontentLength = null;
String respLocation = null;
String respbody = null;
String expectstatus = null;
String expectconnection = null;
String expectcontentType = null;
String expectcontentLength = null;
String urnError = tP.getPropertyValue("urnError").toString();
String major = tP.getPropertyValue("versionMajor").toString();
String minor = tP.getPropertyValue("versionMinor").toString();
String errorHost  = "http://error.decellc.org";
String errorLinkBase = "$errorHost/en/ErrorList.html#";

try {
	respbody = tStep.httpRequest.response.getResponseContent().toString();
} catch (e) {
	log.info "getResponseContent failure! - $e";
} finally {
	tStep.httpRequest.response.responseHeaders.each() { header, value ->
		switch (header) {
			case "Location": 
				respLocation = value[0];
				break;
			case "#status#": 
				respstatus = value[0]; 
				break;
			case "Connection": 
				respconnection = value[0]; 
				break;
			case "Content-Type": 
				respcontentType = value[0]; 
				break;
			case "Content-Length": 
				respcontentLength = value[0]; 
				break;
			case "Transfer-Encoding": 
				resphttpContentEncoding = value[0]; 
				break;
		}
	}
}

log.info "expectAttestationGetResponse -- [" + tC.getPropertyValue("expectAttestationGetResponse") + "]";

switch (tC.getPropertyValue("expectAttestationGetResponse")) {
	default:
		expectstatus = "HTTP/1.1 200 OK";
		expectconnection = "Keep-Alive";
		expectcontentType = "application/xml;charset=UTF-8";
		expectcontentLength = "1";
		expectLocation = false;
		performBodyValidations = true;
	break;
}

/*
*   -------------------- ERROR --------------------
*/
try {
	myXML = new XmlSlurper().parseText(respbody);
} catch (IOException e) {
	log.info "ERROR!  XmlSlurper.parseText IOException error -- $e";
} catch (SAXException e) {
	log.info "ERROR!  XmlSlurper.parseText SAXException error -- $e";
}
finally {
	assert myXML.Error.size() == errSize;

	def AttestationManufacturer = myXML.AttestationManufacturer;
	def AttestationModel = myXML.AttestationModel;
	def AttestationApplication = myXML.AttestationApplication;

	log.info "AttestationManufacturer is $AttestationManufacturer";
	log.info "AttestationModel is $AttestationModel";
	log.info "AttestationApplication is $AttestationApplication";

	tC.setPropertyValue("licappManufacturer",AttestationManufacturer.toString());
	tC.setPropertyValue("licappModel",AttestationModel.toString());
	tC.setPropertyValue("licappapplication",AttestationApplication.toString());
}

/*
*  HTTP Header Checkes...
*/
log.info "----- HTTP Header Validations ------";

log.info "expectstatus[$expectstatus] - respstatus[$respstatus]";
assert expectstatus == respstatus;

log.info "expectconnection[$expectconnection] - respconnection[$respconnection]";
assert expectconnection == respconnection;

if (expectcontentLength == "0") {
	log.info "expectcontentLength[$expectcontentLength] - respcontentLength[$respcontentLength]";
	//assert respcontentLength == expectcontentLength;
	assert respcontentLength.toInteger() > 0;
} else {
	log.info "respcontentLength[$respcontentLength] - Greater than zero";
	assert respcontentLength.toInteger() > 0;
}

if (expectLocation) {
	log.info "respLocation[$respLocation] - Location Header Present in Response";
	assert respLocation.length() > 1;
} else {
	log.info "respLocation[$respLocation] - Location Header NOT Present in Response";
	assert respLocation == null;
}

log.info "expectcontentType[$expectcontentType] - respcontentType[$respcontentType]";
assert expectcontentType == respcontentType;</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Restore Node's Role">
        <con:settings/>
        <con:config><script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def util;

/*
*  Now change the role...
*/
try {
	utils = new dbUtils.dbNode(log,tP.getPropertyValue("targetDECESystem"));
	assert utils.nodeSetRole(tC.getPropertyValue("NODE_ID"),tC.getPropertyValue("savedRole")) == 1;
} 
catch (Throwable e) {
	log.info "Error during dbUtils SetRole- $e";
}</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Return Properties to Calling Test Case">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def toTCName = tC.getPropertyValue("tName");
def toTSName = tC.getPropertyValue("sName")

String cnt = tC.getPropertyValue("counter").toString();

//
//  Transfer all the properites created in this test case
//  to the calling testcase.
//
if (toTCName != "" &amp;&amp; toTSName != "") {
	def toTC = testRunner.testCase.testSuite.project.getTestSuiteByName(toTSName).getTestCaseByName(toTCName);

	Map testCasePropertiesMap = tC.getProperties();
	Set testCasePropertiesKeySet = testCasePropertiesMap.keySet();
	Iterator iter = testCasePropertiesKeySet.iterator();
	
	while(iter.hasNext()){
		String testCasePropertyKey = (String)iter.next();

		switch (testCasePropertyKey) {
			case "licappapplication":
			case "licappManufacturer":
			case "licappModel":
				toTC.setPropertyValue(testCasePropertyKey,tC.getPropertyValue(testCasePropertyKey));	
				toTC.setPropertyValue(testCasePropertyKey + "_" + cnt,tC.getPropertyValue(testCasePropertyKey));	
			break;
		}
	}
}</script>
        </con:config>
      </con:testStep><con:properties>
        
        
        
        <con:property><con:name>accountidFULL</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>attestionIdFULL</con:name><con:value>urn:dece:attestation:manfact-97288178864119:model-3A65F92B71171</con:value></con:property>
        
        
        <con:property><con:name>counter</con:name><con:value>1</con:value></con:property><con:property><con:name>drmid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>expectAttestationGetResponse</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>licappapplication</con:name><con:value>appid-hKqnPMNYWHC52</con:value></con:property>
        <con:property><con:name>licappapplication_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property>
        
        
        <con:property><con:name>licappImageHeight</con:name><con:value>29</con:value></con:property><con:property><con:name>licappImageWidth</con:name><con:value>93</con:value></con:property>
        
        
        <con:property><con:name>licappManufacturer</con:name><con:value>manfact-97288178864119</con:value></con:property><con:property><con:name>licappManufacturer_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>licappModel</con:name><con:value>model-3A65F92B71171</con:value></con:property><con:property><con:name>licappModel_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>licappserial</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property>
        
        
        <con:property><con:name>licappserial_1</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>nodeid</con:name><con:value>C0CEF8E08CE1C7D6E0401F0A0599120B</con:value></con:property><con:property><con:name>orgid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property>
        
        
        <con:property><con:name>requestBody</con:name><con:value><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<!--Sample XML file generated by XMLSpy v2009 sp1 (http://www.altova.com)-->
<dutil:AttestationData AttestationEffectiveDate="2001-12-17T09:30:47Z" OrganizationID="null" 
	AttestationID="urn:dece:" AttestationExpirationDate="2020-12-31T09:30:47Z" 
	xsi:schemaLocation="http://www.decellc.org/schema/2010/10/dece/util 
	dece-dcoord-admin.xsd" xmlns:dece="http://www.decellc.org/schema/2011/08/coordinator" 
	xmlns:dutil="http://www.decellc.org/schema/2010/10/dece/util" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  	    <dutil:DRMID>null</dutil:DRMID>
	    <dutil:AttestationManufacturer>null</dutil:AttestationManufacturer>
	    <dutil:AttestationModel>null</dutil:AttestationModel>
	    <dutil:AttestationApplication>null</dutil:AttestationApplication>
</dutil:AttestationData>]]></con:value></con:property>
        
      <con:property><con:name>savedRole</con:name><con:value>urn:dece:role:retailer</con:value></con:property><con:property><con:name>sName</con:name><con:value>DeviceGetCache_TestCases</con:value></con:property><con:property><con:name>tName</con:name><con:value>00007_DeviceGetCacheScenario_NonCS_DeviceGet_DeviceJoin_DeviceGet_200_OK</con:value></con:property><con:property><con:name>NODE_ID</con:name><con:value>0701</con:value></con:property><con:property><con:name>Username</con:name><con:value>firstfau_20130902_123834</con:value></con:property><con:property><con:name>keyStorePath</con:name><con:value>C:\Users\raju.ganji\Desktop\DeviceGet_170613/0701_concat.pem</con:value></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>953b7e58-cc0f-4095-9f6c-7a6a864a4364</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e7f94899-d5b0-496d-8fd1-dd1e223c3aa7</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DRMClientCreate API" searchProperties="true">
      <con:settings/>
      <con:testStep type="groovy" name="Extract and saved the Node's current Role">
        <con:settings/>
        <con:config>
          <script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

String node = "";

try {
	def dbUtils = new dbUtils.dbNode(log,tP.getPropertyValue("targetDECESystem"));
	node = dbUtils.nodeGetRole(tC.getPropertyValue("nodeid"));
	log.info "node is $node";
}
catch (Throwable e) {
	log.info "ERROR in dbNode.nodeGetRole - $e";
}
finally {
	tC.setPropertyValue("nodeRoleSaved", node);
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Establish Properties">
        <con:settings/>
        <con:config>
          <script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("expectDRMClientResponseCreate","SUCCESS");
tC.setPropertyValue("drmclientIdFULL",null);
tC.setPropertyValue("nodeid","12");
tC.setPropertyValue("drmclientId",null);
tC.setPropertyValue("deviceId",null);
tC.setPropertyValue("drmid",null);
tC.setPropertyValue("deviceIdFull",null);
tC.setPropertyValue("accountidFULL",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("domainIdFULL",null);
tC.setPropertyValue("deviceIdFULLbase64",null);
tC.setPropertyValue("counter",null);</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract Properties from Calling Test Case">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def acctO = new dbUtils.dbAccount(log,tP.getPropertyValue("targetDECESystem"));

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("expectDRMResponseCreate",callTC.getPropertyValue("expectDRMResponseCreate"));
tC.setPropertyValue("actionAccountID",callTC.getPropertyValue("actionAccountID"));
tC.setPropertyValue("actiondrmid",callTC.getPropertyValue("actiondrmid"));
tC.setPropertyValue("actionDRMDomainValue",callTC.getPropertyValue("actionDRMDomainValue"));
tC.setPropertyValue("assertionAccountId",callTC.getPropertyValue("assertionAccountId"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("domainId",callTC.getPropertyValue("domainId"));
tC.setPropertyValue("domainIdFULL",callTC.getPropertyValue("domainIdFULL"));
tC.setPropertyValue("deviceIdFULLbase64",callTC.getPropertyValue("deviceIdFULLbase64"));
tC.setPropertyValue("deviceId",callTC.getPropertyValue("deviceId"));
tC.setPropertyValue("deviceIdFull",callTC.getPropertyValue("deviceIdFull"));
tC.setPropertyValue("flagExcludeAccountURN",callTC.getPropertyValue("flagExcludeAccountURN"));
tC.setPropertyValue("counter",callTC.getPropertyValue("counter"));
tC.setPropertyValue("drmidFull",callTC.getPropertyValue("drmidFull"));
tC.setPropertyValue("drmid",callTC.getPropertyValue("drmid"));

if (tC.getPropertyValue("expectDRMResponseCreate") == "null" ||
	tC.getPropertyValue("expectDRMResponseCreate") == null) {
	tC.setPropertyValue("expectDRMResponseCreate","SUCCESS");
}

if (tC.getPropertyValue("flagExcludeAccountURN") == "null" ||
	tC.getPropertyValue("flagExcludeAccountURN") == null) {
	tC.setPropertyValue("flagExcludeAccountURN","false");
}

if (tC.getPropertyValue("counter") == "null" ||
	tC.getPropertyValue("counter") == null) {
	tC.setPropertyValue("counter","1");
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Establish DRMClientCreate Request Body">
        <con:settings/>
        <con:config>
          <script><![CDATA[def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def genUtils = new generalUtils.generalUtils(log);

tC.setPropertyValue("requestBody",null);

String xmldrmid = "";
String xmlDRMDomain = "";
String rdrmidFull = tC.getPropertyValue("rdrmidFull").toString();
String deviceIdFull = tC.getPropertyValue("deviceIdFull");
String deviceIdFULLbase64 = tC.getPropertyValue("deviceIdFULLbase64");
String nodeid = tC.getPropertyValue("nodeid");
String drmid = tC.getPropertyValue("drmid").toString();

log.info "rdrmidFull[$rdrmidFull]";
log.info "deviceIdFull[$deviceIdFull]";
log.info "nodeid[$nodeid]";
log.info "deviceIdFULLbase64[$deviceIdFULLbase64]";
log.info "drmid[$drmid]";

String body = """<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<DRMClient DeviceID="$deviceIdFull"
xmlns="${#Project#coordinatorSchema}">
    <DRMSupported>$drmid</DRMSupported>    
    <NativeDRMClientID>$deviceIdFULLbase64</NativeDRMClientID>
    <ResourceStatus>
        <Current CreatedBy="urn:dece:org:org:dece:$nodeid" CreationDate="2011-04-07T17:19:52.686Z">
            <Value>urn:dece:type:status:active</Value>
            <Description>active</Description>
        </Current>
    </ResourceStatus>
</DRMClient>
""";

tC.setPropertyValue("requestBody", body);]]></script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="SetPem"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("SetPem");

myTC.setPropertyValue("NODE_ID",tP.getPropertyValue("NODE_ID"));

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("POST - DRMClientCreate");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="POST - DRMClientCreate">
        <con:settings/>
        <con:config service="DRMClientCreate" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/DECEDomain/{DeceDomainID}/DRMClient" methodName="DRMClientCreate Request" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="POST - DRMClientCreate" mediaType="application/xml" postQueryString="false" accept="" sslKeystore="2013_concat.pem">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:endpoint>${#Project#Provision_HostName}</con:endpoint>
            <con:request>${#TestCase#requestBody}</con:request>
            <con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters/>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify DRMClientCreate Response">
        <con:settings/>
        <con:config>
          <script>import org.xml.sax.SAXException; 
import org.xml.sax.SAXParseException; 

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep = tC.getTestStepByName('POST - DRMClientCreate');
def myXML;

int errSize = 0;
int i = 0;
boolean expectLocation = null;
boolean performBodyValidations = true;
String xmlData = "";
String errId = "";
String respstatus = null;
String respconnection = null;
String respcontentType = null;
String respcontentLength = null;
String respLocation = null;
String respbody = null;
String expectstatus = null;
String expectconnection = null;
String expectcontentType = null;
String expectcontentLength = null;
String urnError = tP.getPropertyValue("urnError").toString();
String major = tP.getPropertyValue("versionMajor").toString();
String minor = tP.getPropertyValue("versionMinor").toString();
String errorHost  = "http://error.decellc.org";
String errorLinkBase = "$errorHost/en/ErrorList.html#";

try {
	respbody = tStep.httpRequest.response.getResponseContent().toString();
} catch (e) {
	log.info "getResponseContent failure! - $e";
} finally {
	tStep.httpRequest.response.responseHeaders.each() { header, value ->
		switch (header) {
			case "Location": 
				respLocation = value[0];
				break;
			case "#status#": 
				respstatus = value[0]; 
				break;
			case "Connection": 
				respconnection = value[0]; 
				break;
			case "Content-Type": 
				respcontentType = value[0]; 
				break;
			case "Content-Length": 
				respcontentLength = value[0]; 
				break;
			case "Transfer-Encoding": 
				resphttpContentEncoding = value[0]; 
				break;
		}
	}
}

log.info "expectDRMClientResponseCreate -- [" + tC.getPropertyValue("expectDRMClientResponseCreate") + "]";

switch (tC.getPropertyValue("expectDRMClientResponseCreate")) {
	case "SUCCESS":
		expectstatus = "HTTP/1.1 201 Created";
		expectconnection = "close";
		expectcontentType = "application/xml";
		expectcontentLength = "0";
		expectLocation = true;
		performBodyValidations = false;
		break;
	case "notfound":
		expectstatus = "HTTP/1.1 404 Not Found";
		expectconnection = "close";
		expectcontentType = "text/xml";
		expectcontentLength = "0";
		expectLocation = false;
		performBodyValidations = false;
		break;
	case "SAXParseException":
		expectstatus = "HTTP/1.1 400 Bad Request";
		expectconnection = "close";
		expectcontentType = "application/xml";
		expectcontentLength = "1";
		expectLocation = false;
		performBodyValidations = true;
		errorReasonFlag = false;
		break;
	default:
		errorReasonFlag = true;
		expectconnection = "close";
		expectLocation = false;
		performBodyValidations = true;
		expectcontentLength = "1";
		expectcontentType = "application/xml";
		errorID     = urnError + tC.getPropertyValue("errorID");
		errorReason = tC.getPropertyValue("errorReason");
		errorLink   = "$errorLinkBase" + tC.getPropertyValue("errorID");
	break;
}

/*
*   -------------------- ERROR --------------------
*/
if (tC.getPropertyValue("expectDRMClientResponseCreate") != "SUCCESS" &amp;&amp; performBodyValidations == true) {
	try {
		myXML = new XmlSlurper().parseText(respbody);
	} 
	catch (IOException e) {
		log.info "ERROR!  XmlSlurper.parseText IOException error -- $e";
	} 
	catch (SAXException e) {
		log.info "ERROR!  XmlSlurper.parseText SAXException error -- $e";
	}
	finally {
		log.info "-----  HTTP BODY VERFICATION for ERROR -------";
		String[] errs = tC.getPropertyValue("expectDRMResponseCreate").toString().split(",");
		errSize = errs.size();
				
		log.info "SIZE -- Error.size is $errSize";
		assert myXML.Error.size() == errSize;
		log.info "SIZE -- Reason.size is $errSize";
		assert myXML.Error.Reason.size() == errSize;
		log.info "SIZE -- OriginalRequest.size is $errSize";
		assert myXML.Error.OriginalRequest.size() == errSize;
		log.info "SIZE -- ErrorLink.size is $errSize";
		assert myXML.Error.ErrorLink.size() == errSize;

		/*
		*  Extract the error information
		*/
		for (String err : errs) {
			tC.setPropertyValue("errorStatusCode",null);
			tC.setPropertyValue("errorReason",null);
			tC.setPropertyValue("errorID",null);

			log.info "-----  Error validation [$i] for $err -------";
			try {
				def a = new dbUtils.dbErrors(log,tP.getPropertyValue("targetSystem"));
				
				xmlData = a.errGetIdInfo(err);
	
				assert xmlData.trim().length() > 1;

				def myXMLerr = new XmlSlurper().parseText(xmlData);

				log.info myXML.ResultSet.Row.size();
				tC.setPropertyValue("errorStatusCode", myXMLerr.ResultSet.Row[0].STATUS_CODE.toString());
				tC.setPropertyValue("errorReason", myXMLerr.ResultSet.Row[0].REASON.toString());
				tC.setPropertyValue("errorID", myXMLerr.ResultSet.Row[0].ERROR_ID.toString());

				/*
				*  The DB does not contain the complete HTTP status
				*  string, only the code.  Thus, we must adjust.
				*/
				switch (tC.getPropertyValue("errorStatusCode")) {
					case "400":
						tC.setPropertyValue("errorStatusCode","HTTP/1.1 400 Bad Request");
						break;
					case "403":
						tC.setPropertyValue("errorStatusCode","HTTP/1.1 403 Forbidden");
						break;
					case "404":
						tC.setPropertyValue("errorStatusCode","HTTP/1.1 404 Not Found");
						break;	
					case "409":
						tC.setPropertyValue("errorStatusCode","HTTP/1.1 409 Conflict");
						break;
				}
				
				/*
				*  The status code returned will be that of the 
				*  first error encountered. 
				*/
				if (i == 0) {
					expectstatus = tC.getPropertyValue("errorStatusCode");
				}
			}
			catch (Throwable e) {
				log.info "STEP FAILURE! --- " + e;
			}
			finally {
				String respErrorCode = myXML.Error[i].@ErrorID.toString();
				String respReason = myXML.Error[i].Reason.toString();
				String respErrorLink = myXML.Error[i].ErrorLink.toString();
				String expectErrorCode = urnError + tC.getPropertyValue("errorID").toString();
				String expectReason = tC.getPropertyValue("errorReason").toString();
				String expectErrorLink = errorLinkBase + tC.getPropertyValue("errorID").toString();

				// ErrorCode
				this.log.info "expectErrorCode [$expectErrorCode] - respErrorCode[$respErrorCode]";
				assert respErrorCode == expectErrorCode;

				// Reason
				this.log.info "expectReason [$expectReason] - respReason[$respReason]";
				assert respReason == expectReason;

				// ErrorLink
				this.log.info "expectErrorLink [$expectErrorLink] - respErrorLink[$respErrorLink]";
				assert respErrorLink == expectErrorLink;
			}
			i++;
		}
	}
} else {
	log.info "-----  HTTP BODY VERFICATION for SUCCESS -------";
	if (expectLocation) {
		/*
		*   -------------------- SUCCESS --------------------
		*/
		String proto = "";
		String hostie = "";
		String rPort = "";
		String rdrmid = "";
		String drmclientIdFULL = "";
		String drmclientIdFile = "";
		String drmclientId = "";
		String tempBuff = "";
		
		try {
			URL aURL = new URL(respLocation);

			proto = aURL.getProtocol();
			hostie = aURL.getHost();
			rPort = aURL.getPort();
			drmclientIdFile = aURL.getFile();
	
		} catch (MalformedURLException e) {
			log.info "ERROR!  Failed to parse URL - $respLocation - $e";
		} finally {
			log.info "Location proto[$proto] == https";
			assert proto == "https";

			log.info "Location hostie[$hostie] == [" + tP.getPropertyValue("targetDECEHostq") + "]";
			assert hostie == tP.getPropertyValue("targetDECEHostq");

			log.info "Location rPort[$rPort] == [" + tP.getPropertyValue("targetDECEPort") + "]";
			assert rPort == tP.getPropertyValue("targetDECEPort");

			log.info "Location drmclientIdFile[$drmclientIdFile]";
				
			if (drmclientIdFile.length() > 0) {
				int lastSlash = drmclientIdFile.lastIndexOf('/');
				drmclientIdFULL = drmclientIdFile.substring(lastSlash + 1);
				log.info "Location - drmclientIdFULL[$drmclientIdFULL]";
				if (drmclientIdFULL.length() > 0) {
					lastSlash = drmclientIdFULL.lastIndexOf(':');
					drmclientId = drmclientIdFULL.substring(lastSlash + 1);
				}
			}
			log.info "drmclientIdFULL [$drmclientIdFULL]";
			log.info "drmclientId [$drmclientId]";

			tC.setPropertyValue("drmclientIdFULL", drmclientIdFULL);
			tC.setPropertyValue("drmclientId",drmclientId);
			tC.setPropertyValue("drmclientCreatedBy",tC.getPropertyValue("nodeid"));
		}
	}
}
/*
*  HTTP Header Checkes...
*/
log.info "----- HTTP Header Validations ------";

log.info "expectstatus[$expectstatus] - respstatus[$respstatus]";
assert expectstatus == respstatus;

log.info "expectconnection[$expectconnection] - respconnection[$respconnection]";
assert expectconnection == respconnection;

if (expectcontentLength == "0") {
	log.info "expectcontentLength[$expectcontentLength] - respcontentLength[$respcontentLength]";
	assert respcontentLength == expectcontentLength;
} else {
	log.info "respcontentLength[$respcontentLength] - Greater than zero";
	assert respcontentLength.toInteger() > 0;
}

if (expectLocation) {
	log.info "respLocation[$respLocation] - Location Header Present in Response";
	assert respLocation.length() > 1;
} else {
	log.info "respLocation[$respLocation] - Location Header NOT Present in Response";
	assert respLocation == null;
}

log.info "expectcontentType[$expectcontentType] - respcontentType[$respcontentType]";
assert expectcontentType == respcontentType;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Return Properties to Calling Test Case">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def toTCName = tC.getPropertyValue("tName");
def toTSName = tC.getPropertyValue("sName")

String cnt = tC.getPropertyValue("counter").toString();

//
//  Transfer all the properites created in this test case
//  to the calling testcase.
//
if (toTCName != "" &amp;&amp; toTSName != "") {
	def toTC = testRunner.testCase.testSuite.project.getTestSuiteByName(toTSName).getTestCaseByName(toTCName);

	Map testCasePropertiesMap = tC.getProperties();
	Set testCasePropertiesKeySet = testCasePropertiesMap.keySet();
	Iterator iter = testCasePropertiesKeySet.iterator();
	
	while(iter.hasNext()){
		String testCasePropertyKey = (String)iter.next();

		switch (testCasePropertyKey) {
			case "drmclientIdFULL":
			case "drmclientId":
			case "drmclientCreatedBy":
					toTC.setPropertyValue(testCasePropertyKey,tC.getPropertyValue(testCasePropertyKey));	
					toTC.setPropertyValue(testCasePropertyKey + "_" + cnt,tC.getPropertyValue(testCasePropertyKey));	
					toTC.setPropertyValue("drmclientStatus","pending");	
					toTC.setPropertyValue("drmclientStatus_" + cnt,"pending");	
			break;
		}
	}
}</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>tName</con:name>
          <con:value>TC_DECE_10003 - DRM User Case - Use Case Three - OMA:2.0 - 2nd to nth LicApp</con:value>
        </con:property>
        <con:property>
          <con:name>sName</con:name>
          <con:value>UseCase Scenario</con:value>
        </con:property>
        <con:property>
          <con:name>expectDRMClientResponseCreate</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>deviceId</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">A269EA81698DD29FE0401F0A05995F22</con:value>
        </con:property>
        <con:property>
          <con:name>deviceIdFull</con:name>
          <con:value>urn:dece:deviceid:org:dece:A269EA81698DD29FE0401F0A05995F22</con:value>
        </con:property>
        <con:property>
          <con:name>accountidFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>domainIdFULL</con:name>
          <con:value>urn:dece:domainid:dece:A269EACDF64957F7E0401F0A07991B25</con:value>
        </con:property>
        <con:property>
          <con:name>counter</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>12</con:value>
        </con:property>
        <con:property>
          <con:name>expectDRMResponseCreate</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>actionAccountID</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>actiondrmid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>actionDRMDomainValue</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value>A175415C40D8B362E0401F0A07990FA1</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value>urn:dece:accountid:org:dece:A175415C40D8B362E0401F0A07990FA1</con:value>
        </con:property>
        <con:property>
          <con:name>domainId</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">A269EACDF64957F7E0401F0A07991B25</con:value>
        </con:property>
        <con:property>
          <con:name>flagExcludeAccountURN</con:name>
          <con:value>false</con:value>
        </con:property>
        <con:property>
          <con:name>drmidFull</con:name>
          <con:value>urn:dece:domainid:urn:dece:drm:OMA:2.0:6MarzAFsB8j3Y9wV000</con:value>
        </con:property>
        <con:property>
          <con:name>drmid</con:name>
          <con:value>urn:dece:drm:OMA:2.0</con:value>
        </con:property>
        <con:property>
          <con:name>requestBody</con:name>
          <con:value><![CDATA[<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<DRMClient DeviceID="urn:dece:deviceid:org:dece:A269EA81698DD29FE0401F0A05995F22"
xmlns="${#Project#coordinatorSchema}">
    <DRMSupported>urn:dece:drm:OMA:2.0</DRMSupported>    
    <NativeDRMClientID>dXJuOmRlY2U6ZGV2aWNlaWQ6b3JnOmRlY2U6QTI2OUVBODE2OThERDI5RkUwNDAxRjBBMDU5OTVGMjI=</NativeDRMClientID>
    <ResourceStatus>
        <Current CreatedBy="urn:dece:org:org:dece:12" CreationDate="2011-04-07T17:19:52.686Z">
            <Value>urn:dece:type:status:active</Value>
            <Description>active</Description>
        </Current>
    </ResourceStatus>
</DRMClient>]]></con:value>
        </con:property>
        <con:property>
          <con:name>rauthToken</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>rauthToken_1</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>rdrmid</con:name>
          <con:value>urn:dece:drmclientid:org:dece</con:value>
        </con:property>
        <con:property>
          <con:name>rdrmidFull</con:name>
          <con:value>urn:dece:drmclientid:org:dece:A14C7A9635BC6106E0401F0A07992BE4</con:value>
        </con:property>
        <con:property>
          <con:name>rdrmdmid</con:name>
          <con:value>A14C7A9635BC6106E0401F0A07992BE4</con:value>
        </con:property>
        <con:property>
          <con:name>rdrmdmidFull</con:name>
          <con:value>urn:dece:drmclientid:org:dece:A14C7A9635BC6106E0401F0A07992BE4</con:value>
        </con:property>
        <con:property>
          <con:name>drmclientIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>drmclientId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>deviceIdFULLbase64</con:name>
          <con:value>dXJuOmRlY2U6ZGV2aWNlaWQ6b3JnOmRlY2U6QTI2OUVBODE2OThERDI5RkUwNDAxRjBBMDU5OTVGMjI=</con:value>
        </con:property>
        <con:property>
          <con:name>drmclientCreatedBy</con:name>
          <con:value>12</con:value>
        </con:property>
        <con:property>
          <con:name>nodeRoleSaved</con:name>
          <con:value>urn:dece:role:decedomainmanager</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DRMClientDelete API" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="">
      <con:settings/>
      <con:testStep type="groovy" name="Establish Properties">
        <con:settings/>
        <con:config>
          <script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("expectDRMClientResponseDelete",null);
tC.setPropertyValue("actionDeleteSkipRowValidation",null);
tC.setPropertyValue("deviceId",null);
tC.setPropertyValue("drmid",null);
tC.setPropertyValue("drmidFull",null);
tC.setPropertyValue("deviceIdFull",null);
tC.setPropertyValue("drmclientId",null);
tC.setPropertyValue("drmclientIdFULL",null);
tC.setPropertyValue("accountidFULL",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("domainIdFULL",null);
tC.setPropertyValue("drmclientCreatedBy",null);
tC.setPropertyValue("counter",null);</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract Properties from Calling Test Case">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def acctO = new dbUtils.dbAccount(log,tP.getPropertyValue("targetDECESystem"));

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("expectDRMClientResponseDelete",callTC.getPropertyValue("expectDRMClientResponseDelete"));
tC.setPropertyValue("actionDeleteSkipRowValidation",callTC.getPropertyValue("actionDeleteSkipRowValidation"));
tC.setPropertyValue("assertionAccountId",callTC.getPropertyValue("assertionAccountId"));
tC.setPropertyValue("assertionAccountIdFULL",callTC.getPropertyValue("assertionAccountIdFULL"));
tC.setPropertyValue("domainId",callTC.getPropertyValue("domainId"));
tC.setPropertyValue("domainIdFULL",callTC.getPropertyValue("domainIdFULL"));
tC.setPropertyValue("deviceId",callTC.getPropertyValue("deviceId"));
tC.setPropertyValue("deviceIdFull",callTC.getPropertyValue("deviceIdFull"));
tC.setPropertyValue("counter",callTC.getPropertyValue("counter"));
tC.setPropertyValue("drmidFull",callTC.getPropertyValue("drmidFull"));
tC.setPropertyValue("drmid",callTC.getPropertyValue("drmid"));
tC.setPropertyValue("drmclientId",callTC.getPropertyValue("drmclientId"));
tC.setPropertyValue("drmclientIdFULL",callTC.getPropertyValue("drmclientIdFULL"));
tC.setPropertyValue("drmclientCreatedBy",callTC.getPropertyValue("drmclientCreatedBy"));

if (tC.getPropertyValue("expectDRMClientResponseDelete") == "null" ||
	tC.getPropertyValue("expectDRMClientResponseDelete") == null) {
	tC.setPropertyValue("expectDRMClientResponseDelete","SUCCESS");
}
if (tC.getPropertyValue("actionDeleteSkipRowValidation") == "null" ||
	tC.getPropertyValue("actionDeleteSkipRowValidation") == null) {
	tC.setPropertyValue("actionDeleteSkipRowValidation","false");
}
if (tC.getPropertyValue("counter") == "null" ||
	tC.getPropertyValue("counter") == null) {
	tC.setPropertyValue("counter","1");
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract API Error Information" disabled="true">
        <con:settings/>
        <con:config>
          <script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def a = new dbUtils.dbErrors(log,tP.getPropertyValue("targetDECESystem"));

tC.setPropertyValue("errorStatusCode",null);
tC.setPropertyValue("errorReason",null);
tC.setPropertyValue("errorID",null);

String xmlData = "";
String errId = "";

log.info "expectDRMClientResponseDelete[" + tC.getPropertyValue("expectDRMClientResponseDelete") + "]";

switch (tC.getPropertyValue("expectDRMClientResponseDelete")) {
	case "ADULT_CONTENT_NOT_ALLOWED":
		errId = "Policy:AdultContentNotAllowed";
		break;
	case "ACCOUNT_NOT_ACTIVE":
		errId = "AccountNotActive";
		break;
	case "ACCOUNT_NOT_VALID":
		errId = "AccountIdNotValid";
		break;
	case "API_NOT_AUTH":
		errId = "Security:RoleInvalid";
		break;
	case "BLOCKED_ACCESS_UNRATED":
		errId = "Policy:UnratedContentBlocked";
		break;
	case "CID_NOT_ACTIVE":
		errId = "ContentIDNotActive";
		break;
	case "CID_NOT_FOUND":
		errId = "ContentIDNotFound";
		break;
	case "DEVICE_EXCEED_MAX":
		errId = "AccountDeviceCountExceedMaxLimit";
		break;
	case "DEVICE_CODE_NOT_FOUND":
		errId = "DeviceAuthCodeNotFound";
		break;
	case "LOGICAL_ASSET_NOT_ACTIVE":
		errId = "AssetLogicalIDNotActive";
		break;
	case "RT_RENT_EXPIRED":
		errId = "RightsTokenRentalExpired";
		break;
	case "RT_NOT_FOUND":
		errId = "RightsTokenNotFound";
		break;
	case "RT_NOT_ACTIVE":
		errId = "RightsTokenNotActive";
		break;
	case "RATING_POLICY":
		errId = "RatingPolicyExists";
		break;
	case "RENEW_EXCEED_MAX_TIME":
		errId = "StreamRenewExceedsMaximumTime";
		break;
	case "CID_NOT_GRANTED":
	case "STREAM_RIGHTS_NOT_GRANTED":
		errId = "StreamRightsNotGranted";
		break;
	case "STREAM_COUNT_EXCEEDED":
		errId = "AccountStreamCountExceedMaxLimit";
		break;
	case "STREAM_COUNT_EXCEEDED_USER":
		errId = "UserStreamCountExceedMaxLimit";
		break;
	case "STREAM_INVALID_TRANS":
		errId = "StreamTransactionIdInvalid";
		break;
	case "STREAM_ACCOUNTID_MISMATCH":
		errId = "AccountIdUnmatched";
		break;		
	case "STREAM_NICKNAME_TOO_LONG":
		errId = "StreamClientNicknameTooLong";
		break;		
	case "STREAM_WINDOW_NOT_ALLOWED":
		errId = "StreamAssetWindowNotAllowed";
		break;
	case "STREAM_OWNER_MISMATCH":
		errId = "StreamOwnerMismatch";
		break;
	case "STREAM_NOT_FOUND":
		errId = "StreamNotFound";
		break;
	case "STREAM_NOT_ACTIVE":
		errId = "StreamNotActive";
		break;
	case "USER_NOT_MATCH_TOKEN":
		errId = "UserIdUnmatched";
		break;
	case "USER_NOT_ACTIVE":
		errId = "UserNotActive";
		break;
	case "USER_NOT_SUPPLIED":
		errId = "UserNotSpecified";
		break;
}

try {
	xmlData = a.errGetIdInfo(errId);
	
	assert xmlData.trim().length() > 1;

	def myXML = new XmlSlurper().parseText(xmlData);

	log.info myXML.ResultSet.Row.size();
	tC.setPropertyValue("errorStatusCode", myXML.ResultSet.Row[0].STATUS_CODE.toString());
	tC.setPropertyValue("errorReason", myXML.ResultSet.Row[0].REASON.toString());
	tC.setPropertyValue("errorID", myXML.ResultSet.Row[0].ERROR_ID.toString());

	/*
	*  The DB does not contain the complete HTTP status
	*  string, only the code.  Thus, we must adjust.
	*/
	switch (tC.getPropertyValue("errorStatusCode")) {
		case "400":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 400 Bad Request");
			break;
		case "403":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 403 Forbidden");
			break;
		case "404":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 404 Not Found");
			break;
		case "409":
			tC.setPropertyValue("errorStatusCode","HTTP/1.1 409 Conflict");
			break;
	}
}
catch (Throwable e) {
	log.info "STEP FAILURE! --- " + e;
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Establish DRMClientCreate Request Body">
        <con:settings/>
        <con:config>
          <script><![CDATA[def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def genUtils = new generalUtils.generalUtils(log);

tC.setPropertyValue("requestBody",null);

String xmldrmid = "";
String xmlDRMDomain = "";
String rdrmidFull = tC.getPropertyValue("rdrmidFull").toString();
String deviceIdFull = tC.getPropertyValue("deviceIdFull");
String nodeid = tC.getPropertyValue("nodeid");

log.info "rdrmidFull[$rdrmidFull]";
log.info "deviceIdFull[$deviceIdFull]";
log.info "nodeid[$nodeid]";

String body = """<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<DRMClient DeviceID="$deviceIdFull"
xmlns="${#Project#coordinatorSchema}">
    <DRMSupported>urn:dece:drm:OMA:2.0</DRMSupported>    
    <NativeDRMClientID>QTAzMTI0MkM1NTQ5MzVDQUUwNDAxRjBBMDU5OTMyNjk=</NativeDRMClientID>
    <ResourceStatus>
        <Current CreatedBy="urn:dece:org:org:dece:$nodeid" CreationDate="2011-04-07T17:19:52.686Z">
            <Value>urn:dece:type:status:active</Value>
            <Description>active</Description>
        </Current>
    </ResourceStatus>
</DRMClient>
""";

tC.setPropertyValue("requestBody", body);]]></script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="SetPem"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;
import com.eviware.soapui.support.types.StringToStringMap 


def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("keyStorePath",null);

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("SetPem");

myTC.setPropertyValue("NODE_ID",tP.getPropertyValue("NODE_ID"));

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );
assert runnerTC.status == Status.FINISHED;

RestTestRequestStep testStep = tC.getTestStepByName("DELETE - DRMClientDelete");
def keyStorePath = tC.getPropertyValue("keyStorePath");
this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config></con:testStep><con:testStep type="restrequest" name="DELETE - DRMClientDelete">
        <con:settings/>
        <con:config service="DRMClientDelete" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/DECEDomain/{DeceDomainID}/DRMClientDelete" methodName="Delete" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="DELETE - DRMClientDelete" mediaType="application/xml" accept="application/xml" sslKeystore="2013_concat.pem">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:endpoint>${#Project#Provision_HostName}</con:endpoint>
            <con:request/>
            <con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters/>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify DRMClientDelete Response">
        <con:settings/>
        <con:config>
          <script>import org.xml.sax.SAXException; 
import org.xml.sax.SAXParseException; 

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def tStep = tC.getTestStepByName('DELETE - DRMClientDelete');
def myXML;

int errSize = 0;
int i = 0;
boolean expectLocation = null;
boolean performBodyValidations = true;
String xmlData = "";
String errId = "";
String respstatus = null;
String respconnection = null;
String respcontentType = null;
String respcontentLength = null;
String respLocation = null;
String respbody = null;
String expectstatus = null;
String expectconnection = null;
String expectcontentType = null;
String expectcontentLength = null;
String urnError = tP.getPropertyValue("urnDECEError").toString();
String major = tP.getPropertyValue("versionMajor").toString();
String minor = tP.getPropertyValue("versionMinor").toString();
String errorHost  = "https://" + tP.getPropertyValue("targetDECEhostq") + ":" + tP.getPropertyValue("targetDECEport") + "/rest/$major/$minor/error";
String errorLinkBase = "$errorHost/en/ErrorList.html#";

try {
	respbody = tStep.httpRequest.response.getResponseContent().toString();
} catch (e) {
	log.info "getResponseContent failure! - $e";
} finally {
	tStep.httpRequest.response.responseHeaders.each() { header, value ->
		switch (header) {
			case "Location": 
				respLocation = value[0];
				break;
			case "#status#": 
				respstatus = value[0]; 
				break;
			case "Connection": 
				respconnection = value[0]; 
				break;
			case "Content-Type": 
				respcontentType = value[0]; 
				break;
			case "Content-Length": 
				respcontentLength = value[0]; 
				break;
			case "Transfer-Encoding": 
				resphttpContentEncoding = value[0]; 
				break;
		}
	}
}

log.info "expectDRMClientResponseDelete -- [" + tC.getPropertyValue("expectDRMClientResponseDelete") + "]";

switch (tC.getPropertyValue("expectDRMClientResponseDelete")) {
	case "SUCCESS":
		expectstatus = "HTTP/1.1 200 OK";
		expectconnection = "close";
		expectcontentType = "application/xml";
		expectcontentLength = "0";
		expectLocation = false;
		performBodyValidations = false;
		break;
	case "notfound":
		expectstatus = "HTTP/1.1 404 Not Found";
		expectconnection = "close";
		expectcontentType = "text/xml";
		expectcontentLength = "0";
		expectLocation = false;
		performBodyValidations = false;
		break;
	case "SAXParseException":
		expectstatus = "HTTP/1.1 400 Bad Request";
		expectconnection = "close";
		expectcontentType = "application/xml";
		expectcontentLength = "1";
		expectLocation = false;
		performBodyValidations = true;
		errorReasonFlag = false;
		break;
	default:
		errorReasonFlag = true;
		expectconnection = "close";
		expectLocation = false;
		performBodyValidations = true;
		expectcontentLength = "1";
		expectcontentType = "application/xml";
		errorID     = urnError + tC.getPropertyValue("errorID");
		errorReason = tC.getPropertyValue("errorReason");
		errorLink   = "$errorLinkBase" + tC.getPropertyValue("errorID");
	break;
}

/*
*   -------------------- ERROR --------------------
*/
if (tC.getPropertyValue("expectDRMClientResponseDelete") != "SUCCESS" &amp;&amp; performBodyValidations == true) {
	try {
		myXML = new XmlSlurper().parseText(respbody);
	} catch (IOException e) {
		log.info "ERROR!  XmlSlurper.parseText IOException error -- $e";
	} catch (SAXException e) {
		log.info "ERROR!  XmlSlurper.parseText SAXException error -- $e";
	}
	finally {
		log.info "-----  HTTP BODY VERFICATION for ERROR -------";
		String[] errs = tC.getPropertyValue("expectDRMClientResponseDelete").toString().split(",");
		errSize = errs.size();
				
		log.info "SIZE -- Error.size is $errSize";
		assert myXML.Error.size() == errSize;
		log.info "SIZE -- Reason.size is $errSize";
		assert myXML.Error.Reason.size() == errSize;
		log.info "SIZE -- OriginalRequest.size is $errSize";
		assert myXML.Error.OriginalRequest.size() == errSize;
		log.info "SIZE -- ErrorLink.size is $errSize";
		assert myXML.Error.ErrorLink.size() == errSize;

		/*
		*  Extract the error information
		*/
		for (String err : errs) {
			tC.setPropertyValue("errorStatusCode",null);
			tC.setPropertyValue("errorReason",null);
			tC.setPropertyValue("errorID",null);

			log.info "-----  Error validation [$i] for $err -------";
			try {
				def a = new dbUtils.dbErrors(log,tP.getPropertyValue("targetDECESystem"));
				
				xmlData = a.errGetIdInfo(err);
	
				assert xmlData.trim().length() > 1;

				def myXMLerr = new XmlSlurper().parseText(xmlData);

				log.info myXML.ResultSet.Row.size();
				tC.setPropertyValue("errorStatusCode", myXMLerr.ResultSet.Row[0].STATUS_CODE.toString());
				tC.setPropertyValue("errorReason", myXMLerr.ResultSet.Row[0].REASON.toString());
				tC.setPropertyValue("errorID", myXMLerr.ResultSet.Row[0].ERROR_ID.toString());

				/*
				*  The DB does not contain the complete HTTP status
				*  string, only the code.  Thus, we must adjust.
				*/
				switch (tC.getPropertyValue("errorStatusCode")) {
					case "400":
						tC.setPropertyValue("errorStatusCode","HTTP/1.1 400 Bad Request");
						break;
					case "403":
						tC.setPropertyValue("errorStatusCode","HTTP/1.1 403 Forbidden");
						break;
					case "404":
						tC.setPropertyValue("errorStatusCode","HTTP/1.1 404 Not Found");
						break;	
					case "409":
						tC.setPropertyValue("errorStatusCode","HTTP/1.1 409 Conflict");
						break;
				}
				
				/*
				*  The status code returned will be that of the 
				*  first error encountered. 
				*/
				if (i == 0) {
					expectstatus = tC.getPropertyValue("errorStatusCode");
				}
			}
			catch (Throwable e) {
				log.info "STEP FAILURE! --- " + e;
			}
			finally {
				String respErrorCode = myXML.Error[i].@ErrorID.toString();
				String respReason = myXML.Error[i].Reason.toString();
				String respErrorLink = myXML.Error[i].ErrorLink.toString();
				String expectErrorCode = urnError + tC.getPropertyValue("errorID").toString();
				String expectReason = tC.getPropertyValue("errorReason").toString();
				String expectErrorLink = errorLinkBase + tC.getPropertyValue("errorID").toString();

				// ErrorCode
				this.log.info "expectErrorCode [$expectErrorCode] - respErrorCode[$respErrorCode]";
				assert respErrorCode == expectErrorCode;

				// Reason
				this.log.info "expectReason [$expectReason] - respReason[$respReason]";
				assert respReason == expectReason;

				// ErrorLink
				this.log.info "expectErrorLink [$expectErrorLink] - respErrorLink[$respErrorLink]";
				assert respErrorLink == expectErrorLink;
			}
			i++;
		}
	}
}
/*
*  HTTP Header Checkes...
*/
log.info "----- HTTP Header Validations ------";

log.info "expectstatus[$expectstatus] - respstatus[$respstatus]";
assert expectstatus == respstatus;

log.info "expectconnection[$expectconnection] - respconnection[$respconnection]";
assert expectconnection == respconnection;

if (expectcontentLength == "0") {
	log.info "expectcontentLength[$expectcontentLength] - respcontentLength[$respcontentLength]";
	assert respcontentLength == expectcontentLength;
} else {
	log.info "respcontentLength[$respcontentLength] - Greater than zero";
	assert respcontentLength.toInteger() > 0;
}

if (expectLocation) {
	log.info "respLocation[$respLocation] - Location Header Present in Response";
	assert respLocation.length() > 1;
} else {
	log.info "respLocation[$respLocation] - Location Header NOT Present in Response";
	assert respLocation == null;
}

log.info "expectcontentType[$expectcontentType] - respcontentType[$respcontentType]";
assert expectcontentType == respcontentType;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify DRM_CLIENT row">
        <con:settings/>
        <con:config>
          <script><![CDATA[import org.xml.sax.SAXException; 
import org.xml.sax.SAXParseException; 

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("row",null);

String row = "";

def a;

log.info "expectDRMClientResponseDelete[" + tC.getPropertyValue("expectDRMClientResponseDelete") + "]";
log.info "actionDeleteSkipRowValidation[" + tC.getPropertyValue("actionDeleteSkipRowValidation") + "]";

if (tC.getPropertyValue("actionDeleteSkipRowValidation") == "false") {
	try {
		a = new dbUtils.dbDRM(this.log,tP.getPropertyValue("targetDECESystem"));
		row = a.drmGetDRMClientRow(tC.getPropertyValue("drmclientId"));
		tC.setPropertyValue("row",row);
		log.info "row[$row]";
	} catch (Throwable e) {
		log.info "ERROR during dbDRM! -- $e";
	} finally {
		assert row.length() > 0;
	}

	try {
		def myXML = new XmlSlurper().parseText(row);

		String rdrmclientoid = myXML.ResultSet.Row.DRM_CLIENT_OID;
		String rdecedomain = myXML.ResultSet.Row.DECE_DOMAIN_ID;
		String rnativedrmclientid = myXML.ResultSet.Row.NATIVE_DRM_CLIENT_ID;
		String rdeviceid = myXML.ResultSet.Row.DEVICE_OID;
		String rcby = myXML.ResultSet.Row.CREATED_BY;
		String rcdate = myXML.ResultSet.Row.CREATED_DATE;
		String ruby = myXML.ResultSet.Row.UPDATED_BY
		String rudate = myXML.ResultSet.Row.UPDATED_DATE;
		String rstatus = myXML.ResultSet.Row.STATUS;
		String rdrmid = myXML.ResultSet.Row.DRM_OID;
		
		if (tC.getPropertyValue("expectDRMClientResponseDelete") == "SUCCESS") {
			estatus = "deleted";
		}

		/*
		eauthcode = eauthcode.replaceAll("&amp;","&");
		eauthcode = eauthcode.replaceAll("&lt;","<");
		eauthcode = eauthcode.replaceAll("&gt;",">");
		eauthcode = eauthcode.replaceAll("&quot;","\"");
		eauthcode = eauthcode.replaceAll("&apos;","'");
		*/
	}
	catch (IOException e) {
		log.info "ERROR!  myXML IOException! -- $e";
	}
	catch (SAXException e) {
		log.info "ERROR!  myXML SAXException! -- $e";
	}
	finally {
		log.info "ASSERT - rstatus[$rstatus] == 'deleted'";
		assert rstatus == "deleted";
	}
}]]></script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify DRM_CLIENT_STATUS_HISTORY row">
        <con:settings/>
        <con:config>
          <script><![CDATA[import org.xml.sax.SAXException; 
import org.xml.sax.SAXParseException; 

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("row",null);

String row = "";

def a;

log.info "expectDRMClientResponseDelete[" + tC.getPropertyValue("expectDRMClientResponseDelete") + "]";
log.info "actionDeleteSkipRowValidation[" + tC.getPropertyValue("actionDeleteSkipRowValidation") + "]";

if (tC.getPropertyValue("actionDeleteSkipRowValidation") == "false") {
	try {
		a = new dbUtils.dbDRM(this.log,tP.getPropertyValue("targetDECESystem"));
		row = a.drmGetDRMClientHistoryRow(tC.getPropertyValue("drmclientId"));
		tC.setPropertyValue("row",row);
		log.info "row[$row]";
	} catch (Throwable e) {
		log.info "ERROR during dbDRM! -- $e";
	} finally {
		assert row.length() > 0;
	}

	try {
		def myXML = new XmlSlurper().parseText(row);

		String rhistoryoid = myXML.ResultSet.Row[0].HISTORY_OID;
		String rdrmclientoid = myXML.ResultSet.Row[0].DRM_CLIENT_OID;
		String rstatus = myXML.ResultSet.Row[0].STATUS;
		String rdescription = myXML.ResultSet.Row[0].DESCRIPTION;
		String rcdate = myXML.ResultSet.Row[0].CREATED_DATE;
		String rcby = myXML.ResultSet.Row[0].CREATED_BY_NODE_OID;

		if (tC.getPropertyValue("expectDRMClientResponseDelete") == "SUCCESS") {
			String estatus = "deleted";
			String edescription = "New DRMClient Deleted";
		} else {
			String estatus = "active";
			String edescription = "New DRMClient Created";
		}

		/*
		eauthcode = eauthcode.replaceAll("&amp;","&");
		eauthcode = eauthcode.replaceAll("&lt;","<");
		eauthcode = eauthcode.replaceAll("&gt;",">");
		eauthcode = eauthcode.replaceAll("&quot;","\"");
		eauthcode = eauthcode.replaceAll("&apos;","'");
		*/
	}
	catch (IOException e) {
		log.info "ERROR!  myXML IOException! -- $e";
	}
	catch (SAXException e) {
		log.info "ERROR!  myXML SAXException! -- $e";
	}
	finally {
		log.info "ASSERT - STATUS - rstatus[$rstatus] == 'deleted'";
		assert rstatus == "deleted";

		log.info "ASSERT - DESCRIPTION - rdescription[$rdescription] == $edescription";
		assert rdescription == edescription;

		log.info "ASSERT - CREATED_BY_NODE_OID - rcby[$rcby] == " + tC.getPropertyValue("drmclientCreatedBy");
		assert rcby == tC.getPropertyValue("drmclientCreatedBy");
	}
}]]></script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify DEVICE rows affiliated with DRM_CLIENT_OID are 'deleted'">
        <con:settings/>
        <con:config>
          <script>import org.xml.sax.SAXException; 
import org.xml.sax.SAXParseException; 

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("row",null);

String row = "";

def a;

log.info "expectDRMClientResponseDelete[" + tC.getPropertyValue("expectDRMClientResponseDelete") + "]";
log.info "actionDeleteSkipRowValidation[" + tC.getPropertyValue("actionDeleteSkipRowValidation") + "]";

if (tC.getPropertyValue("actionDeleteSkipRowValidation") == "false") {
	try {
		a = new dbUtils.dbDevice(this.log,tP.getPropertyValue("targetDECESystem"));
		row = a.DeviceGetRowsByDRMClientOID(tC.getPropertyValue("drmclientId"));
		tC.setPropertyValue("row",row);
		log.info "row[$row]";
	} catch (Throwable e) {
		log.info "ERROR during dbDRM! -- $e";
	} finally {
		assert row.length() > 0;
	}

	try {
		def myXML = new XmlSlurper().parseText(row);
		int x = 0;
		String rdrmclientoid = "";
		String rdecedomain = "";
		String rnativedrmclientid = "";
		String rdeviceid = "";
		String rcby = "";
		String rcdate = "";
		String ruby = "";
		String rudate = "";
		String rstatus = "";
		String rdrmid = "";
		
		myXML.children().each {
			rdrmclientoid = myXML.ResultSet.Row[x].DRM_CLIENT_OID;
			rdecedomain = myXML.ResultSet.Row[x].DECE_DOMAIN_ID;
			rnativedrmclientid = myXML.ResultSet.Row[x].NATIVE_DRM_CLIENT_ID;
			rdeviceid = myXML.ResultSet.Row[x].DEVICE_OID;
			rcby = myXML.ResultSet.Row[x].CREATED_BY;
			rcdate = myXML.ResultSet.Row[x].CREATED_DATE;
			ruby = myXML.ResultSet.Row[x].UPDATED_BY
			rudate = myXML.ResultSet.Row[x].UPDATED_DATE;
			rstatus = myXML.ResultSet.Row[x].STATUS;
			rdrmid = myXML.ResultSet.Row[x].DRM_OID;

			log.info "Assert DECE_DOMAIN_ID - rdecedomain[$rdecedomain] == " + "[" + tC.getPropertyValue("domainId") + "]";
			assert rdecedomain == tC.getPropertyValue("domainId");

			log.info "Assert DRM_CLIENT_OID - rdrmclientoid[$rdrmclientoid] == " + "[" + tC.getPropertyValue("drmclientId") + "]";
			assert rdrmclientoid == tC.getPropertyValue("drmclientId");

			log.info "Assert STATUS - rstatus[$rstatus] == [deleted]";
			assert rstatus == "deleted";

			x++;
		}
	}
	catch (IOException e) {
		log.info "ERROR!  myXML IOException! -- $e";
	}
	catch (SAXException e) {
		log.info "ERROR!  myXML SAXException! -- $e";
	}
	finally {
		log.info "ASSERT - rstatus[$rstatus] == 'deleted'";
		assert rstatus == "deleted";
	}
}</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>accountidFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>actionAccountID</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>actionDeleteSkipRowValidation</con:name>
          <con:value>false</con:value>
        </con:property>
        <con:property>
          <con:name>actionDRMDomainValue</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>actiondrmid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value>A175415C40D8B362E0401F0A07990FA1</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value>urn:dece:accountid:org:dece:A175415C40D8B362E0401F0A07990FA1</con:value>
        </con:property>
        <con:property>
          <con:name>counter</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>deviceId</con:name>
          <con:value>A1867445F1412330E0401F0A07996340</con:value>
        </con:property>
        <con:property>
          <con:name>deviceIdFull</con:name>
          <con:value>urn:dece:deviceid:org:dece:A1867445F1412330E0401F0A07996340</con:value>
        </con:property>
        <con:property>
          <con:name>domainId</con:name>
          <con:value>A18674445C469CD6E0401F0A079963AD</con:value>
        </con:property>
        <con:property>
          <con:name>domainIdFULL</con:name>
          <con:value>urn:dece:domainid:dece:A18674445C469CD6E0401F0A079963AD</con:value>
        </con:property>
        <con:property>
          <con:name>drmclientId</con:name>
          <con:value>A1867445F14C2330E0401F0A07996340</con:value>
        </con:property>
        <con:property>
          <con:name>drmclientIdFULL</con:name>
          <con:value>urn:dece:drmclientid:org:dece:A1867445F14C2330E0401F0A07996340</con:value>
        </con:property>
        <con:property>
          <con:name>drmid</con:name>
          <con:value>urn:dece:drm:OMA:2.0</con:value>
        </con:property>
        <con:property>
          <con:name>drmidFull</con:name>
          <con:value>urn:dece:domainid:urn:dece:drm:OMA:2.0:6MarzAFsB8j3Y9wV000</con:value>
        </con:property>
        <con:property>
          <con:name>expectDRMClientResponseDelete</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>500500</con:value>
        </con:property>
        <con:property>
          <con:name>rdrmdmid</con:name>
          <con:value>A14C7A9635BC6106E0401F0A07992BE4</con:value>
        </con:property>
        <con:property>
          <con:name>rdrmdmidFull</con:name>
          <con:value>urn:dece:drmclientid:org:dece:A14C7A9635BC6106E0401F0A07992BE4</con:value>
        </con:property>
        <con:property>
          <con:name>requestBody</con:name>
          <con:value><![CDATA[<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<DRMClient DeviceID="urn:dece:deviceid:org:dece:A1867445F1412330E0401F0A07996340"
xmlns="${#Project#coordinatorSchema}">
    <DRMSupported>urn:dece:drm:OMA:2.0</DRMSupported>    
    <NativeDRMClientID>QTAzMTI0MkM1NTQ5MzVDQUUwNDAxRjBBMDU5OTMyNjk=</NativeDRMClientID>
    <ResourceStatus>
        <Current CreatedBy="urn:dece:org:org:dece:500500" CreationDate="2011-04-07T17:19:52.686Z">
            <Value>urn:dece:type:status:active</Value>
            <Description>active</Description>
        </Current>
    </ResourceStatus>
</DRMClient>]]></con:value>
        </con:property>
        <con:property>
          <con:name>row</con:name>
          <con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <DRM_CLIENT_OID>A1867445F14C2330E0401F0A07996340</DRM_CLIENT_OID>
      <DEVICE_OID>A1867445F1412330E0401F0A07996340</DEVICE_OID>
      <DECE_DOMAIN_ID>A18674445C469CD6E0401F0A079963AD</DECE_DOMAIN_ID>
      <NATIVE_DRM_CLIENT_ID>urn:dece:deviceid:org:dece:A1867445F1412330E0401F0A07996340</NATIVE_DRM_CLIENT_ID>
      <DRM_OID>1</DRM_OID>
      <CREATED_DATE>2011-04-22 17:47:50.347</CREATED_DATE>
      <CREATED_BY>12</CREATED_BY>
      <UPDATED_BY>null</UPDATED_BY>
      <UPDATED_DATE>null</UPDATED_DATE>
      <STATUS>deleted</STATUS>
    </Row>
  </ResultSet>
</Results>]]></con:value>
        </con:property>
        <con:property>
          <con:name>sName</con:name>
          <con:value>DRMClientDelete Test Cases</con:value>
        </con:property>
        <con:property>
          <con:name>tName</con:name>
          <con:value>TC_DECE_301001 - DRMClientDelete - Invocation of API on DRMClient Domain with Device in 'active' status</con:value>
        </con:property>
        <con:property>
          <con:name>drmclientCreatedBy</con:name>
          <con:value>12</con:value>
        </con:property>
        <con:property>
          <con:name>errorStatusCode</con:name>
          <con:value>HTTP/1.1 403 Forbidden</con:value>
        </con:property>
        <con:property>
          <con:name>errorReason</con:name>
          <con:value>API call not authorized</con:value>
        </con:property>
        <con:property>
          <con:name>errorID</con:name>
          <con:value>Security:RoleInvalid</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase></con:testSuite>
  <con:testSuite name="Test Configuration/Setup" disabled="true">
    <con:description/>
    <con:settings/>
    <con:runType>SEQUENTIAL</con:runType>
    <con:properties>
      <con:property>
        <con:name>QC_TestPlanDirectory</con:name>
        <con:value/>
      </con:property>
      <con:property>
        <con:name>QC_TestLabDirectory</con:name>
        <con:value/>
      </con:property>
      <con:property>
        <con:name>QC_TestSet</con:name>
        <con:value/>
      </con:property>
    </con:properties>
    <con:reportParameters/>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Authorization Information Extraction via STS" searchProperties="true" id="bf5b3635-963a-4ff0-991f-e6ab3ab4f509">
      <con:settings/>
      <con:testStep type="groovy" name="Establish Properties">
        <con:settings/>
        <con:config>
          <script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("nodetype",null);
tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("username",null);
tC.setPropertyValue("password",null);
tC.setPropertyValue("tokentype",null);
tC.setPropertyValue("expectErrTypeSTS",null);
tC.setPropertyValue("expectErrTypeSTSGet",null);
tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("nodeaccountid",null);
tC.setPropertyValue("nodeuserid",null);
tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("userrowoid",null);
tC.setPropertyValue("accountrowoid",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("assert",null);</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract Calling Test Case Properities">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("audienceNodeid",callTC.getPropertyValue("audienceNodeid"));
tC.setPropertyValue("username",callTC.getPropertyValue("username"));
tC.setPropertyValue("password",callTC.getPropertyValue("password"));
tC.setPropertyValue("tokentype",callTC.getPropertyValue("tokentype"));
tC.setPropertyValue("expectErrTypeSTS",callTC.getPropertyValue("expectErrTypeSTS"));</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call STS">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("STS API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Disable QC Uploading">
        <con:settings/>
        <con:config>
          <script>def tC  = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call STS GET">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Test Cases Containing APIs").getTestCaseByName("STS GET API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="Extract ACCOUNT/ACCOUNT_USER Information">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName xsi:nil="true"/>
          <con:driver>${#Project#JDBCDriver}</con:driver>
          <con:connectionString>${#Project#JDBCConnStr}</con:connectionString>
          <con:password/>
          <con:query>select a.ACCOUNT_OID, a.USER_OID, b.NODE_USER_ID, c.NODE_ACCOUNT_ID, b.ROW_OID, c.ROW_OID
from 
   ACCOUNT_USER a, NODE_USER b, NODE_ACCOUNT c
where 
   a.USERNAME = :uname
   AND
   a.USER_OID = b.USER_OID
   AND
   a.ACCOUNT_OID = c.ACCOUNT_OID
   AND
   b.NODE_OID = c.NODE_OID 
   AND 
   b.NODE_OID = :nodeid</con:query>
          <con:assertion type="XPath Match">
            <con:configuration>
              <path>//Results[1]/ResultSet[1]/Row[1]/@rowNumber</path>
              <content>1</content>
              <allowWildcards>false</allowWildcards>
              <ignoreNamspaceDifferences>false</ignoreNamspaceDifferences>
            </con:configuration>
          </con:assertion>
          <con:properties>
            <con:property>
              <con:name>uname</con:name>
              <con:value>${#TestCase#username}</con:value>
            </con:property>
            <con:property>
              <con:name>nodeid</con:name>
              <con:value>${#TestCase#nodeid}</con:value>
            </con:property>
          </con:properties>
        </con:config>
      </con:testStep>
      <con:testStep type="transfer" name="TestCase-Level Property Transfer">
        <con:settings/>
        <con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" transferChildNodes="false" useXQuery="false" ignoreEmpty="false" entitize="false" transferToAll="false">
            <con:name>accountoid</con:name>
            <con:sourceType>ResponseAsXml</con:sourceType>
            <con:sourceStep>Extract ACCOUNT/ACCOUNT_USER Information</con:sourceStep>
            <con:sourcePath>//Results[1]/ResultSet[1]/Row[1]/ACCOUNT_OID[1]</con:sourcePath>
            <con:targetType>accountoid</con:targetType>
            <con:targetStep>#TestCase#</con:targetStep>
          </con:transfers>
          <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" transferChildNodes="false" useXQuery="false" transferToAll="false" entitize="false" ignoreEmpty="false">
            <con:name>useroid</con:name>
            <con:sourceType>ResponseAsXml</con:sourceType>
            <con:sourceStep>Extract ACCOUNT/ACCOUNT_USER Information</con:sourceStep>
            <con:sourcePath>//Results[1]/ResultSet[1]/Row[1]/USER_OID[1]</con:sourcePath>
            <con:targetType>useroid</con:targetType>
            <con:targetStep>#TestCase#</con:targetStep>
          </con:transfers>
          <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" entitize="false" ignoreEmpty="false">
            <con:name>userrowid</con:name>
            <con:sourceType>ResponseAsXml</con:sourceType>
            <con:sourceStep>Extract ACCOUNT/ACCOUNT_USER Information</con:sourceStep>
            <con:sourcePath>//Results[1]/ResultSet[1]/Row[1]/ROW_OID[1]</con:sourcePath>
            <con:targetType>userrowoid</con:targetType>
            <con:targetStep>#TestCase#</con:targetStep>
          </con:transfers>
          <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" entitize="false" transferToAll="false" ignoreEmpty="false">
            <con:name>acctrowid</con:name>
            <con:sourceType>ResponseAsXml</con:sourceType>
            <con:sourceStep>Extract ACCOUNT/ACCOUNT_USER Information</con:sourceStep>
            <con:sourcePath>//Results[1]/ResultSet[1]/Row[1]/ROW_OID[2]</con:sourcePath>
            <con:targetType>accountrowoid</con:targetType>
            <con:targetStep>#TestCase#</con:targetStep>
          </con:transfers>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Setup base node-level information based on calling Node type">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def baseNodeType = tC.getPropertyValue("nodetype");

/*
//
//  Establish project-defined properties at the test case
//  level
//
//tC.setPropertyValue("cid",tP.getPropertyValue("cid"));
//tC.setPropertyValue("alid",tP.getPropertyValue("alid"));
//tC.setPropertyValue("deceorgid",tP.getPropertyValue("deceorgid"));

if (tP.getPropertyValue("targetPort") == "443") {
	tC.setPropertyValue("targetURL",tP.getPropertyValue("targetHost"));
	tP.setPropertyValue("targetURL",tP.getPropertyValue("targetHost"));
} else {
	tC.setPropertyValue("targetURL",tP.getPropertyValue("targetHost") + ":" + tP.getPropertyValue("targetPort"));
	tP.setPropertyValue("targetURL",tP.getPropertyValue("targetHost") + ":" + tP.getPropertyValue("targetPort"));
}
*/
//
//  Establish the basic nodeaccountid, nodeuserid, etc.. by 
//  nodetype
tC.setPropertyValue("assert",tC.getPropertyValue("assert"));
tC.setPropertyValue("assertId",tC.getPropertyValue("assertId"));
tC.setPropertyValue("nodeaccountid",tC.getPropertyValue("assertionAccountId"));
tC.setPropertyValue("nodeuserid",tC.getPropertyValue("assertionUserId"));</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Promote variables to calling TestCase">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def toTCName = tC.getPropertyValue("tName");
def toTSName = tC.getPropertyValue("sName")

//
//  Transfer all the properites created in this test case
//  to the calling testcase.
//
if (toTCName != "" &amp;&amp; toTSName != "") {
	def toTC = testRunner.testCase.testSuite.project.getTestSuiteByName(toTSName).getTestCaseByName(toTCName);

	Map testCasePropertiesMap = tC.getProperties();
	Set testCasePropertiesKeySet = testCasePropertiesMap.keySet();
	Iterator iter = testCasePropertiesKeySet.iterator();
	while(iter.hasNext()){
		String testCasePropertyKey = (String)iter.next();

		switch (testCasePropertyKey) {
			case "synced":
			case "nodetype":
			case "expectErrTypeSTS":
			case "expectErrTypeSTSGet":
			case "username":
			case "password":
			case "tName":
			case "sName":
			break;
			default:
				toTC.setPropertyValue(testCasePropertyKey,tC.getPropertyValue(testCasePropertyKey));	
			break;
		}
	}
}</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>userrowoid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>sch-drm_user1</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>tName</con:name>
          <con:value>Get SAML Assertion - STS</con:value>
        </con:property>
        <con:property>
          <con:name>targetURL</con:name>
          <con:value>null:null</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>sName</con:name>
          <con:value>Common Test Steps</con:value>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>Password1</con:value>
        </con:property>
        <con:property>
          <con:name>nodeuserid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodetype</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>0701</con:value>
        </con:property>
        <con:property>
          <con:name>nodeaccountid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTS</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>deceorgid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>cid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertXML</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value>A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value>A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertId</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">_e11ac976-cbd0-4cb6-9058-7713bde415af</con:value>
        </con:property>
        <con:property>
          <con:name>assert</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>alid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>accountrowoid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SAMLassertion</con:name>
          <con:value>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</con:value>
        </con:property>
      <con:property><con:name>audienceNodeid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0702</con:value></con:property></con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Verification of STREAM_DATA row" searchProperties="true" disabled="true">
      <con:settings/>
      <con:testStep type="groovy" name="Establish Test Case Properties">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("nodetype",null);
tC.setPropertyValue("streamhandle",null);
tC.setPropertyValue("dbxmlresponse",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("expectDBStatus",null);
tC.setPropertyValue("expectTransactionid",null);
tC.setPropertyValue("expectNickname",null);
tC.setPropertyValue("expectJDBCSQL",null);
tC.setPropertyValue("expectDBCreatedBy",null);
tC.setPropertyValue("expectDBDeletedBy",null);
tC.setPropertyValue("expectDBCreateUser",null);
tC.setPropertyValue("expectDBDeleteUser",null);
tC.setPropertyValue("expectDBStatus",null);
tC.setPropertyValue("expectDBCreatedByNodeType",null);</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract Calling Test Case Properties">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("accountoid",callTC.getPropertyValue("accountoid"));
tC.setPropertyValue("useroid",callTC.getPropertyValue("useroid"));
tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("nodetype",callTC.getPropertyValue("nodetype"));
tC.setPropertyValue("streamhandle",callTC.getPropertyValue("streamhandle"));
tC.setPropertyValue("rightstokenid",callTC.getPropertyValue("rightstokenid"));
tC.setPropertyValue("expectStatus",callTC.getPropertyValue("expectStreamStatus"));
tC.setPropertyValue("expectTransactionid",callTC.getPropertyValue("expectTransactionid"));
tC.setPropertyValue("expectNickname",callTC.getPropertyValue("expectNickname"));
tC.setPropertyValue("expectDBCreatedBy",callTC.getPropertyValue("expectDBCreatedBy"));
tC.setPropertyValue("expectDBDeletedBy",callTC.getPropertyValue("expectDBDeletedBy"));
tC.setPropertyValue("expectDBStatus",callTC.getPropertyValue("expectDBStatus"));
tC.setPropertyValue("expectDBCreatedByNodeType",callTC.getPropertyValue("expectDBCreatedByNodeType"));
tC.setPropertyValue("expectDBCreateUser",callTC.getPropertyValue("expectDBCreateUser"));
tC.setPropertyValue("expectDBDeleteUser",callTC.getPropertyValue("expectDBDeleteUser"));

if (tC.getPropertyValue("expectDBStatus") == "" || tC.getPropertyValue("expectDBStatus") == null) {
		tC.setPropertyValue("expectDBStatus","deleted");
}
if (tC.getPropertyValue("expectDBCreatedByNodeType") == "" || tC.getPropertyValue("expectDBCreatedByNodeType") == null) {
		tC.setPropertyValue("expectDBCreatedByNodeType",tC.getPropertyValue("nodetype"));
}
if (tC.getPropertyValue("expectDBDeleteUser") == "" || tC.getPropertyValue("expectDBDeleteUser") == null) {
		tC.setPropertyValue("expectDBDeleteUser",tC.getPropertyValue("useroid"));
}
if (tC.getPropertyValue("expectDBCreateUser") == "" || tC.getPropertyValue("expectDBCreateUser") == null) {
		tC.setPropertyValue("expectDBCreateUser",tC.getPropertyValue("useroid"));
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="Extract the STREAM_DATA row">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName xsi:nil="true"/>
          <con:driver>${#Project#JDBCDriver}</con:driver>
          <con:connectionString>${#Project#JDBCConnStr}</con:connectionString>
          <con:password/>
          <con:query>select * from STREAM_DATA where STREAM_HANDLE_OID = :sh</con:query>
          <con:properties>
            <con:property>
              <con:name>sh</con:name>
              <con:value>${#TestCase#streamhandle}</con:value>
            </con:property>
          </con:properties>
        </con:config>
      </con:testStep>
      <con:testStep type="transfer" name="Property Transfer">
        <con:settings/>
        <con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" useXQuery="false" entitize="false" transferChildNodes="false" ignoreEmpty="false" transferToAll="false">
            <con:name>a</con:name>
            <con:sourceType>ResponseAsXml</con:sourceType>
            <con:sourceStep>Extract the STREAM_DATA row</con:sourceStep>
            <con:targetType>dbxmlresponse</con:targetType>
            <con:targetStep>#TestCase#</con:targetStep>
          </con:transfers>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify DB Row Data">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = tP.getPropertyValue("targetHost");
def urnacct   = tP.getPropertyValue("urnaccount");
def urnstream = tP.getPropertyValue("urnstream");
def urnnode   = tP.getPropertyValue("urnNode");
def acct      = tC.getPropertyValue("nodeaccountid");

String XMLbody = tC.getPropertyValue("dbxmlresponse");
String expectStreamHandle = tC.getPropertyValue("streamhandle");
String expectAccountOID   = tC.getPropertyValue("accountoid");
String expectRightsToken  = tC.getPropertyValue("rightstokenid");
String expectUserOID      = tC.getPropertyValue("expectDBCreateUser");
String expectStatus       = tC.getPropertyValue("expectDBStatus");
String expectDBCreatedBy  = tC.getPropertyValue("expectDBCreatedBy");
String expectDBClosedBy   = urnnode + tC.getPropertyValue("expectDBDeletedBy");
String streamCreateNodeType = tC.getPropertyValue("expectDBCreatedByNodeType");

if (XMLbody != null) {
	def myXML = new XmlSlurper().parseText(XMLbody);

	// Verify sizes...
	assert myXML.ResultSet.Row.STREAM_HANDLE_OID	.size() == 1;
	assert myXML.ResultSet.Row.ACCOUNT_OID.size() == 1;
	assert myXML.ResultSet.Row.RIGHTS_TOKEN_OID.size() == 1;
	assert myXML.ResultSet.Row.STATUS.size() == 1;
	assert myXML.ResultSet.Row.CREATED_BY.size() == 1;
	assert myXML.ResultSet.Row.CLOSED_BY_ORG_ID.size() == 1;
	assert myXML.ResultSet.Row.CLOSED_DATE.size() == 1;
	
	String dbStreamHandle = myXML.ResultSet.Row.STREAM_HANDLE_OID.text();
	String dbAccountOid   = myXML.ResultSet.Row.ACCOUNT_OID.text();
	String dbRightsToken  = myXML.ResultSet.Row.RIGHTS_TOKEN_OID.text();
	String dbUserOid      = myXML.ResultSet.Row.USER_OID.text();
	String dbStatus       = myXML.ResultSet.Row.STATUS.text();
	String dbCreatedBy    = myXML.ResultSet.Row.CREATED_BY.text();
	String dbClosedBy     = myXML.ResultSet.Row.CLOSED_BY_ORG_ID.text();
	String dbClosedDate   = myXML.ResultSet.Row.CLOSED_DATE.text();
	
	//STREAM_HANDLE_OID
	this.log.info "dbStreamHandle [$dbStreamHandle] - expectStreamHandle[$expectStreamHandle]";
	assert expectStreamHandle == dbStreamHandle;

	//ACCOUNT_OID
	this.log.info "dbAccountOid [$dbAccountOid] - expectAccountOID[$expectAccountOID]";
	assert expectAccountOID == dbAccountOid;

	//RIGHTS_TOKEN_OID
	this.log.info "dbRightsToken [$dbRightsToken] - expectRightsToken[$expectRightsToken]";
	assert dbRightsToken == expectRightsToken;

	//USER_OID
	this.log.info "dbUserOid [$dbUserOid] - expectUserOID[$expectUserOID]";
	if (streamCreateNodeType == "llp" || streamCreateNodeType == "llpcs") {
		assert dbUserOid == "";
	} else {
		assert dbUserOid == expectUserOID;
	}

	//STATUS
	this.log.info "dbStatus [$dbStatus] - expectStatus[$expectStatus]";
	assert dbStatus == expectStatus;

	//CREATED_BY
	this.log.info "dbCreatedBy [$dbCreatedBy] - expectDBCreatedBy[$expectDBCreatedBy]";
	assert dbCreatedBy == expectDBCreatedBy;

	//CLOSED_BY
	this.log.info "dbClosedBy [$dbClosedBy] - expectDBClosedBy[$expectDBClosedBy]";
	if (expectStatus == "active") {
		assert dbClosedBy == "";
	} else {
		assert dbClosedBy == expectDBClosedBy;
	}

	//CLOSED_DATE
	this.log.info "dbClosedDate [$dbClosedDate]";
	if (expectStatus == "active") {
		assert dbClosedBy == "";
	} else {
		assert dbClosedBy.length() > 0;
	}
} else {
	assert 1 == 2;
}</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value>0900</con:value>
        </con:property>
        <con:property>
          <con:name>dbxmlresponse</con:name>
          <con:value><![CDATA[<Results>
    <ResultSet fetchSize="10">
        <Row rowNumber="1">
            <STREAM_HANDLE_OID>978DCC35FCD87C08E0401F0A05996438</STREAM_HANDLE_OID>
            <RIGHTS_TOKEN_OID>978DCC35FCC77C08E0401F0A05996438</RIGHTS_TOKEN_OID>
            <ACCOUNT_OID>0900</ACCOUNT_OID>
            <USER_OID>0600</USER_OID>
            <TRANSACTION_ID/>
            <STATUS>deleted</STATUS>
            <STREAM_CLIENT_NICKNAME/>
            <EXPIRATION_DATE>2010-12-09 23:08:53</EXPIRATION_DATE>
            <CLOSED_DATE>2010-12-16 23:08:54.21</CLOSED_DATE>
            <CLOSED_BY_ORG_ID>urn:dece:org:org:dece:1</CLOSED_BY_ORG_ID>
            <CREATED_DATE>2010-12-16 23:08:50.482</CREATED_DATE>
            <CREATED_BY>9116</CREATED_BY>
            <UPDATED_DATE/>
            <UPDATED_BY/>
        </Row>
    </ResultSet>
</Results>]]></con:value>
        </con:property>
        <con:property>
          <con:name>expectDBCreatedBy</con:name>
          <con:value>9116</con:value>
        </con:property>
        <con:property>
          <con:name>expectDBCreatedByNodeType</con:name>
          <con:value>dlpcs</con:value>
        </con:property>
        <con:property>
          <con:name>expectDBCreateUser</con:name>
          <con:value>0600</con:value>
        </con:property>
        <con:property>
          <con:name>expectDBDeletedBy</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>expectDBDeleteUser</con:name>
          <con:value>0600</con:value>
        </con:property>
        <con:property>
          <con:name>expectDBStatus</con:name>
          <con:value>deleted</con:value>
        </con:property>
        <con:property>
          <con:name>expectJDBCSQL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectNickname</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectSQLDefault</con:name>
          <con:value><![CDATA[<Results>     <ResultSet fetchSize="10">         <Row rowNumber="1">             <STREAM_HANDLE_OID>975DA31F89B0B21EE0401F0A059979D9</STREAM_HANDLE_OID>             <RIGHTS_TOKEN_OID>975DA31F899FB21EE0401F0A059979D9</RIGHTS_TOKEN_OID>             <ACCOUNT_OID>0900</ACCOUNT_OID>             <USER_OID/>             <TRANSACTION_ID/>             <STATUS>deleted</STATUS>             <STREAM_CLIENT_NICKNAME/>             <EXPIRATION_DATE>2010-12-15 11:29:52.337</EXPIRATION_DATE>             <CLOSED_DATE>2010-12-14 11:29:53.657</CLOSED_DATE>             <CLOSED_BY_ORG_ID>urn:dece:org:org:dece:0910</CLOSED_BY_ORG_ID>             <CREATED_DATE>2010-12-14 11:29:52.335</CREATED_DATE>             <CREATED_BY>${#TestCase#nodeid}</CREATED_BY>             <UPDATED_DATE/>             <UPDATED_BY/>         </Row>     </ResultSet> </Results>]]></con:value>
        </con:property>
        <con:property>
          <con:name>expectSQLDefaultLLP</con:name>
          <con:value><![CDATA[<Results>     <ResultSet fetchSize="10">         <Row rowNumber="1">             <STREAM_HANDLE_OID>*</STREAM_HANDLE_OID>             <RIGHTS_TOKEN_OID>${#TestCase#rightstokenid}</RIGHTS_TOKEN_OID>             <ACCOUNT_OID>${#TestCase#accountoid}</ACCOUNT_OID>             <USER_OID/>             <TRANSACTION_ID/>             <STATUS>${#TestCase#expectDBStatus}</STATUS>             <STREAM_CLIENT_NICKNAME/>             <EXPIRATION_DATE>*</EXPIRATION_DATE>             <CLOSED_DATE>*</CLOSED_DATE>             <CLOSED_BY_ORG_ID>${#Project#urnNode}${#TestCase#expectDBDeletedBy}</CLOSED_BY_ORG_ID>             <CREATED_DATE>*</CREATED_DATE>             <CREATED_BY>${#TestCase#expectDBCreatedBy}</CREATED_BY>             <UPDATED_DATE/>             <UPDATED_BY/>         </Row>     </ResultSet> </Results>]]></con:value>
        </con:property>
        <con:property>
          <con:name>expectSQLwithNickname</con:name>
          <con:value><![CDATA[<Results>    <ResultSet fetchSize="10">      <Row rowNumber="1">        <STREAM_HANDLE_OID>${#TestCase#streamhandle}</STREAM_HANDLE_OID>        <RIGHTS_TOKEN_OID>${#TestCase#rightstokenid}</RIGHTS_TOKEN_OID>        <ACCOUNT_OID>${#TestCase#accountoid}</ACCOUNT_OID>        <USER_OID>${#TestCase#useroid}</USER_OID>        <TRANSACTION_ID/>        <STATUS>${#TestCase#expectStatus}</STATUS>        <STREAM_CLIENT_NICKNAME>${#TestCase#expectNickname}</STREAM_CLIENT_NICKNAME>        <EXPIRATION_DATE>*</EXPIRATION_DATE>        <CLOSED_DATE/>        <CLOSED_BY_ORG_ID/>        <CREATED_DATE>*</CREATED_DATE>        <CREATED_BY>${#TestCase#nodeid}</CREATED_BY>        <UPDATED_DATE/>        <UPDATED_BY/>      </Row>    </ResultSet>  </Results>]]></con:value>
        </con:property>
        <con:property>
          <con:name>expectSQLwithNicknameLLP</con:name>
          <con:value><![CDATA[<Results>    <ResultSet fetchSize="10">      <Row rowNumber="1">        <STREAM_HANDLE_OID>${#TestCase#streamhandle}</STREAM_HANDLE_OID>        <RIGHTS_TOKEN_OID>${#TestCase#rightstokenid}</RIGHTS_TOKEN_OID>        <ACCOUNT_OID>${#TestCase#accountoid}</ACCOUNT_OID>        <USER_OID/>        <TRANSACTION_ID/>        <STATUS>${#TestCase#expectStatus}</STATUS>        <STREAM_CLIENT_NICKNAME>${#TestCase#expectNickname}</STREAM_CLIENT_NICKNAME>        <EXPIRATION_DATE>*</EXPIRATION_DATE>        <CLOSED_DATE/>        <CLOSED_BY_ORG_ID/>        <CREATED_DATE>*</CREATED_DATE>        <CREATED_BY>${#TestCase#nodeid}</CREATED_BY>        <UPDATED_DATE/>        <UPDATED_BY/>      </Row>    </ResultSet>  </Results>]]></con:value>
        </con:property>
        <con:property>
          <con:name>expectSQLwithTransaction</con:name>
          <con:value><![CDATA[<Results>    <ResultSet fetchSize="10">      <Row rowNumber="1">        <STREAM_HANDLE_OID>${#TestCase#streamhandle}</STREAM_HANDLE_OID>        <RIGHTS_TOKEN_OID>${#TestCase#rightstokenid}</RIGHTS_TOKEN_OID>        <ACCOUNT_OID>${#TestCase#accountoid}</ACCOUNT_OID>        <USER_OID>${#TestCase#useroid}</USER_OID>        <TRANSACTION_ID>${#TestCase#expectTransactionid}</TRANSACTION_ID>        <STATUS>${#TestCase#expectStatus}</STATUS>        <STREAM_CLIENT_NICKNAME/>        <EXPIRATION_DATE>*</EXPIRATION_DATE>        <CLOSED_DATE/>        <CLOSED_BY_ORG_ID/>        <CREATED_DATE>*</CREATED_DATE>        <CREATED_BY>${#TestCase#nodeid}</CREATED_BY>        <UPDATED_DATE/>        <UPDATED_BY/>      </Row>    </ResultSet>  </Results>]]></con:value>
        </con:property>
        <con:property>
          <con:name>expectSQLwithTransactionLLP</con:name>
          <con:value><![CDATA[<Results>    <ResultSet fetchSize="10">      <Row rowNumber="1">        <STREAM_HANDLE_OID>${#TestCase#streamhandle}</STREAM_HANDLE_OID>        <RIGHTS_TOKEN_OID>${#TestCase#rightstokenid}</RIGHTS_TOKEN_OID>        <ACCOUNT_OID>${#TestCase#accountoid}</ACCOUNT_OID>        <USER_OID/>        <TRANSACTION_ID>${#TestCase#expectTransactionid}</TRANSACTION_ID>        <STATUS>${#TestCase#expectStatus}</STATUS>        <STREAM_CLIENT_NICKNAME/>        <EXPIRATION_DATE>*</EXPIRATION_DATE>        <CLOSED_DATE/>        <CLOSED_BY_ORG_ID/>        <CREATED_DATE>*</CREATED_DATE>        <CREATED_BY>${#TestCase#nodeid}</CREATED_BY>        <UPDATED_DATE/>        <UPDATED_BY/>      </Row>    </ResultSet>  </Results>]]></con:value>
        </con:property>
        <con:property>
          <con:name>expectStatus</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectTransactionid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>9116</con:value>
        </con:property>
        <con:property>
          <con:name>nodetype</con:name>
          <con:value>dlpcs</con:value>
        </con:property>
        <con:property>
          <con:name>rightstokenid</con:name>
          <con:value>978DCC35FCC77C08E0401F0A05996438</con:value>
        </con:property>
        <con:property>
          <con:name>sName</con:name>
          <con:value>Dynamic LASP Customer Service Test Cases</con:value>
        </con:property>
        <con:property>
          <con:name>streamhandle</con:name>
          <con:value>978DCC35FCD87C08E0401F0A05996438</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>tName</con:name>
          <con:value>TC_DECE_01751 - StreamDelete - FUNC - DLASP-CS - StreamNotFound - StreamDelete against a stream with EXPIRATION_DATE 7 days into the past</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value>0600</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Verification of STREAM_DATA_HISTORY row" searchProperties="true" disabled="true">
      <con:settings/>
      <con:testStep type="groovy" name="Establish Test Case Properties">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("accountoid",null);
tC.setPropertyValue("useroid",null);
tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("nodetype",null);
tC.setPropertyValue("streamhandle",null);
tC.setPropertyValue("dbxmlresponse",null);
tC.setPropertyValue("rightstokenid",null);
tC.setPropertyValue("expectDBStatus",null);
tC.setPropertyValue("expectTransactionid",null);
tC.setPropertyValue("expectNickname",null);
tC.setPropertyValue("expectJDBCSQL",null);
tC.setPropertyValue("expectDBCreatedBy",null);
tC.setPropertyValue("expectDBDeletedBy",null);
tC.setPropertyValue("expectDBStatus",null);
tC.setPropertyValue("expectDBCreateUser",null);
tC.setPropertyValue("expectDBDeleteUser",null);
tC.setPropertyValue("expectDBCreatedByNodeType",null);</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract Calling Test Case Properties">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("accountoid",callTC.getPropertyValue("accountoid"));
tC.setPropertyValue("useroid",callTC.getPropertyValue("useroid"));
tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("nodetype",callTC.getPropertyValue("nodetype"));
tC.setPropertyValue("streamhandle",callTC.getPropertyValue("streamhandle"));
tC.setPropertyValue("rightstokenid",callTC.getPropertyValue("rightstokenid"));
tC.setPropertyValue("expectStatus",callTC.getPropertyValue("expectStreamStatus"));
tC.setPropertyValue("expectTransactionid",callTC.getPropertyValue("expectTransactionid"));
tC.setPropertyValue("expectNickname",callTC.getPropertyValue("expectNickname"));
tC.setPropertyValue("expectDBCreatedBy",callTC.getPropertyValue("expectDBCreatedBy"));
tC.setPropertyValue("expectDBDeletedBy",callTC.getPropertyValue("expectDBDeletedBy"));
tC.setPropertyValue("expectDBStatus",callTC.getPropertyValue("expectDBStatus"));
tC.setPropertyValue("expectDBCreatedByNodeType",callTC.getPropertyValue("expectDBCreatedByNodeType"));
tC.setPropertyValue("expectDBCreateUser",callTC.getPropertyValue("expectDBCreateUser"));
tC.setPropertyValue("expectDBDeleteUser",callTC.getPropertyValue("expectDBDeleteUser"));


if (tC.getPropertyValue("expectDBStatus") == "" || tC.getPropertyValue("expectDBStatus") == null) {
		tC.setPropertyValue("expectDBStatus","deleted");
}
if (tC.getPropertyValue("expectDBCreatedByNodeType") == "" || tC.getPropertyValue("expectDBCreatedByNodeType") == null) {
		tC.setPropertyValue("expectDBCreatedByNodeType",tC.getPropertyValue("nodetype"));
}
if (tC.getPropertyValue("expectDBDeleteUser") == "" || tC.getPropertyValue("expectDBDeleteUser") == null) {
		tC.setPropertyValue("expectDBDeleteUser",tC.getPropertyValue("useroid"));
}
if (tC.getPropertyValue("expectDBCreateUser") == "" || tC.getPropertyValue("expectDBCreateUser") == null) {
		tC.setPropertyValue("expectDBCreateUser",tC.getPropertyValue("useroid"));
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="jdbc" name="Extract the STREAM_DATA_HISTORY row">
        <con:settings/>
        <con:config xsi:type="con:JdbcRequestTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dbConnectionName xsi:nil="true"/>
          <con:driver>${#Project#JDBCDriver}</con:driver>
          <con:connectionString>${#Project#JDBCConnStr}</con:connectionString>
          <con:password/>
          <con:query>select * from STREAM_DATA_HISTORY where STREAM_HANDLE_OID = :sh and STATUS = :status</con:query>
          <con:properties>
            <con:property>
              <con:name>sh</con:name>
              <con:value>${#TestCase#streamhandle}</con:value>
            </con:property>
            <con:property>
              <con:name>status</con:name>
              <con:value>${#TestCase#expectDBStatus}</con:value>
            </con:property>
          </con:properties>
        </con:config>
      </con:testStep>
      <con:testStep type="transfer" name="Property Transfer">
        <con:settings/>
        <con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" useXQuery="false" entitize="false" transferChildNodes="false" ignoreEmpty="false" transferToAll="false">
            <con:name>a</con:name>
            <con:sourceType>ResponseAsXml</con:sourceType>
            <con:sourceStep>Extract the STREAM_DATA_HISTORY row</con:sourceStep>
            <con:targetType>dbxmlresponse</con:targetType>
            <con:targetStep>#TestCase#</con:targetStep>
          </con:transfers>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify DB Row Data">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url       = tP.getPropertyValue("targetHost");
def urnacct   = tP.getPropertyValue("urnaccount");
def urnstream = tP.getPropertyValue("urnstream");
def urnnode   = tP.getPropertyValue("urnNode");
def acct      = tC.getPropertyValue("nodeaccountid");

String XMLbody = tC.getPropertyValue("dbxmlresponse");
String expectStreamHandle = tC.getPropertyValue("streamhandle");
String expectAccountOID   = tC.getPropertyValue("accountoid");
String expectRightsToken  = tC.getPropertyValue("rightstokenid");
String expectUserOID      = tC.getPropertyValue("expectDBCreateUser");
String expectStatus       = tC.getPropertyValue("expectDBStatus");
String expectDBCreatedBy  = tC.getPropertyValue("expectDBCreatedBy");
String expectDBClosedBy   = urnnode + tC.getPropertyValue("expectDBDeletedBy");
String streamCreateNodeType = tC.getPropertyValue("expectDBCreatedByNodeType");

if (XMLbody != null) {
	def myXML = new XmlSlurper().parseText(XMLbody);

	// Verify sizes...
	assert myXML.ResultSet.Row.STREAM_HISTORY_OID.size() == 1;
	assert myXML.ResultSet.Row.STREAM_HANDLE_OID	.size() == 1;
	assert myXML.ResultSet.Row.ACCOUNT_OID.size() == 1;
	assert myXML.ResultSet.Row.RIGHTS_TOKEN_OID.size() == 1;
	assert myXML.ResultSet.Row.STATUS.size() == 1;
	assert myXML.ResultSet.Row.CREATED_BY.size() == 1;
	assert myXML.ResultSet.Row.CLOSED_BY_ORG_ID.size() == 1;
	assert myXML.ResultSet.Row.CLOSED_DATE.size() == 1;
	
	String dbStreamHandle = myXML.ResultSet.Row.STREAM_HANDLE_OID.text();
	String dbAccountOid   = myXML.ResultSet.Row.ACCOUNT_OID.text();
	String dbRightsToken  = myXML.ResultSet.Row.RIGHTS_TOKEN_OID.text();
	String dbUserOid      = myXML.ResultSet.Row.USER_OID.text();
	String dbStatus       = myXML.ResultSet.Row.STATUS.text();
	String dbCreatedBy    = myXML.ResultSet.Row.CREATED_BY.text();
	String dbClosedBy     = myXML.ResultSet.Row.CLOSED_BY_ORG_ID.text();
	String dbClosedDate   = myXML.ResultSet.Row.CLOSED_DATE.text();
	
	//STREAM_HANDLE_OID
	this.log.info "dbStreamHandle [$dbStreamHandle] - expectStreamHandle[$expectStreamHandle]";
	assert expectStreamHandle == dbStreamHandle;

	//ACCOUNT_OID
	this.log.info "dbAccountOid [$dbAccountOid] - expectAccountOID[$expectAccountOID]";
	assert expectAccountOID == dbAccountOid;

	//RIGHTS_TOKEN_OID
	this.log.info "dbRightsToken [$dbRightsToken] - expectRightsToken[$expectRightsToken]";
	assert dbRightsToken == expectRightsToken;

	//USER_OID
	this.log.info "dbUserOid [$dbUserOid] - expectUserOID[$expectUserOID]";
	if (streamCreateNodeType == "llp" || streamCreateNodeType == "llpcs") {
		assert dbUserOid == "";
	} else {
		assert dbUserOid == expectUserOID;
	}

	//STATUS
	this.log.info "dbStatus [$dbStatus] - expectStatus[$expectStatus]";
	assert dbStatus == expectStatus;

	//CREATED_BY
	this.log.info "dbCreatedBy [$dbCreatedBy] - expectStatus[$expectStatus]";
	assert dbCreatedBy == expectDBCreatedBy;

	//CLOSED_BY
	this.log.info "dbClosedBy [$dbClosedBy] - expectDBClosedBy[$expectDBClosedBy]";
	if (expectStatus == "active") {
		assert dbClosedBy == "";
	} else {
		assert dbClosedBy == expectDBClosedBy;
	}

	//CLOSED_DATE
	this.log.info "dbClosedDate [$dbClosedDate]";
	if (expectStatus == "active") {
		assert dbClosedBy == "";
	} else {
		assert dbClosedBy.length() > 0;
	}
} else {
	assert 1 == 2;
}</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>tName</con:name>
          <con:value>TC_DECE_01751 - StreamDelete - FUNC - DLASP-CS - StreamNotFound - StreamDelete against a stream with EXPIRATION_DATE 7 days into the past</con:value>
        </con:property>
        <con:property>
          <con:name>sName</con:name>
          <con:value>Dynamic LASP Customer Service Test Cases</con:value>
        </con:property>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value>0900</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value>0600</con:value>
        </con:property>
        <con:property>
          <con:name>streamhandle</con:name>
          <con:value>978DCC35FCD87C08E0401F0A05996438</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>9116</con:value>
        </con:property>
        <con:property>
          <con:name>expectTransactionid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectNickname</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectJDBCSQL</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectSQLwithTransaction</con:name>
          <con:value><![CDATA[<Results>    <ResultSet fetchSize="10">      <Row rowNumber="1">        <STREAM_HISTORY_OID>*</STREAM_HISTORY_OID>        <STREAM_HANDLE_OID>${#TestCase#streamhandle}</STREAM_HANDLE_OID>        <RIGHTS_TOKEN_OID>${#TestCase#rightstokenid}</RIGHTS_TOKEN_OID>        <ACCOUNT_OID>${#TestCase#accountoid}</ACCOUNT_OID>        <USER_OID>${#TestCase#useroid}</USER_OID>        <TRANSACTION_ID>${#TestCase#expectTransactionid}</TRANSACTION_ID>        <STATUS>${#TestCase#expectStatus}</STATUS>        <STREAM_CLIENT_NICKNAME/>        <EXPIRATION_DATE>*</EXPIRATION_DATE>        <CLOSED_DATE/>        <CLOSED_BY_ORG_ID/>        <CREATED_DATE>*</CREATED_DATE>        <CREATED_BY>${#TestCase#nodeid}</CREATED_BY>        <UPDATED_BY/>        <UPDATED_DATE/>      </Row>    </ResultSet>  </Results>]]></con:value>
        </con:property>
        <con:property>
          <con:name>expectSQLDefault</con:name>
          <con:value><![CDATA[<Results>    <ResultSet fetchSize="10">      <Row rowNumber="1">        <STREAM_HISTORY_OID>*</STREAM_HISTORY_OID>        <STREAM_HANDLE_OID>${#TestCase#streamhandle}</STREAM_HANDLE_OID>        <RIGHTS_TOKEN_OID>${#TestCase#rightstokenid}</RIGHTS_TOKEN_OID>        <ACCOUNT_OID>${#TestCase#accountoid}</ACCOUNT_OID>        <USER_OID>${#TestCase#useroid}</USER_OID>        <TRANSACTION_ID/>        <STATUS>${#TestCase#expectStatus}</STATUS>        <STREAM_CLIENT_NICKNAME>${#TestCase#expectNickname}</STREAM_CLIENT_NICKNAME>        <EXPIRATION_DATE>*</EXPIRATION_DATE>        <CLOSED_DATE/>        <CLOSED_BY_ORG_ID/>        <CREATED_DATE>*</CREATED_DATE>        <CREATED_BY>${#TestCase#nodeid}</CREATED_BY>        <UPDATED_BY/>        <UPDATED_DATE/>      </Row>    </ResultSet>  </Results>]]></con:value>
        </con:property>
        <con:property>
          <con:name>expectSQLwithNickname</con:name>
          <con:value><![CDATA[<Results>    <ResultSet fetchSize="10">      <Row rowNumber="1">        <STREAM_HISTORY_OID>*</STREAM_HISTORY_OID>        <STREAM_HANDLE_OID>${#TestCase#streamhandle}</STREAM_HANDLE_OID>        <RIGHTS_TOKEN_OID>${#TestCase#rightstokenid}</RIGHTS_TOKEN_OID>        <ACCOUNT_OID>${#TestCase#accountoid}</ACCOUNT_OID>        <USER_OID>${#TestCase#useroid}</USER_OID>        <TRANSACTION_ID/>        <STATUS>${#TestCase#expectStatus}</STATUS>        <STREAM_CLIENT_NICKNAME>${#TestCase#expectNickname}</STREAM_CLIENT_NICKNAME>       <EXPIRATION_DATE>*</EXPIRATION_DATE>        <CLOSED_DATE/>        <CLOSED_BY_ORG_ID/>        <CREATED_DATE>*</CREATED_DATE>        <CREATED_BY>${#TestCase#nodeid}</CREATED_BY>        <UPDATED_BY/>        <UPDATED_DATE/>      </Row>    </ResultSet>  </Results>]]></con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>expectSQLDefaultLLP</con:name>
          <con:value><![CDATA[<Results>     <ResultSet fetchSize="10">         <Row rowNumber="1">             <STREAM_HISTORY_OID>*</STREAM_HISTORY_OID>             <STREAM_HANDLE_OID>${#TestCase#streamhandle}</STREAM_HANDLE_OID>             <RIGHTS_TOKEN_OID>${#TestCase#rightstokenid}</RIGHTS_TOKEN_OID>             <ACCOUNT_OID>${#TestCase#accountoid}</ACCOUNT_OID>             <USER_OID/>             <TRANSACTION_ID/>             <STATUS>deleted</STATUS>             <STREAM_CLIENT_NICKNAME/>             <EXPIRATION_DATE>*</EXPIRATION_DATE>             <CLOSED_DATE>*</CLOSED_DATE>             <CLOSED_BY_ORG_ID>${#Project#urnNode}${#TestCase#expectDBDeletedBy}</CLOSED_BY_ORG_ID>             <CREATED_DATE>*</CREATED_DATE>             <CREATED_BY>${#TestCase#expectDBCreatedBy}</CREATED_BY>             <UPDATED_BY/>             <UPDATED_DATE/>         </Row>     </ResultSet> </Results>]]></con:value>
        </con:property>
        <con:property>
          <con:name>nodetype</con:name>
          <con:value>dlpcs</con:value>
        </con:property>
        <con:property>
          <con:name>expectSQLwithTransactionLLP</con:name>
          <con:value><![CDATA[<Results>    <ResultSet fetchSize="10">      <Row rowNumber="1">        <STREAM_HISTORY_OID>*</STREAM_HISTORY_OID>        <STREAM_HANDLE_OID>${#TestCase#streamhandle}</STREAM_HANDLE_OID>        <RIGHTS_TOKEN_OID>${#TestCase#rightstokenid}</RIGHTS_TOKEN_OID>        <ACCOUNT_OID>${#TestCase#accountoid}</ACCOUNT_OID>        <USER_OID/>        <TRANSACTION_ID>${#TestCase#expectTransactionid}</TRANSACTION_ID>        <STATUS>${#TestCase#expectStatus}</STATUS>        <STREAM_CLIENT_NICKNAME/>        <EXPIRATION_DATE>*</EXPIRATION_DATE>        <CLOSED_DATE/>        <CLOSED_BY_ORG_ID/>        <CREATED_DATE>*</CREATED_DATE>        <CREATED_BY>${#TestCase#nodeid}</CREATED_BY>        <UPDATED_BY/>        <UPDATED_DATE/>      </Row>    </ResultSet>  </Results>]]></con:value>
        </con:property>
        <con:property>
          <con:name>expectSQLwithNicknameLLP</con:name>
          <con:value><![CDATA[<Results>    <ResultSet fetchSize="10">      <Row rowNumber="1">        <STREAM_HISTORY_OID>*</STREAM_HISTORY_OID>        <STREAM_HANDLE_OID>${#TestCase#streamhandle}</STREAM_HANDLE_OID>        <RIGHTS_TOKEN_OID>${#TestCase#rightstokenid}</RIGHTS_TOKEN_OID>        <ACCOUNT_OID>${#TestCase#accountoid}</ACCOUNT_OID>        <USER_OID/>       <TRANSACTION_ID/>        <STATUS>${#TestCase#expectStatus}</STATUS>        <STREAM_CLIENT_NICKNAME>${#TestCase#expectNickname}</STREAM_CLIENT_NICKNAME>       <EXPIRATION_DATE>*</EXPIRATION_DATE>        <CLOSED_DATE/>        <CLOSED_BY_ORG_ID/>        <CREATED_DATE>*</CREATED_DATE>        <CREATED_BY>${#TestCase#nodeid}</CREATED_BY>        <UPDATED_BY/>        <UPDATED_DATE/>      </Row>    </ResultSet>  </Results>]]></con:value>
        </con:property>
        <con:property>
          <con:name>expectDBCreatedBy</con:name>
          <con:value>9116</con:value>
        </con:property>
        <con:property>
          <con:name>expectDBDeletedBy</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>expectDBStatus</con:name>
          <con:value>deleted</con:value>
        </con:property>
        <con:property>
          <con:name>dbxmlresponse</con:name>
          <con:value><![CDATA[<Results>
    <ResultSet fetchSize="10">
        <Row rowNumber="1">
            <STREAM_HISTORY_OID>978DCC35FCDE7C08E0401F0A05996438</STREAM_HISTORY_OID>
            <STREAM_HANDLE_OID>978DCC35FCD87C08E0401F0A05996438</STREAM_HANDLE_OID>
            <RIGHTS_TOKEN_OID>978DCC35FCC77C08E0401F0A05996438</RIGHTS_TOKEN_OID>
            <ACCOUNT_OID>0900</ACCOUNT_OID>
            <USER_OID>0600</USER_OID>
            <TRANSACTION_ID/>
            <STATUS>deleted</STATUS>
            <STREAM_CLIENT_NICKNAME/>
            <EXPIRATION_DATE>2010-12-09 23:08:53</EXPIRATION_DATE>
            <CLOSED_DATE>2010-12-16 23:08:54.21</CLOSED_DATE>
            <CLOSED_BY_ORG_ID>urn:dece:org:org:dece:1</CLOSED_BY_ORG_ID>
            <CREATED_DATE>2010-12-16 23:08:50.482</CREATED_DATE>
            <CREATED_BY>9116</CREATED_BY>
            <UPDATED_BY/>
            <UPDATED_DATE/>
        </Row>
    </ResultSet>
</Results>]]></con:value>
        </con:property>
        <con:property>
          <con:name>expectStatus</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>rightstokenid</con:name>
          <con:value>978DCC35FCC77C08E0401F0A05996438</con:value>
        </con:property>
        <con:property>
          <con:name>expectDBCreatedByNodeType</con:name>
          <con:value>dlpcs</con:value>
        </con:property>
        <con:property>
          <con:name>expectDBCreateUser</con:name>
          <con:value>0600</con:value>
        </con:property>
        <con:property>
          <con:name>expectDBDeleteUser</con:name>
          <con:value>0600</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Set a Property" searchProperties="true" disabled="true">
      <con:settings/>
      <con:testStep type="groovy" name="Set a Property">
        <con:settings/>
        <con:config>
          <script>//Copyright (c) 2010 Bhavin Bharat Joshi - Neustar, Inc.

//TestCase
def testCase  = testRunner.getTestCase();

//Get Arguments
def testSuite = testCase.getPropertyValue("TestSuite"); 
def propertyName;

def TCList = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseList();
def TCCount = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseCount();

for(i = 0; i &lt;= TCCount - 1; i++)
{	
	def targetTestCase = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseByName(TCList[i].name);	
	propertyName = testCase.getPropertyValue("PropertyName");	
	propertyValue = testCase.getPropertyValue("PropertyValue");		
	if(targetTestCase.isDisabled() == false)
	{
		try
		{
			/*nodeRole = targetTestCase.getPropertyValue("ErrorResponse");
			propertyName = "ErrorResponse";			
			if(nodeRole == 'ForbiddenRightsTokenAccessNotAllowed')
			{
				nodeRole = 'ForbiddenDiscreteMediaRightOwnerMismatch';
			}
			propertyValue = nodeRole;*/		
			targetTestCase.setPropertyValue(propertyName, propertyValue);
			log.info "Done with Test Case '" + TCList[i].name + "'";
		}
		catch(Throwable e)
		{
			log.info e.text;
		}		
	}	
}

log.info 'Woohoo!'</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>TestSuite</con:name>
          <con:value>FUNC_USER_CONSENT_POLICIES</con:value>
        </con:property>
        <con:property>
          <con:name>PropertyName</con:name>
          <con:value>NumberOfPolicyRequestingEntities</con:value>
        </con:property>
        <con:property>
          <con:name>PropertyValue</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value>true</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Rename Test Cases" searchProperties="true" disabled="true">
      <con:settings/>
      <con:testStep type="groovy" name="Rename Test Cases">
        <con:settings/>
        <con:config>
          <script>//Copyright (c) 2010 Bhavin Bharat Joshi - Neustar, Inc.

import java.io.*;

//TestCase
def testCase  = testRunner.getTestCase();

//Get Arguments
def testSuite = testCase.getPropertyValue("TestSuite"); 

def TCList = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseList();
def TCCount = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseCount();

def TCNum = 13;

//BufferedWriter bufferedWriter = null;
//bufferedWriter = new BufferedWriter(new FileWriter("c:\\DiscreteMediaLeaseCreateQuestions.txt"));

def oldTestCaseName;
def newTestCaseName;

for(i = 0; i &lt;= TCCount - 1; i++)
{	
	def targetTestCase = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseByName(TCList[i].name);
	//if(targetTestCase.isDisabled() == false)
	//{
		targetTestCase.setFailOnError(true);
		oldTestCaseName = TCList[i].name;
		newTestCaseName = oldTestCaseName.replace(" ", "");
		//newTestCaseName = newTestCaseName.replace("_POST_", "_GET_");
		//newTestCaseName = newTestCaseName.replace("_RTL_", "_RTL_CS_");
		newTestCaseName = newTestCaseName.replace("_PERM_", "_FUNC_");		
		if (TCNum.toString().length() == 1)
			newTestCaseName = "TC_DECE_0000" + TCNum.toString() + "_PolicyCreate" + newTestCaseName.split("PolicyCreate")[1]
		else if (TCNum.toString().length() == 2)
			newTestCaseName = "TC_DECE_000" + TCNum.toString() + "_PolicyCreate" + newTestCaseName.split("PolicyCreate")[1]
		else if (TCNum.toString().length() == 3)
			newTestCaseName = "TC_DECE_00" + TCNum.toString() + "_PolicyCreate" + newTestCaseName.split("PolicyCreate")[1]
		else if (TCNum.toString().length() == 4)
			newTestCaseName = "TC_DECE_0" + TCNum.toString() + "_PolicyCreate" + newTestCaseName.split("PolicyCreate")[1]
		targetTestCase.name = newTestCaseName;	
		TCNum = TCNum + 1;
		log.info "Done renaming Test Case '" + oldTestCaseName + "' to '" + newTestCaseName + "'";
	//}
	//else
	//{
	//	bufferedWriter.write(targetTestCase.name);
	//	bufferedWriter.newLine();
	//}
}

//if (bufferedWriter != null) {
	//bufferedWriter.flush();
     //bufferedWriter.close();
//}

log.info 'Woohoo!'</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>TestSuite</con:name>
          <con:value>PERM_ACCOUNT_CONSENT_POLICIES</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value>true</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Change a step's script for all Steps in a Suite" searchProperties="true" disabled="true">
      <con:settings/>
      <con:testStep type="groovy" name="Change a step's script for all Steps in a Suite">
        <con:settings/>
        <con:config>
          <script>//Copyright (c) 2010 Bhavin Bharat Joshi - Neustar, Inc.

//TestCase
def testCase  = testRunner.getTestCase();

//Get Arguments
def testSuite = "Dynamic LASP Test Cases"; 
//def oldString = """deleteTC.setPropertyValue("CallingTestSuiteName", testSuite.name);"""
//def newString = oldString + '\n' + """deleteTC.setPropertyValue("RequestorUUID", requestorUUID);"""

def oldString = """- LLASP -""";
def newString = """- DLASP -""";

def TCList = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseList();
def TCCount = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseCount();

for(i = 0; i &lt;= TCCount - 1; i++)
{			
	def targetTestCase = testRunner.testCase.testSuite.project.getTestSuiteByName(testSuite).getTestCaseByName(TCList[i].name);
	testStepList = targetTestCase.getTestStepList();
	testStepCount = targetTestCase.getTestStepCount();
	if(targetTestCase.isDisabled() == false)
	{
		for(j = 0; j &lt;= testStepCount - 1; j++)
		{
			try
			{
				targetTestStep = targetTestCase.getTestStepByName(testStepList[j].name);
				stepScript = testStepList[j].getScript();
				stepScript = stepScript.replace(oldString, newString);
				targetTestStep.setScript(stepScript);		
			}
			catch(Throwable e)
			{
				log.info e;
			}	
		}
	}
}						
log.info 'Woohoo!'</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>TestSuite</con:name>
          <con:value>RTL_CS</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value>true</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
  </con:testSuite>
  <con:testSuite name="Test Cases Containing APIs" disabled="true">
    <con:description/>
    <con:settings/>
    <con:runType>SEQUENTIAL</con:runType>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="STS API" searchProperties="true" id="7c5bc756-0664-4f9d-a753-a6c0a833331c">
      <con:settings/>
      <con:testStep type="groovy" name="Establish Test Case Properties">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assertXML",null);
tC.setPropertyValue("SAMLassertion",null);
tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("tokentype",null);
tC.setPropertyValue("expectErrTypeSTS",null);</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract Required Properties from Calling Test Case">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("username",callTC.getPropertyValue("username"));
tC.setPropertyValue("audience","urn:dece:org:org:dece:" + callTC.getPropertyValue("audienceNodeid"));
//tC.setPropertyValue("password",callTC.getPropertyValue("password"));
tC.setPropertyValue("tokentype",callTC.getPropertyValue("tokentype"));
tC.setPropertyValue("expectErrTypeSTS",callTC.getPropertyValue("expectErrTypeSTS"));</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="pem set">
        <con:settings/>
        <con:config><script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

String keyStorePath  = "";
String keyStoreAlias = "";
String nodeId = testCase.getPropertyValue("nodeid");

RestTestRequestStep  testStep = testCase.getTestStepByName("STS - POST");

//String keyStorePath = testCase.getPropertyValue("KeyStorePath");
//String keyStoreAlias = testCase.getPropertyValue("notValidExpiredNode");

switch (nodeId) {
	case "0799":
		keyStorePath = "C:\\DECE\\certs\\0799_concat.pem";
	break;
	case "0798":
		keyStorePath = "C:\\DECE\\certs\\0798_concat.pem";
	break;
	case "0701":
		keyStorePath = "C:\\DECE\\certs2\\0701_concat.pem";
	break;
	case "0702":
		keyStorePath = "C:\\DECE\\certs2\\0702_concat.pem";
}

this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script></con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="STS - POST">
        <con:settings/>
        <con:config service="STS" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/SecurityToken/SecurityTokenExchange/" methodName="STS - POST" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="STS - POST" mediaType="application/xml" postQueryString="false" sslKeystore="0701_concat.pem" accept="">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:endpoint>https://qa.p.uvvu.com:7001</con:endpoint>
            <con:request><![CDATA[<?xml version="1.0" encoding="UTF-8" standalone="yes" ?> 
  <Credentials xmlns="http://www.decellc.org/schema/2011/08/coordinator">
  <Username>${#TestCase#username}</Username> 
  <Password>${#TestCase#password}</Password> 
  </Credentials>]]></con:request>
            <con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters/>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract Response Body and Headers">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def tStep  = tC.getTestStepByName('STS - POST');

/*
*  Get the HTTP headers
*/
def status = tStep.httpRequest.response.responseHeaders["#status#"]; 
def connection = tStep.httpRequest.response.responseHeaders["Connection"];
def contentType = tStep.httpRequest.response.responseHeaders["Content-Type"];
def contentLength = tStep.httpRequest.response.responseHeaders["Content-Length"];
def contentLocation = tStep.httpRequest.response.responseHeaders["Location"];

tC.setPropertyValue("status", status[0]);
tC.setPropertyValue("connection", connection[0]);
tC.setPropertyValue("contentType", contentType[0]);
tC.setPropertyValue("contentLength", contentLength[0]);
tC.setPropertyValue("contentLocation", contentLocation[0]);

//this.log.info "contentLength [$contentLength]";

if (contentLength[0].toInteger() > 0) {
	rawResp = new ByteArrayOutputStream();
    def rawResp = tStep.httpRequest.response.getRawResponseData();
     strVal  = new String(rawResp);
      log.info strVal;

    int startAssert = strVal.indexOf("&lt;?xml version=\"1.0\" ");

    	//XMLbody =  strVal.tokenize('\n').last();

	String XMLbody  = strVal.substring(startAssert, strVal.length());
     
	tC.setPropertyValue("XMLbody", XMLbody);
}</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify Response Body and Headers and save assertion">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url           = tP.getPropertyValue("targetURL");
def urnacct       = tP.getPropertyValue("urnaccount");
//def urnstream     = tP.getPropertyValue("urnstream");
def expectErrType = tC.getPropertyValue("expectErrTypeSTS");
def XMLbody       = tC.getPropertyValue("XMLbody");
def nodeaccountid = tC.getPropertyValue("nodeaccountid");

boolean dobodyXML = true;
boolean doContentTypeHeader = true;
boolean doConnectionClose = false;
boolean doContentLocaton  = true;
boolean contentLengthZero = false;

String errorID     = "";
String errorReason = "";
String errorLink   = "";
String orgRequest  = url + "/rest/1/0/Account/" + urnacct + nodeaccountid;
String expectHTTPstatus = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml";

if (expectErrType == "") {
	expectErrType = "SUCCESS";
}

this.log.info "expectErrType is $expectErrType";
switch (expectErrType) {
	case "SUCCESS":
		expectHTTPstatus = "HTTP/1.1 201 Created";
		expectHTTPcontenttype = "text/plain; charset=UTF-8";
		contentLengthZero = true;
		doContentLocaton  = true;
		dobodyXML = false;
	break;
	case "FORBIDDEN":
	default:
		errorReason = "Forbidden";
		errorID = "Forbidden";
		errorLink = "";
		orgRequest = "";
		doContentLocaton  = false;
		dobodyXML = true;
	break;
}

// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("status");
assert tC.getPropertyValue("status") == expectHTTPstatus;

// Connection

if (doConnectionClose) {
	this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("connection");
	assert tC.getPropertyValue("connection") == expectHTTPconnection;
}


//Content-Length
if (contentLengthZero) {
	assert tC.getPropertyValue("contentLength").toInteger() == 0;
} else {
	assert tC.getPropertyValue("contentLength").toInteger() > 0;
}
	
//Content-Type
if (doContentTypeHeader) {
	assert tC.getPropertyValue("contentType") == expectHTTPcontenttype;
}

// Content-Location
if (doContentLocaton) {
	assert tC.getPropertyValue("contentLocation") != null;
	
	def b = tC.getPropertyValue("contentLocation").toURL();
	assert b.getPath().matches("/rest/1/07/SecurityToken/Assertion/[_,0-9,a-f,-]*");
	def parms = b.getPath().split("/");
	
	tC.setPropertyValue("assertionUUID",parms[parms.size() - 1]);
} else {
	assert tC.getPropertyValue("contentLocation") == null;
}

if (dobodyXML) {
	if (XMLbody.length() > 0) {
		def myXML = new XmlSlurper().parseText(XMLbody);

		// Verify response sizes...
		assert myXML.Error.size() == 1;
		assert myXML.Error.Reason.size() == 1;
		assert myXML.Error.OriginalRequest.size() == 1;
		assert myXML.Error.ErrorLink.size() == 1;
		
		// ErrorCode
		this.log.info "ErrorCode: Expect[$errorID] Received: " + myXML.Error.@ErrorID.toString();
		assert myXML.Error.@ErrorID.toString() == errorID;
	
		// ErrorReason
		this.log.info "ErrorReason: Expect[$errorReason] Received: " + myXML.Error.Reason.toString();
		assert myXML.Error.Reason.toString() == errorReason;

		// ErrorLink
		this.log.info "ErrorReason: Expect[$errorLink] Received: " + myXML.Error.ErrorLink.toString();
		assert myXML.Error.ErrorLink.toString() == errorLink;
	} else {
		return false;
	}
}</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Return the assertion to the Calling Test Case">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("assertionUUID",tC.getPropertyValue("assertionUUID"));</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify Response Headers and Body" disabled="true">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("TestSuite Utility Test Cases").getTestCaseByName("STS GET Response Validator")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runner = myTC.run( null, false );

assert runner.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>synced</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>tName</con:name>
          <con:value>Authorization Information Extraction via STS</con:value>
        </con:property>
        <con:property>
          <con:name>sName</con:name>
          <con:value>Test Configuration/Setup</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertXML</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>0701</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTS</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>sch-drm_user1</con:value>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>Password1</con:value>
        </con:property>
        <con:property>
          <con:name>status</con:name>
          <con:value>HTTP/1.1 403 Forbidden</con:value>
        </con:property>
        <con:property>
          <con:name>connection</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">close</con:value>
        </con:property>
        <con:property>
          <con:name>contentType</con:name>
          <con:value>application/xml</con:value>
        </con:property>
        <con:property>
          <con:name>contentLength</con:name>
          <con:value>573</con:value>
        </con:property>
        <con:property>
          <con:name>contentLocation</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">https://qa.q.uvvu.com:7001/rest/1/07/SecurityToken/Assertion/_e11ac976-cbd0-4cb6-9058-7713bde415af</con:value>
        </con:property>
        <con:property>
          <con:name>SAMLassertion</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>XMLbody</con:name>
          <con:value><![CDATA[<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<ErrorList xmlns="http://www.decellc.org/schema/2010/10/dece" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#" >
<Error ErrorID="Forbidden">
       <Reason>Forbidden</Reason>
        <OriginalRequest></OriginalRequest>
       <ErrorLink></ErrorLink>
    </Error>
</ErrorList>]]></con:value>
        </con:property>
      <con:property><con:name>audience</con:name><con:value>urn:dece:org:org:dece:0702</con:value></con:property></con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="STS GET API" searchProperties="true" id="a012a2d8-5b45-4e6a-83dc-ce03e2dfb615">
      <con:settings/>
      <con:testStep type="groovy" name="Establish Test Case Properties">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("assertionUUID",null);
tC.setPropertyValue("assertXML",null);
tC.setPropertyValue("assert",null);
tC.setPropertyValue("assertId",null);
tC.setPropertyValue("assertionAccountId",null);
tC.setPropertyValue("assertionUserId",null);
tC.setPropertyValue("assertionAccountIdFULL",null);
tC.setPropertyValue("assertionUserIdFULL",null);
tC.setPropertyValue("nodeid",null);
tC.setPropertyValue("expectErrTypeSTSGet",null);</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract Required Properties from Calling Test Case">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

tC.setPropertyValue("assertionUUID",callTC.getPropertyValue("assertionUUID"));
tC.setPropertyValue("nodeid",callTC.getPropertyValue("nodeid"));
tC.setPropertyValue("expectErrTypeSTSGet",callTC.getPropertyValue("expectErrTypeSTSGet"));</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="pem set">
        <con:settings/>
        <con:config>
          <script>import soapUIUtils.soapUIUtils;
import com.eviware.soapui.impl.wsdl.teststeps.RestTestRequestStep;

def testCase    = testRunner.getTestCase();
def testSuite   = testCase.getTestSuite();
def testProject = testSuite.getProject();

String keyStorePath  = "";
String keyStoreAlias = "";
String nodeId = testCase.getPropertyValue("nodeid");

RestTestRequestStep testStep = testCase.getTestStepByName("STS - GET");

//String keyStorePath = testCase.getPropertyValue("KeyStorePath");
//String keyStoreAlias = testCase.getPropertyValue("notValidExpiredNode");

switch (nodeId) {
	case "0799":
		keyStorePath = "C:\\DECE\\certs\\0799_concat.pem";
	break;
	case "0798":
		keyStorePath = "C:\\DECE\\certs\\0798_concat.pem";
	break;
	case "0701":
		keyStorePath = "C:\\DECE\\certs2\\0701_concat.pem";
	break;
	case "0702":
		keyStorePath = "C:\\DECE\\certs2\\0702_concat.pem";
}

this.log.info "testStep [$testStep]";
this.log.info "keyStorePathStep [$keyStorePath]";

soapUtils = new soapUIUtils(log);
soapUtils.setStepSSLSettingsKeyStore(testStep, keyStorePath);</script>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="STS - GET" id="33d79721-bd6e-409f-9363-efb2583acdb2"><con:settings/><con:config service="STS" resourcePath="/rest/${#Project#versionMajor}/${#Project#versionMinor}/SecurityToken/Assertion/{assertionUUID}" methodName="STS - GET" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="STS - GET" mediaType="application/xml" sslKeystore="0701_concat.pem">
          <con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings>
          <con:endpoint>https://qa.q.uvvu.com:7001</con:endpoint><con:request/><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/>
        </con:restRequest></con:config></con:testStep>
      <con:testStep type="delay" name="Delay 3">
        <con:settings/>
        <con:config>
          <delay>1000</delay>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract Response Body and Headers">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();
def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");
def tStep  = tC.getTestStepByName('STS - GET');

/*
*  Get the HTTP headers
*/
String status = null;
String connection = null;
String contentType = null;
String contentLength = null;
String contentLocation = null;
//String major = tP.getPropertyValue("versionMajor");
//String minor = tP.getPropertyValue("versionMinor");

tStep.httpRequest.response.responseHeaders.each() { header, value ->
	switch (header) {
		case "Location": 
			contentLocation = value[0];
			break;
		case "#status#": 
			status = value[0]; 
			break;
		case "Connection": 
			connection = value[0]; 
			break;
		case "Content-Type": 
			contentType = value[0]; 
			break;
		case "Content-Length": 
			contentLength = value[0]; 
			break;
		case "Transfer-Encoding": 
			httpContentEncoding = value[0]; 
			break;
	}
}

//def expXML = tStep.httpRequest.response.getResponseContent();
this.log.info tStep.httpRequest.response.getRawResponseData();
//new b = tStep.httpRequest.response.getResponseContent();
rawResp = new ByteArrayOutputStream();
rawResp = tStep.httpRequest.response.getRawResponseData();
strVal  = new String(rawResp);
log.info strVal;

int startAssert = strVal.indexOf("&lt;?xml version=\"1.0\" ");
String XMLbody  = strVal.substring(startAssert, strVal.length());

tC.setPropertyValue("XMLbody", XMLbody);
tC.setPropertyValue("status", status);
tC.setPropertyValue("connection", connection);
tC.setPropertyValue("contentType", contentType);
tC.setPropertyValue("contentLength", contentLength);
tC.setPropertyValue("contentLocation", contentLocation);</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify Response Headers and Body" disabled="true">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("TestSuite Utility Test Cases").getTestCaseByName("STS GET Response Validator")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runner = myTC.run( null, false );

assert runner.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify Response Body and Headers">
        <con:settings/>
        <con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def url           = tP.getPropertyValue("targetURL");
def urnacct       = tP.getPropertyValue("urnaccount");
//def urnstream     = tP.getPropertyValue("urnstream");
def expectErrType = tC.getPropertyValue("expectErrTypeSTSGet");
def XMLbody       = tC.getPropertyValue("XMLbody");
def nodeaccountid = tC.getPropertyValue("nodeaccountid");

boolean dobodyXML = true;
boolean doContentTypeHeader = true;
boolean doConnectionClose = false;
boolean doContentLocaton  = false;
boolean contentLengthZero = false;

String errorID     = "";
String errorReason = "";
String errorLink   = "";
//String major = tP.getPropertyValue("versionMajor");
//String minor = tP.getPropertyValue("versionMinor");
String orgRequest  = url + "/rest/1/07/Account/" + urnacct + nodeaccountid;
String expectHTTPstatus = "HTTP/1.1 403 Forbidden";
String expectHTTPconnection  = "close";
String expectHTTPcontenttype = "application/xml";

if (expectErrType == "" || expectErrType == null) {
	expectErrType = "SUCCESS";
	tC.setPropertyValue("expectErrTypeSTSGet",expectErrType);
}

this.log.info "expectErrType is $expectErrType";
switch (expectErrType) {
	case "FORBIDDEN":
		expectHTTPstatus = "HTTP/1.1 403 Forbidden";
		expectHTTPcontenttype = "application/xml";
		contentLengthZero = false;
		doContentLocaton  = false;
		doContentTypeHeader = true;
		dobodyXML = true;
		errorID = "Forbidden";
		errorReason = "Forbidden";
	break;
	case "SUCCESS":
	default:
		expectHTTPstatus = "HTTP/1.1 200 OK";
		expectHTTPcontenttype = "application/xml";
		contentLengthZero = false;
		doContentLocaton  = false;
		doContentTypeHeader = false;
		dobodyXML = true;
	break;
}

// HTTP header status
this.log.info "HTTP status:  Expect: $expectHTTPstatus - Received: " + tC.getPropertyValue("status");
assert tC.getPropertyValue("status") == expectHTTPstatus;

// Connection

if (doConnectionClose) {
	this.log.info "HTTP status:  Expect: $expectHTTPconnection - Received: " + tC.getPropertyValue("connection");
	assert tC.getPropertyValue("connection") == expectHTTPconnection;
}

//Content-Length
if (contentLengthZero) {
	assert tC.getPropertyValue("contentLength").toInteger() == 0;
} else {
	assert tC.getPropertyValue("contentLength").toInteger() > 0;
}
	
//Content-Type
if (doContentTypeHeader) {
	assert tC.getPropertyValue("contentType") == expectHTTPcontenttype;
}

// Content-Location
if (doContentLocaton) {
	assert tC.getPropertyValue("contentLocation") != null;
	
	def b = tC.getPropertyValue("contentLocation").toURL();
	assert b.getPath().matches("/rest/1/0/SecurityToken/Assertion/[0-9,a-f,-]*");
	def parms = b.getPath().split("/");
	
	tC.setPropertyValue("assertionUUID",parms[parms.size() - 1]);
} else {
	assert tC.getPropertyValue("contentLocation") == null;
}

this.log.info "expectErrType [$expectErrType]";

if (dobodyXML) {
	if (XMLbody.length() > 0) {
			def myXML = new XmlSlurper().parseText(XMLbody).declareNamespace(saml2: "urn:oasis:names:tc:SAML:2.0:assertion", ds: "http://www.w3.org/2000/09/xmldsig#", ec: "http://www.w3.org/2001/10/xml-exc-c14n#", xs: "http://www.w3.org/2001/XMLSchema");

			if (expectErrType == "SUCCESS") {
				// Verify response sizes...
				this.log.info "Assertion size: " + myXML.size();

				/*
				assert myXML."saml2:Assertion".size() == 1;
				assert myXML."saml2:Assertion"."ds:Signature".size()    == 1;
				assert myXML."saml2:Assertion"."ds:Signature"."ds:SignedInfo".size()   == 1;
				assert myXML."saml2:Assertion"."ds:Signature"."ds:SignedInfo"."ds:Reference"."ds:DigestValue".size()  == 1;
				assert myXML."saml2:Assertion"."ds:Signature"."ds:SignatureValue".size()  == 1;
				assert myXML."saml2:Assertion"."ds:Signature"."ds:KeyInfo"."ds:X509Data"."ds:X509Certificate".size() == 1;
				assert myXML."saml2:Assertion"."saml2:Subject"."saml2:NameID".size() == 1;
				*/
				def samlRespNodeAccount = myXML."saml2:AttributeStatement"."saml2:Attribute"."saml2:AttributeValue".text();
				log.info "samlRespNodeAccount[$samlRespNodeAccount]";
				
				//def samlRespNodeAccount = myXML."saml2:Assertion"."saml2:AttributeStatement"."saml2:Attribute"."saml2:AttributeValue".text();
			
			} else {
				// ErrorCode
				this.log.info "ErrorCode: Expect[$errorID] Received: " + myXML.Error.@ErrorID.toString();
				assert myXML.Error.@ErrorID.toString() == errorID;
	
				// ErrorReason
				this.log.info "ErrorReason: Expect[$errorReason] Received: " + myXML.Error.Reason.toString();
				assert myXML.Error.Reason.toString() == errorReason;

				// ErrorLink
				this.log.info "ErrorReason: Expect[$errorLink] Received: " + myXML.Error.ErrorLink.toString();
				assert myXML.Error.ErrorLink.toString() == errorLink;
			}
		} else {
			return false;
		}
}</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract NodeUserID and NodeAccountId">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def XMLbody       = tC.getPropertyValue("XMLbody");
def expectErrType = tC.getPropertyValue("expectErrTypeSTSGet");

if (expectErrType == "" || expectErrType == "SUCCESS") {
	if (XMLbody.length() > 0) {
		def myXML = new XmlSlurper().parseText(XMLbody).declareNamespace(saml2: "urn:oasis:names:tc:SAML:2.0:assertion");

			// Verify response sizes...
			assert myXML.size() == 1;

			/*
			String accountId = myXML."saml2:Assertion"."saml2:AttributeStatement"."saml2:Attribute"."saml2:AttributeValue";
			String userId    = myXML."saml2:Assertion"."saml2:Subject"."saml2:NameID";
			*/
			String accountId = myXML."saml2:AttributeStatement"."saml2:Attribute"."saml2:AttributeValue";
			String userId    = myXML."saml2:Subject"."saml2:NameID";
			
			this.log.info "accountId [$accountId]";
			this.log.info "userId [$userId]";

			tC.setPropertyValue("assertionAccountId",accountId.substring(accountId.lastIndexOf(":")+1, accountId.length()));
			tC.setPropertyValue("assertionUserId",   userId.substring(userId.lastIndexOf(":")+1,userId.length()));
			tC.setPropertyValue("assertionAccountIdFULL",accountId);
			tC.setPropertyValue("assertionUserIdFULL",userId);

			this.log.info "assertionAccountId property is " + tC.getPropertyValue("assertionAccountId");
			this.log.info "assertionUserId property is " + tC.getPropertyValue("assertionUserId");
	} else {
		return false;
	}
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Deflate and encode the &lt;Assertion>">
        <con:settings/>
        <con:config>
          <script>import java.util.zip.Deflater;
import org.w3c.tools.codec.Base64Encoder;
import java.io.ByteArrayOutputStream;
import java.util.zip.DeflaterOutputStream;
//import org.apache.commons.codec.binary.Base64;
import org.opensaml.xml.util.Base64;

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def expectErrType = tC.getPropertyValue("expectErrTypeSTSGet");

if (expectErrType == "" || expectErrType == "SUCCESS") {
	
int compressedLength = 0;
//String XMLbody = tC.getPropertyValue("XMLassertion").toString();
String XMLbodyRaw = tC.getPropertyValue("XMLbody").toString();

int startAssert = XMLbodyRaw.indexOf("&lt;saml2:Assertion ");
int endAssert   = XMLbodyRaw.indexOf("&lt;/saml2:Assertion>");

String XMLbody = XMLbodyRaw.substring(startAssert, endAssert + 18).trim();
String base64encodeStr = "";

this.log.info "XMLbody is [$XMLbody]";

def myXML = new XmlSlurper().parseText(XMLbody);
tC.setPropertyValue("assertId",myXML.@ID.toString());

// Perform Deflation
//byte[] xmlBytes = XMLbody.trim().getBytes();
byte [] xmlBytes = new byte[XMLbody.trim().length()];

Deflater compresser = new Deflater(Deflater.DEFLATED, true);
compresser.setInput(XMLbody.trim().getBytes());
compresser.finish();
compressedLength = compresser.deflate(xmlBytes);
    
//ByteArrayOutputStream byteOutputStream    = new ByteArrayOutputStream();
//DeflaterOutputStream deflaterOutputStream = new DeflaterOutputStream(byteOutputStream);

//deflaterOutputStream.write(xmlBytes, 0, xmlBytes.length);
//deflaterOutputStream.close();

/*
// next, base64 encode it
Base64 base64Encoder = new Base64();

byte[] base64EncodedByteArray = base64Encoder.encode(byteOutputStream.toByteArray());
String base64EncodedMessage = new String(base64EncodedByteArray);
*/
byte [] subArray = Arrays.copyOfRange(xmlBytes, 0, compressedLength);
base64encodeStr = Base64.encodeBytes(subArray,Base64.DONT_BREAK_LINES);

// finally, URL encode it
//String urlEncodedMessage = URLEncoder.encode(base64EncodedMessage, "UTF-8");
tC.setPropertyValue("assert", base64encodeStr);
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Return extracted Properties back to calling Test Case">
        <con:settings/>
        <con:config>
          <script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def callTSname = tC.getPropertyValue("sName");
def callTCname = tC.getPropertyValue("tName");

def callTC = tP.getTestSuiteByName(callTSname).getTestCaseByName(callTCname)

callTC.setPropertyValue("assertXML",tC.getPropertyValue("assertXML"));
callTC.setPropertyValue("assert",tC.getPropertyValue("assert"));
callTC.setPropertyValue("assertId",tC.getPropertyValue("assertId"));
callTC.setPropertyValue("assertionAccountId",tC.getPropertyValue("assertionAccountId"));
callTC.setPropertyValue("assertionUserId",tC.getPropertyValue("assertionUserId"));
callTC.setPropertyValue("assertionAccountIdFULL",tC.getPropertyValue("assertionAccountIdFULL"));
callTC.setPropertyValue("assertionUserIdFULL",tC.getPropertyValue("assertionUserIdFULL"));</script>
        </con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>assert</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">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</con:value>
        </con:property>
        <con:property>
          <con:name>assertAccountId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertId</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">_e11ac976-cbd0-4cb6-9058-7713bde415af</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value>_e11ac976-cbd0-4cb6-9058-7713bde415af</con:value>
        </con:property>
        <con:property>
          <con:name>assertPackaged</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertRaw</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertUserId</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertXML</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>connection</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Keep-Alive</con:value>
        </con:property>
        <con:property>
          <con:name>contentLength</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">4247</con:value>
        </con:property>
        <con:property>
          <con:name>contentLocation</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>contentType</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">text/xml;charset=ISO-8859-1</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>0701</con:value>
        </con:property>
        <con:property>
          <con:name>sName</con:name>
          <con:value>Test Configuration/Setup</con:value>
        </con:property>
        <con:property>
          <con:name>status</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">HTTP/1.1 200 OK</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">true</con:value>
        </con:property>
        <con:property>
          <con:name>tName</con:name>
          <con:value>Authorization Information Extraction via STS</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:userid:org:dece:A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>XMLbody</con:name>
          <con:value><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<saml2:Assertion ID="_e11ac976-cbd0-4cb6-9058-7713bde415af" IssueInstant="2012-06-15T23:11:19.785Z" Version="2.0" xmlns:saml2="urn:oasis:names:tc:SAML:2.0:assertion"><saml2:Issuer>http://c.decellc.com/</saml2:Issuer><ds:Signature xmlns:ds="http://www.w3.org/2000/09/xmldsig#">
<ds:SignedInfo>
<ds:CanonicalizationMethod Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"/>
<ds:SignatureMethod Algorithm="http://www.w3.org/2000/09/xmldsig#rsa-sha1"/>
<ds:Reference URI="#_e11ac976-cbd0-4cb6-9058-7713bde415af">
<ds:Transforms>
<ds:Transform Algorithm="http://www.w3.org/2000/09/xmldsig#enveloped-signature"/>
<ds:Transform Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#"><ec:InclusiveNamespaces PrefixList="ds saml2 xs" xmlns:ec="http://www.w3.org/2001/10/xml-exc-c14n#"/></ds:Transform>
</ds:Transforms>
<ds:DigestMethod Algorithm="http://www.w3.org/2000/09/xmldsig#sha1"/>
<ds:DigestValue>lyluTMBzLkK88TwJ8M1El/4FdG0=</ds:DigestValue>
</ds:Reference>
</ds:SignedInfo>
<ds:SignatureValue>
BADRzW48DC82mdlPu/cRmPmr46cGPgZqhiRvIYzmcoNnJsRKppBFIkOrQZ9Q25otLyBGju4u/Whx
R+e0cg2cPdv45dlInN2qavaqD6W9ACSW8FMJVa4FR4hvDCb5uPx0o6mDUZGoH8O1YiDDp8CXBcpO
F9sQ6a1PB6x1PWugNZk=
</ds:SignatureValue>
<ds:KeyInfo><ds:X509Data><ds:X509Certificate>MIIDuzCCAySgAwIBAgIBAjANBgkqhkiG9w0BAQQFADCBljELMAkGA1UEBhMCVVMxCzAJBgNVBAgT
AlZBMREwDwYDVQQHEwhTdGVybGluZzENMAsGA1UEChMEREVDRTEMMAoGA1UECxMDbGxjMSMwIQYD
VQQDExpzdG9teGxic2I5MS52YS5uZXVzdGFyLmNvbTElMCMGCSqGSIb3DQEJARYWc2FudG9zLmpo
YUBuZXVzdGFyLmJpejAeFw0xMDAzMTkwMTU2NDRaFw0xMTAzMTkwMTU2NDRaMIGJMQswCQYDVQQG
EwJVUzELMAkGA1UECBMCdmExETAPBgNVBAcTCFN0ZXJsaW5nMRAwDgYDVQQKEwdOZXVzdGFyMQ0w
CwYDVQQLEwRERUNFMRIwEAYDVQQDEwlsb2NhbGhvc3QxJTAjBgkqhkiG9w0BCQEWFnNhbnRvcy5q
aGFAbmV1c3Rhci5iaXowgZ8wDQYJKoZIhvcNAQEBBQADgY0AMIGJAoGBALBV5Opi92ieLfFomehr
M1oKkvzx08i3OgPNW5Dfk7PGiP3adh/Ilc2j3kAIIedK1hQadRY/RDniz6OKUXeirYztN5Q16i85
RWuUXDol7dHXYUK+xYcQTOPSUWPzxxNqj8zltHOBHrSJMDgONeePsc+/0aFBT8D5CYHjHEwfR0e5
AgMBAAGjggEiMIIBHjAJBgNVHRMEAjAAMCwGCWCGSAGG+EIBDQQfFh1PcGVuU1NMIEdlbmVyYXRl
ZCBDZXJ0aWZpY2F0ZTAdBgNVHQ4EFgQU5+JXeZQNlTVtAwpVfn110GpQHfMwgcMGA1UdIwSBuzCB
uIAUaOpJ0xKV601qQdlJS9AU3xS2kxOhgZykgZkwgZYxCzAJBgNVBAYTAlVTMQswCQYDVQQIEwJW
QTERMA8GA1UEBxMIU3RlcmxpbmcxDTALBgNVBAoTBERFQ0UxDDAKBgNVBAsTA2xsYzEjMCEGA1UE
AxMac3RvbXhsYnNiOTEudmEubmV1c3Rhci5jb20xJTAjBgkqhkiG9w0BCQEWFnNhbnRvcy5qaGFA
bmV1c3Rhci5iaXqCAQAwDQYJKoZIhvcNAQEEBQADgYEAfq+I8D1s56CpsWwgBGEqQ7VLJ9p0QXLk
B+F/gtil4On8wTK+W1yw7hjQWW9IDhC+nfYh3btB0azcQeJk7GiRkDn64lyMLMQ5Ui/ly0jeqwsL
NI1nE3tzF/9ru+BmZimzz342UmPSuvIUaKs1yhbqW9wjPH6//rGy5z7ZvQFXocY=</ds:X509Certificate></ds:X509Data></ds:KeyInfo></ds:Signature><saml2:Subject><saml2:NameID Format="urn:oasis:names:tc:SAML:2.0:nameid-format:persistent">urn:dece:userid:org:dece:A06A9AA49F7773D7E0401F0A059915F0</saml2:NameID><saml2:SubjectConfirmation Method="urn:oasis:names:tc:SAML:2.0:cm:bearer"><saml2:SubjectConfirmationData InResponseTo="134A754AD3FAD6E93D37ECD850570532" NotOnOrAfter="2012-06-16T23:11:19.785Z" Recipient="http://stdecqavutl2.va.neustar.com:7001/simplesaml/module.php/saml/sp/saml2-acs.php/0701"/></saml2:SubjectConfirmation></saml2:Subject><saml2:Conditions NotBefore="2012-06-15T23:11:09.785Z" NotOnOrAfter="2013-06-15T23:11:19.785Z"><saml2:AudienceRestriction><saml2:Audience>urn:dece:org:org:dece:0701</saml2:Audience></saml2:AudienceRestriction></saml2:Conditions><saml2:Advice><saml2:AssertionURIRef>https://qa.q.uvvu.com:7001/rest/1/07/SecurityToken/Assertion/_e11ac976-cbd0-4cb6-9058-7713bde415af</saml2:AssertionURIRef></saml2:Advice><saml2:AuthnStatement AuthnInstant="2012-06-15T23:11:19.785Z"><saml2:AuthnContext><saml2:AuthnContextClassRef>urn:oasis:names:tc:SAML:2.0:ac:classes:Password</saml2:AuthnContextClassRef><saml2:AuthenticatingAuthority>urn:dece:org:org:dece:coordinator</saml2:AuthenticatingAuthority></saml2:AuthnContext></saml2:AuthnStatement><saml2:AttributeStatement><saml2:Attribute Name="accountID" NameFormat="urn:dece:type:accountID"><saml2:AttributeValue xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="xs:string">urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0</saml2:AttributeValue></saml2:Attribute></saml2:AttributeStatement></saml2:Assertion>]]></con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>33d79721-bd6e-409f-9363-efb2583acdb2</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase>
    <con:properties>
      <con:property>
        <con:name>QC_TestPlanDirectory</con:name>
        <con:value/>
      </con:property>
      <con:property>
        <con:name>QC_TestLabDirectory</con:name>
        <con:value/>
      </con:property>
      <con:property>
        <con:name>QC_TestSet</con:name>
        <con:value/>
      </con:property>
    </con:properties>
    <con:reportParameters/>
  </con:testSuite>
  <con:testSuite name="SetupScripts"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Setup_P1" searchProperties="true" id="4d189c80-7a18-4301-a054-4cd936e30325"><con:settings/><con:testStep type="groovy" name="Set ENV Properties"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

log.info("Set Environment properties!!!");
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context) 
def projectPath = groovyUtils.projectPath
log.info("Project Path : '" + projectPath + "'");

def eNV = context.expand( '${#Project#ENV}' )
log.info("Environment: '" + eNV+ "'");

def propertiesPath = null;

if (System.properties['os.name'].toLowerCase().contains('windows')) 
	{
    		log.info "it's Windows OS!!";
    		File temp = new File( projectPath + "\\..\\..\\..\\Properties\\");
    		propertiesPath = temp.getCanonicalPath();
	} 
else 
	{
    		log.info "it's Linux OS!!";
    		File temp = new File(projectPath + "/../../../Properties/");
    		propertiesPath = temp.getCanonicalPath();
	}
	
log.info("Properties File Location : '" + propertiesPath+ "'");


def propMap=[:]
BufferedReader reader = new BufferedReader(new FileReader(propertiesPath + "/" + eNV +"project.properties"));
log.info("Load property file : '" + propertiesPath + "/" + eNV +"project.properties"+ "'");
String line;
while ((line = reader.readLine()) != null)
	{
		if (line.trim().length()==0) continue;
		if (line.charAt(0)=='#') continue;

		int delimPosition = line.indexOf("=");
		String key = line.substring(0, delimPosition-0).trim();
		String value = line.substring(delimPosition+1).trim();
		propMap.put(key, value);
	}

propMap.each{ k, v -> tP.setPropertyValue(k,v)}

</script></con:config></con:testStep><con:testStep type="groovy" name="Set_CoordinatorSchema"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

log.info "versionMinor: "+tP.getPropertyValue("versionMinor");

def v2 = context.expand( '${#Project#versionMinor}' )
def schema = tP.getPropertyValue("coordinatorSchema_"+v2);

tP.setPropertyValue("coordinatorSchema",schema);
log.info "Setting the coordinatorSchema value ---- "+schema;
</script></con:config></con:testStep><con:testStep type="datasource" name="Country"><con:settings/><con:config xsi:type="con:DataSourceStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dataSource type="Grid"><con:configuration><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">US&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">GB&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">CA&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">IE&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">AU&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">NZ&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">AT&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">DE&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">CH&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">FR&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">BE&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">NL&lt;/con:entry></row><row>&lt;con:entry xmlns:con="http://eviware.com/soapui/config">LU&lt;/con:entry></row></con:configuration></con:dataSource><con:property>Country</con:property><con:restartOnRun>true</con:restartOnRun></con:config></con:testStep><con:testStep type="groovy" name="TOUSetup"><con:settings/><con:config><script>def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def tP = testSuite.getProject();

def dBHost = context.expand( '${#Project#targetSystem}' )

def country = context.expand( '${Country#Country}' )

def a = new dbUtils.dbUtils(log,dBHost);
String sql = """select consent_version from (select
	            consent_version            
	            from
	            CONSENT
	            where
	            CONSENT_URN = 'urn:dece:type:policy:TermsOfUse'
	            and
	            COUNTRY = '""" + country + """'
	            order by
	            consent_version desc)
	            where rownum &lt; 2""";             
	log.info sql;
        
        results = a.SelectFromDB(sql,dBHost);

//                            a.dbConnClose();
       assert results.length() > 0;
       log.info "results" + results;

       def myXML = new XmlSlurper().parseText(results);   

       log.info myXML.ResultSet.Row.CONSENT_VERSION.text();
                testCase.setPropertyValue("Consent_Version",myXML.ResultSet.Row.CONSENT_VERSION.text());
                

def consent_Version = context.expand( '${#TestCase#Consent_Version}' )

tP.setPropertyValue("TOU_"+country,consent_Version);


</script></con:config></con:testStep><con:testStep type="datasourceloop" name="DataSource Loop" disabled="true"><con:settings/><con:config><dataSourceStep>Country</dataSourceStep><targetStep>TOUSetup</targetStep></con:config></con:testStep><con:properties><con:property><con:name>Consent_Version</con:name><con:value>20140811</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>48eef7a0-e5f2-4926-99bb-c9ecd11b1888</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c0f3550c-c4aa-4ddc-abb8-3d629c23599f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:properties/><con:reportParameters/></con:testSuite>
  <con:testSuite name="DeviceGet  Retailer Test Cases_R4">
    <con:description/>
    <con:settings><con:setting id="IncludeOverview">true</con:setting><con:setting id="IncludeResults">true</con:setting><con:setting id="FlowLayout">false</con:setting><con:setting id="ErrorDetails">true</con:setting><con:setting id="IncludeCoverage">true</con:setting><con:setting id="GeneratableJUnitReport@Style">Single Page (Print)</con:setting><con:setting id="GeneratableJUnitReport@Folder">C:\Users\raju.ganji\Desktop\DeviceGet_170613\4.1</con:setting></con:settings>
    <con:runType>SEQUENTIAL</con:runType>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00001_DeviceGet_Retailer_FUNC_with_ValidData" searchProperties="true" id="a45aaa54-1748-402b-be22-aed39a7c6859">
      <con:description>This test case will verify that Application Tier properly handles a DeviceGet request when invoked with the GET method and valid header request .

Expected Result:

System should return successful message.</con:description>
      <con:settings/>
      <con:testStep type="groovy" name="Verify Node User SAML Asssertion" disabled="true">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def ValSamlAssertion = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Validate SAML Assertion");

	ValSamlAssertion.setPropertyValue("TCaseName",testCase.getName());
	ValSamlAssertion.setPropertyValue("TSuiteName",testSuite.getName());

	def runnerTc = ValSamlAssertion.run( null , false )
	assert runnerTc.status == Status.FINISHED;

	rcUUID = testCase.getPropertyValue("rcUUID");

	if (runnerTc.status != Status.FINISHED || rcUUID.toInteger()!= 1){

			
		testCase.setPropertyValue("nodetype","retailer");
		testCase.setPropertyValue("nodeid","0701");
		testCase.setPropertyValue("username","sch-drm_user1");
		testCase.setPropertyValue("password","Password1");
		testCase.setPropertyValue("accountoid",null);
		testCase.setPropertyValue("useroid",null);
		testCase.setPropertyValue("assertid",null);
		testCase.setPropertyValue("SAMLassertion",null);
		testCase.setPropertyValue("tokentype","urn:dece:type:tokentype:usernamepassword");
		testCase.setPropertyValue("loopuntil","25");
		testCase.setPropertyValue("expectErrTypeSTS","SUCCESS");
		testCase.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
			
		log.info " SAML Assertion Expired ! re-generating Assertion";
		
		def RunSTS = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get SAML Assertion - STS")

				RunSTS.setPropertyValue("TCaseName",testCase.getName());
				RunSTS.setPropertyValue("TSuiteName",testSuite.getName());

				def runnerSTS = RunSTS.run( null , false )

				assert runnerSTS.status == Status.FINISHED;

		}</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call LicAppCreate Request with Valid Data" disabled="true">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0");
testCase.setPropertyValue("expectErrTypeLAC","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedDeviceDDReq = testProject.getTestSuiteByName("Staging DeviceGet").getTestCaseByName("LicAppCreate Request");

FeedDeviceDDReq.setPropertyValue("TCaseName",testCase.getName());
FeedDeviceDDReq.setPropertyValue("TSuiteName",testSuite.getName());


def runnerTC = FeedDeviceDDReq.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Feed DeviceGet Request with Valid Data">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));

testCase.setPropertyValue("SAMLassertion","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");
testCase.setPropertyValue("assertionUUID","_87aa3e8d-2de2-46dd-b572-414003e22e9a");
testCase.setPropertyValue("username","firstfullusername_20130612_06223");
testCase.setPropertyValue("password","testing");
testCase.setPropertyValue("accountoid","DEF5738E543B633AE0401F0A05990CC0");
testCase.setPropertyValue("useroid","DEF5738E544A633AE0401F0A05990CC0");
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:DEF5738E543A633AE0401F0A05990CC0");
testCase.setPropertyValue("DeviceID","urn:dece:deviceid:org:dece:DEF585C6AEA11471E0401F0A07994634");

testCase.setPropertyValue("DomainID","urn:dece:domainid:dece:DEF587A47AF1508CE0401F0A07994D03"); 


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedRTLReq = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request");

FeedRTLReq.setPropertyValue("TCaseName",testCase.getName());
FeedRTLReq.setPropertyValue("TSuiteName",testSuite.getName());

WsdlTestCaseRunner TSrunner = new WsdlTestCaseRunner( FeedRTLReq, null );

TSrunner.runTestStepByName("Get the DeviceGet Properties");
TSrunner.runTestStepByName("pem set");
assert TSrunner.status == Status.INITIALIZED;</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call DeviceUpdate Request for evict Cache" id="aee4be24-47c9-4526-bbd5-54cad6cd6350">
        <con:settings/>
        <con:config><script>







import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )
WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );


TSrunnerRTC.runTestStepByName("DeviceUpdateRequest");

assert TSrunnerRTC.status == Status.INITIALIZED;</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call DeviceGet Request">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )
WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );


TSrunnerRTC.runTestStepByName("DeviceGetRequest");

assert TSrunnerRTC.status == Status.INITIALIZED;</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract DeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Extract DeviceGet Information")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify theDeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Response Validation")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify the DeviceGet Response against DB Result">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGdataVal = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Data Validation");

RTGdataVal.setPropertyValue("TCaseName",testCase.getName());
RTGdataVal.setPropertyValue("TSuiteName",testSuite.getName());


def runnerRTC = RTGdataVal.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SAMLExpDate</con:name>
          <con:value>2017-06-11 06:17:41.0</con:value>
        </con:property>
        <con:property>
          <con:name>rcUUID</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>nodetype</con:name>
          <con:value>retailer</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>0701</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>firstfullusername_20130612_06223</con:value>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>testing</con:value>
        </con:property>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">DEF5738E543B633AE0401F0A05990CC0</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">DEF5738E544A633AE0401F0A05990CC0</con:value>
        </con:property>
        <con:property>
          <con:name>assertid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SAMLassertion</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">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</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>loopuntil</con:name>
          <con:value>25</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTS</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value>_87aa3e8d-2de2-46dd-b572-414003e22e9a</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value>urn:dece:userid:org:dece:DEDB0DD90C83E264E0401F0A079920A4</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value>DEDB0DD90C83E264E0401F0A079920A4</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3ADEDB0DD90C1CE264E0401F0A079920A4</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value>DEDB0DD90C1CE264E0401F0A079920A4</con:value>
        </con:property>
        <con:property>
          <con:name>AccountID</con:name>
          <con:value>urn:dece:accountid:org:dece:DEF5738E543A633AE0401F0A05990CC0</con:value>
        </con:property>
        <con:property>
          <con:name>ErrorDataVal</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetReqXml</con:name>
          <con:value>User-Agent: Apache-HttpClient/4.1.1 (java 1.5)
</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResXml</con:name>
          <con:value><![CDATA[<Device IsLegacy="false" DeviceID="urn:dece:deviceid:org:dece:A09D9C22F11CBC6DE0401F0A05996898" xmlns="http://www.decellc.org/schema/2010/10/dece" xmlns:ns2="http://www.movielabs.com/schema/md/v1.07/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <DisplayName>DeviceInfoDisplayName</DisplayName>
   <Manufacturer>Microsoft</Manufacturer>
   <Model>V344</Model>
   <Brand Language="en-US">DeviceInfoBrand</Brand>
   <SerialNo>123432442323424</SerialNo>
   <Image MimeType="MimeType3" Width="50" Height="50">http://www.oxygenxml.com/1234</Image>
   <LicAppID>urn:dece:licappid:org:dece:A09D9C22F11EBC6DE0401F0A05996898</LicAppID>
   <DRMClientID>urn:dece:drmclientid:org:dece:A0E2E4B822DB1B7CE0401F0A07994404</DRMClientID>
   <ResourceStatus>
      <Current CreatedBy="urn:dece:org:org:dece:0701" CreationDate="2011-04-11T04:02:39.637Z">
         <Value>urn:dece:type:status:pending</Value>
         <Description>Device Created</Description>
      </Current>
   </ResourceStatus>
</Device>]]></con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResTime</con:name>
          <con:value>190</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceID</con:name>
          <con:value>urn:dece:deviceid:org:dece:DEF585C6AEA11471E0401F0A07994634</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeDVGGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>SqlStr</con:name>
          <con:value>select Status from USER_STATUS_REF where Status !='active'</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeLAC</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>DomainID</con:name>
          <con:value>urn:dece:domainid:dece:DEF587A47AF1508CE0401F0A07994D03</con:value>
        </con:property>
      <con:property><con:name>ETag</con:name><con:value>"E9C9CFF5A71224BCE0401F0A059909B1:F0246DC7"</con:value></con:property><con:property><con:name>Last-Modified</con:name><con:value>Mon, 28 Oct 2013 08:23:39 GMT</con:value></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>aee4be24-47c9-4526-bbd5-54cad6cd6350</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00002_DeviceGet_Retailer_FUNC_with_Invalid AccountID" searchProperties="true" id="5c80be0e-6d12-45b6-b72d-c06656b2a82c">
      <con:description>This test case will verify that Application Tier properly handles a DeviceGet request when invoked with the GET method and Invalid Account ID in request .

Expected Result:

System should return an Error message.</con:description>
      <con:settings/>
      <con:testStep type="groovy" name="Verify Node User SAML Asssertion" disabled="true">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.model.testsuite.TestRunner.Status


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def ValSamlAssertion = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Validate SAML Assertion");

	ValSamlAssertion.setPropertyValue("TCaseName",testCase.getName());
	ValSamlAssertion.setPropertyValue("TSuiteName",testSuite.getName());

	def runnerTc = ValSamlAssertion.run( null , false )
	assert runnerTc.status == Status.FINISHED;

	rcUUID = testCase.getPropertyValue("rcUUID");

	if (runnerTc.status != Status.FINISHED || rcUUID.toInteger()!= 1){

			
		testCase.setPropertyValue("nodetype","retailer");
		testCase.setPropertyValue("nodeid","0701");
		testCase.setPropertyValue("username","sch-drm_user1");
		testCase.setPropertyValue("password","Password1");
		testCase.setPropertyValue("accountoid",null);
		testCase.setPropertyValue("useroid",null);
		testCase.setPropertyValue("assertid",null);
		testCase.setPropertyValue("SAMLassertion",null);
		testCase.setPropertyValue("tokentype","urn:dece:type:tokentype:usernamepassword");
		testCase.setPropertyValue("loopuntil","25");
		testCase.setPropertyValue("expectErrTypeSTS","SUCCESS");
		testCase.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
			
		log.info " SAML Assertion Expired ! re-generating Assertion";
		def RunSTS = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get SAML Assertion - STS")

				RunSTS.setPropertyValue("TCaseName",testCase.getName());
				RunSTS.setPropertyValue("TSuiteName",testSuite.getName());

				def runnerSTS = RunSTS.run( null , false )

				assert runnerSTS.status == Status.FINISHED;

		}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call LicAppCreate Request with Valid Data" disabled="true">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0");
testCase.setPropertyValue("expectErrTypeLAC","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedDeviceDDReq = testProject.getTestSuiteByName("Staging DeviceGet").getTestCaseByName("LicAppCreate Request");

FeedDeviceDDReq.setPropertyValue("TCaseName",testCase.getName());
FeedDeviceDDReq.setPropertyValue("TSuiteName",testSuite.getName());


def runnerTC = FeedDeviceDDReq.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Feed DeviceGet Request with Invalid AccountID">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("SAMLassertion","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");
testCase.setPropertyValue("assertionUUID","_87aa3e8d-2de2-46dd-b572-414003e22e9a");
testCase.setPropertyValue("username","firstfullusername_20130612_06223");
testCase.setPropertyValue("password","testing");
testCase.setPropertyValue("accountoid","DEF5738E543B633AE0401F0A05990CC0");
testCase.setPropertyValue("useroid","DEF5738E544A633AE0401F0A05990CC0");
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:org:dece:DEF5738E543A633AE0401F0A05990CC0"); // invalid Account format
testCase.setPropertyValue("DeviceID","urn:dece:deviceid:org:dece:DEF585C6AEA11471E0401F0A07994634");
testCase.setPropertyValue("DomainID","urn:dece:domainid:dece:DEF587A47AF1508CE0401F0A07994D03"); 
testCase.setPropertyValue("expectErrType","ACCOUNTID NOT MATCH");
testCase.setPropertyValue("ErrorDataVal","1");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedRTLReq = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request");

FeedRTLReq.setPropertyValue("TCaseName",testCase.getName());
FeedRTLReq.setPropertyValue("TSuiteName",testSuite.getName());

WsdlTestCaseRunner TSrunner = new WsdlTestCaseRunner( FeedRTLReq, null );

TSrunner.runTestStepByName("Get the DeviceGet Properties");
TSrunner.runTestStepByName("pem set");
assert TSrunner.status == Status.INITIALIZED;</script></con:config>
      </con:testStep>
      
      <con:testStep type="groovy" name="Call DeviceGet Request">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )

WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );

TSrunnerRTC.runTestStepByName("DeviceGetRequest");

assert TSrunnerRTC.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract DeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Extract DeviceGet Information")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify theDeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Response Validation")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep><con:properties>
        
        <con:property><con:name>AccountID</con:name><con:value>urn:dece:accountid:org:org:dece:DEF5738E543A633AE0401F0A05990CC0</con:value></con:property><con:property><con:name>accountoid</con:name><con:value>DEF5738E543B633AE0401F0A05990CC0</con:value></con:property>
        <con:property><con:name>assertid</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property>
        
        <con:property><con:name>assertionAccountId</con:name><con:value>A06A9AA49F6E73D7E0401F0A059915F0</con:value></con:property><con:property><con:name>assertionAccountIdFULL</con:name><con:value>urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0</con:value></con:property>
        
        
        <con:property><con:name>assertionUserId</con:name><con:value>A06A9AA49F7773D7E0401F0A059915F0</con:value></con:property><con:property><con:name>assertionUserIdFULL</con:name><con:value>urn:dece:userid:org:dece:A06A9AA49F7773D7E0401F0A059915F0</con:value></con:property>
        
        
        
        <con:property><con:name>assertionUUID</con:name><con:value>_87aa3e8d-2de2-46dd-b572-414003e22e9a</con:value></con:property><con:property><con:name>DeviceGetID</con:name><con:value>Request Account ID not matchhttps://qa.q.uvvu.com:7001/rest/1/0/Account/urn%3Adece%3Aaccountid%3Aorg%3Aorg%3Aorg%3Adece%3AA06A9AA49F6E73D7E0401F0A059915F0/Device/urn%3Adece%3Adeviceid%3Aorg%3Adece%3AA09D9C22F11CBC6DE0401F0A05996898/DECEDomainhttps://qa.q.uvvu.com:7001/rest/1/0/error/en/ErrorList.html#AccountIdUnmatched</con:value></con:property><con:property><con:name>DeviceGetReqXml</con:name><con:value>User-Agent: Apache-HttpClient/4.1.1 (java 1.5)
</con:value></con:property><con:property><con:name>DeviceGetResTime</con:name><con:value>204</con:value></con:property><con:property><con:name>DeviceGetResXml</con:name><con:value><![CDATA[<ErrorList xmlns="http://www.decellc.org/schema/2010/10/dece" xmlns:ns2="http://www.movielabs.com/schema/md/v1.07/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Error ErrorID="urn:dece:errorid:org:dece:AccountIdUnmatched">
      <Reason Language="en">Request Account ID not match</Reason>
      <OriginalRequest>https://qa.q.uvvu.com:7001/rest/1/0/Account/urn%3Adece%3Aaccountid%3Aorg%3Aorg%3Aorg%3Adece%3AA06A9AA49F6E73D7E0401F0A059915F0/Domain/urn%3Adece%3Adomainid%3Adece%3AA09DA589BD63A036E0401F0A05996D9A/Device/urn%3Adece%3Adeviceid%3Aorg%3Adece%3AA09D9C22F11CBC6DE0401F0A05996898</OriginalRequest>
      <ErrorLink>https://qa.q.uvvu.com:7001/rest/1/0/error/en/ErrorList.html#AccountIdUnmatched</ErrorLink>
   </Error>
</ErrorList>]]></con:value></con:property>
        
        
        
        
        <con:property><con:name>DeviceID</con:name><con:value>urn:dece:deviceid:org:dece:DEF585C6AEA11471E0401F0A07994634</con:value></con:property><con:property><con:name>DomainID</con:name><con:value>urn:dece:domainid:dece:DEF587A47AF1508CE0401F0A07994D03</con:value></con:property>
        <con:property><con:name>ErrorDataVal</con:name><con:value>1</con:value></con:property>
        
        <con:property><con:name>expectErrType</con:name><con:value>ACCOUNTID NOT MATCH</con:value></con:property><con:property><con:name>expectErrTypeDVGGet</con:name><con:value>ACCOUNTID NOT MATCH</con:value></con:property><con:property><con:name>expectErrTypeSTS</con:name><con:value>SUCCESS</con:value></con:property><con:property><con:name>expectErrTypeSTSGet</con:name><con:value>SUCCESS</con:value></con:property>
        <con:property><con:name>loopuntil</con:name><con:value>25</con:value></con:property>
        <con:property><con:name>nodeid</con:name><con:value>0701</con:value></con:property><con:property><con:name>nodetype</con:name><con:value>retailer</con:value></con:property>
        
        
        
        <con:property><con:name>password</con:name><con:value>testing</con:value></con:property><con:property><con:name>QC_Id</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rcUUID</con:name><con:value>1</con:value></con:property>
        
        <con:property><con:name>SAMLassertion</con:name><con:value>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</con:value></con:property><con:property><con:name>SAMLExpDate</con:name><con:value>2014-06-11 06:24:48.0</con:value></con:property><con:property><con:name>synced</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>tokentype</con:name><con:value>urn:dece:type:tokentype:usernamepassword</con:value></con:property><con:property><con:name>username</con:name><con:value>firstfullusername_20130612_06223</con:value></con:property><con:property><con:name>useroid</con:name><con:value>DEF5738E544A633AE0401F0A05990CC0</con:value></con:property>
        
        
        
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00003_DeviceGet_Retailer_FUNC_with_Non_Existing_ AccountID" searchProperties="true" id="c9d85f5a-c132-4b43-a264-95c948443845" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="">
      <con:settings/>
      <con:testStep type="groovy" name="Verify Node User SAML Asssertion" disabled="true">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.model.testsuite.TestRunner.Status


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def ValSamlAssertion = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Validate SAML Assertion");

	ValSamlAssertion.setPropertyValue("TCaseName",testCase.getName());
	ValSamlAssertion.setPropertyValue("TSuiteName",testSuite.getName());

	def runnerTc = ValSamlAssertion.run( null , false )
	assert runnerTc.status == Status.FINISHED;

	rcUUID = testCase.getPropertyValue("rcUUID");

	if (runnerTc.status != Status.FINISHED || rcUUID.toInteger()!= 1){

			
		testCase.setPropertyValue("nodetype","device");
		testCase.setPropertyValue("nodeid","0701");
		testCase.setPropertyValue("username","sch-drm_user1");
		testCase.setPropertyValue("password","Password1");
		testCase.setPropertyValue("accountoid",null);
		testCase.setPropertyValue("useroid",null);
		testCase.setPropertyValue("assertid",null);
		testCase.setPropertyValue("SAMLassertion",null);
		testCase.setPropertyValue("tokentype","urn:dece:type:tokentype:usernamepassword");
		testCase.setPropertyValue("loopuntil","25");
		testCase.setPropertyValue("expectErrTypeSTS","SUCCESS");
		testCase.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
			
		log.info " SAML Assertion Expired ! re-generating Assertion";
		def RunSTS = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get SAML Assertion - STS")

				RunSTS.setPropertyValue("TCaseName",testCase.getName());
				RunSTS.setPropertyValue("TSuiteName",testSuite.getName());

				def runnerSTS = RunSTS.run( null , false )

				assert runnerSTS.status == Status.FINISHED;

		}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call LicAppCreate Request with Valid Data" disabled="true">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0");
testCase.setPropertyValue("expectErrTypeLAC","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedDeviceDDReq = testProject.getTestSuiteByName("Staging DeviceGet").getTestCaseByName("LicAppCreate Request");

FeedDeviceDDReq.setPropertyValue("TCaseName",testCase.getName());
FeedDeviceDDReq.setPropertyValue("TSuiteName",testSuite.getName());


def runnerTC = FeedDeviceDDReq.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Feed DeviceGet Request with Non-Existing AccountID">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("SAMLassertion","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");
testCase.setPropertyValue("assertionUUID","_87aa3e8d-2de2-46dd-b572-414003e22e9a");
testCase.setPropertyValue("username","firstfullusername_20130612_06223");
testCase.setPropertyValue("password","testing");
testCase.setPropertyValue("accountoid","DEF5738E543B633AE0401F0A05990CC0");
testCase.setPropertyValue("useroid","DEF5738E544A633AE0401F0A05990CC0");
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:DEEEFEAC4"); // nonexisting Account
testCase.setPropertyValue("DeviceID","urn:dece:deviceid:org:dece:DEF585C6AEA11471E0401F0A07994634");
testCase.setPropertyValue("DomainID","urn:dece:domainid:dece:DEF587A47AF1508CE0401F0A07994D03");
testCase.setPropertyValue("expectErrType","ACCOUNTID NOT MATCH");
testCase.setPropertyValue("ErrorDataVal","1");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedRTLReq = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request");

FeedRTLReq.setPropertyValue("TCaseName",testCase.getName());
FeedRTLReq.setPropertyValue("TSuiteName",testSuite.getName());

WsdlTestCaseRunner TSrunner = new WsdlTestCaseRunner( FeedRTLReq, null );

TSrunner.runTestStepByName("Get the DeviceGet Properties");
TSrunner.runTestStepByName("pem set");
assert TSrunner.status == Status.INITIALIZED;</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call DeviceGet Request">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )

WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );

TSrunnerRTC.runTestStepByName("DeviceGetRequest");

assert TSrunnerRTC.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract DeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Extract DeviceGet Information")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify theDeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Response Validation")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Reset AccountID"><con:settings/><con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));

testCase.setPropertyValue("SAMLassertion","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");
testCase.setPropertyValue("assertionUUID","_87aa3e8d-2de2-46dd-b572-414003e22e9a");
testCase.setPropertyValue("username","firstfullusername_20130612_06223");
testCase.setPropertyValue("password","testing");
testCase.setPropertyValue("accountoid","DEF5738E543B633AE0401F0A05990CC0");
testCase.setPropertyValue("useroid","DEF5738E544A633AE0401F0A05990CC0");
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:DEF5738E543A633AE0401F0A05990CC0");
testCase.setPropertyValue("DeviceID","urn:dece:deviceid:org:dece:DEF585C6AEA11471E0401F0A07994634");

testCase.setPropertyValue("DomainID","urn:dece:domainid:dece:DEF587A47AF1508CE0401F0A07994D03"); 


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedRTLReq = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request");

FeedRTLReq.setPropertyValue("TCaseName",testCase.getName());
FeedRTLReq.setPropertyValue("TSuiteName",testSuite.getName());

WsdlTestCaseRunner TSrunner = new WsdlTestCaseRunner( FeedRTLReq, null );

TSrunner.runTestStepByName("Get the DeviceGet Properties");
TSrunner.runTestStepByName("pem set");
assert TSrunner.status == Status.INITIALIZED;</script></con:config></con:testStep><con:properties>
        <con:property>
          <con:name>SAMLExpDate</con:name>
          <con:value>2017-06-11 06:17:41.0</con:value>
        </con:property>
        <con:property>
          <con:name>rcUUID</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>nodetype</con:name>
          <con:value>device</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>0701</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>firstfullusername_20130612_06223</con:value>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>testing</con:value>
        </con:property>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value>DEF5738E543B633AE0401F0A05990CC0</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value>DEF5738E544A633AE0401F0A05990CC0</con:value>
        </con:property>
        <con:property>
          <con:name>assertid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SAMLassertion</con:name>
          <con:value>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</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>loopuntil</con:name>
          <con:value>25</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTS</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value>_87aa3e8d-2de2-46dd-b572-414003e22e9a</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value>urn:dece:userid:org:dece:A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value>A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value>urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value>A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>AccountID</con:name>
          <con:value>urn:dece:accountid:org:dece:DEF5738E543A633AE0401F0A05990CC0</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceID</con:name>
          <con:value>urn:dece:deviceid:org:dece:DEF585C6AEA11471E0401F0A07994634</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>ACCOUNTID NOT MATCH</con:value>
        </con:property>
        <con:property>
          <con:name>ErrorDataVal</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetReqXml</con:name>
          <con:value>User-Agent: Apache-HttpClient/4.1.1 (java 1.5)
</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResXml</con:name>
          <con:value><![CDATA[<ErrorList xmlns="http://www.decellc.org/schema/2010/10/dece" xmlns:ns2="http://www.movielabs.com/schema/md/v1.07/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Error ErrorID="urn:dece:errorid:org:dece:AccountIdUnmatched">
      <Reason Language="en">Request Account ID not match</Reason>
      <OriginalRequest>https://qa.q.uvvu.com:7001/rest/1/0/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3AA06A9AA49F6E73D7E0401F0A059915F0STSTTTSTTSTSTTSST/Domain/urn%3Adece%3Adomainid%3Adece%3AA09DA589BD63A036E0401F0A05996D9A/Device/urn%3Adece%3Adeviceid%3Aorg%3Adece%3AA09D9C22F11CBC6DE0401F0A05996898</OriginalRequest>
      <ErrorLink>https://qa.q.uvvu.com:7001/rest/1/0/error/en/ErrorList.html#AccountIdUnmatched</ErrorLink>
   </Error>
</ErrorList>]]></con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResTime</con:name>
          <con:value>160</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetID</con:name>
          <con:value>Request Account ID not matchhttps://qa.q.uvvu.com:7001/rest/1/0/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3AA06A9AA49F6E73D7E0401F0A059915F0STSTTTSTTSTSTTSST/Device/urn%3Adece%3Adeviceid%3Aorg%3Adece%3AA09D9C22F11CBC6DE0401F0A05996898/DECEDomainhttps://qa.q.uvvu.com:7001/rest/1/0/error/en/ErrorList.html#AccountIdUnmatched</con:value>
        </con:property>
        <con:property>
          <con:name>DomainID</con:name>
          <con:value>urn:dece:domainid:dece:DEF587A47AF1508CE0401F0A07994D03</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00004_DeviceGet_Retailer_FUNC_with_Nonexistent_NodeID" searchProperties="true" id="d00542ac-71e4-4a31-a4ba-70e3947fbe70" disabled="true">
      <con:description>This test case will verify that Application Tier properly handles a RightsLockerDataGet  request when the nodeID supplied doesn't exist.

Expected Result:

System should return error message.</con:description>
      <con:settings/>
      <con:testStep type="groovy" name="Verify Node User SAML Asssertion" disabled="true">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.model.testsuite.TestRunner.Status


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def ValSamlAssertion = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Validate SAML Assertion");

	ValSamlAssertion.setPropertyValue("TCaseName",testCase.getName());
	ValSamlAssertion.setPropertyValue("TSuiteName",testSuite.getName());

	def runnerTc = ValSamlAssertion.run( null , false )
	assert runnerTc.status == Status.FINISHED;

	rcUUID = testCase.getPropertyValue("rcUUID");

	if (runnerTc.status != Status.FINISHED || rcUUID.toInteger()!= 1){

			
		testCase.setPropertyValue("nodetype","device");
		testCase.setPropertyValue("nodeid","0701");
		testCase.setPropertyValue("username","sch-drm_user1");
		testCase.setPropertyValue("password","Password1");
		testCase.setPropertyValue("accountoid",null);
		testCase.setPropertyValue("useroid",null);
		testCase.setPropertyValue("assertid",null);
		testCase.setPropertyValue("SAMLassertion",null);
		testCase.setPropertyValue("tokentype","urn:dece:type:tokentype:usernamepassword");
		testCase.setPropertyValue("loopuntil","25");
		testCase.setPropertyValue("expectErrTypeSTS","SUCCESS");
		testCase.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
			
		log.info " SAML Assertion Expired ! re-generating Assertion";
		def RunSTS = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get SAML Assertion - STS")

				RunSTS.setPropertyValue("TCaseName",testCase.getName());
				RunSTS.setPropertyValue("TSuiteName",testSuite.getName());

				def runnerSTS = RunSTS.run( null , false )

				assert runnerSTS.status == Status.FINISHED;

		}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call LicAppCreate Request with Valid Data" disabled="true">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0");
testCase.setPropertyValue("expectErrTypeLAC","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedDeviceDDReq = testProject.getTestSuiteByName("Staging DeviceGet").getTestCaseByName("LicAppCreate Request");

FeedDeviceDDReq.setPropertyValue("TCaseName",testCase.getName());
FeedDeviceDDReq.setPropertyValue("TSuiteName",testSuite.getName());


def runnerTC = FeedDeviceDDReq.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Feed DeviceGet Request with Non-Existing NodeID">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));

testCase.setPropertyValue("SAMLassertion","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");
testCase.setPropertyValue("assertionUUID","_87aa3e8d-2de2-46dd-b572-414003e22e9a");
testCase.setPropertyValue("username","firstfullusername_20130612_06223");
testCase.setPropertyValue("password","testing");
testCase.setPropertyValue("accountoid","DEF5738E543B633AE0401F0A05990CC0");
testCase.setPropertyValue("useroid","DEF5738E544A633AE0401F0A05990CC0");
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:DEF5738E543A633AE0401F0A05990CC0");
testCase.setPropertyValue("DeviceID","urn:dece:deviceid:org:dece:DEF585C6AEA11471E0401F0A07994634");
testCase.setPropertyValue("DomainID","urn:dece:domainid:dece:DEF587A47AF1508CE0401F0A07994D03");
testCase.setPropertyValue("expectErrType","FORBIDDEN");
testCase.setPropertyValue("ErrorDataVal","1");

// setup Non-Existing Nodeid with the account
testCase.setPropertyValue("NodeID","700030");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedRTLReq = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request");

FeedRTLReq.setPropertyValue("TCaseName",testCase.getName());
FeedRTLReq.setPropertyValue("TSuiteName",testSuite.getName());

WsdlTestCaseRunner TSrunner = new WsdlTestCaseRunner( FeedRTLReq, null );

TSrunner.runTestStepByName("Get the DeviceGet Properties");
TSrunner.runTestStepByName("pem set");
assert TSrunner.status == Status.INITIALIZED;</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call DeviceGet Request">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )

WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );

TSrunnerRTC.runTestStepByName("DeviceGetRequest");

assert TSrunnerRTC.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract DeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Extract DeviceGet Information")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify theDeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Response Validation")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Re-Set Node id">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("NodeID","0701");</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value>30570</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>SAMLExpDate</con:name>
          <con:value>2012-04-18 16:10:01.0</con:value>
        </con:property>
        <con:property>
          <con:name>rcUUID</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>nodetype</con:name>
          <con:value>device</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>700030</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>firstfullusername_20130612_06223</con:value>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>testing</con:value>
        </con:property>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value>DEF5738E543B633AE0401F0A05990CC0</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value>DEF5738E544A633AE0401F0A05990CC0</con:value>
        </con:property>
        <con:property>
          <con:name>assertid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SAMLassertion</con:name>
          <con:value>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</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>loopuntil</con:name>
          <con:value>25</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTS</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value>_87aa3e8d-2de2-46dd-b572-414003e22e9a</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value>urn:dece:userid:org:dece:A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value>A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value>urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value>A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>AccountID</con:name>
          <con:value>urn:dece:accountid:org:dece:DEF5738E543A633AE0401F0A05990CC0</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeRTLGet</con:name>
          <con:value>FORBIDDEN</con:value>
        </con:property>
        <con:property>
          <con:name>ErrorDataVal</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>RightsResXml</con:name>
          <con:value><![CDATA[<ErrorList xmlns="http://www.decellc.org/schema/2010/10/dece" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Error ErrorID="token_rejected">
      <Reason>CN specified and Audience in Affiliation are disjoint</Reason>
      <OriginalRequest/>
      <ErrorLink/>
   </Error>
</ErrorList>]]></con:value>
        </con:property>
        <con:property>
          <con:name>RightsResTime</con:name>
          <con:value>373</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceID</con:name>
          <con:value>urn:dece:deviceid:org:dece:DEF585C6AEA11471E0401F0A07994634</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>FORBIDDEN</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetReqXml</con:name>
          <con:value>User-Agent: Apache-HttpClient/4.1.1 (java 1.5)
</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResXml</con:name>
          <con:value><![CDATA[<ErrorList xmlns="http://www.decellc.org/schema/2010/10/dece" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Error ErrorID="token_rejected">
      <Reason>CN specified and Audience in Affiliation are disjoint</Reason>
      <OriginalRequest/>
      <ErrorLink/>
   </Error>
</ErrorList>]]></con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResTime</con:name>
          <con:value>420</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetID</con:name>
          <con:value>CN specified and Audience in Affiliation are disjoint</con:value>
        </con:property>
        <con:property>
          <con:name>DomainID</con:name>
          <con:value>urn:dece:domainid:dece:DEF587A47AF1508CE0401F0A07994D03</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00008_DeviceGet_Retailer_FUNC_HouseholdAccount_User_Status_Inactive" searchProperties="true" id="b360be6d-9e2d-44a4-a6e8-e472d23caaa8" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="">
      <con:description>This test case will verify that Application Tier properly handles a DeviceGet request when invoked with the GET method and Invalid Account ID in request .

Expected Result:

System should return an Error message.</con:description>
      <con:settings/>
      <con:testStep type="groovy" name="Verify Node User SAML Asssertion" disabled="true">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.model.testsuite.TestRunner.Status


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def ValSamlAssertion = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Validate SAML Assertion");

	ValSamlAssertion.setPropertyValue("TCaseName",testCase.getName());
	ValSamlAssertion.setPropertyValue("TSuiteName",testSuite.getName());

	def runnerTc = ValSamlAssertion.run( null , false )
	assert runnerTc.status == Status.FINISHED;

	rcUUID = testCase.getPropertyValue("rcUUID");

	if (runnerTc.status != Status.FINISHED || rcUUID.toInteger()!= 1){

			
		testCase.setPropertyValue("nodetype","device");
		testCase.setPropertyValue("nodeid","0701");
		testCase.setPropertyValue("username","sch-drm_user1");
		testCase.setPropertyValue("password","Password1");
		testCase.setPropertyValue("accountoid",null);
		testCase.setPropertyValue("useroid",null);
		testCase.setPropertyValue("assertid",null);
		testCase.setPropertyValue("SAMLassertion",null);
		testCase.setPropertyValue("tokentype","urn:dece:type:tokentype:usernamepassword");
		testCase.setPropertyValue("loopuntil","25");
		testCase.setPropertyValue("expectErrTypeSTS","SUCCESS");
		testCase.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
			
		log.info " SAML Assertion Expired ! re-generating Assertion";
		def RunSTS = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get SAML Assertion - STS")

				RunSTS.setPropertyValue("TCaseName",testCase.getName());
				RunSTS.setPropertyValue("TSuiteName",testSuite.getName());

				def runnerSTS = RunSTS.run( null , false )

				assert runnerSTS.status == Status.FINISHED;

		}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call LicAppCreate Request with Valid Data" disabled="true">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0");
testCase.setPropertyValue("expectErrTypeLAC","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedDeviceDDReq = testProject.getTestSuiteByName("Staging DeviceGet").getTestCaseByName("LicAppCreate Request");

FeedDeviceDDReq.setPropertyValue("TCaseName",testCase.getName());
FeedDeviceDDReq.setPropertyValue("TSuiteName",testSuite.getName());


def runnerTC = FeedDeviceDDReq.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call DeviceUpdate Request for evict Cache" id="7ce02cd8-9a92-4c0f-b85d-9896c5c7b46e">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )
WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );


TSrunnerRTC.runTestStepByName("DeviceUpdateRequest");

assert TSrunnerRTC.status == Status.INITIALIZED;</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Get User Inactive Statuses">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def GetUserStatus = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get-Set User Status");

// Get ALL inactive Status from USER_STATUS_REF Except = 'Pending'

SqlStr = "select Status from USER_STATUS_REF where Status !='active'";

testCase.setPropertyValue("SqlStr",SqlStr);

GetUserStatus.setPropertyValue("TCaseName",testCase.getName());
GetUserStatus.setPropertyValue("TSuiteName",testSuite.getName());

WsdlTestCaseRunner TSrunner = new WsdlTestCaseRunner( GetUserStatus, null );

TSrunner.runTestStepByName("Get User Status for DVG");

assert TSrunner.status == Status.INITIALIZED;

 log.info " Current User Status: " + testCase.getPropertyValue("UserStatus");

testCase.getPropertyValue("UserStatusXML");</script>
        </con:config>
      </con:testStep>
      <con:testStep type="datasource" name="Feed DataSource for Inactive User Statuses">
        <con:settings/>
        <con:config xsi:type="con:DataSourceStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dataSource type="XML">
            <con:configuration><sourceStep>Get User Inactive Statuses</sourceStep><sourceProperty>result</sourceProperty><rowPath>//Results[1]/ResultSet[1]/Row</rowPath><columnPath>STATUS</columnPath></con:configuration>
          </con:dataSource>
          <con:property>UserStatus</con:property>
          <con:restartOnRun>true</con:restartOnRun>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Feed DeviceGet Request with Inactive User">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("SAMLassertion","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");
testCase.setPropertyValue("assertionUUID","_87aa3e8d-2de2-46dd-b572-414003e22e9a");
testCase.setPropertyValue("username","firstfullusername_20130612_06223");
testCase.setPropertyValue("password","testing");
testCase.setPropertyValue("accountoid","DEF5738E543B633AE0401F0A05990CC0");
testCase.setPropertyValue("useroid","DEF5738E544A633AE0401F0A05990CC0");
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:DEF5738E543A633AE0401F0A05990CC0");
testCase.setPropertyValue("DeviceID","urn:dece:deviceid:org:dece:DEF585C6AEA11471E0401F0A07994634");
testCase.setPropertyValue("DomainID","urn:dece:domainid:dece:DEF587A47AF1508CE0401F0A07994D03");
testCase.setPropertyValue("expectErrType","USER_NOT_ACTIVE");
testCase.setPropertyValue("ErrorDataVal","1");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedRTLReq = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request");

FeedRTLReq.setPropertyValue("TCaseName",testCase.getName());
FeedRTLReq.setPropertyValue("TSuiteName",testSuite.getName());

WsdlTestCaseRunner TSrunner = new WsdlTestCaseRunner( FeedRTLReq, null );

TSrunner.runTestStepByName("Get the DeviceGet Properties");
TSrunner.runTestStepByName("pem set");
assert TSrunner.status == Status.INITIALIZED;</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="SetUp User Inactive Status for DVG">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

// SetUp the Node Status from the Data Source

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

// Get NodeStatus Values from Data Source

def DsUserStatus = testRunner.testCase.testSteps['Feed DataSource for Inactive User Statuses'];
log.info  "User Status is to set to: " + DsUserStatus.getPropertyValue("UserStatus");

testCase.setPropertyValue("UserStatus",DsUserStatus.getPropertyValue("UserStatus"));

def SetUserStatus = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get-Set User Status");

SetUserStatus.setPropertyValue("TCaseName",testCase.getName());
SetUserStatus.setPropertyValue("TSuiteName",testSuite.getName());

WsdlTestCaseRunner TSrunner = new WsdlTestCaseRunner( SetUserStatus, null );

TSrunner.runTestStepByName("Set User Status for DVG")

assert TSrunner.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call DeviceGet Request">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )

WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );

TSrunnerRTC.runTestStepByName("DeviceGetRequest");

assert TSrunnerRTC.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract DeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Extract DeviceGet Information")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify theDeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Response Validation")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="datasourceloop" name="DataSource Loop">
        <con:settings/>
        <con:config>
          <dataSourceStep>Feed DataSource for Inactive User Statuses</dataSourceStep>
          <targetStep>SetUp User Inactive Status for DVG</targetStep>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Re-Set User Status to Active">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

// SetUp the Node Status from the Data Source

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

// Re - Set NodeStatus Value to Active


def SetUserStatus = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get-Set User Status");

SetUserStatus.setPropertyValue("TCaseName",testCase.getName());
SetUserStatus.setPropertyValue("TSuiteName",testSuite.getName());

testCase.setPropertyValue("UserStatus", "active");
log.info " Re-Set User Status to : " + testCase.getPropertyValue("UserStatus");

WsdlTestCaseRunner TSrunner = new WsdlTestCaseRunner( SetUserStatus, null );

TSrunner.runTestStepByName("Set User Status for DVG")

assert TSrunner.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SAMLExpDate</con:name>
          <con:value>2012-04-18 16:10:01.0</con:value>
        </con:property>
        <con:property>
          <con:name>rcUUID</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>nodetype</con:name>
          <con:value>device</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>0701</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>firstfullusername_20130612_06223</con:value>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>testing</con:value>
        </con:property>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">DEF5738E543B633AE0401F0A05990CC0</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">DEF5738E544A633AE0401F0A05990CC0</con:value>
        </con:property>
        <con:property>
          <con:name>assertid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SAMLassertion</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">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</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>loopuntil</con:name>
          <con:value>25</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTS</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value>_87aa3e8d-2de2-46dd-b572-414003e22e9a</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value>urn:dece:userid:org:dece:A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value>A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value>urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value>A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>AccountID</con:name>
          <con:value>urn:dece:accountid:org:dece:DEF5738E543A633AE0401F0A05990CC0</con:value>
        </con:property>
        <con:property>
          <con:name>ErrorDataVal</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>USER_NOT_ACTIVE</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetReqXml</con:name>
          <con:value>User-Agent: Apache-HttpClient/4.1.1 (java 1.5)
</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResXml</con:name>
          <con:value><![CDATA[<ErrorList xmlns="http://www.decellc.org/schema/2010/10/dece" xmlns:ns2="http://www.movielabs.com/schema/md/v1.07/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Error ErrorID="urn:dece:errorid:org:dece:RequestorNotActive">
      <Reason Language="en">The requestor is not active.</Reason>
      <OriginalRequest>https://qa.q.uvvu.com:7001/rest/1/0/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3AA06A9AA49F6E73D7E0401F0A059915F0/Domain/urn%3Adece%3Adomainid%3Adece%3AA09DA589BD63A036E0401F0A05996D9A/Device/urn%3Adece%3Adeviceid%3Aorg%3Adece%3AA09D9C22F11CBC6DE0401F0A05996898</OriginalRequest>
      <ErrorLink>https://qa.q.uvvu.com:7001/rest/1/0/error/en/ErrorList.html#RequestorNotActive</ErrorLink>
   </Error>
</ErrorList>]]></con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResTime</con:name>
          <con:value>144</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetID</con:name>
          <con:value>The identified user is not active.https://qa.q.uvvu.com:7001/rest/1/0/Account/urn%3Adece%3Aaccountid%3Aorg%3Aorg%3Aorg%3Adece%3AA06A9AA49F6E73D7E0401F0A059915F0/Device/urn%3Adece%3Adeviceid%3Aorg%3Adece%3AA09D9C22F11CBC6DE0401F0A05996898/DECEDomainhttps://qa.q.uvvu.com:7001/rest/1/0/error/en/ErrorList.html#UserNotActive</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceID</con:name>
          <con:value>urn:dece:deviceid:org:dece:DEF585C6AEA11471E0401F0A07994634</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeDVGGet</con:name>
          <con:value>ACCOUNTID NOT MATCH</con:value>
        </con:property>
        <con:property>
          <con:name>SqlStr</con:name>
          <con:value>select Status from USER_STATUS_REF where Status !='active'</con:value>
        </con:property>
        <con:property>
          <con:name>UserStatusXML</con:name>
          <con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <STATUS>archived</STATUS>
    </Row>
    <Row rowNumber='2'>
      <STATUS>blocked</STATUS>
    </Row>
    <Row rowNumber='3'>
      <STATUS>blocked:clg</STATUS>
    </Row>
    <Row rowNumber='4'>
      <STATUS>blocked:tou</STATUS>
    </Row>
    <Row rowNumber='5'>
      <STATUS>deleted</STATUS>
    </Row>
    <Row rowNumber='6'>
      <STATUS>forcedeleted</STATUS>
    </Row>
    <Row rowNumber='7'>
      <STATUS>mergedeleted</STATUS>
    </Row>
    <Row rowNumber='8'>
      <STATUS>other</STATUS>
    </Row>
    <Row rowNumber='9'>
      <STATUS>pending</STATUS>
    </Row>
    <Row rowNumber='10'>
      <STATUS>suspended</STATUS>
    </Row>
  </ResultSet>
</Results>]]></con:value>
        </con:property>
        <con:property>
          <con:name>UserStatus</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceStatusXML</con:name>
          <con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <STATUS>archived</STATUS>
    </Row>
    <Row rowNumber='2'>
      <STATUS>blocked</STATUS>
    </Row>
    <Row rowNumber='3'>
      <STATUS>blocked:clg</STATUS>
    </Row>
    <Row rowNumber='4'>
      <STATUS>blocked:tou</STATUS>
    </Row>
    <Row rowNumber='5'>
      <STATUS>deleted</STATUS>
    </Row>
    <Row rowNumber='6'>
      <STATUS>forceddelete</STATUS>
    </Row>
    <Row rowNumber='7'>
      <STATUS>other</STATUS>
    </Row>
    <Row rowNumber='8'>
      <STATUS>pending</STATUS>
    </Row>
    <Row rowNumber='9'>
      <STATUS>suspended</STATUS>
    </Row>
  </ResultSet>
</Results>]]></con:value>
        </con:property>
        <con:property>
          <con:name>DomainID</con:name>
          <con:value>urn:dece:domainid:dece:DEF587A47AF1508CE0401F0A07994D03</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>7ce02cd8-9a92-4c0f-b85d-9896c5c7b46e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00005_DeviceGet_Retailer_FUNC_with_Invalid_NodeID" searchProperties="true" id="da187bd1-8361-48ec-b6aa-e93fdc3371fc">
      <con:description>This test case will verify that Application Tier properly handles a RightsLockerDataGet  request when the nodeID supplied doesn't exist.

Expected Result:

System should return error message.</con:description>
      <con:settings/>
      <con:testStep type="groovy" name="Verify Node User SAML Asssertion" disabled="true">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.model.testsuite.TestRunner.Status


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def ValSamlAssertion = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Validate SAML Assertion");

	ValSamlAssertion.setPropertyValue("TCaseName",testCase.getName());
	ValSamlAssertion.setPropertyValue("TSuiteName",testSuite.getName());

	def runnerTc = ValSamlAssertion.run( null , false )
	assert runnerTc.status == Status.FINISHED;

	rcUUID = testCase.getPropertyValue("rcUUID");

	if (runnerTc.status != Status.FINISHED || rcUUID.toInteger()!= 1){

			
		testCase.setPropertyValue("nodetype","device");
		testCase.setPropertyValue("nodeid","0701");
		testCase.setPropertyValue("username","sch-drm_user1");
		testCase.setPropertyValue("password","Password1");
		testCase.setPropertyValue("accountoid",null);
		testCase.setPropertyValue("useroid",null);
		testCase.setPropertyValue("assertid",null);
		testCase.setPropertyValue("SAMLassertion",null);
		testCase.setPropertyValue("tokentype","urn:dece:type:tokentype:usernamepassword");
		testCase.setPropertyValue("loopuntil","25");
		testCase.setPropertyValue("expectErrTypeSTS","SUCCESS");
		testCase.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
			
		log.info " SAML Assertion Expired ! re-generating Assertion";
		def RunSTS = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get SAML Assertion - STS")

				RunSTS.setPropertyValue("TCaseName",testCase.getName());
				RunSTS.setPropertyValue("TSuiteName",testSuite.getName());

				def runnerSTS = RunSTS.run( null , false )

				assert runnerSTS.status == Status.FINISHED;

		}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call LicAppCreate Request with Valid Data" disabled="true">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0");
testCase.setPropertyValue("expectErrTypeLAC","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedDeviceDDReq = testProject.getTestSuiteByName("Staging DeviceGet").getTestCaseByName("LicAppCreate Request");

FeedDeviceDDReq.setPropertyValue("TCaseName",testCase.getName());
FeedDeviceDDReq.setPropertyValue("TSuiteName",testSuite.getName());


def runnerTC = FeedDeviceDDReq.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Feed DeviceGet Request with Invalid NodeID">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("SAMLassertion","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");
testCase.setPropertyValue("assertionUUID","_87aa3e8d-2de2-46dd-b572-414003e22e9a");
testCase.setPropertyValue("username","firstfullusername_20130612_06223");
testCase.setPropertyValue("password","testing");
testCase.setPropertyValue("accountoid","DEF5738E543B633AE0401F0A05990CC0");
testCase.setPropertyValue("useroid","DEF5738E544A633AE0401F0A05990CC0");
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:DEF5738E543A633AE0401F0A05990CC0");
testCase.setPropertyValue("DeviceID","urn:dece:deviceid:org:dece:DEF585C6AEA11471E0401F0A07994634");
testCase.setPropertyValue("DomainID","urn:dece:domainid:dece:DEF587A47AF1508CE0401F0A07994D03");
testCase.setPropertyValue("expectErrType","FORBIDDEN");
testCase.setPropertyValue("ErrorDataVal","1");

// setup Non-Existing Nodeid with the account
testCase.setPropertyValue("NodeID","700030");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedRTLReq = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request");

FeedRTLReq.setPropertyValue("TCaseName",testCase.getName());
FeedRTLReq.setPropertyValue("TSuiteName",testSuite.getName());

WsdlTestCaseRunner TSrunner = new WsdlTestCaseRunner( FeedRTLReq, null );

TSrunner.runTestStepByName("Get the DeviceGet Properties");
TSrunner.runTestStepByName("pem set");
assert TSrunner.status == Status.INITIALIZED;</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call DeviceGet Request">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )

WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );

TSrunnerRTC.runTestStepByName("DeviceGetRequest");

assert TSrunnerRTC.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract DeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Extract DeviceGet Information")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify theDeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Response Validation")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Re-Set Node id">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("nodeid","0701");
testCase.setPropertyValue("SAMLassertion","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");
testCase.setPropertyValue("assertionUUID","_87aa3e8d-2de2-46dd-b572-414003e22e9a");
testCase.setPropertyValue("username","firstfullusername_20130612_06223");
testCase.setPropertyValue("password","testing");
testCase.setPropertyValue("accountoid","DEF5738E543B633AE0401F0A05990CC0");
testCase.setPropertyValue("useroid","DEF5738E544A633AE0401F0A05990CC0");
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:DEF5738E543A633AE0401F0A05990CC0");
testCase.setPropertyValue("DeviceID","urn:dece:deviceid:org:dece:DEF585C6AEA11471E0401F0A07994634");

testCase.setPropertyValue("DomainID","urn:dece:domainid:dece:DEF587A47AF1508CE0401F0A07994D03"); 


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedRTLReq = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request");

FeedRTLReq.setPropertyValue("TCaseName",testCase.getName());
FeedRTLReq.setPropertyValue("TSuiteName",testSuite.getName());

WsdlTestCaseRunner TSrunner = new WsdlTestCaseRunner( FeedRTLReq, null );

TSrunner.runTestStepByName("Get the DeviceGet Properties");
TSrunner.runTestStepByName("pem set");
assert TSrunner.status == Status.INITIALIZED;</script></con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value>30570</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>SAMLExpDate</con:name>
          <con:value>2012-04-18 16:10:01.0</con:value>
        </con:property>
        <con:property>
          <con:name>rcUUID</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>nodetype</con:name>
          <con:value>device</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>0701</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>firstfullusername_20130612_06223</con:value>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>testing</con:value>
        </con:property>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value>DEF5738E543B633AE0401F0A05990CC0</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value>DEF5738E544A633AE0401F0A05990CC0</con:value>
        </con:property>
        <con:property>
          <con:name>assertid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SAMLassertion</con:name>
          <con:value>nVdpc6pKE/7ur7A8Hy3D5oaVpGpYVFRUBBf4cgthQJRNBgT99e9gosfk5OTNvVWpitP0dD+9TM8zz8gMfLoHEIJJ6kVhVRJeav90O6bJwK7doG1IN5pt225sWx38i2qSJANpGrJmrSohlEEpRKkZpi81mqSYBtluULRG0b0W/us8teiWUauuYIKwaazyRNaqReCHqHd1+1LLkrAXmchDvdAMIOqlVk8F8qSHNXvmDVPt9fkN5dVh8rpL07hHENaTDS3o+9aTFQXEM/FB59lGPdVzQzPNEvju00Yvtfe9eZ4/5cxTlLgETZIkQbIE1rGR5/6qvVZum6EthU70tubNMAo9y/S9i1mCkmG6i+wq8N0o8dJd8BfTFEGRpekGLKyGRTXDXzXit4Mruh9a+gAyQWYD7UzqZmwBHZjA0ILV5UJ6qf36WQXf9mqJGSInSgL0af3vIMHwBP0ohnYD3SK7ofu5xS/S9foMrZ4UWn6GvBOclm0SmxZE1XkCHa+YeAg3n42q1/JXC3TrMGj9m5I8E484MWzii8wIngtR+l/q9VirNysr08/gq21mCa/b9XV97ygnlx7F2oISl1R/3ny5QnhUfgN1L/X7+nOj3vvqfdOM2pOh49gXXZ/wW2FjCqrVFYB4ljVrZguTyBLlBaHKmXiM18TUTLlwNerE9TUKDD50wvO+OwQrekAeh3wFjQb1UUtZzdqbZHieZ8SO6vDCkNWngQ62QE1jbhAoBKH2SX5jaEzfG6oTn0W6fCHcgrH7zNHY8ItseZaTysxDLe4wlFOvXU8ulA4P0svvmB5jKOMaw/M1yPL3pkWygpma9wVfTgoHH88UvsqSxNcFngeQd0EuccCVuMkFTDn3cNwdvAGbkxxQln0ggLO8ALng6sJKUcZibq9WvrGS+n1OXjTzIdCFCv4giMVKMDYj0lwbsU73SUPlOHuziLbMKLaHh3y4s6ayJudTTTrLe7GYaiK5vsrcAq8v8l6mZtqSqaz3HCsvxFzIrx4FMd9NjfUi1pdsbl1ERQbNAaCWIr+Th1qwoixmsbP24kQGh6uc28n8aiUXogbmFc6drnBsGt83Yiuw423g7x6MD7FxzR6sztuBnxkXcS/z4oBXjwNV2jKCIo7AQl9u16uDue6fKtZwCrY3j17LMzdR7hrdXFD00TgypN3JmgJF5DgF4HSRQJYGIxANOCA3gVdc+D3Xjni7nxMjGlXqrD9ob87ecYPMAembVLdL6ZN1e35sC2JYN8bZdr+Td5v+rD5W7dOSTdmLjk71U9v0KKuIHWUjDtNx4QwVtbKdC8XGGtZtd0T4F7afyJ0RSC7nnS+7i3TdnqHz1nOcNbeZNf2O48vMInZ8Jz6juhYph4Rsc5ChCf18GqcV4MocAIP9cs8pMtctk2pLuaLLnAn6YpqBy55Ox/TqOBqefEtnQFSM17P94b0wtpCLHJErIm4rsYIPkV0WYaguxf4eLDnXTThX7HOKJQBFl8a5jvO1HGLlz3nsX/PoihwQGQO02WGFWZJsOkvVZhOcQ24Z9tmdfCzWdjsgO0coTtRp3MxlNHVCYx0d5MBLlkmmLsfj6aTYatngsMezyiHV8YkxKuLpEANvOtZ2ByESzHms62lcD63ESqU4kKXiMjPQvuttA3JUb1HcnBSsDr0MtvlyYIrGOHFVajxchHOmw1ZQ5pyHQX3fzdd1TW3HHRtPBeF8JoxkRUYg6rOL1tEuaPqwW+aTdu6MwGFr0tPCZ7kzK44NzcoXynitBvVWpXWaTALyohHNaTzL1UHeFBWlzticNtRQnHh61nWLZBbatG6m7ZNBrtpe7B9YOjtozZhZuQEu1vxkxx15XlGaG8sI3E5sjYgFcQJix5lIg/P2Yl7iYGa9DdDP0+EufJsfxONk+TB6bqRDxd0KrfS2LC8gSaj28a1gpt8TmFLi2Q3nqtqLSxaEUhimtddyV0leehmmOJ7dw1fG21oQ+60O0xVbzSbbZhggkk2S6pOAbLEsyfPkjeW8ofgEkY9Cxyt9lTzu7Zb6HqAV9BAMbZg0TlFm7SCqfWOxzFdVChf4+o1CBLUI88Qmy5M0wwhsk+pwQOgIFMOKtMCSNM93WoCvVadROgtnCXBSmHzkiK0PHHEBLS/2YEkk329TlOKMHM1TlvrU08l8CmGGmWZSkr0e3ey2COQFsQ9LvIQfuV5IzGeq9hTv4ut1/tc4Pn+7hYx1bK9UQCVoDuKywS9YbfOG+I/Iml+y35t5kNleeWvj/KWJZ70h+fjpd1uU/XDvCbJD0jfMd9Ufb6X+3Ep8g4j4nIy7J/vkPfi9cXNMNzEhuVJyhIt2NJ+OT9nplF3L1CnJVoLNExRBtgkVWhlmTGctOsCQuJsgfkRW76g/eb7LP+LL0l2opvjAB7inqtflD14qKkTlS0XCZ6L46TPog0uctxQW6Vcy3scPmhLxt28eq2eVelg8x//yKLF/l+sLWw9+cJzlhPNCt1yV1PT8l66wImzWw1MuSh6Nf2XgK+cfhfck37GkuJu2WQr//qVajq+XmmlZURamklC7Ch5H6hVneo5h77fSH2au5PCd7Rfor2x/I09UPNwCs3bX9f6/csO7tosF8S7kXbG81Ar8cMXOQ/dhhL8D/HqKM+C7Kf4xktc/xH9KHnL6+Ty8/g8=</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>loopuntil</con:name>
          <con:value>25</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTS</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value>_87aa3e8d-2de2-46dd-b572-414003e22e9a</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value>urn:dece:userid:org:dece:A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value>A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value>urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value>A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>AccountID</con:name>
          <con:value>urn:dece:accountid:org:dece:DEF5738E543A633AE0401F0A05990CC0</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeRTLGet</con:name>
          <con:value>FORBIDDEN</con:value>
        </con:property>
        <con:property>
          <con:name>ErrorDataVal</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>RightsResXml</con:name>
          <con:value><![CDATA[<ErrorList xmlns="http://www.decellc.org/schema/2010/10/dece" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Error ErrorID="token_rejected">
      <Reason>CN specified and Audience in Affiliation are disjoint</Reason>
      <OriginalRequest/>
      <ErrorLink/>
   </Error>
</ErrorList>]]></con:value>
        </con:property>
        <con:property>
          <con:name>RightsResTime</con:name>
          <con:value>373</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceID</con:name>
          <con:value>urn:dece:deviceid:org:dece:DEF585C6AEA11471E0401F0A07994634</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>FORBIDDEN</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetReqXml</con:name>
          <con:value>User-Agent: Apache-HttpClient/4.1.1 (java 1.5)
</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResXml</con:name>
          <con:value><![CDATA[<ErrorList xmlns="http://www.decellc.org/schema/2010/10/dece" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Error ErrorID="token_rejected">
      <Reason>CN specified and Audience in Affiliation are disjoint</Reason>
      <OriginalRequest/>
      <ErrorLink/>
   </Error>
</ErrorList>]]></con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResTime</con:name>
          <con:value>442</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetID</con:name>
          <con:value>CN specified and Audience in Affiliation are disjoint</con:value>
        </con:property>
        <con:property>
          <con:name>DomainID</con:name>
          <con:value>urn:dece:domainid:dece:DEF587A47AF1508CE0401F0A07994D03</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    
    <con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00007_DeviceGet_Retailer_FUNC_with_InActive AccountID" searchProperties="true" id="00eb7e42-a2c8-4e6f-9034-ac785d0fab02" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" disabled="true">
      <con:description>This test case will verify that Application Tier properly handles a DeviceGet request when invoked with the GET method and Invalid Account ID in request .

Expected Result:

System should return an Error message.</con:description>
      <con:settings/>
      <con:testStep type="groovy" name="Verify Node User SAML Asssertion" disabled="true">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.model.testsuite.TestRunner.Status


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def ValSamlAssertion = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Validate SAML Assertion");

	ValSamlAssertion.setPropertyValue("TCaseName",testCase.getName());
	ValSamlAssertion.setPropertyValue("TSuiteName",testSuite.getName());

	def runnerTc = ValSamlAssertion.run( null , false )
	assert runnerTc.status == Status.FINISHED;

	rcUUID = testCase.getPropertyValue("rcUUID");

	if (runnerTc.status != Status.FINISHED || rcUUID.toInteger()!= 1){

			
		testCase.setPropertyValue("nodetype","device");
		testCase.setPropertyValue("nodeid","0701");
		testCase.setPropertyValue("username","sch-drm_user1");
		testCase.setPropertyValue("password","Password1");
		testCase.setPropertyValue("accountoid",null);
		testCase.setPropertyValue("useroid",null);
		testCase.setPropertyValue("assertid",null);
		testCase.setPropertyValue("SAMLassertion",null);
		testCase.setPropertyValue("tokentype","urn:dece:type:tokentype:usernamepassword");
		testCase.setPropertyValue("loopuntil","25");
		testCase.setPropertyValue("expectErrTypeSTS","SUCCESS");
		testCase.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
			
		log.info " SAML Assertion Expired ! re-generating Assertion";
		def RunSTS = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get SAML Assertion - STS")

				RunSTS.setPropertyValue("TCaseName",testCase.getName());
				RunSTS.setPropertyValue("TSuiteName",testSuite.getName());

				def runnerSTS = RunSTS.run( null , false )

				assert runnerSTS.status == Status.FINISHED;

		}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call LicAppCreate Request with Valid Data" disabled="true">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0");
testCase.setPropertyValue("expectErrTypeLAC","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedDeviceDDReq = testProject.getTestSuiteByName("Staging DeviceGet").getTestCaseByName("LicAppCreate Request");

FeedDeviceDDReq.setPropertyValue("TCaseName",testCase.getName());
FeedDeviceDDReq.setPropertyValue("TSuiteName",testSuite.getName());


def runnerTC = FeedDeviceDDReq.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call DeviceUpdate Request for evict Cache" id="8286f044-b25e-447e-99c8-2bd8cfe5de53">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )
WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );


TSrunnerRTC.runTestStepByName("DeviceUpdateRequest");

assert TSrunnerRTC.status == Status.INITIALIZED;</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Get Account Inactive Statuses">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def GetAccountStatus = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get-Set Account Status");

// Get ALL inactive Status from ACCOUNT_STATUS_REF Except = 'Pending'

SqlStr = "select Status from ACCOUNT_STATUS_REF where Status !='active'";

testCase.setPropertyValue("SqlStr",SqlStr);

GetAccountStatus.setPropertyValue("TCaseName",testCase.getName());
GetAccountStatus.setPropertyValue("TSuiteName",testSuite.getName());

WsdlTestCaseRunner TSrunner = new WsdlTestCaseRunner( GetAccountStatus, null );

TSrunner.runTestStepByName("Get Account Status for DVG");

assert TSrunner.status == Status.INITIALIZED;

 log.info " Current Account Status: " + testCase.getPropertyValue("AccountStatus");

testCase.getPropertyValue("AccountStatusXML");</script>
        </con:config>
      </con:testStep>
      <con:testStep type="datasource" name="Feed DataSource for Inactive Account Statuses">
        <con:settings/>
        <con:config xsi:type="con:DataSourceStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dataSource type="XML">
            <con:configuration><sourceStep>Get Account Inactive Statuses</sourceStep><sourceProperty>result</sourceProperty><rowPath>//Results[1]/ResultSet[1]/Row</rowPath><columnPath>STATUS</columnPath></con:configuration>
          </con:dataSource>
          <con:property>AccountStatus</con:property>
          <con:restartOnRun>true</con:restartOnRun>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Feed DeviceGet Request with Inactive AccountID">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("SAMLassertion","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");
testCase.setPropertyValue("assertionUUID","_87aa3e8d-2de2-46dd-b572-414003e22e9a");
testCase.setPropertyValue("username","firstfullusername_20130612_06223");
testCase.setPropertyValue("password","testing");
testCase.setPropertyValue("accountoid","DEF5738E543B633AE0401F0A05990CC0");
testCase.setPropertyValue("useroid","DEF5738E544A633AE0401F0A05990CC0");
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:DEF5738E543A633AE0401F0A05990CC0");
testCase.setPropertyValue("DeviceID","urn:dece:deviceid:org:dece:DEF585C6AEA11471E0401F0A07994634");
testCase.setPropertyValue("DomainID","urn:dece:domainid:dece:DEF587A47AF1508CE0401F0A07994D03"); 
testCase.setPropertyValue("expectErrType","ACCOUNT_NOT_ACTIVE");
testCase.setPropertyValue("ErrorDataVal","1");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedRTLReq = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request");

FeedRTLReq.setPropertyValue("TCaseName",testCase.getName());
FeedRTLReq.setPropertyValue("TSuiteName",testSuite.getName());

WsdlTestCaseRunner TSrunner = new WsdlTestCaseRunner( FeedRTLReq, null );

TSrunner.runTestStepByName("Get the DeviceGet Properties");
TSrunner.runTestStepByName("pem set");
assert TSrunner.status == Status.INITIALIZED;</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="SetUp inactive Account Status for DVG">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

// SetUp the Node Status from the Data Source

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

// Get AccountStatus Values from Data Source

def DsAccountStatus = testRunner.testCase.testSteps['Feed DataSource for Inactive Account Statuses'];
log.info  "Account Status is to set to: " + DsAccountStatus.getPropertyValue("AccountStatus");

testCase.setPropertyValue("AccountStatus",DsAccountStatus.getPropertyValue("AccountStatus"));

def SetAccountStatus = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get-Set Account Status");

SetAccountStatus.setPropertyValue("TCaseName",testCase.getName());
SetAccountStatus.setPropertyValue("TSuiteName",testSuite.getName());

WsdlTestCaseRunner TSrunner = new WsdlTestCaseRunner( SetAccountStatus, null );

TSrunner.runTestStepByName("Set Account Status for DVG")

assert TSrunner.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call DeviceGet Request">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )

WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );

TSrunnerRTC.runTestStepByName("DeviceGetRequest");

assert TSrunnerRTC.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract DeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Extract DeviceGet Information")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify theDeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Response Validation")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="datasourceloop" name="DataSource Loop">
        <con:settings/>
        <con:config><dataSourceStep>Feed DataSource for Inactive Account Statuses</dataSourceStep><targetStep>SetUp inactive Account Status for DVG</targetStep></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Re-Setactive Account Status">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

// SetUp the Node Status from the Data Source

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

// Re-set AccountStatus Values  = 'active'

testCase.setPropertyValue("AccountStatus","active");

def SetAccountStatus = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get-Set Account Status");

SetAccountStatus.setPropertyValue("TCaseName",testCase.getName());
SetAccountStatus.setPropertyValue("TSuiteName",testSuite.getName());

WsdlTestCaseRunner TSrunner = new WsdlTestCaseRunner( SetAccountStatus, null );

TSrunner.runTestStepByName("Set Account Status for DVG")

assert TSrunner.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SAMLExpDate</con:name>
          <con:value>2014-06-11 06:24:48.0</con:value>
        </con:property>
        <con:property>
          <con:name>rcUUID</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>nodetype</con:name>
          <con:value>device</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>0701</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>firstfullusername_20130612_06223</con:value>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>testing</con:value>
        </con:property>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">DEF5738E543B633AE0401F0A05990CC0</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">DEF5738E544A633AE0401F0A05990CC0</con:value>
        </con:property>
        <con:property>
          <con:name>assertid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SAMLassertion</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">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</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>loopuntil</con:name>
          <con:value>25</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTS</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value>_87aa3e8d-2de2-46dd-b572-414003e22e9a</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value>urn:dece:userid:org:dece:A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value>A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value>urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value>A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>AccountID</con:name>
          <con:value>urn:dece:accountid:org:dece:DEF5738E543A633AE0401F0A05990CC0</con:value>
        </con:property>
        <con:property>
          <con:name>ErrorDataVal</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>ACCOUNT_NOT_ACTIVE</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetReqXml</con:name>
          <con:value>User-Agent: Apache-HttpClient/4.1.1 (java 1.5)
</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResXml</con:name>
          <con:value><![CDATA[<ErrorList xmlns="http://www.decellc.org/schema/2010/10/dece" xmlns:ns2="http://www.movielabs.com/schema/md/v1.07/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Error ErrorID="urn:dece:errorid:org:dece:AccountNotActive">
      <Reason Language="en">The identified account is not active.</Reason>
      <OriginalRequest>https://qa.q.uvvu.com:7001/rest/1/0/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3AA06A9AA49F6E73D7E0401F0A059915F0/Domain/urn%3Adece%3Adomainid%3Adece%3AA09DA589BD63A036E0401F0A05996D9A/Device/urn%3Adece%3Adeviceid%3Aorg%3Adece%3AA09D9C22F11CBC6DE0401F0A05996898</OriginalRequest>
      <ErrorLink>https://qa.q.uvvu.com:7001/rest/1/0/error/en/ErrorList.html#AccountNotActive</ErrorLink>
   </Error>
</ErrorList>]]></con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResTime</con:name>
          <con:value>938</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetID</con:name>
          <con:value>The supplied AccountID is invalid.https://qa.q.uvvu.com:7001/rest/1/0/Account/urn%3Adece%3Aaccountid%3Aorg%3Aorg%3Aorg%3Adece%3AA06A9AA49F6E73D7E0401F0A059915F0/Device/urn%3Adece%3Adeviceid%3Aorg%3Adece%3AA09D9C22F11CBC6DE0401F0A05996898/DECEDomainhttps://qa.q.uvvu.com:7001/rest/1/0/error/en/ErrorList.html#AccountIdNotValid</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceID</con:name>
          <con:value>urn:dece:deviceid:org:dece:DEF585C6AEA11471E0401F0A07994634</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeDVGGet</con:name>
          <con:value>ACCOUNTID NOT MATCH</con:value>
        </con:property>
        <con:property>
          <con:name>SqlStr</con:name>
          <con:value>select Status from ACCOUNT_STATUS_REF where Status !='active'</con:value>
        </con:property>
        <con:property>
          <con:name>AccountStatusXML</con:name>
          <con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <STATUS>archived</STATUS>
    </Row>
    <Row rowNumber='2'>
      <STATUS>blocked</STATUS>
    </Row>
    <Row rowNumber='3'>
      <STATUS>blocked:tou</STATUS>
    </Row>
    <Row rowNumber='4'>
      <STATUS>deleted</STATUS>
    </Row>
    <Row rowNumber='5'>
      <STATUS>forcedeleted</STATUS>
    </Row>
    <Row rowNumber='6'>
      <STATUS>mergedeleted</STATUS>
    </Row>
    <Row rowNumber='7'>
      <STATUS>other</STATUS>
    </Row>
    <Row rowNumber='8'>
      <STATUS>pending</STATUS>
    </Row>
    <Row rowNumber='9'>
      <STATUS>suspended</STATUS>
    </Row>
  </ResultSet>
</Results>]]></con:value>
        </con:property>
        <con:property>
          <con:name>AccountStatus</con:name>
          <con:value>active</con:value>
        </con:property>
        <con:property>
          <con:name>DomainID</con:name>
          <con:value>urn:dece:domainid:dece:DEF587A47AF1508CE0401F0A07994D03</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>8286f044-b25e-447e-99c8-2bd8cfe5de53</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase>
    <con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00009_DeviceGet_Retailer_FUNC_with_Invalid DeviceID" searchProperties="true" id="6b77230e-6b88-463e-9c95-272962b883b8" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="">
      <con:description>This test case will verify that Application Tier properly handles a DeviceGet request when invoked with the GET method and Invalid Account ID in request .

Expected Result:

System should return an Error message.</con:description>
      <con:settings/>
      <con:testStep type="groovy" name="Verify Node User SAML Asssertion" disabled="true">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.model.testsuite.TestRunner.Status


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def ValSamlAssertion = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Validate SAML Assertion");

	ValSamlAssertion.setPropertyValue("TCaseName",testCase.getName());
	ValSamlAssertion.setPropertyValue("TSuiteName",testSuite.getName());

	def runnerTc = ValSamlAssertion.run( null , false )
	assert runnerTc.status == Status.FINISHED;

	rcUUID = testCase.getPropertyValue("rcUUID");

	if (runnerTc.status != Status.FINISHED || rcUUID.toInteger()!= 1){

			
		testCase.setPropertyValue("nodetype","device");
		testCase.setPropertyValue("nodeid","0701");
		testCase.setPropertyValue("username","sch-drm_user1");
		testCase.setPropertyValue("password","Password1");
		testCase.setPropertyValue("accountoid",null);
		testCase.setPropertyValue("useroid",null);
		testCase.setPropertyValue("assertid",null);
		testCase.setPropertyValue("SAMLassertion",null);
		testCase.setPropertyValue("tokentype","urn:dece:type:tokentype:usernamepassword");
		testCase.setPropertyValue("loopuntil","25");
		testCase.setPropertyValue("expectErrTypeSTS","SUCCESS");
		testCase.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
			
		log.info " SAML Assertion Expired ! re-generating Assertion";
		def RunSTS = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get SAML Assertion - STS")

				RunSTS.setPropertyValue("TCaseName",testCase.getName());
				RunSTS.setPropertyValue("TSuiteName",testSuite.getName());

				def runnerSTS = RunSTS.run( null , false )

				assert runnerSTS.status == Status.FINISHED;

		}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call LicAppCreate Request with Valid Data" disabled="true">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0");
testCase.setPropertyValue("expectErrTypeLAC","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedDeviceDDReq = testProject.getTestSuiteByName("Staging DeviceGet").getTestCaseByName("LicAppCreate Request");

FeedDeviceDDReq.setPropertyValue("TCaseName",testCase.getName());
FeedDeviceDDReq.setPropertyValue("TSuiteName",testSuite.getName());


def runnerTC = FeedDeviceDDReq.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Feed DeviceGet Request with Invalid DeviceID">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("SAMLassertion","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");
testCase.setPropertyValue("assertionUUID","_87aa3e8d-2de2-46dd-b572-414003e22e9a");
testCase.setPropertyValue("username","firstfullusername_20130612_06223");
testCase.setPropertyValue("password","testing");
testCase.setPropertyValue("accountoid","DEF5738E543B633AE0401F0A05990CC0");
testCase.setPropertyValue("useroid","DEF5738E544A633AE0401F0A05990CC0");
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:DEF5738E543A633AE0401F0A05990CC0");
testCase.setPropertyValue("DeviceID","urn:dece:deviceid:org:org:dece:DEF585C6AEA11471E0401F0A07994634");//invalid device id format
testCase.setPropertyValue("DomainID","urn:dece:domainid:dece:DEF587A47AF1508CE0401F0A07994D03"); 
testCase.setPropertyValue("expectErrType","DEVICEID_NOT_FOUND");
testCase.setPropertyValue("ErrorDataVal","1");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedRTLReq = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request");

FeedRTLReq.setPropertyValue("TCaseName",testCase.getName());
FeedRTLReq.setPropertyValue("TSuiteName",testSuite.getName());

WsdlTestCaseRunner TSrunner = new WsdlTestCaseRunner( FeedRTLReq, null );

TSrunner.runTestStepByName("Get the DeviceGet Properties");
TSrunner.runTestStepByName("pem set");
assert TSrunner.status == Status.INITIALIZED;</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call DeviceGet Request">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )

WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );

TSrunnerRTC.runTestStepByName("DeviceGetRequest");

assert TSrunnerRTC.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract DeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Extract DeviceGet Information")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify theDeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Response Validation")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SAMLExpDate</con:name>
          <con:value>2013-06-14 18:31:45.0</con:value>
        </con:property>
        <con:property>
          <con:name>rcUUID</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>nodetype</con:name>
          <con:value>device</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>0701</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>firstfullusername_20130612_06223</con:value>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>testing</con:value>
        </con:property>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">DEF5738E543B633AE0401F0A05990CC0</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">DEF5738E544A633AE0401F0A05990CC0</con:value>
        </con:property>
        <con:property>
          <con:name>assertid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SAMLassertion</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">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</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>loopuntil</con:name>
          <con:value>25</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTS</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value>_87aa3e8d-2de2-46dd-b572-414003e22e9a</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value>urn:dece:userid:org:dece:A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value>A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value>urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value>A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>AccountID</con:name>
          <con:value>urn:dece:accountid:org:dece:DEF5738E543A633AE0401F0A05990CC0</con:value>
        </con:property>
        <con:property>
          <con:name>ErrorDataVal</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>DEVICEID_NOT_FOUND</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetReqXml</con:name>
          <con:value>User-Agent: Apache-HttpClient/4.1.1 (java 1.5)
</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResXml</con:name>
          <con:value><![CDATA[<ErrorList xmlns="http://www.decellc.org/schema/2010/10/dece" xmlns:ns2="http://www.movielabs.com/schema/md/v1.07/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Error ErrorID="urn:dece:errorid:org:dece:DeviceIdInvalid">
      <Reason Language="en">Device ID Invalid.</Reason>
      <OriginalRequest>https://qa.q.uvvu.com:7001/rest/1/0/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3AA06A9AA49F6E73D7E0401F0A059915F0/Domain/urn%3Adece%3Adomainid%3Adece%3AA09DA589BD63A036E0401F0A05996D9A/Device/urn%3Adece%3Adeviceid%3Aorg%3Atree%3Adece%3AA09D9C22F11CBC6DE0401F0A05996898</OriginalRequest>
      <ErrorLink>https://qa.q.uvvu.com:7001/rest/1/0/error/en/ErrorList.html#DeviceIdInvalid</ErrorLink>
   </Error>
</ErrorList>]]></con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResTime</con:name>
          <con:value>156</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetID</con:name>
          <con:value>Device ID Invalid.https://qa.q.uvvu.com:7001/rest/1/0/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3AA06A9AA49F6E73D7E0401F0A059915F0/Device/urn%3Adece%3Adeviceid%3Aorg%3Atree%3Adece%3AA09D9C22F11CBC6DE0401F0A05996898/DECEDomainhttps://qa.q.uvvu.com:7001/rest/1/0/error/en/ErrorList.html#DeviceIdInvalid</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceID</con:name>
          <con:value>urn:dece:deviceid:org:org:dece:DEF585C6AEA11471E0401F0A07994634</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeDVGGet</con:name>
          <con:value>ACCOUNTID NOT MATCH</con:value>
        </con:property>
        <con:property>
          <con:name>DomainID</con:name>
          <con:value>urn:dece:domainid:dece:DEF587A47AF1508CE0401F0A07994D03</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00010_DeviceGet_Retailer_FUNC_with_Non_Existing_ DeviceID" searchProperties="true" id="2cf4d3dc-53b7-443c-8b06-abd0fe977cbc">
      <con:description>This test case will verify that Application Tier properly handles a DeviceGet request when invoked with the GET method and Invalid Account ID in request .

Expected Result:

System should return an Error message.</con:description>
      <con:settings/>
      <con:testStep type="groovy" name="Verify Node User SAML Asssertion" disabled="true">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.model.testsuite.TestRunner.Status


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def ValSamlAssertion = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Validate SAML Assertion");

	ValSamlAssertion.setPropertyValue("TCaseName",testCase.getName());
	ValSamlAssertion.setPropertyValue("TSuiteName",testSuite.getName());

	def runnerTc = ValSamlAssertion.run( null , false )
	assert runnerTc.status == Status.FINISHED;

	rcUUID = testCase.getPropertyValue("rcUUID");

	if (runnerTc.status != Status.FINISHED || rcUUID.toInteger()!= 1){

			
		testCase.setPropertyValue("nodetype","device");
		testCase.setPropertyValue("nodeid","0701");
		testCase.setPropertyValue("username","sch-drm_user1");
		testCase.setPropertyValue("password","Password1");
		testCase.setPropertyValue("accountoid",null);
		testCase.setPropertyValue("useroid",null);
		testCase.setPropertyValue("assertid",null);
		testCase.setPropertyValue("SAMLassertion",null);
		testCase.setPropertyValue("tokentype","urn:dece:type:tokentype:usernamepassword");
		testCase.setPropertyValue("loopuntil","25");
		testCase.setPropertyValue("expectErrTypeSTS","SUCCESS");
		testCase.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
			
		log.info " SAML Assertion Expired ! re-generating Assertion";
		def RunSTS = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get SAML Assertion - STS")

				RunSTS.setPropertyValue("TCaseName",testCase.getName());
				RunSTS.setPropertyValue("TSuiteName",testSuite.getName());

				def runnerSTS = RunSTS.run( null , false )

				assert runnerSTS.status == Status.FINISHED;

		}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call LicAppCreate Request with Valid Data" disabled="true">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0");
testCase.setPropertyValue("expectErrTypeLAC","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedDeviceDDReq = testProject.getTestSuiteByName("Staging DeviceGet").getTestCaseByName("LicAppCreate Request");

FeedDeviceDDReq.setPropertyValue("TCaseName",testCase.getName());
FeedDeviceDDReq.setPropertyValue("TSuiteName",testSuite.getName());


def runnerTC = FeedDeviceDDReq.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Feed DeviceGet Request with Non-Existing DeviceID">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("SAMLassertion","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");
testCase.setPropertyValue("assertionUUID","_87aa3e8d-2de2-46dd-b572-414003e22e9a");
testCase.setPropertyValue("username","firstfullusername_20130612_06223");
testCase.setPropertyValue("password","testing");
testCase.setPropertyValue("accountoid","DEF5738E543B633AE0401F0A05990CC0");
testCase.setPropertyValue("useroid","DEF5738E544A633AE0401F0A05990CC0");
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:DEF5738E543A633AE0401F0A05990CC0");
testCase.setPropertyValue("DeviceID","urn:dece:deviceid:org:dece:DEEF07BB3B2E53F0E040");//non existing device id
testCase.setPropertyValue("DomainID","urn:dece:domainid:dece:DEF587A47AF1508CE0401F0A07994D03"); 
testCase.setPropertyValue("expectErrType","DEVICEID_NOT_FOUND");
testCase.setPropertyValue("ErrorDataVal","1");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedRTLReq = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request");

FeedRTLReq.setPropertyValue("TCaseName",testCase.getName());
FeedRTLReq.setPropertyValue("TSuiteName",testSuite.getName());

WsdlTestCaseRunner TSrunner = new WsdlTestCaseRunner( FeedRTLReq, null );

TSrunner.runTestStepByName("Get the DeviceGet Properties");
TSrunner.runTestStepByName("pem set");
assert TSrunner.status == Status.INITIALIZED;</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call DeviceGet Request">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )

WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );

TSrunnerRTC.runTestStepByName("DeviceGetRequest");

assert TSrunnerRTC.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract DeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Extract DeviceGet Information")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify theDeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Response Validation")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SAMLExpDate</con:name>
          <con:value>2012-04-18 16:10:01.0</con:value>
        </con:property>
        <con:property>
          <con:name>rcUUID</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>nodetype</con:name>
          <con:value>device</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>0701</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>firstfullusername_20130612_06223</con:value>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>testing</con:value>
        </con:property>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">DEF5738E543B633AE0401F0A05990CC0</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">DEF5738E544A633AE0401F0A05990CC0</con:value>
        </con:property>
        <con:property>
          <con:name>assertid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SAMLassertion</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">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</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>loopuntil</con:name>
          <con:value>25</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTS</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value>_87aa3e8d-2de2-46dd-b572-414003e22e9a</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value>urn:dece:userid:org:dece:A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value>A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value>urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value>A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>AccountID</con:name>
          <con:value>urn:dece:accountid:org:dece:DEF5738E543A633AE0401F0A05990CC0</con:value>
        </con:property>
        <con:property>
          <con:name>ErrorDataVal</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>DEVICEID_NOT_FOUND</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetReqXml</con:name>
          <con:value>User-Agent: Apache-HttpClient/4.1.1 (java 1.5)
</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResXml</con:name>
          <con:value><![CDATA[<ErrorList xmlns="http://www.decellc.org/schema/2010/10/dece" xmlns:ns2="http://www.movielabs.com/schema/md/v1.07/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Error ErrorID="urn:dece:errorid:org:dece:DeviceIdInvalid">
      <Reason Language="en">Device ID Invalid.</Reason>
      <OriginalRequest>https://qa.q.uvvu.com:7001/rest/1/0/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3AA06A9AA49F6E73D7E0401F0A059915F0/Domain/urn%3Adece%3Adomainid%3Adece%3AA09DA589BD63A036E0401F0A05996D9A/Device/urn%3Adece%3Adeviceid%3Aorg%3Adece%3AA09D9C22F11CBC6DE0401F0A059968989233</OriginalRequest>
      <ErrorLink>https://qa.q.uvvu.com:7001/rest/1/0/error/en/ErrorList.html#DeviceIdInvalid</ErrorLink>
   </Error>
</ErrorList>]]></con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResTime</con:name>
          <con:value>249</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetID</con:name>
          <con:value>Device ID Invalid.https://qa.q.uvvu.com:7001/rest/1/0/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3AA06A9AA49F6E73D7E0401F0A059915F0/Device/urn%3Adece%3Adeviceid%3Aorg%3Adece%3AA09D9C22F11CBC6DE0401F0A059968989238487847849821942174/DECEDomainhttps://qa.q.uvvu.com:7001/rest/1/0/error/en/ErrorList.html#DeviceIdInvalid</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceID</con:name>
          <con:value>urn:dece:deviceid:org:dece:DEEF07BB3B2E53F0E040</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeDVGGet</con:name>
          <con:value>ACCOUNTID NOT MATCH</con:value>
        </con:property>
        <con:property>
          <con:name>DomainID</con:name>
          <con:value>urn:dece:domainid:dece:DEF587A47AF1508CE0401F0A07994D03</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00011_DeviceGet_Retailer_FUNC_with_Inactive_ DeviceID" searchProperties="true" id="a4b68faf-f351-4533-a4fd-3f1af1706f79">
      <con:description>This test case will verify that Application Tier properly handles a DeviceGet request when invoked with the GET method and Invalid Account ID in request .

Expected Result:

System should return an Error message.</con:description>
      <con:settings/>
      <con:testStep type="groovy" name="Verify Node User SAML Asssertion" disabled="true">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.model.testsuite.TestRunner.Status


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def ValSamlAssertion = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Validate SAML Assertion");

	ValSamlAssertion.setPropertyValue("TCaseName",testCase.getName());
	ValSamlAssertion.setPropertyValue("TSuiteName",testSuite.getName());

	def runnerTc = ValSamlAssertion.run( null , false )
	assert runnerTc.status == Status.FINISHED;

	rcUUID = testCase.getPropertyValue("rcUUID");

	if (runnerTc.status != Status.FINISHED || rcUUID.toInteger()!= 1){

			
		testCase.setPropertyValue("nodetype","device");
		testCase.setPropertyValue("nodeid","0701");
		testCase.setPropertyValue("username","sch-drm_user1");
		testCase.setPropertyValue("password","Password1");
		testCase.setPropertyValue("accountoid",null);
		testCase.setPropertyValue("useroid",null);
		testCase.setPropertyValue("assertid",null);
		testCase.setPropertyValue("SAMLassertion",null);
		testCase.setPropertyValue("tokentype","urn:dece:type:tokentype:usernamepassword");
		testCase.setPropertyValue("loopuntil","25");
		testCase.setPropertyValue("expectErrTypeSTS","SUCCESS");
		testCase.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
			
		log.info " SAML Assertion Expired ! re-generating Assertion";
		def RunSTS = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get SAML Assertion - STS")

				RunSTS.setPropertyValue("TCaseName",testCase.getName());
				RunSTS.setPropertyValue("TSuiteName",testSuite.getName());

				def runnerSTS = RunSTS.run( null , false )

				assert runnerSTS.status == Status.FINISHED;

		}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call LicAppCreate Request with Valid Data" disabled="true">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0");
testCase.setPropertyValue("expectErrTypeLAC","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedDeviceDDReq = testProject.getTestSuiteByName("Staging DeviceGet").getTestCaseByName("LicAppCreate Request");

FeedDeviceDDReq.setPropertyValue("TCaseName",testCase.getName());
FeedDeviceDDReq.setPropertyValue("TSuiteName",testSuite.getName());


def runnerTC = FeedDeviceDDReq.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call DeviceUpdate Request for evict Cache" id="9f448bbc-ab3a-4542-ae0c-d65c4a28c374">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )
WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );


TSrunnerRTC.runTestStepByName("DeviceUpdateRequest");

assert TSrunnerRTC.status == Status.INITIALIZED;</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Get Device Inactive Statuses">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def GetDeviceStatus = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get-Set Device Status");

// Get ALL inactive Status from DEVICE_STATUS_REF Except = 'Pending'

SqlStr = "select Status from DEVICE_STATUS_REF where Status !='active' AND Status !='pending'";

testCase.setPropertyValue("SqlStr",SqlStr);

GetDeviceStatus.setPropertyValue("TCaseName",testCase.getName());
GetDeviceStatus.setPropertyValue("TSuiteName",testSuite.getName());

WsdlTestCaseRunner TSrunner = new WsdlTestCaseRunner( GetDeviceStatus, null );

TSrunner.runTestStepByName("Get Device Status for DVG");

assert TSrunner.status == Status.INITIALIZED;

 log.info " Current Device Status: " + testCase.getPropertyValue("DeviceStatus");

testCase.getPropertyValue("DeviceStatusXML");</script>
        </con:config>
      </con:testStep>
      <con:testStep type="datasource" name="Feed DataSource for Inactive Device Statuses">
        <con:settings/>
        <con:config xsi:type="con:DataSourceStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dataSource type="XML">
            <con:configuration><sourceStep>Get Device Inactive Statuses</sourceStep><sourceProperty>result</sourceProperty><rowPath>//Results[1]/ResultSet[1]/Row</rowPath><columnPath>STATUS</columnPath></con:configuration>
          </con:dataSource>
          <con:property>DeviceStatus</con:property>
          <con:restartOnRun>true</con:restartOnRun>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Feed DeviceGet Request with Inactive DeviceID">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("SAMLassertion","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");
testCase.setPropertyValue("assertionUUID","_87aa3e8d-2de2-46dd-b572-414003e22e9a");
testCase.setPropertyValue("username","firstfullusername_20130612_06223");
testCase.setPropertyValue("password","testing");
testCase.setPropertyValue("accountoid","DEF5738E543B633AE0401F0A05990CC0");
testCase.setPropertyValue("useroid","DEF5738E544A633AE0401F0A05990CC0");
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:DEF5738E543A633AE0401F0A05990CC0");
testCase.setPropertyValue("DeviceID","urn:dece:deviceid:org:dece:DEF585C6AEA11471E0401F0A07994634");
testCase.setPropertyValue("DomainID","urn:dece:domainid:dece:DEF587A47AF1508CE0401F0A07994D03"); 
testCase.setPropertyValue("expectErrType","DEVICEID_NOT_FOUND");
testCase.setPropertyValue("ErrorDataVal","1");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedRTLReq = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request");

FeedRTLReq.setPropertyValue("TCaseName",testCase.getName());
FeedRTLReq.setPropertyValue("TSuiteName",testSuite.getName());

WsdlTestCaseRunner TSrunner = new WsdlTestCaseRunner( FeedRTLReq, null );

TSrunner.runTestStepByName("Get the DeviceGet Properties");
TSrunner.runTestStepByName("pem set");
assert TSrunner.status == Status.INITIALIZED;</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="SetUp Device Inactive Status for DVG">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

// SetUp the Node Status from the Data Source

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

// Get NodeStatus Values from Data Source

def DsDeviceStatus = testRunner.testCase.testSteps['Feed DataSource for Inactive Device Statuses'];
log.info  "Device Status is to set to: " + DsDeviceStatus.getPropertyValue("DeviceStatus");

testCase.setPropertyValue("DeviceStatus",DsDeviceStatus.getPropertyValue("DeviceStatus"));

def SetDeviceStatus = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get-Set Device Status");

SetDeviceStatus.setPropertyValue("TCaseName",testCase.getName());
SetDeviceStatus.setPropertyValue("TSuiteName",testSuite.getName());
SetDeviceStatus.setPropertyValue("DeviceID",testCase.getPropertyValue("DeviceID"));

WsdlTestCaseRunner TSrunner = new WsdlTestCaseRunner( SetDeviceStatus, null );

TSrunner.runTestStepByName("Set Device Status for DVG")

assert TSrunner.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call DeviceGet Request">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )

WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );

TSrunnerRTC.runTestStepByName("DeviceGetRequest");

assert TSrunnerRTC.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify theDeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Response Validation")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="datasourceloop" name="DataSource Loop">
        <con:settings/>
        <con:config>
          <dataSourceStep>Feed DataSource for Inactive Device Statuses</dataSourceStep>
          <targetStep>Feed DeviceGet Request with Inactive DeviceID</targetStep>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Re-Set Device Status to Active">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

// SetUp the Node Status from the Data Source

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

// Get NodeStatus Values from Data Source

testCase.setPropertyValue("DeviceStatus","pending");

def SetDeviceStatus = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get-Set Device Status");

SetDeviceStatus.setPropertyValue("TCaseName",testCase.getName());
SetDeviceStatus.setPropertyValue("TSuiteName",testSuite.getName());

WsdlTestCaseRunner TSrunner = new WsdlTestCaseRunner( SetDeviceStatus, null );

TSrunner.runTestStepByName("Set Device Status for DVG")

assert TSrunner.status == Status.INITIALIZED;

TSrunner.runTestStepByName("Get Device Status for DVG")

assert TSrunner.status == Status.INITIALIZED;

log.info " Current Device Status: " + testCase.getPropertyValue("DeviceStatus");</script>
        </con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SAMLExpDate</con:name>
          <con:value>2014-06-11 06:24:48.0</con:value>
        </con:property>
        <con:property>
          <con:name>rcUUID</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>nodetype</con:name>
          <con:value>device</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>0701</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>firstfullusername_20130612_06223</con:value>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>testing</con:value>
        </con:property>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">DEF5738E543B633AE0401F0A05990CC0</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">DEF5738E544A633AE0401F0A05990CC0</con:value>
        </con:property>
        <con:property>
          <con:name>assertid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SAMLassertion</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">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</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>loopuntil</con:name>
          <con:value>25</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTS</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value>_87aa3e8d-2de2-46dd-b572-414003e22e9a</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value>urn:dece:userid:org:dece:A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value>A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value>urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value>A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>AccountID</con:name>
          <con:value>urn:dece:accountid:org:dece:DEF5738E543A633AE0401F0A05990CC0</con:value>
        </con:property>
        <con:property>
          <con:name>ErrorDataVal</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>DEVICEID_NOT_FOUND</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetReqXml</con:name>
          <con:value>Host: qa.q.uvvu.com:7001</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResXml</con:name>
          <con:value><![CDATA[<ErrorList xmlns="http://www.decellc.org/schema/2010/10/dece" xmlns:ns2="http://www.movielabs.com/schema/md/v1.07/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Error ErrorID="urn:dece:errorid:org:dece:DeviceNotFound">
      <Reason Language="en">The device cannot be found</Reason>
      <OriginalRequest>https://qa.q.uvvu.com:7001/rest/1/0/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3AA06A9AA49F6E73D7E0401F0A059915F0/Domain/urn%3Adece%3Adomainid%3Adece%3AA09DA589BD63A036E0401F0A05996D9A/Device/urn%3Adece%3Adeviceid%3Aorg%3Adece%3AA09D9C22F11CBC6DE0401F0A05996898</OriginalRequest>
      <ErrorLink>https://qa.q.uvvu.com:7001/rest/1/0/error/en/ErrorList.html#DeviceNotFound</ErrorLink>
   </Error>
</ErrorList>]]></con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResTime</con:name>
          <con:value>935</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetID</con:name>
          <con:value>The device cannot be foundhttps://qa.q.uvvu.com:7001/rest/1/0/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3AA06A9AA49F6E73D7E0401F0A059915F0/Device/urn%3Adece%3Adeviceid%3Aorg%3Adece%3AA09D9C22F11CBC6DE0401F0A05996898/DECEDomainhttps://qa.q.uvvu.com:7001/rest/1/0/error/en/ErrorList.html#DeviceNotFound</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceID</con:name>
          <con:value>urn:dece:deviceid:org:dece:DEF585C6AEA11471E0401F0A07994634</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeDVGGet</con:name>
          <con:value>ACCOUNTID NOT MATCH</con:value>
        </con:property>
        <con:property>
          <con:name>SqlStr</con:name>
          <con:value>select Status from DEVICE_STATUS_REF where Status !='active' AND Status !='pending'</con:value>
        </con:property>
        <con:property>
          <con:name>UserStatusXML</con:name>
          <con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <STATUS>deleted</STATUS>
    </Row>
    <Row rowNumber='2'>
      <STATUS>forceddelete</STATUS>
    </Row>
  </ResultSet>
</Results>]]></con:value>
        </con:property>
        <con:property>
          <con:name>UserStatus</con:name>
          <con:value>active</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceStatusXML</con:name>
          <con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <STATUS>deleted</STATUS>
    </Row>
    <Row rowNumber='2'>
      <STATUS>forcedeleted</STATUS>
    </Row>
    <Row rowNumber='3'>
      <STATUS>mergedeleted</STATUS>
    </Row>
  </ResultSet>
</Results>]]></con:value>
        </con:property>
        <con:property>
          <con:name>DeviceStatus</con:name>
          <con:value>pending</con:value>
        </con:property>
        <con:property>
          <con:name>rcDeviceStatus</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>DomainID</con:name>
          <con:value>urn:dece:domainid:dece:DEF587A47AF1508CE0401F0A07994D03</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>9f448bbc-ab3a-4542-ae0c-d65c4a28c374</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00012_DeviceGet_Retailer_FUNC_Verify_DECE_DomainID_with_DEVICE_DomainID" searchProperties="true" id="145cb178-79a1-4496-9c7b-ec748b636fd2">
      <con:description>This test case will verify that Application Tier properly handles a DeviceGet request when invoked with the GET method and valid header request .

Expected Result:

System should return successful message.</con:description>
      <con:settings/>
      <con:testStep type="groovy" name="Verify Node User SAML Asssertion" disabled="true">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.model.testsuite.TestRunner.Status


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def ValSamlAssertion = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Validate SAML Assertion");

	ValSamlAssertion.setPropertyValue("TCaseName",testCase.getName());
	ValSamlAssertion.setPropertyValue("TSuiteName",testSuite.getName());

	def runnerTc = ValSamlAssertion.run( null , false )
	assert runnerTc.status == Status.FINISHED;

	rcUUID = testCase.getPropertyValue("rcUUID");

	if (runnerTc.status != Status.FINISHED || rcUUID.toInteger()!= 1){

			
		testCase.setPropertyValue("nodetype","device");
		testCase.setPropertyValue("nodeid","0701");
		testCase.setPropertyValue("username","sch-drm_user1");
		testCase.setPropertyValue("password","Password1");
		testCase.setPropertyValue("accountoid",null);
		testCase.setPropertyValue("useroid",null);
		testCase.setPropertyValue("assertid",null);
		testCase.setPropertyValue("SAMLassertion",null);
		testCase.setPropertyValue("tokentype","urn:dece:type:tokentype:usernamepassword");
		testCase.setPropertyValue("loopuntil","25");
		testCase.setPropertyValue("expectErrTypeSTS","SUCCESS");
		testCase.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
			
		log.info " SAML Assertion Expired ! re-generating Assertion";
		def RunSTS = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get SAML Assertion - STS")

				RunSTS.setPropertyValue("TCaseName",testCase.getName());
				RunSTS.setPropertyValue("TSuiteName",testSuite.getName());

				def runnerSTS = RunSTS.run( null , false )

				assert runnerSTS.status == Status.FINISHED;

		}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call LicAppCreate Request with Valid Data" disabled="true">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0");
testCase.setPropertyValue("expectErrTypeLAC","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedDeviceDDReq = testProject.getTestSuiteByName("Staging DeviceGet").getTestCaseByName("LicAppCreate Request");

FeedDeviceDDReq.setPropertyValue("TCaseName",testCase.getName());
FeedDeviceDDReq.setPropertyValue("TSuiteName",testSuite.getName());


def runnerTC = FeedDeviceDDReq.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Feed DeviceGet Request with Valid Data">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0");
testCase.setPropertyValue("DeviceID","urn:dece:deviceid:org:dece:A09D9C22F11CBC6DE0401F0A05996898");
testCase.setPropertyValue("DomainID","urn:dece:domainid:dece:A09DA589BD63A036E0401F0A05996D9A");
testCase.setPropertyValue("expectErrType","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedRTLReq = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request");

FeedRTLReq.setPropertyValue("TCaseName",testCase.getName());
FeedRTLReq.setPropertyValue("TSuiteName",testSuite.getName());

WsdlTestCaseRunner TSrunner = new WsdlTestCaseRunner( FeedRTLReq, null );

TSrunner.runTestStepByName("Get the DeviceGet Properties");
TSrunner.runTestStepByName("pem set");
assert TSrunner.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call DeviceGet Request">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )

WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );

TSrunnerRTC.runTestStepByName("DeviceGetRequest");

assert TSrunnerRTC.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract DeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Extract DeviceGet Information")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify theDeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Response Validation")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify the DeviceGet Response against DB Result">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGdataVal = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Data Validation");

RTGdataVal.setPropertyValue("TCaseName",testCase.getName());
RTGdataVal.setPropertyValue("TSuiteName",testSuite.getName());


def runnerRTC = RTGdataVal.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SAMLExpDate</con:name>
          <con:value>2013-06-14 18:31:45.0</con:value>
        </con:property>
        <con:property>
          <con:name>rcUUID</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>nodetype</con:name>
          <con:value>device</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>0701</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>sch-drm_user1</con:value>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>Password1</con:value>
        </con:property>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">A06A9AA49F7073D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">A06A9AA49F7973D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SAMLassertion</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">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</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>loopuntil</con:name>
          <con:value>25</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTS</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value>_7e52daf8-8c23-4045-8bae-6a06755f51c2</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value>urn:dece:userid:org:dece:A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value>A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value>urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value>A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>AccountID</con:name>
          <con:value>urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>ErrorDataVal</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetReqXml</con:name>
          <con:value>User-Agent: Apache-HttpClient/4.1.1 (java 1.5)
</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResXml</con:name>
          <con:value><![CDATA[<Device IsLegacy="false" DeviceID="urn:dece:deviceid:org:dece:A09D9C22F11CBC6DE0401F0A05996898" xmlns="http://www.decellc.org/schema/2010/10/dece" xmlns:ns2="http://www.movielabs.com/schema/md/v1.07/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <DisplayName>DeviceInfoDisplayName</DisplayName>
   <Manufacturer>Microsoft</Manufacturer>
   <Model>V344</Model>
   <Brand Language="en-US">DeviceInfoBrand</Brand>
   <SerialNo>123432442323424</SerialNo>
   <Image MimeType="MimeType3" Width="50" Height="50">http://www.oxygenxml.com/1234</Image>
   <LicAppID>urn:dece:licappid:org:dece:A09D9C22F11EBC6DE0401F0A05996898</LicAppID>
   <DRMClientID>urn:dece:drmclientid:org:dece:A0E2E4B822DB1B7CE0401F0A07994404</DRMClientID>
   <ResourceStatus>
      <Current CreatedBy="urn:dece:org:org:dece:0701" CreationDate="2011-04-11T04:02:39.637Z">
         <Value>urn:dece:type:status:pending</Value>
         <Description>Device Created</Description>
      </Current>
   </ResourceStatus>
</Device>]]></con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResTime</con:name>
          <con:value>188</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetID</con:name>
          <con:value>A09DA589BD63A036E0401F0A05996D9A</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceID</con:name>
          <con:value>urn:dece:deviceid:org:dece:A09D9C22F11CBC6DE0401F0A05996898</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeDVGGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>SqlStr</con:name>
          <con:value>select Status from USER_STATUS_REF where Status !='active'</con:value>
        </con:property>
        <con:property>
          <con:name>DomainID</con:name>
          <con:value>urn:dece:domainid:dece:A09DA589BD63A036E0401F0A05996D9A</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00013_DeviceGet_Retailer_FUNC_with_NULL AccountID" searchProperties="true" id="d72d531b-8d26-4a09-80c1-561eb7fdfb2d">
      <con:description>This test case will verify that Application Tier properly handles a DeviceGet request when invoked with the GET method and Invalid Account ID in request .

Expected Result:

System should return an Error message.</con:description>
      <con:settings/>
      <con:testStep type="groovy" name="Verify Node User SAML Asssertion" disabled="true">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.model.testsuite.TestRunner.Status


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def ValSamlAssertion = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Validate SAML Assertion");

	ValSamlAssertion.setPropertyValue("TCaseName",testCase.getName());
	ValSamlAssertion.setPropertyValue("TSuiteName",testSuite.getName());

	def runnerTc = ValSamlAssertion.run( null , false )
	assert runnerTc.status == Status.FINISHED;

	rcUUID = testCase.getPropertyValue("rcUUID");

	if (runnerTc.status != Status.FINISHED || rcUUID.toInteger()!= 1){

			
		testCase.setPropertyValue("nodetype","device");
		testCase.setPropertyValue("nodeid","0701");
		testCase.setPropertyValue("username","sch-drm_user1");
		testCase.setPropertyValue("password","Password1");
		testCase.setPropertyValue("accountoid",null);
		testCase.setPropertyValue("useroid",null);
		testCase.setPropertyValue("assertid",null);
		testCase.setPropertyValue("SAMLassertion",null);
		testCase.setPropertyValue("tokentype","urn:dece:type:tokentype:usernamepassword");
		testCase.setPropertyValue("loopuntil","25");
		testCase.setPropertyValue("expectErrTypeSTS","SUCCESS");
		testCase.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
			
		log.info " SAML Assertion Expired ! re-generating Assertion";
		def RunSTS = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get SAML Assertion - STS")

				RunSTS.setPropertyValue("TCaseName",testCase.getName());
				RunSTS.setPropertyValue("TSuiteName",testSuite.getName());

				def runnerSTS = RunSTS.run( null , false )

				assert runnerSTS.status == Status.FINISHED;

		}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call LicAppCreate Request with Valid Data" disabled="true">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0");
testCase.setPropertyValue("expectErrTypeLAC","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedDeviceDDReq = testProject.getTestSuiteByName("Staging DeviceGet").getTestCaseByName("LicAppCreate Request");

FeedDeviceDDReq.setPropertyValue("TCaseName",testCase.getName());
FeedDeviceDDReq.setPropertyValue("TSuiteName",testSuite.getName());


def runnerTC = FeedDeviceDDReq.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Feed DeviceGet Request with Invalid AccountID">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("SAMLassertion","nVdpc6pKE/7ur7A8Hy3D5oaVpGpYVFRUBBf4cgthQJRNBgT99e9gosfk5OTNvVWpitP0dD+9TM8zz8gMfLoHEIJJ6kVhVRJeav90O6bJwK7doG1IN5pt225sWx38i2qSJANpGrJmrSohlEEpRKkZpi81mqSYBtluULRG0b0W/us8teiWUauuYIKwaazyRNaqReCHqHd1+1LLkrAXmchDvdAMIOqlVk8F8qSHNXvmDVPt9fkN5dVh8rpL07hHENaTDS3o+9aTFQXEM/FB59lGPdVzQzPNEvju00Yvtfe9eZ4/5cxTlLgETZIkQbIE1rGR5/6qvVZum6EthU70tubNMAo9y/S9i1mCkmG6i+wq8N0o8dJd8BfTFEGRpekGLKyGRTXDXzXit4Mruh9a+gAyQWYD7UzqZmwBHZjA0ILV5UJ6qf36WQXf9mqJGSInSgL0af3vIMHwBP0ohnYD3SK7ofu5xS/S9foMrZ4UWn6GvBOclm0SmxZE1XkCHa+YeAg3n42q1/JXC3TrMGj9m5I8E484MWzii8wIngtR+l/q9VirNysr08/gq21mCa/b9XV97ygnlx7F2oISl1R/3ny5QnhUfgN1L/X7+nOj3vvqfdOM2pOh49gXXZ/wW2FjCqrVFYB4ljVrZguTyBLlBaHKmXiM18TUTLlwNerE9TUKDD50wvO+OwQrekAeh3wFjQb1UUtZzdqbZHieZ8SO6vDCkNWngQ62QE1jbhAoBKH2SX5jaEzfG6oTn0W6fCHcgrH7zNHY8ItseZaTysxDLe4wlFOvXU8ulA4P0svvmB5jKOMaw/M1yPL3pkWygpma9wVfTgoHH88UvsqSxNcFngeQd0EuccCVuMkFTDn3cNwdvAGbkxxQln0ggLO8ALng6sJKUcZibq9WvrGS+n1OXjTzIdCFCv4giMVKMDYj0lwbsU73SUPlOHuziLbMKLaHh3y4s6ayJudTTTrLe7GYaiK5vsrcAq8v8l6mZtqSqaz3HCsvxFzIrx4FMd9NjfUi1pdsbl1ERQbNAaCWIr+Th1qwoixmsbP24kQGh6uc28n8aiUXogbmFc6drnBsGt83Yiuw423g7x6MD7FxzR6sztuBnxkXcS/z4oBXjwNV2jKCIo7AQl9u16uDue6fKtZwCrY3j17LMzdR7hrdXFD00TgypN3JmgJF5DgF4HSRQJYGIxANOCA3gVdc+D3Xjni7nxMjGlXqrD9ob87ecYPMAembVLdL6ZN1e35sC2JYN8bZdr+Td5v+rD5W7dOSTdmLjk71U9v0KKuIHWUjDtNx4QwVtbKdC8XGGtZtd0T4F7afyJ0RSC7nnS+7i3TdnqHz1nOcNbeZNf2O48vMInZ8Jz6juhYph4Rsc5ChCf18GqcV4MocAIP9cs8pMtctk2pLuaLLnAn6YpqBy55Ox/TqOBqefEtnQFSM17P94b0wtpCLHJErIm4rsYIPkV0WYaguxf4eLDnXTThX7HOKJQBFl8a5jvO1HGLlz3nsX/PoihwQGQO02WGFWZJsOkvVZhOcQ24Z9tmdfCzWdjsgO0coTtRp3MxlNHVCYx0d5MBLlkmmLsfj6aTYatngsMezyiHV8YkxKuLpEANvOtZ2ByESzHms62lcD63ESqU4kKXiMjPQvuttA3JUb1HcnBSsDr0MtvlyYIrGOHFVajxchHOmw1ZQ5pyHQX3fzdd1TW3HHRtPBeF8JoxkRUYg6rOL1tEuaPqwW+aTdu6MwGFr0tPCZ7kzK44NzcoXynitBvVWpXWaTALyohHNaTzL1UHeFBWlzticNtRQnHh61nWLZBbatG6m7ZNBrtpe7B9YOjtozZhZuQEu1vxkxx15XlGaG8sI3E5sjYgFcQJix5lIg/P2Yl7iYGa9DdDP0+EufJsfxONk+TB6bqRDxd0KrfS2LC8gSaj28a1gpt8TmFLi2Q3nqtqLSxaEUhimtddyV0leehmmOJ7dw1fG21oQ+60O0xVbzSbbZhggkk2S6pOAbLEsyfPkjeW8ofgEkY9Cxyt9lTzu7Zb6HqAV9BAMbZg0TlFm7SCqfWOxzFdVChf4+o1CBLUI88Qmy5M0wwhsk+pwQOgIFMOKtMCSNM93WoCvVadROgtnCXBSmHzkiK0PHHEBLS/2YEkk329TlOKMHM1TlvrU08l8CmGGmWZSkr0e3ey2COQFsQ9LvIQfuV5IzGeq9hTv4ut1/tc4Pn+7hYx1bK9UQCVoDuKywS9YbfOG+I/Iml+y35t5kNleeWvj/KWJZ70h+fjpd1uU/XDvCbJD0jfMd9Ufb6X+3Ep8g4j4nIy7J/vkPfi9cXNMNzEhuVJyhIt2NJ+OT9nplF3L1CnJVoLNExRBtgkVWhlmTGctOsCQuJsgfkRW76g/eb7LP+LL0l2opvjAB7inqtflD14qKkTlS0XCZ6L46TPog0uctxQW6Vcy3scPmhLxt28eq2eVelg8x//yKLF/l+sLWw9+cJzlhPNCt1yV1PT8l66wImzWw1MuSh6Nf2XgK+cfhfck37GkuJu2WQr//qVajq+XmmlZURamklC7Ch5H6hVneo5h77fSH2au5PCd7Rfor2x/I09UPNwCs3bX9f6/csO7tosF8S7kXbG81Ar8cMXOQ/dhhL8D/HqKM+C7Kf4xktc/xH9KHnL6+Ty8/g8=");
testCase.setPropertyValue("assertionUUID","_87aa3e8d-2de2-46dd-b572-414003e22e9a");
testCase.setPropertyValue("username","firstfullusername_20130612_06223");
testCase.setPropertyValue("password","testing");
testCase.setPropertyValue("accountoid","DEF5738E543B633AE0401F0A05990CC0");
testCase.setPropertyValue("useroid","DEF5738E544A633AE0401F0A05990CC0");
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:");
testCase.setPropertyValue("DeviceID","urn:dece:deviceid:org:dece:DEF585C6AEA11471E0401F0A07994634");
testCase.setPropertyValue("DomainID","urn:dece:domainid:dece:DEF587A47AF1508CE0401F0A07994D03"); 
testCase.setPropertyValue("expectErrType","ACCOUNTID NOT MATCH");
testCase.setPropertyValue("ErrorDataVal","1");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedRTLReq = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request");

FeedRTLReq.setPropertyValue("TCaseName",testCase.getName());
FeedRTLReq.setPropertyValue("TSuiteName",testSuite.getName());

WsdlTestCaseRunner TSrunner = new WsdlTestCaseRunner( FeedRTLReq, null );

TSrunner.runTestStepByName("Get the DeviceGet Properties");
TSrunner.runTestStepByName("pem set");
assert TSrunner.status == Status.INITIALIZED;</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call DeviceGet Request">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )

WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );

TSrunnerRTC.runTestStepByName("DeviceGetRequest");

assert TSrunnerRTC.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract DeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Extract DeviceGet Information")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify theDeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Response Validation")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SAMLExpDate</con:name>
          <con:value>2013-06-14 18:31:45.0</con:value>
        </con:property>
        <con:property>
          <con:name>rcUUID</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>nodetype</con:name>
          <con:value>device</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>0701</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>firstfullusername_20130612_06223</con:value>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>testing</con:value>
        </con:property>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">DEF5738E543B633AE0401F0A05990CC0</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">DEF5738E544A633AE0401F0A05990CC0</con:value>
        </con:property>
        <con:property>
          <con:name>assertid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SAMLassertion</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">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</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>loopuntil</con:name>
          <con:value>25</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTS</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value>_87aa3e8d-2de2-46dd-b572-414003e22e9a</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value>urn:dece:userid:org:dece:A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value>A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value>urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value>A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>AccountID</con:name>
          <con:value>urn:dece:accountid:org:dece:</con:value>
        </con:property>
        <con:property>
          <con:name>ErrorDataVal</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>ACCOUNTID NOT MATCH</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetReqXml</con:name>
          <con:value>User-Agent: Apache-HttpClient/4.1.1 (java 1.5)
</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResXml</con:name>
          <con:value><![CDATA[<ErrorList xmlns="http://www.decellc.org/schema/2010/10/dece" xmlns:ns2="http://www.movielabs.com/schema/md/v1.07/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Error ErrorID="urn:dece:errorid:org:dece:AccountIdUnmatched">
      <Reason Language="en">Request Account ID not match</Reason>
      <OriginalRequest>https://qa.q.uvvu.com:7001/rest/1/0/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3A/Domain/urn%3Adece%3Adomainid%3Adece%3AA09DA589BD63A036E0401F0A05996D9A/Device/urn%3Adece%3Adeviceid%3Aorg%3Adece%3AA09D9C22F11CBC6DE0401F0A05996898</OriginalRequest>
      <ErrorLink>https://qa.q.uvvu.com:7001/rest/1/0/error/en/ErrorList.html#AccountIdUnmatched</ErrorLink>
   </Error>
</ErrorList>]]></con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResTime</con:name>
          <con:value>204</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetID</con:name>
          <con:value>Request Account ID not matchhttps://qa.q.uvvu.com:7001/rest/1/0/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3A/Device/urn%3Adece%3Adeviceid%3Aorg%3Adece%3AA09D9C22F11CBC6DE0401F0A05996898/DECEDomainhttps://qa.q.uvvu.com:7001/rest/1/0/error/en/ErrorList.html#AccountIdUnmatched</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceID</con:name>
          <con:value>urn:dece:deviceid:org:dece:DEF585C6AEA11471E0401F0A07994634</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeDVGGet</con:name>
          <con:value>ACCOUNTID NOT MATCH</con:value>
        </con:property>
        <con:property>
          <con:name>DomainID</con:name>
          <con:value>urn:dece:domainid:dece:DEF587A47AF1508CE0401F0A07994D03</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00014_DeviceGet_Retailer_FUNC_with_NULL_ DeviceID" searchProperties="true" id="765d66d4-b9fd-474e-bb2b-3e5764bd6ca9">
      <con:description>This test case will verify that Application Tier properly handles a DeviceGet request when invoked with the GET method and Invalid Account ID in request .

Expected Result:

System should return an Error message.</con:description>
      <con:settings/>
      <con:testStep type="groovy" name="Verify Node User SAML Asssertion" disabled="true">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.model.testsuite.TestRunner.Status


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def ValSamlAssertion = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Validate SAML Assertion");

	ValSamlAssertion.setPropertyValue("TCaseName",testCase.getName());
	ValSamlAssertion.setPropertyValue("TSuiteName",testSuite.getName());

	def runnerTc = ValSamlAssertion.run( null , false )
	assert runnerTc.status == Status.FINISHED;

	rcUUID = testCase.getPropertyValue("rcUUID");

	if (runnerTc.status != Status.FINISHED || rcUUID.toInteger()!= 1){

			
		testCase.setPropertyValue("nodetype","device");
		testCase.setPropertyValue("nodeid","0701");
		testCase.setPropertyValue("username","sch-drm_user1");
		testCase.setPropertyValue("password","Password1");
		testCase.setPropertyValue("accountoid",null);
		testCase.setPropertyValue("useroid",null);
		testCase.setPropertyValue("assertid",null);
		testCase.setPropertyValue("SAMLassertion",null);
		testCase.setPropertyValue("tokentype","urn:dece:type:tokentype:usernamepassword");
		testCase.setPropertyValue("loopuntil","25");
		testCase.setPropertyValue("expectErrTypeSTS","SUCCESS");
		testCase.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
			
		log.info " SAML Assertion Expired ! re-generating Assertion";
		def RunSTS = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get SAML Assertion - STS")

				RunSTS.setPropertyValue("TCaseName",testCase.getName());
				RunSTS.setPropertyValue("TSuiteName",testSuite.getName());

				def runnerSTS = RunSTS.run( null , false )

				assert runnerSTS.status == Status.FINISHED;

		}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call LicAppCreate Request with Valid Data" disabled="true">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0");
testCase.setPropertyValue("expectErrTypeLAC","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedDeviceDDReq = testProject.getTestSuiteByName("Staging DeviceGet").getTestCaseByName("LicAppCreate Request");

FeedDeviceDDReq.setPropertyValue("TCaseName",testCase.getName());
FeedDeviceDDReq.setPropertyValue("TSuiteName",testSuite.getName());


def runnerTC = FeedDeviceDDReq.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Feed DeviceGet Request with Invalid DeviceID">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("SAMLassertion","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");
testCase.setPropertyValue("assertionUUID","_87aa3e8d-2de2-46dd-b572-414003e22e9a");
testCase.setPropertyValue("username","firstfullusername_20130612_06223");
testCase.setPropertyValue("password","testing");
testCase.setPropertyValue("accountoid","DEF5738E543B633AE0401F0A05990CC0");
testCase.setPropertyValue("useroid","DEF5738E544A633AE0401F0A05990CC0");
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:DEF5738E543A633AE0401F0A05990CC0");
testCase.setPropertyValue("DeviceID","urn:dece:deviceid:org:dece:");
testCase.setPropertyValue("DomainID","urn:dece:domainid:dece:DEF587A47AF1508CE0401F0A07994D03"); 
testCase.setPropertyValue("expectErrType","DEVICEID_NOT_FOUND");
testCase.setPropertyValue("ErrorDataVal","1");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedRTLReq = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request");

FeedRTLReq.setPropertyValue("TCaseName",testCase.getName());
FeedRTLReq.setPropertyValue("TSuiteName",testSuite.getName());

WsdlTestCaseRunner TSrunner = new WsdlTestCaseRunner( FeedRTLReq, null );

TSrunner.runTestStepByName("Get the DeviceGet Properties");
TSrunner.runTestStepByName("pem set");
assert TSrunner.status == Status.INITIALIZED;</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call DeviceGet Request">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )

WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );

TSrunnerRTC.runTestStepByName("DeviceGetRequest");

assert TSrunnerRTC.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract DeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Extract DeviceGet Information")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify theDeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Response Validation")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SAMLExpDate</con:name>
          <con:value>2017-06-11 06:17:41.0</con:value>
        </con:property>
        <con:property>
          <con:name>rcUUID</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>nodetype</con:name>
          <con:value>device</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>0701</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>firstfullusername_20130612_06223</con:value>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>testing</con:value>
        </con:property>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">DEF5738E543B633AE0401F0A05990CC0</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">DEF5738E544A633AE0401F0A05990CC0</con:value>
        </con:property>
        <con:property>
          <con:name>assertid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SAMLassertion</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">nVdpc6pKE/7ur7A8Hy3D5oaVpGpYVFRUBBf4cgthQJRNBgT99e9gosfk5OTNvVWpitP0dD+9TM8zz8gMfLoHEIJJ6kVhVRJeav90O6bJwK7doG1IN5pt225sWx38i2qSJANpGrJmrSohlEEpRKkZpi81mqSYBtluULRG0b0W/us8teiWUauuYIKwaazyRNaqReCHqHd1+1LLkrAXmchDvdAMIOqlVk8F8qSHNXvmDVPt9fkN5dVh8rpL07hHENaTDS3o+9aTFQXEM/FB59lGPdVzQzPNEvju00Yvtfe9eZ4/5cxTlLgETZIkQbIE1rGR5/6qvVZum6EthU70tubNMAo9y/S9i1mCkmG6i+wq8N0o8dJd8BfTFEGRpekGLKyGRTXDXzXit4Mruh9a+gAyQWYD7UzqZmwBHZjA0ILV5UJ6qf36WQXf9mqJGSInSgL0af3vIMHwBP0ohnYD3SK7ofu5xS/S9foMrZ4UWn6GvBOclm0SmxZE1XkCHa+YeAg3n42q1/JXC3TrMGj9m5I8E484MWzii8wIngtR+l/q9VirNysr08/gq21mCa/b9XV97ygnlx7F2oISl1R/3ny5QnhUfgN1L/X7+nOj3vvqfdOM2pOh49gXXZ/wW2FjCqrVFYB4ljVrZguTyBLlBaHKmXiM18TUTLlwNerE9TUKDD50wvO+OwQrekAeh3wFjQb1UUtZzdqbZHieZ8SO6vDCkNWngQ62QE1jbhAoBKH2SX5jaEzfG6oTn0W6fCHcgrH7zNHY8ItseZaTysxDLe4wlFOvXU8ulA4P0svvmB5jKOMaw/M1yPL3pkWygpma9wVfTgoHH88UvsqSxNcFngeQd0EuccCVuMkFTDn3cNwdvAGbkxxQln0ggLO8ALng6sJKUcZibq9WvrGS+n1OXjTzIdCFCv4giMVKMDYj0lwbsU73SUPlOHuziLbMKLaHh3y4s6ayJudTTTrLe7GYaiK5vsrcAq8v8l6mZtqSqaz3HCsvxFzIrx4FMd9NjfUi1pdsbl1ERQbNAaCWIr+Th1qwoixmsbP24kQGh6uc28n8aiUXogbmFc6drnBsGt83Yiuw423g7x6MD7FxzR6sztuBnxkXcS/z4oBXjwNV2jKCIo7AQl9u16uDue6fKtZwCrY3j17LMzdR7hrdXFD00TgypN3JmgJF5DgF4HSRQJYGIxANOCA3gVdc+D3Xjni7nxMjGlXqrD9ob87ecYPMAembVLdL6ZN1e35sC2JYN8bZdr+Td5v+rD5W7dOSTdmLjk71U9v0KKuIHWUjDtNx4QwVtbKdC8XGGtZtd0T4F7afyJ0RSC7nnS+7i3TdnqHz1nOcNbeZNf2O48vMInZ8Jz6juhYph4Rsc5ChCf18GqcV4MocAIP9cs8pMtctk2pLuaLLnAn6YpqBy55Ox/TqOBqefEtnQFSM17P94b0wtpCLHJErIm4rsYIPkV0WYaguxf4eLDnXTThX7HOKJQBFl8a5jvO1HGLlz3nsX/PoihwQGQO02WGFWZJsOkvVZhOcQ24Z9tmdfCzWdjsgO0coTtRp3MxlNHVCYx0d5MBLlkmmLsfj6aTYatngsMezyiHV8YkxKuLpEANvOtZ2ByESzHms62lcD63ESqU4kKXiMjPQvuttA3JUb1HcnBSsDr0MtvlyYIrGOHFVajxchHOmw1ZQ5pyHQX3fzdd1TW3HHRtPBeF8JoxkRUYg6rOL1tEuaPqwW+aTdu6MwGFr0tPCZ7kzK44NzcoXynitBvVWpXWaTALyohHNaTzL1UHeFBWlzticNtRQnHh61nWLZBbatG6m7ZNBrtpe7B9YOjtozZhZuQEu1vxkxx15XlGaG8sI3E5sjYgFcQJix5lIg/P2Yl7iYGa9DdDP0+EufJsfxONk+TB6bqRDxd0KrfS2LC8gSaj28a1gpt8TmFLi2Q3nqtqLSxaEUhimtddyV0leehmmOJ7dw1fG21oQ+60O0xVbzSbbZhggkk2S6pOAbLEsyfPkjeW8ofgEkY9Cxyt9lTzu7Zb6HqAV9BAMbZg0TlFm7SCqfWOxzFdVChf4+o1CBLUI88Qmy5M0wwhsk+pwQOgIFMOKtMCSNM93WoCvVadROgtnCXBSmHzkiK0PHHEBLS/2YEkk329TlOKMHM1TlvrU08l8CmGGmWZSkr0e3ey2COQFsQ9LvIQfuV5IzGeq9hTv4ut1/tc4Pn+7hYx1bK9UQCVoDuKywS9YbfOG+I/Iml+y35t5kNleeWvj/KWJZ70h+fjpd1uU/XDvCbJD0jfMd9Ufb6X+3Ep8g4j4nIy7J/vkPfi9cXNMNzEhuVJyhIt2NJ+OT9nplF3L1CnJVoLNExRBtgkVWhlmTGctOsCQuJsgfkRW76g/eb7LP+LL0l2opvjAB7inqtflD14qKkTlS0XCZ6L46TPog0uctxQW6Vcy3scPmhLxt28eq2eVelg8x//yKLF/l+sLWw9+cJzlhPNCt1yV1PT8l66wImzWw1MuSh6Nf2XgK+cfhfck37GkuJu2WQr//qVajq+XmmlZURamklC7Ch5H6hVneo5h77fSH2au5PCd7Rfor2x/I09UPNwCs3bX9f6/csO7tosF8S7kXbG81Ar8cMXOQ/dhhL8D/HqKM+C7Kf4xktc/xH9KHnL6+Ty8/g8=</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>loopuntil</con:name>
          <con:value>25</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTS</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value>_87aa3e8d-2de2-46dd-b572-414003e22e9a</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value>urn:dece:userid:org:dece:A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value>A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value>urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value>A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>AccountID</con:name>
          <con:value>urn:dece:accountid:org:dece:DEF5738E543A633AE0401F0A05990CC0</con:value>
        </con:property>
        <con:property>
          <con:name>ErrorDataVal</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>DEVICEID_NOT_FOUND</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetReqXml</con:name>
          <con:value>User-Agent: Apache-HttpClient/4.1.1 (java 1.5)
</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResXml</con:name>
          <con:value><![CDATA[<ErrorList xmlns="http://www.decellc.org/schema/2010/10/dece" xmlns:ns2="http://www.movielabs.com/schema/md/v1.07/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Error ErrorID="urn:dece:errorid:org:dece:DeviceIdInvalid">
      <Reason Language="en">Device ID Invalid.</Reason>
      <OriginalRequest>https://qa.q.uvvu.com:7001/rest/1/0/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3AA06A9AA49F6E73D7E0401F0A059915F0/Domain/urn%3Adece%3Adomainid%3Adece%3AA09DA589BD63A036E0401F0A05996D9A/Device/urn%3Adece%3Adeviceid%3Aorg%3Adece%3A</OriginalRequest>
      <ErrorLink>https://qa.q.uvvu.com:7001/rest/1/0/error/en/ErrorList.html#DeviceIdInvalid</ErrorLink>
   </Error>
</ErrorList>]]></con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResTime</con:name>
          <con:value>233</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetID</con:name>
          <con:value>Device ID Invalid.https://qa.q.uvvu.com:7001/rest/1/0/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3AA06A9AA49F6E73D7E0401F0A059915F0/Device/urn%3Adece%3Adeviceid%3Aorg%3Adece%3A/DECEDomainhttps://qa.q.uvvu.com:7001/rest/1/0/error/en/ErrorList.html#DeviceIdInvalid</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceID</con:name>
          <con:value>urn:dece:deviceid:org:dece:</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeDVGGet</con:name>
          <con:value>ACCOUNTID NOT MATCH</con:value>
        </con:property>
        <con:property>
          <con:name>DomainID</con:name>
          <con:value>urn:dece:domainid:dece:DEF587A47AF1508CE0401F0A07994D03</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00015_DeviceGet_Retailer_FUNC_Verify_DECE_DomainID_associated to Account" searchProperties="true" id="bfeac6da-6bcc-4b05-8111-b6dac2bff285">
      <con:description>This test case will verify that Application Tier properly handles a DeviceGet request when invoked with the GET method and valid header request .

Expected Result:

System should return successful message.</con:description>
      <con:settings/>
      <con:testStep type="groovy" name="Verify Node User SAML Asssertion" disabled="true">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.model.testsuite.TestRunner.Status


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def ValSamlAssertion = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Validate SAML Assertion");

	ValSamlAssertion.setPropertyValue("TCaseName",testCase.getName());
	ValSamlAssertion.setPropertyValue("TSuiteName",testSuite.getName());

	def runnerTc = ValSamlAssertion.run( null , false )
	assert runnerTc.status == Status.FINISHED;

	rcUUID = testCase.getPropertyValue("rcUUID");

	if (runnerTc.status != Status.FINISHED || rcUUID.toInteger()!= 1){

			
		testCase.setPropertyValue("nodetype","device");
		testCase.setPropertyValue("nodeid","0701");
		testCase.setPropertyValue("username","sch-drm_user1");
		testCase.setPropertyValue("password","Password1");
		testCase.setPropertyValue("accountoid",null);
		testCase.setPropertyValue("useroid",null);
		testCase.setPropertyValue("assertid",null);
		testCase.setPropertyValue("SAMLassertion",null);
		testCase.setPropertyValue("tokentype","urn:dece:type:tokentype:usernamepassword");
		testCase.setPropertyValue("loopuntil","25");
		testCase.setPropertyValue("expectErrTypeSTS","SUCCESS");
		testCase.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
			
		log.info " SAML Assertion Expired ! re-generating Assertion";
		def RunSTS = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get SAML Assertion - STS")

				RunSTS.setPropertyValue("TCaseName",testCase.getName());
				RunSTS.setPropertyValue("TSuiteName",testSuite.getName());

				def runnerSTS = RunSTS.run( null , false )

				assert runnerSTS.status == Status.FINISHED;

		}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call LicAppCreate Request with Valid Data" disabled="true">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0");
testCase.setPropertyValue("expectErrTypeLAC","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedDeviceDDReq = testProject.getTestSuiteByName("Staging DeviceGet").getTestCaseByName("LicAppCreate Request");

FeedDeviceDDReq.setPropertyValue("TCaseName",testCase.getName());
FeedDeviceDDReq.setPropertyValue("TSuiteName",testSuite.getName());


def runnerTC = FeedDeviceDDReq.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call DeviceUpdate Request for evict Cache" id="01b6213e-100a-4a71-bb51-1c0628107419">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )
WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );


TSrunnerRTC.runTestStepByName("DeviceUpdateRequest");

assert TSrunnerRTC.status == Status.INITIALIZED;</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Feed DeviceGet Request with Valid Data">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("SAMLassertion","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");
testCase.setPropertyValue("assertionUUID","_87aa3e8d-2de2-46dd-b572-414003e22e9a");
testCase.setPropertyValue("username","firstfullusername_20130612_06223");
testCase.setPropertyValue("password","testing");
testCase.setPropertyValue("accountoid","DEF5738E543B633AE0401F0A05990CC0");
testCase.setPropertyValue("useroid","DEF5738E544A633AE0401F0A05990CC0");
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:DEF5738E543A633AE0401F0A05990CC0");
testCase.setPropertyValue("DeviceID","urn:dece:deviceid:org:dece:DEF585C6AEA11471E0401F0A07994634");
testCase.setPropertyValue("DomainID","urn:dece:domainid:dece:DEF587A47AF1508CE0401F0A07994D03"); 
testCase.setPropertyValue("expectErrType","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedRTLReq = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request");

FeedRTLReq.setPropertyValue("TCaseName",testCase.getName());
FeedRTLReq.setPropertyValue("TSuiteName",testSuite.getName());

WsdlTestCaseRunner TSrunner = new WsdlTestCaseRunner( FeedRTLReq, null );

TSrunner.runTestStepByName("Get the DeviceGet Properties");
TSrunner.runTestStepByName("pem set");
assert TSrunner.status == Status.INITIALIZED;</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call DeviceGet Request">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )

WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );

TSrunnerRTC.runTestStepByName("DeviceGetRequest");

assert TSrunnerRTC.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract DeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Extract DeviceGet Information")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify theDeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Response Validation")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify the DeviceGet Response against DB Result">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGdataVal = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Data Validation");

RTGdataVal.setPropertyValue("TCaseName",testCase.getName());
RTGdataVal.setPropertyValue("TSuiteName",testSuite.getName());


def runnerRTC = RTGdataVal.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SAMLExpDate</con:name>
          <con:value>2013-06-14 18:31:45.0</con:value>
        </con:property>
        <con:property>
          <con:name>rcUUID</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>nodetype</con:name>
          <con:value>device</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>0701</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>firstfullusername_20130612_06223</con:value>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>testing</con:value>
        </con:property>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">DEF5738E543B633AE0401F0A05990CC0</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">DEF5738E544A633AE0401F0A05990CC0</con:value>
        </con:property>
        <con:property>
          <con:name>assertid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SAMLassertion</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">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</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>loopuntil</con:name>
          <con:value>25</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTS</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value>_87aa3e8d-2de2-46dd-b572-414003e22e9a</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value>urn:dece:userid:org:dece:A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value>A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value>urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value>A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>AccountID</con:name>
          <con:value>urn:dece:accountid:org:dece:DEF5738E543A633AE0401F0A05990CC0</con:value>
        </con:property>
        <con:property>
          <con:name>ErrorDataVal</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetReqXml</con:name>
          <con:value>User-Agent: Apache-HttpClient/4.1.1 (java 1.5)
</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResXml</con:name>
          <con:value><![CDATA[<Device IsLegacy="false" DeviceID="urn:dece:deviceid:org:dece:A09D9C22F11CBC6DE0401F0A05996898" xmlns="http://www.decellc.org/schema/2010/10/dece" xmlns:ns2="http://www.movielabs.com/schema/md/v1.07/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <DisplayName>DeviceInfoDisplayName</DisplayName>
   <Manufacturer>Microsoft</Manufacturer>
   <Model>V344</Model>
   <Brand Language="en-US">DeviceInfoBrand</Brand>
   <SerialNo>123432442323424</SerialNo>
   <Image MimeType="MimeType3" Width="50" Height="50">http://www.oxygenxml.com/1234</Image>
   <LicAppID>urn:dece:licappid:org:dece:A09D9C22F11EBC6DE0401F0A05996898</LicAppID>
   <DRMClientID>urn:dece:drmclientid:org:dece:A0E2E4B822DB1B7CE0401F0A07994404</DRMClientID>
   <ResourceStatus>
      <Current CreatedBy="urn:dece:org:org:dece:0701" CreationDate="2011-04-11T04:02:39.637Z">
         <Value>urn:dece:type:status:pending</Value>
         <Description>Device Created</Description>
      </Current>
   </ResourceStatus>
</Device>]]></con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResTime</con:name>
          <con:value>158</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetID</con:name>
          <con:value>A09DA589BD63A036E0401F0A05996D9A</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceID</con:name>
          <con:value>urn:dece:deviceid:org:dece:DEF585C6AEA11471E0401F0A07994634</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeDVGGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>SqlStr</con:name>
          <con:value>select Status from USER_STATUS_REF where Status !='active'</con:value>
        </con:property>
        <con:property>
          <con:name>DomainID</con:name>
          <con:value>urn:dece:domainid:dece:DEF587A47AF1508CE0401F0A07994D03</con:value>
        </con:property>
      <con:property><con:name>ETag</con:name><con:value>"E940A9BBBD79D9ADE0401F0A07997869:F0246DC7"</con:value></con:property><con:property><con:name>Last-Modified</con:name><con:value>Mon, 21 Oct 2013 12:47:50 GMT</con:value></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>01b6213e-100a-4a71-bb51-1c0628107419</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00016_DeviceGet_Retailer_FUNC_Verify_DeviceID_Belongs_to_Account" searchProperties="true" id="3da53f64-bff9-4a71-9b41-fb5e1df15851" disabled="true">
      <con:description>This test case will verify that Application Tier properly handles a DeviceGet request when invoked with the GET method and Invalid Account ID in request .

Expected Result:

System should return an Error message.</con:description>
      <con:settings/>
      <con:testStep type="groovy" name="Verify Node User SAML Asssertion">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.model.testsuite.TestRunner.Status


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def ValSamlAssertion = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Validate SAML Assertion");

	ValSamlAssertion.setPropertyValue("TCaseName",testCase.getName());
	ValSamlAssertion.setPropertyValue("TSuiteName",testSuite.getName());

	def runnerTc = ValSamlAssertion.run( null , false )
	assert runnerTc.status == Status.FINISHED;

	rcUUID = testCase.getPropertyValue("rcUUID");

	if (runnerTc.status != Status.FINISHED || rcUUID.toInteger()!= 1){

			
		testCase.setPropertyValue("nodetype","device");
		testCase.setPropertyValue("nodeid","0701");
		testCase.setPropertyValue("username","sch-drm_user1");
		testCase.setPropertyValue("password","Password1");
		testCase.setPropertyValue("accountoid",null);
		testCase.setPropertyValue("useroid",null);
		testCase.setPropertyValue("assertid",null);
		testCase.setPropertyValue("SAMLassertion",null);
		testCase.setPropertyValue("tokentype","urn:dece:type:tokentype:usernamepassword");
		testCase.setPropertyValue("loopuntil","25");
		testCase.setPropertyValue("expectErrTypeSTS","SUCCESS");
		testCase.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
			
		log.info " SAML Assertion Expired ! re-generating Assertion";
		def RunSTS = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get SAML Assertion - STS")

				RunSTS.setPropertyValue("TCaseName",testCase.getName());
				RunSTS.setPropertyValue("TSuiteName",testSuite.getName());

				def runnerSTS = RunSTS.run( null , false )

				assert runnerSTS.status == Status.FINISHED;

		}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call LicAppCreate Request with Valid Data" disabled="true">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0");
testCase.setPropertyValue("expectErrTypeLAC","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedDeviceDDReq = testProject.getTestSuiteByName("Staging DeviceGet").getTestCaseByName("LicAppCreate Request");

FeedDeviceDDReq.setPropertyValue("TCaseName",testCase.getName());
FeedDeviceDDReq.setPropertyValue("TSuiteName",testSuite.getName());


def runnerTC = FeedDeviceDDReq.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Feed DeviceGet Request with Invalid DeviceID">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0");
testCase.setPropertyValue("DeviceID","urn:dece:deviceid:org:dece:A04559CE239D84F3E0401F0A07993907");
testCase.setPropertyValue("DomainID","urn:dece:domainid:dece:A09DA589BD63A036E0401F0A05996D9A");
testCase.setPropertyValue("expectErrType","DEVICEID_NOT_FOUND");
testCase.setPropertyValue("ErrorDataVal","1");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedRTLReq = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request");

FeedRTLReq.setPropertyValue("TCaseName",testCase.getName());
FeedRTLReq.setPropertyValue("TSuiteName",testSuite.getName());

WsdlTestCaseRunner TSrunner = new WsdlTestCaseRunner( FeedRTLReq, null );

TSrunner.runTestStepByName("Get the DeviceGet Properties");
TSrunner.runTestStepByName("pem set");
assert TSrunner.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call DeviceGet Request">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )

WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );

TSrunnerRTC.runTestStepByName("DeviceGetRequest");

assert TSrunnerRTC.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract DeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Extract DeviceGet Information")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify theDeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Response Validation")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SAMLExpDate</con:name>
          <con:value>2012-04-18 16:10:01.0</con:value>
        </con:property>
        <con:property>
          <con:name>rcUUID</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>nodetype</con:name>
          <con:value>device</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>0701</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>sch-drm_user1</con:value>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>Password1</con:value>
        </con:property>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">A06A9AA49F7073D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">A06A9AA49F7973D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SAMLassertion</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">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</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>loopuntil</con:name>
          <con:value>25</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTS</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value>e904f17a-ad06-4408-b651-09f88237af01</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value>urn:dece:userid:org:dece:A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value>A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value>urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value>A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>AccountID</con:name>
          <con:value>urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>ErrorDataVal</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>DEVICEID_NOT_FOUND</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetReqXml</con:name>
          <con:value>Host: qa.q.uvvu.com:7001</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResXml</con:name>
          <con:value><![CDATA[<Device IsLegacy="false" DeviceID="urn:dece:deviceid:org:dece:A04559CE239D84F3E0401F0A07993907" xmlns="http://www.decellc.org/schema/2010/10/dece" xmlns:ns2="http://www.movielabs.com/schema/md/v1.07/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <DisplayName>DeviceInfoDisplayName</DisplayName>
   <Manufacturer>DeviceInfoManufacturer</Manufacturer>
   <Model>DeviceInfoModel</Model>
   <Brand Language="en-US">DeviceInfoBrand</Brand>
   <SerialNo>DeviceInfoSerialNo</SerialNo>
   <Image MimeType="MimeType3" Width="50" Height="50">http://www.oxygenxml.com/</Image>
   <LicAppID>urn:dece:licappid:org:dece:A04559CE239F84F3E0401F0A07993907</LicAppID>
   <ResourceStatus>
      <Current CreatedBy="urn:dece:org:org:dece:1397" CreationDate="2011-04-06T19:02:37.674Z">
         <Value>urn:dece:type:status:pending</Value>
         <Description>Device Created</Description>
      </Current>
   </ResourceStatus>
</Device>]]></con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResTime</con:name>
          <con:value>183</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetID</con:name>
          <con:value>Device ID Invalid.https://qa.q.uvvu.com:7001/rest/1/0/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3AA06A9AA49F6E73D7E0401F0A059915F0/Device/urn%3Adece%3Adeviceid%3Aorg%3Adece%3A/DECEDomainhttps://qa.q.uvvu.com:7001/rest/1/0/error/en/ErrorList.html#DeviceIdInvalid</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceID</con:name>
          <con:value>urn:dece:deviceid:org:dece:A04559CE239D84F3E0401F0A07993907</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeDVGGet</con:name>
          <con:value>ACCOUNTID NOT MATCH</con:value>
        </con:property>
        <con:property>
          <con:name>DomainID</con:name>
          <con:value>urn:dece:domainid:dece:A09DA589BD63A036E0401F0A05996D9A</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00017_DeviceGet_Retailer_FUNC_with_Verify_Device_Info" searchProperties="true" id="7759776d-ca17-4408-b2bc-3252cadbd18b">
      <con:description>This test case will verify that Application Tier properly handles a DeviceGet request when invoked with the GET method and valid header request .

Expected Result:

System should return successful message.</con:description>
      <con:settings/>
      <con:testStep type="groovy" name="Verify Node User SAML Asssertion" disabled="true">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.model.testsuite.TestRunner.Status


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def ValSamlAssertion = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Validate SAML Assertion");

	ValSamlAssertion.setPropertyValue("TCaseName",testCase.getName());
	ValSamlAssertion.setPropertyValue("TSuiteName",testSuite.getName());

	def runnerTc = ValSamlAssertion.run( null , false )
	assert runnerTc.status == Status.FINISHED;

	rcUUID = testCase.getPropertyValue("rcUUID");

	if (runnerTc.status != Status.FINISHED || rcUUID.toInteger()!= 1){

			
		testCase.setPropertyValue("nodetype","retailer");
		testCase.setPropertyValue("nodeid","0701");
		testCase.setPropertyValue("username","sch-drm_user1");
		testCase.setPropertyValue("password","Password1");
		testCase.setPropertyValue("accountoid",null);
		testCase.setPropertyValue("useroid",null);
		testCase.setPropertyValue("assertid",null);
		testCase.setPropertyValue("SAMLassertion",null);
		testCase.setPropertyValue("tokentype","urn:dece:type:tokentype:usernamepassword");
		testCase.setPropertyValue("loopuntil","25");
		testCase.setPropertyValue("expectErrTypeSTS","SUCCESS");
		testCase.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
			
		log.info " SAML Assertion Expired ! re-generating Assertion";
		def RunSTS = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get SAML Assertion - STS")

				RunSTS.setPropertyValue("TCaseName",testCase.getName());
				RunSTS.setPropertyValue("TSuiteName",testSuite.getName());

				def runnerSTS = RunSTS.run( null , false )

				assert runnerSTS.status == Status.FINISHED;

		}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call LicAppCreate Request with Valid Data" disabled="true">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0");
testCase.setPropertyValue("expectErrTypeLAC","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedDeviceDDReq = testProject.getTestSuiteByName("Staging DeviceGet").getTestCaseByName("LicAppCreate Request");

FeedDeviceDDReq.setPropertyValue("TCaseName",testCase.getName());
FeedDeviceDDReq.setPropertyValue("TSuiteName",testSuite.getName());


def runnerTC = FeedDeviceDDReq.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Feed DeviceGet Request with Valid Data">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("SAMLassertion","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");
testCase.setPropertyValue("assertionUUID","_87aa3e8d-2de2-46dd-b572-414003e22e9a");
testCase.setPropertyValue("username","firstfullusername_20130612_06223");
testCase.setPropertyValue("password","testing");
testCase.setPropertyValue("accountoid","DEF5738E543B633AE0401F0A05990CC0");
testCase.setPropertyValue("useroid","DEF5738E544A633AE0401F0A05990CC0");
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:DEF5738E543A633AE0401F0A05990CC0");
testCase.setPropertyValue("DeviceID","urn:dece:deviceid:org:dece:DEF585C6AEA11471E0401F0A07994634");
testCase.setPropertyValue("DomainID","urn:dece:domainid:dece:DEF587A47AF1508CE0401F0A07994D03"); 


testCase.setPropertyValue("expectErrType","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedRTLReq = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request");

FeedRTLReq.setPropertyValue("TCaseName",testCase.getName());
FeedRTLReq.setPropertyValue("TSuiteName",testSuite.getName());

WsdlTestCaseRunner TSrunner = new WsdlTestCaseRunner( FeedRTLReq, null );

TSrunner.runTestStepByName("Get the DeviceGet Properties");
TSrunner.runTestStepByName("pem set");
assert TSrunner.status == Status.INITIALIZED;</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call DeviceUpdate Request for evict Cache" id="c91de544-61e1-4fe0-87ab-f27669fe4035">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )
WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );


TSrunnerRTC.runTestStepByName("DeviceUpdateRequest");

assert TSrunnerRTC.status == Status.INITIALIZED;</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call DeviceGet Request">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )

WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );

TSrunnerRTC.runTestStepByName("DeviceGetRequest");

assert TSrunnerRTC.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract DeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Extract DeviceGet Information")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify theDeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Response Validation")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify the DeviceGet Response against DB Result">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGdataVal = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Data Validation");

RTGdataVal.setPropertyValue("TCaseName",testCase.getName());
RTGdataVal.setPropertyValue("TSuiteName",testSuite.getName());


def runnerRTC = RTGdataVal.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SAMLExpDate</con:name>
          <con:value>2013-06-14 18:31:45.0</con:value>
        </con:property>
        <con:property>
          <con:name>rcUUID</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>nodetype</con:name>
          <con:value>retailer</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>0701</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>firstfullusername_20130612_06223</con:value>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>testing</con:value>
        </con:property>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">DEF5738E543B633AE0401F0A05990CC0</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">DEF5738E544A633AE0401F0A05990CC0</con:value>
        </con:property>
        <con:property>
          <con:name>assertid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SAMLassertion</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">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</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>loopuntil</con:name>
          <con:value>25</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTS</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value>_87aa3e8d-2de2-46dd-b572-414003e22e9a</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value>urn:dece:userid:org:dece:A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value>A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value>urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value>A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>AccountID</con:name>
          <con:value>urn:dece:accountid:org:dece:DEF5738E543A633AE0401F0A05990CC0</con:value>
        </con:property>
        <con:property>
          <con:name>ErrorDataVal</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetReqXml</con:name>
          <con:value>User-Agent: Apache-HttpClient/4.1.1 (java 1.5)
</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResXml</con:name>
          <con:value><![CDATA[<Device IsLegacy="false" DeviceID="urn:dece:deviceid:org:dece:A09D9C22F11CBC6DE0401F0A05996898" xmlns="http://www.decellc.org/schema/2010/10/dece" xmlns:ns2="http://www.movielabs.com/schema/md/v1.07/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <DisplayName>DeviceInfoDisplayName</DisplayName>
   <Manufacturer>Microsoft</Manufacturer>
   <Model>V344</Model>
   <Brand Language="en-US">DeviceInfoBrand</Brand>
   <SerialNo>123432442323424</SerialNo>
   <Image MimeType="MimeType3" Width="50" Height="50">http://www.oxygenxml.com/1234</Image>
   <LicAppID>urn:dece:licappid:org:dece:A09D9C22F11EBC6DE0401F0A05996898</LicAppID>
   <DRMClientID>urn:dece:drmclientid:org:dece:A0E2E4B822DB1B7CE0401F0A07994404</DRMClientID>
   <ResourceStatus>
      <Current CreatedBy="urn:dece:org:org:dece:0701" CreationDate="2011-04-11T04:02:39.637Z">
         <Value>urn:dece:type:status:pending</Value>
         <Description>Device Created</Description>
      </Current>
   </ResourceStatus>
</Device>]]></con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResTime</con:name>
          <con:value>314</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceID</con:name>
          <con:value>urn:dece:deviceid:org:dece:DEF585C6AEA11471E0401F0A07994634</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeDVGGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>SqlStr</con:name>
          <con:value>select Status from USER_STATUS_REF where Status !='active'</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeLAC</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>DomainID</con:name>
          <con:value>urn:dece:domainid:dece:DEF587A47AF1508CE0401F0A07994D03</con:value>
        </con:property>
      <con:property><con:name>ETag</con:name><con:value>"E940A9BBBD7CD9ADE0401F0A07997869:F0246DC7"</con:value></con:property><con:property><con:name>Last-Modified</con:name><con:value>Mon, 21 Oct 2013 12:47:58 GMT</con:value></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>c91de544-61e1-4fe0-87ab-f27669fe4035</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00018_DeviceGet_Retailer_FUNC_with_Verify_LICAPP_ID" searchProperties="true" id="b3c2afe6-1bc0-491d-9ef3-779a8982eaea">
      <con:description>This test case will verify that Application Tier properly handles a DeviceGet request when invoked with the GET method and valid header request .

Expected Result:

System should return successful message.</con:description>
      <con:settings/>
      <con:testStep type="groovy" name="Verify Node User SAML Asssertion" disabled="true">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.model.testsuite.TestRunner.Status


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def ValSamlAssertion = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Validate SAML Assertion");

	ValSamlAssertion.setPropertyValue("TCaseName",testCase.getName());
	ValSamlAssertion.setPropertyValue("TSuiteName",testSuite.getName());

	def runnerTc = ValSamlAssertion.run( null , false )
	assert runnerTc.status == Status.FINISHED;

	rcUUID = testCase.getPropertyValue("rcUUID");

	if (runnerTc.status != Status.FINISHED || rcUUID.toInteger()!= 1){

			
		testCase.setPropertyValue("nodetype","retailer");
		testCase.setPropertyValue("nodeid","0701");
		testCase.setPropertyValue("username","sch-drm_user1");
		testCase.setPropertyValue("password","Password1");
		testCase.setPropertyValue("accountoid",null);
		testCase.setPropertyValue("useroid",null);
		testCase.setPropertyValue("assertid",null);
		testCase.setPropertyValue("SAMLassertion",null);
		testCase.setPropertyValue("tokentype","urn:dece:type:tokentype:usernamepassword");
		testCase.setPropertyValue("loopuntil","25");
		testCase.setPropertyValue("expectErrTypeSTS","SUCCESS");
		testCase.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
			
		log.info " SAML Assertion Expired ! re-generating Assertion";
		def RunSTS = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get SAML Assertion - STS")

				RunSTS.setPropertyValue("TCaseName",testCase.getName());
				RunSTS.setPropertyValue("TSuiteName",testSuite.getName());

				def runnerSTS = RunSTS.run( null , false )

				assert runnerSTS.status == Status.FINISHED;

		}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call LicAppCreate Request with Valid Data" disabled="true">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0");
testCase.setPropertyValue("expectErrTypeLAC","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedDeviceDDReq = testProject.getTestSuiteByName("Staging DeviceGet").getTestCaseByName("LicAppCreate Request");

FeedDeviceDDReq.setPropertyValue("TCaseName",testCase.getName());
FeedDeviceDDReq.setPropertyValue("TSuiteName",testSuite.getName());


def runnerTC = FeedDeviceDDReq.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call DeviceUpdate Request for evict Cache" id="85675fb7-352b-4ed7-9155-1516ee4c2182">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("DeviceID","urn:dece:deviceid:org:dece:DEF585C6AEA11471E0401F0A07994634");

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )
WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );


TSrunnerRTC.runTestStepByName("DeviceUpdateRequest");

assert TSrunnerRTC.status == Status.INITIALIZED;</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Feed DeviceGet Request with Valid Data">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("SAMLassertion","nVdpc6pKE/7ur7A8Hy3D5oaVpGpYVFRUBBf4cgthQJRNBgT99e9gosfk5OTNvVWpitP0dD+9TM8zz8gMfLoHEIJJ6kVhVRJeav90O6bJwK7doG1IN5pt225sWx38i2qSJANpGrJmrSohlEEpRKkZpi81mqSYBtluULRG0b0W/us8teiWUauuYIKwaazyRNaqReCHqHd1+1LLkrAXmchDvdAMIOqlVk8F8qSHNXvmDVPt9fkN5dVh8rpL07hHENaTDS3o+9aTFQXEM/FB59lGPdVzQzPNEvju00Yvtfe9eZ4/5cxTlLgETZIkQbIE1rGR5/6qvVZum6EthU70tubNMAo9y/S9i1mCkmG6i+wq8N0o8dJd8BfTFEGRpekGLKyGRTXDXzXit4Mruh9a+gAyQWYD7UzqZmwBHZjA0ILV5UJ6qf36WQXf9mqJGSInSgL0af3vIMHwBP0ohnYD3SK7ofu5xS/S9foMrZ4UWn6GvBOclm0SmxZE1XkCHa+YeAg3n42q1/JXC3TrMGj9m5I8E484MWzii8wIngtR+l/q9VirNysr08/gq21mCa/b9XV97ygnlx7F2oISl1R/3ny5QnhUfgN1L/X7+nOj3vvqfdOM2pOh49gXXZ/wW2FjCqrVFYB4ljVrZguTyBLlBaHKmXiM18TUTLlwNerE9TUKDD50wvO+OwQrekAeh3wFjQb1UUtZzdqbZHieZ8SO6vDCkNWngQ62QE1jbhAoBKH2SX5jaEzfG6oTn0W6fCHcgrH7zNHY8ItseZaTysxDLe4wlFOvXU8ulA4P0svvmB5jKOMaw/M1yPL3pkWygpma9wVfTgoHH88UvsqSxNcFngeQd0EuccCVuMkFTDn3cNwdvAGbkxxQln0ggLO8ALng6sJKUcZibq9WvrGS+n1OXjTzIdCFCv4giMVKMDYj0lwbsU73SUPlOHuziLbMKLaHh3y4s6ayJudTTTrLe7GYaiK5vsrcAq8v8l6mZtqSqaz3HCsvxFzIrx4FMd9NjfUi1pdsbl1ERQbNAaCWIr+Th1qwoixmsbP24kQGh6uc28n8aiUXogbmFc6drnBsGt83Yiuw423g7x6MD7FxzR6sztuBnxkXcS/z4oBXjwNV2jKCIo7AQl9u16uDue6fKtZwCrY3j17LMzdR7hrdXFD00TgypN3JmgJF5DgF4HSRQJYGIxANOCA3gVdc+D3Xjni7nxMjGlXqrD9ob87ecYPMAembVLdL6ZN1e35sC2JYN8bZdr+Td5v+rD5W7dOSTdmLjk71U9v0KKuIHWUjDtNx4QwVtbKdC8XGGtZtd0T4F7afyJ0RSC7nnS+7i3TdnqHz1nOcNbeZNf2O48vMInZ8Jz6juhYph4Rsc5ChCf18GqcV4MocAIP9cs8pMtctk2pLuaLLnAn6YpqBy55Ox/TqOBqefEtnQFSM17P94b0wtpCLHJErIm4rsYIPkV0WYaguxf4eLDnXTThX7HOKJQBFl8a5jvO1HGLlz3nsX/PoihwQGQO02WGFWZJsOkvVZhOcQ24Z9tmdfCzWdjsgO0coTtRp3MxlNHVCYx0d5MBLlkmmLsfj6aTYatngsMezyiHV8YkxKuLpEANvOtZ2ByESzHms62lcD63ESqU4kKXiMjPQvuttA3JUb1HcnBSsDr0MtvlyYIrGOHFVajxchHOmw1ZQ5pyHQX3fzdd1TW3HHRtPBeF8JoxkRUYg6rOL1tEuaPqwW+aTdu6MwGFr0tPCZ7kzK44NzcoXynitBvVWpXWaTALyohHNaTzL1UHeFBWlzticNtRQnHh61nWLZBbatG6m7ZNBrtpe7B9YOjtozZhZuQEu1vxkxx15XlGaG8sI3E5sjYgFcQJix5lIg/P2Yl7iYGa9DdDP0+EufJsfxONk+TB6bqRDxd0KrfS2LC8gSaj28a1gpt8TmFLi2Q3nqtqLSxaEUhimtddyV0leehmmOJ7dw1fG21oQ+60O0xVbzSbbZhggkk2S6pOAbLEsyfPkjeW8ofgEkY9Cxyt9lTzu7Zb6HqAV9BAMbZg0TlFm7SCqfWOxzFdVChf4+o1CBLUI88Qmy5M0wwhsk+pwQOgIFMOKtMCSNM93WoCvVadROgtnCXBSmHzkiK0PHHEBLS/2YEkk329TlOKMHM1TlvrU08l8CmGGmWZSkr0e3ey2COQFsQ9LvIQfuV5IzGeq9hTv4ut1/tc4Pn+7hYx1bK9UQCVoDuKywS9YbfOG+I/Iml+y35t5kNleeWvj/KWJZ70h+fjpd1uU/XDvCbJD0jfMd9Ufb6X+3Ep8g4j4nIy7J/vkPfi9cXNMNzEhuVJyhIt2NJ+OT9nplF3L1CnJVoLNExRBtgkVWhlmTGctOsCQuJsgfkRW76g/eb7LP+LL0l2opvjAB7inqtflD14qKkTlS0XCZ6L46TPog0uctxQW6Vcy3scPmhLxt28eq2eVelg8x//yKLF/l+sLWw9+cJzlhPNCt1yV1PT8l66wImzWw1MuSh6Nf2XgK+cfhfck37GkuJu2WQr//qVajq+XmmlZURamklC7Ch5H6hVneo5h77fSH2au5PCd7Rfor2x/I09UPNwCs3bX9f6/csO7tosF8S7kXbG81Ar8cMXOQ/dhhL8D/HqKM+C7Kf4xktc/xH9KHnL6+Ty8/g8=");
testCase.setPropertyValue("assertionUUID","_87aa3e8d-2de2-46dd-b572-414003e22e9a");
testCase.setPropertyValue("username","firstfullusername_20130612_06223");
testCase.setPropertyValue("password","testing");
testCase.setPropertyValue("accountoid","DEF5738E543B633AE0401F0A05990CC0");
testCase.setPropertyValue("useroid","DEF5738E544A633AE0401F0A05990CC0");
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:DEF5738E543A633AE0401F0A05990CC0");
testCase.setPropertyValue("DeviceID","urn:dece:deviceid:org:dece:DEF585C6AEA41471E0401F0A07994634"); //LIC_APP_OID
testCase.setPropertyValue("DomainID","urn:dece:domainid:dece:DEF587A47AF1508CE0401F0A07994D03"); 


testCase.setPropertyValue("expectErrType","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedRTLReq = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request");

FeedRTLReq.setPropertyValue("TCaseName",testCase.getName());
FeedRTLReq.setPropertyValue("TSuiteName",testSuite.getName());

WsdlTestCaseRunner TSrunner = new WsdlTestCaseRunner( FeedRTLReq, null );

TSrunner.runTestStepByName("Get the DeviceGet Properties");
TSrunner.runTestStepByName("pem set");
assert TSrunner.status == Status.INITIALIZED;</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call DeviceGet Request">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )

WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );

TSrunnerRTC.runTestStepByName("DeviceGetRequest");

assert TSrunnerRTC.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract DeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Extract DeviceGet Information")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify theDeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Response Validation")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify the DeviceGet Response against DB Result">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGdataVal = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Data Validation");

RTGdataVal.setPropertyValue("TCaseName",testCase.getName());
RTGdataVal.setPropertyValue("TSuiteName",testSuite.getName());


def runnerRTC = RTGdataVal.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SAMLExpDate</con:name>
          <con:value>2013-06-14 18:31:45.0</con:value>
        </con:property>
        <con:property>
          <con:name>rcUUID</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>nodetype</con:name>
          <con:value>retailer</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>0701</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>firstfullusername_20130612_06223</con:value>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>testing</con:value>
        </con:property>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">DEF5738E543B633AE0401F0A05990CC0</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">DEF5738E544A633AE0401F0A05990CC0</con:value>
        </con:property>
        <con:property>
          <con:name>assertid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SAMLassertion</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">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</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>loopuntil</con:name>
          <con:value>25</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTS</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value>_87aa3e8d-2de2-46dd-b572-414003e22e9a</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value>urn:dece:userid:org:dece:A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value>A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value>urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value>A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>AccountID</con:name>
          <con:value>urn:dece:accountid:org:dece:DEF5738E543A633AE0401F0A05990CC0</con:value>
        </con:property>
        <con:property>
          <con:name>ErrorDataVal</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetReqXml</con:name>
          <con:value>User-Agent: Apache-HttpClient/4.1.1 (java 1.5)
</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResXml</con:name>
          <con:value><![CDATA[<Device IsLegacy="false" DeviceID="urn:dece:deviceid:org:dece:A09D9C22F11CBC6DE0401F0A05996898" xmlns="http://www.decellc.org/schema/2010/10/dece" xmlns:ns2="http://www.movielabs.com/schema/md/v1.07/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <DisplayName>DeviceInfoDisplayName</DisplayName>
   <Manufacturer>Microsoft</Manufacturer>
   <Model>V344</Model>
   <Brand Language="en-US">DeviceInfoBrand</Brand>
   <SerialNo>123432442323424</SerialNo>
   <Image MimeType="MimeType3" Width="50" Height="50">http://www.oxygenxml.com/1234</Image>
   <LicAppID>urn:dece:licappid:org:dece:A09D9C22F11EBC6DE0401F0A05996898</LicAppID>
   <DRMClientID>urn:dece:drmclientid:org:dece:A0E2E4B822DB1B7CE0401F0A07994404</DRMClientID>
   <ResourceStatus>
      <Current CreatedBy="urn:dece:org:org:dece:0701" CreationDate="2011-04-11T04:02:39.637Z">
         <Value>urn:dece:type:status:pending</Value>
         <Description>Device Created</Description>
      </Current>
   </ResourceStatus>
</Device>]]></con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResTime</con:name>
          <con:value>223</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceID</con:name>
          <con:value>urn:dece:deviceid:org:dece:DEF585C6AEA41471E0401F0A07994634</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeDVGGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>SqlStr</con:name>
          <con:value>select Status from USER_STATUS_REF where Status !='active'</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeLAC</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>DomainID</con:name>
          <con:value>urn:dece:domainid:dece:DEF587A47AF1508CE0401F0A07994D03</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>85675fb7-352b-4ed7-9155-1516ee4c2182</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00019_DeviceGet_Retailer_FUNC_with_Verify_DRMClientID" searchProperties="true" id="2c86ca60-4c2f-4561-9fda-30b9e8644c58">
      <con:description>This test case will verify that Application Tier properly handles a DeviceGet request when invoked with the GET method and valid header request .

Expected Result:

System should return successful message.</con:description>
      <con:settings/>
      <con:testStep type="groovy" name="Verify Node User SAML Asssertion" disabled="true">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.model.testsuite.TestRunner.Status


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def ValSamlAssertion = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Validate SAML Assertion");

	ValSamlAssertion.setPropertyValue("TCaseName",testCase.getName());
	ValSamlAssertion.setPropertyValue("TSuiteName",testSuite.getName());

	def runnerTc = ValSamlAssertion.run( null , false )
	assert runnerTc.status == Status.FINISHED;

	rcUUID = testCase.getPropertyValue("rcUUID");

	if (runnerTc.status != Status.FINISHED || rcUUID.toInteger()!= 1){

			
		testCase.setPropertyValue("nodetype","retailer");
		testCase.setPropertyValue("nodeid","0701");
		testCase.setPropertyValue("username","sch-drm_user1");
		testCase.setPropertyValue("password","Password1");
		testCase.setPropertyValue("accountoid",null);
		testCase.setPropertyValue("useroid",null);
		testCase.setPropertyValue("assertid",null);
		testCase.setPropertyValue("SAMLassertion",null);
		testCase.setPropertyValue("tokentype","urn:dece:type:tokentype:usernamepassword");
		testCase.setPropertyValue("loopuntil","25");
		testCase.setPropertyValue("expectErrTypeSTS","SUCCESS");
		testCase.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
			
		log.info " SAML Assertion Expired ! re-generating Assertion";
		def RunSTS = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get SAML Assertion - STS")

				RunSTS.setPropertyValue("TCaseName",testCase.getName());
				RunSTS.setPropertyValue("TSuiteName",testSuite.getName());

				def runnerSTS = RunSTS.run( null , false )

				assert runnerSTS.status == Status.FINISHED;

		}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call LicAppCreate Request with Valid Data" disabled="true">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0");
testCase.setPropertyValue("expectErrTypeLAC","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedDeviceDDReq = testProject.getTestSuiteByName("Staging DeviceGet").getTestCaseByName("LicAppCreate Request");

FeedDeviceDDReq.setPropertyValue("TCaseName",testCase.getName());
FeedDeviceDDReq.setPropertyValue("TSuiteName",testSuite.getName());


def runnerTC = FeedDeviceDDReq.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call DeviceUpdate Request for evict Cache" id="58f0efb9-0e95-4c2d-8005-fa07a154b176">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("DeviceID","urn:dece:deviceid:org:dece:DEF585C6AEA11471E0401F0A07994634");

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )
WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );


TSrunnerRTC.runTestStepByName("DeviceUpdateRequest");

assert TSrunnerRTC.status == Status.INITIALIZED;</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Feed DeviceGet Request with Valid Data">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));

testCase.setPropertyValue("SAMLassertion","nVdpc6pKE/7ur7A8Hy3D5oaVpGpYVFRUBBf4cgthQJRNBgT99e9gosfk5OTNvVWpitP0dD+9TM8zz8gMfLoHEIJJ6kVhVRJeav90O6bJwK7doG1IN5pt225sWx38i2qSJANpGrJmrSohlEEpRKkZpi81mqSYBtluULRG0b0W/us8teiWUauuYIKwaazyRNaqReCHqHd1+1LLkrAXmchDvdAMIOqlVk8F8qSHNXvmDVPt9fkN5dVh8rpL07hHENaTDS3o+9aTFQXEM/FB59lGPdVzQzPNEvju00Yvtfe9eZ4/5cxTlLgETZIkQbIE1rGR5/6qvVZum6EthU70tubNMAo9y/S9i1mCkmG6i+wq8N0o8dJd8BfTFEGRpekGLKyGRTXDXzXit4Mruh9a+gAyQWYD7UzqZmwBHZjA0ILV5UJ6qf36WQXf9mqJGSInSgL0af3vIMHwBP0ohnYD3SK7ofu5xS/S9foMrZ4UWn6GvBOclm0SmxZE1XkCHa+YeAg3n42q1/JXC3TrMGj9m5I8E484MWzii8wIngtR+l/q9VirNysr08/gq21mCa/b9XV97ygnlx7F2oISl1R/3ny5QnhUfgN1L/X7+nOj3vvqfdOM2pOh49gXXZ/wW2FjCqrVFYB4ljVrZguTyBLlBaHKmXiM18TUTLlwNerE9TUKDD50wvO+OwQrekAeh3wFjQb1UUtZzdqbZHieZ8SO6vDCkNWngQ62QE1jbhAoBKH2SX5jaEzfG6oTn0W6fCHcgrH7zNHY8ItseZaTysxDLe4wlFOvXU8ulA4P0svvmB5jKOMaw/M1yPL3pkWygpma9wVfTgoHH88UvsqSxNcFngeQd0EuccCVuMkFTDn3cNwdvAGbkxxQln0ggLO8ALng6sJKUcZibq9WvrGS+n1OXjTzIdCFCv4giMVKMDYj0lwbsU73SUPlOHuziLbMKLaHh3y4s6ayJudTTTrLe7GYaiK5vsrcAq8v8l6mZtqSqaz3HCsvxFzIrx4FMd9NjfUi1pdsbl1ERQbNAaCWIr+Th1qwoixmsbP24kQGh6uc28n8aiUXogbmFc6drnBsGt83Yiuw423g7x6MD7FxzR6sztuBnxkXcS/z4oBXjwNV2jKCIo7AQl9u16uDue6fKtZwCrY3j17LMzdR7hrdXFD00TgypN3JmgJF5DgF4HSRQJYGIxANOCA3gVdc+D3Xjni7nxMjGlXqrD9ob87ecYPMAembVLdL6ZN1e35sC2JYN8bZdr+Td5v+rD5W7dOSTdmLjk71U9v0KKuIHWUjDtNx4QwVtbKdC8XGGtZtd0T4F7afyJ0RSC7nnS+7i3TdnqHz1nOcNbeZNf2O48vMInZ8Jz6juhYph4Rsc5ChCf18GqcV4MocAIP9cs8pMtctk2pLuaLLnAn6YpqBy55Ox/TqOBqefEtnQFSM17P94b0wtpCLHJErIm4rsYIPkV0WYaguxf4eLDnXTThX7HOKJQBFl8a5jvO1HGLlz3nsX/PoihwQGQO02WGFWZJsOkvVZhOcQ24Z9tmdfCzWdjsgO0coTtRp3MxlNHVCYx0d5MBLlkmmLsfj6aTYatngsMezyiHV8YkxKuLpEANvOtZ2ByESzHms62lcD63ESqU4kKXiMjPQvuttA3JUb1HcnBSsDr0MtvlyYIrGOHFVajxchHOmw1ZQ5pyHQX3fzdd1TW3HHRtPBeF8JoxkRUYg6rOL1tEuaPqwW+aTdu6MwGFr0tPCZ7kzK44NzcoXynitBvVWpXWaTALyohHNaTzL1UHeFBWlzticNtRQnHh61nWLZBbatG6m7ZNBrtpe7B9YOjtozZhZuQEu1vxkxx15XlGaG8sI3E5sjYgFcQJix5lIg/P2Yl7iYGa9DdDP0+EufJsfxONk+TB6bqRDxd0KrfS2LC8gSaj28a1gpt8TmFLi2Q3nqtqLSxaEUhimtddyV0leehmmOJ7dw1fG21oQ+60O0xVbzSbbZhggkk2S6pOAbLEsyfPkjeW8ofgEkY9Cxyt9lTzu7Zb6HqAV9BAMbZg0TlFm7SCqfWOxzFdVChf4+o1CBLUI88Qmy5M0wwhsk+pwQOgIFMOKtMCSNM93WoCvVadROgtnCXBSmHzkiK0PHHEBLS/2YEkk329TlOKMHM1TlvrU08l8CmGGmWZSkr0e3ey2COQFsQ9LvIQfuV5IzGeq9hTv4ut1/tc4Pn+7hYx1bK9UQCVoDuKywS9YbfOG+I/Iml+y35t5kNleeWvj/KWJZ70h+fjpd1uU/XDvCbJD0jfMd9Ufb6X+3Ep8g4j4nIy7J/vkPfi9cXNMNzEhuVJyhIt2NJ+OT9nplF3L1CnJVoLNExRBtgkVWhlmTGctOsCQuJsgfkRW76g/eb7LP+LL0l2opvjAB7inqtflD14qKkTlS0XCZ6L46TPog0uctxQW6Vcy3scPmhLxt28eq2eVelg8x//yKLF/l+sLWw9+cJzlhPNCt1yV1PT8l66wImzWw1MuSh6Nf2XgK+cfhfck37GkuJu2WQr//qVajq+XmmlZURamklC7Ch5H6hVneo5h77fSH2au5PCd7Rfor2x/I09UPNwCs3bX9f6/csO7tosF8S7kXbG81Ar8cMXOQ/dhhL8D/HqKM+C7Kf4xktc/xH9KHnL6+Ty8/g8=");
testCase.setPropertyValue("assertionUUID","_87aa3e8d-2de2-46dd-b572-414003e22e9a");
testCase.setPropertyValue("username","firstfullusername_20130612_06223");
testCase.setPropertyValue("password","testing");
testCase.setPropertyValue("accountoid","DEF5738E543B633AE0401F0A05990CC0");
testCase.setPropertyValue("useroid","DEF5738E544A633AE0401F0A05990CC0");
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:DEF5738E543A633AE0401F0A05990CC0");
testCase.setPropertyValue("DeviceID","urn:dece:deviceid:org:dece:DEF585C6AEA11471E0401F0A07994634");
testCase.setPropertyValue("DomainID","urn:dece:domainid:dece:DEF587A47AF1508CE0401F0A07994D03"); 

testCase.setPropertyValue("expectErrType","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedRTLReq = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request");

FeedRTLReq.setPropertyValue("TCaseName",testCase.getName());
FeedRTLReq.setPropertyValue("TSuiteName",testSuite.getName());

WsdlTestCaseRunner TSrunner = new WsdlTestCaseRunner( FeedRTLReq, null );

TSrunner.runTestStepByName("Get the DeviceGet Properties");
TSrunner.runTestStepByName("pem set");
assert TSrunner.status == Status.INITIALIZED;</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call DeviceGet Request">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )

WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );

TSrunnerRTC.runTestStepByName("DeviceGetRequest");

assert TSrunnerRTC.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract DeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Extract DeviceGet Information")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify theDeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Response Validation")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify the DeviceGet Response against DB Result">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGdataVal = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Data Validation");

RTGdataVal.setPropertyValue("TCaseName",testCase.getName());
RTGdataVal.setPropertyValue("TSuiteName",testSuite.getName());


def runnerRTC = RTGdataVal.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SAMLExpDate</con:name>
          <con:value>2013-06-14 18:31:45.0</con:value>
        </con:property>
        <con:property>
          <con:name>rcUUID</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>nodetype</con:name>
          <con:value>retailer</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>0701</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>firstfullusername_20130612_06223</con:value>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>testing</con:value>
        </con:property>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">DEF5738E543B633AE0401F0A05990CC0</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">DEF5738E544A633AE0401F0A05990CC0</con:value>
        </con:property>
        <con:property>
          <con:name>assertid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SAMLassertion</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">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</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>loopuntil</con:name>
          <con:value>25</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTS</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value>_87aa3e8d-2de2-46dd-b572-414003e22e9a</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value>urn:dece:userid:org:dece:A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value>A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value>urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value>A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>AccountID</con:name>
          <con:value>urn:dece:accountid:org:dece:DEF5738E543A633AE0401F0A05990CC0</con:value>
        </con:property>
        <con:property>
          <con:name>ErrorDataVal</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetReqXml</con:name>
          <con:value>User-Agent: Apache-HttpClient/4.1.1 (java 1.5)
</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResXml</con:name>
          <con:value><![CDATA[<Device IsLegacy="false" DeviceID="urn:dece:deviceid:org:dece:A09D9C22F11CBC6DE0401F0A05996898" xmlns="http://www.decellc.org/schema/2010/10/dece" xmlns:ns2="http://www.movielabs.com/schema/md/v1.07/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <DisplayName>DeviceInfoDisplayName</DisplayName>
   <Manufacturer>Microsoft</Manufacturer>
   <Model>V344</Model>
   <Brand Language="en-US">DeviceInfoBrand</Brand>
   <SerialNo>123432442323424</SerialNo>
   <Image MimeType="MimeType3" Width="50" Height="50">http://www.oxygenxml.com/1234</Image>
   <LicAppID>urn:dece:licappid:org:dece:A09D9C22F11EBC6DE0401F0A05996898</LicAppID>
   <DRMClientID>urn:dece:drmclientid:org:dece:A0E2E4B822DB1B7CE0401F0A07994404</DRMClientID>
   <ResourceStatus>
      <Current CreatedBy="urn:dece:org:org:dece:0701" CreationDate="2011-04-11T04:02:39.637Z">
         <Value>urn:dece:type:status:pending</Value>
         <Description>Device Created</Description>
      </Current>
   </ResourceStatus>
</Device>]]></con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResTime</con:name>
          <con:value>186</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceID</con:name>
          <con:value>urn:dece:deviceid:org:dece:DEF585C6AEA11471E0401F0A07994634</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeDVGGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>SqlStr</con:name>
          <con:value>select Status from USER_STATUS_REF where Status !='active'</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeLAC</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>DomainID</con:name>
          <con:value>urn:dece:domainid:dece:DEF587A47AF1508CE0401F0A07994D03</con:value>
        </con:property>
      <con:property><con:name>ETag</con:name><con:value>"E940B28D41533CF6E0401F0A05995485:F0246DC7"</con:value></con:property><con:property><con:name>Last-Modified</con:name><con:value>Mon, 21 Oct 2013 12:48:14 GMT</con:value></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>58f0efb9-0e95-4c2d-8005-fa07a154b176</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00020_DeviceGet_Retailer_FUNC_with_Verify_Resource_Status" searchProperties="true" id="7ecd6ba2-26b4-4a33-b7b7-7d613e7a5865">
      <con:description>This test case will verify that Application Tier properly handles a DeviceGet request when invoked with the GET method and valid header request .

Expected Result:

System should return successful message.</con:description>
      <con:settings/>
      <con:testStep type="groovy" name="Verify Node User SAML Asssertion" disabled="true">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.model.testsuite.TestRunner.Status


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def ValSamlAssertion = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Validate SAML Assertion");

	ValSamlAssertion.setPropertyValue("TCaseName",testCase.getName());
	ValSamlAssertion.setPropertyValue("TSuiteName",testSuite.getName());

	def runnerTc = ValSamlAssertion.run( null , false )
	assert runnerTc.status == Status.FINISHED;

	rcUUID = testCase.getPropertyValue("rcUUID");

	if (runnerTc.status != Status.FINISHED || rcUUID.toInteger()!= 1){

			
		testCase.setPropertyValue("nodetype","retailer");
		testCase.setPropertyValue("nodeid","0701");
		testCase.setPropertyValue("username","sch-drm_user1");
		testCase.setPropertyValue("password","Password1");
		testCase.setPropertyValue("accountoid",null);
		testCase.setPropertyValue("useroid",null);
		testCase.setPropertyValue("assertid",null);
		testCase.setPropertyValue("SAMLassertion",null);
		testCase.setPropertyValue("tokentype","urn:dece:type:tokentype:usernamepassword");
		testCase.setPropertyValue("loopuntil","25");
		testCase.setPropertyValue("expectErrTypeSTS","SUCCESS");
		testCase.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
			
		log.info " SAML Assertion Expired ! re-generating Assertion";
		def RunSTS = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get SAML Assertion - STS")

				RunSTS.setPropertyValue("TCaseName",testCase.getName());
				RunSTS.setPropertyValue("TSuiteName",testSuite.getName());

				def runnerSTS = RunSTS.run( null , false )

				assert runnerSTS.status == Status.FINISHED;

		}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call LicAppCreate Request with Valid Data" disabled="true">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0");
testCase.setPropertyValue("expectErrTypeLAC","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedDeviceDDReq = testProject.getTestSuiteByName("Staging DeviceGet").getTestCaseByName("LicAppCreate Request");

FeedDeviceDDReq.setPropertyValue("TCaseName",testCase.getName());
FeedDeviceDDReq.setPropertyValue("TSuiteName",testSuite.getName());


def runnerTC = FeedDeviceDDReq.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call DeviceUpdate Request for evict Cache" id="45f33285-ff5b-483d-90e3-a0544d8b00dd">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )
WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );


TSrunnerRTC.runTestStepByName("DeviceUpdateRequest");

assert TSrunnerRTC.status == Status.INITIALIZED;</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Feed DeviceGet Request with Valid Data">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));

testCase.setPropertyValue("SAMLassertion","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");
testCase.setPropertyValue("assertionUUID","_87aa3e8d-2de2-46dd-b572-414003e22e9a");
testCase.setPropertyValue("username","firstfullusername_20130612_06223");
testCase.setPropertyValue("password","testing");
testCase.setPropertyValue("accountoid","DEF5738E543B633AE0401F0A05990CC0");
testCase.setPropertyValue("useroid","DEF5738E544A633AE0401F0A05990CC0");
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:DEF5738E543A633AE0401F0A05990CC0");
testCase.setPropertyValue("DeviceID","urn:dece:deviceid:org:dece:DEF585C6AEA11471E0401F0A07994634");
testCase.setPropertyValue("DomainID","urn:dece:domainid:dece:DEF587A47AF1508CE0401F0A07994D03"); 

testCase.setPropertyValue("expectErrType","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedRTLReq = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request");

FeedRTLReq.setPropertyValue("TCaseName",testCase.getName());
FeedRTLReq.setPropertyValue("TSuiteName",testSuite.getName());

WsdlTestCaseRunner TSrunner = new WsdlTestCaseRunner( FeedRTLReq, null );

TSrunner.runTestStepByName("Get the DeviceGet Properties");
TSrunner.runTestStepByName("pem set");
assert TSrunner.status == Status.INITIALIZED;</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call DeviceGet Request">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )

WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );

TSrunnerRTC.runTestStepByName("DeviceGetRequest");

assert TSrunnerRTC.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract DeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Extract DeviceGet Information")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify theDeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Response Validation")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify the DeviceGet Response against DB Result">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGdataVal = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Data Validation");

RTGdataVal.setPropertyValue("TCaseName",testCase.getName());
RTGdataVal.setPropertyValue("TSuiteName",testSuite.getName());


def runnerRTC = RTGdataVal.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SAMLExpDate</con:name>
          <con:value>2013-06-14 18:31:45.0</con:value>
        </con:property>
        <con:property>
          <con:name>rcUUID</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>nodetype</con:name>
          <con:value>retailer</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>0701</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>firstfullusername_20130612_06223</con:value>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>testing</con:value>
        </con:property>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">DEF5738E543B633AE0401F0A05990CC0</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">DEF5738E544A633AE0401F0A05990CC0</con:value>
        </con:property>
        <con:property>
          <con:name>assertid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SAMLassertion</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">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</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>loopuntil</con:name>
          <con:value>25</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTS</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value>_87aa3e8d-2de2-46dd-b572-414003e22e9a</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value>urn:dece:userid:org:dece:A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value>A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value>urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value>A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>AccountID</con:name>
          <con:value>urn:dece:accountid:org:dece:DEF5738E543A633AE0401F0A05990CC0</con:value>
        </con:property>
        <con:property>
          <con:name>ErrorDataVal</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetReqXml</con:name>
          <con:value>User-Agent: Apache-HttpClient/4.1.1 (java 1.5)
</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResXml</con:name>
          <con:value><![CDATA[<Device IsLegacy="false" DeviceID="urn:dece:deviceid:org:dece:A09D9C22F11CBC6DE0401F0A05996898" xmlns="http://www.decellc.org/schema/2010/10/dece" xmlns:ns2="http://www.movielabs.com/schema/md/v1.07/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <DisplayName>DeviceInfoDisplayName</DisplayName>
   <Manufacturer>Microsoft</Manufacturer>
   <Model>V344</Model>
   <Brand Language="en-US">DeviceInfoBrand</Brand>
   <SerialNo>123432442323424</SerialNo>
   <Image MimeType="MimeType3" Width="50" Height="50">http://www.oxygenxml.com/1234</Image>
   <LicAppID>urn:dece:licappid:org:dece:A09D9C22F11EBC6DE0401F0A05996898</LicAppID>
   <DRMClientID>urn:dece:drmclientid:org:dece:A0E2E4B822DB1B7CE0401F0A07994404</DRMClientID>
   <ResourceStatus>
      <Current CreatedBy="urn:dece:org:org:dece:0701" CreationDate="2011-04-11T04:02:39.637Z">
         <Value>urn:dece:type:status:pending</Value>
         <Description>Device Created</Description>
      </Current>
   </ResourceStatus>
</Device>]]></con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResTime</con:name>
          <con:value>342</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceID</con:name>
          <con:value>urn:dece:deviceid:org:dece:DEF585C6AEA11471E0401F0A07994634</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeDVGGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>SqlStr</con:name>
          <con:value>select Status from USER_STATUS_REF where Status !='active'</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeLAC</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>DomainID</con:name>
          <con:value>urn:dece:domainid:dece:DEF587A47AF1508CE0401F0A07994D03</con:value>
        </con:property>
      <con:property><con:name>ETag</con:name><con:value>"E940B235485EA878E0401F0A05995487:F0246DC7"</con:value></con:property><con:property><con:name>Last-Modified</con:name><con:value>Mon, 21 Oct 2013 12:48:23 GMT</con:value></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>45f33285-ff5b-483d-90e3-a0544d8b00dd</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase>
    <con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00021_DeviceGet_Retailer_FUNC_with_Deleted_MAC_Policy" searchProperties="true" id="81b15308-8b99-4b45-9e22-34f2ee0bf079" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="">
      <con:description>This test case will verify that Application Tier properly handles a DeviceGet request when invoked with the GET method and valid header request .

Expected Result:

System should return successful message.</con:description>
      <con:settings/>
      <con:testStep type="groovy" name="Verify Node User SAML Asssertion" disabled="true">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def ValSamlAssertion = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Validate SAML Assertion");

	ValSamlAssertion.setPropertyValue("TCaseName",testCase.getName());
	ValSamlAssertion.setPropertyValue("TSuiteName",testSuite.getName());

	def runnerTc = ValSamlAssertion.run( null , false )
	assert runnerTc.status == Status.FINISHED;

	rcUUID = testCase.getPropertyValue("rcUUID");

	if (runnerTc.status != Status.FINISHED || rcUUID.toInteger()!= 1){

			
		testCase.setPropertyValue("nodetype","retailer");
		testCase.setPropertyValue("nodeid","0701");
		testCase.setPropertyValue("username","sch-drm_user1");
		testCase.setPropertyValue("password","Password1");
		testCase.setPropertyValue("accountoid",null);
		testCase.setPropertyValue("useroid",null);
		testCase.setPropertyValue("assertid",null);
		testCase.setPropertyValue("SAMLassertion",null);
		testCase.setPropertyValue("tokentype","urn:dece:type:tokentype:usernamepassword");
		testCase.setPropertyValue("loopuntil","25");
		testCase.setPropertyValue("expectErrTypeSTS","SUCCESS");
		testCase.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
			
		log.info " SAML Assertion Expired ! re-generating Assertion";
		
		def RunSTS = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get SAML Assertion - STS")

				RunSTS.setPropertyValue("TCaseName",testCase.getName());
				RunSTS.setPropertyValue("TSuiteName",testSuite.getName());

				def runnerSTS = RunSTS.run( null , false )

				assert runnerSTS.status == Status.FINISHED;

		}</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call LicAppCreate Request with Valid Data" disabled="true">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0");
testCase.setPropertyValue("expectErrTypeLAC","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedDeviceDDReq = testProject.getTestSuiteByName("Staging DeviceGet").getTestCaseByName("LicAppCreate Request");

FeedDeviceDDReq.setPropertyValue("TCaseName",testCase.getName());
FeedDeviceDDReq.setPropertyValue("TSuiteName",testSuite.getName());


def runnerTC = FeedDeviceDDReq.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Feed DeviceGet Request with Valid Data">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));

testCase.setPropertyValue("SAMLassertion","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");
testCase.setPropertyValue("assertionUUID","_87aa3e8d-2de2-46dd-b572-414003e22e9a");
testCase.setPropertyValue("username","firstfullusername_20130612_06223");
testCase.setPropertyValue("password","testing");
testCase.setPropertyValue("accountoid","DEF5738E543B633AE0401F0A05990CC0");
testCase.setPropertyValue("useroid","DEF5738E544A633AE0401F0A05990CC0");
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:DEF5738E543A633AE0401F0A05990CC0");
testCase.setPropertyValue("DeviceID","urn:dece:deviceid:org:dece:DEF585C6AEA11471E0401F0A07994634");
testCase.setPropertyValue("DomainID","urn:dece:domainid:dece:DEF587A47AF1508CE0401F0A07994D03"); 
testCase.setPropertyValue("expectErrType","Policy:ManageAccountConsentRequired");
testCase.setPropertyValue("ErrorDataVal","1");
// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedRTLReq = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request");

FeedRTLReq.setPropertyValue("TCaseName",testCase.getName());
FeedRTLReq.setPropertyValue("TSuiteName",testSuite.getName());

WsdlTestCaseRunner TSrunner = new WsdlTestCaseRunner( FeedRTLReq, null );

TSrunner.runTestStepByName("Get the DeviceGet Properties");
TSrunner.runTestStepByName("pem set");
assert TSrunner.status == Status.INITIALIZED;</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call DeviceUpdate Request for evict Cache">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )
WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );


TSrunnerRTC.runTestStepByName("DeviceUpdateRequest");

assert TSrunnerRTC.status == Status.INITIALIZED;</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Set MAC Policy to deleted"><con:settings/><con:config><script>import dbUtils.dbUtils;
import dbUtils.dbPolicy;

//for the node 0701 &amp; POLICY_OID=DEF5738E5501633AE0401F0A05990CC0
//DEEFE1E42331AC95E0401F0A079924CF
myDb = new dbPolicy(log,"LP1");
status = myDb.policySetStatus("DEF5738E5501633AE0401F0A05990CC0","deleted");

assert status==1;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call DeviceGet Request">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )
WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );


TSrunnerRTC.runTestStepByName("DeviceGetRequest");

assert TSrunnerRTC.status == Status.INITIALIZED;</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract DeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Extract DeviceGet Information")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify theDeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Response Validation")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Set MAC Policy to active"><con:settings/><con:config><script>import dbUtils.dbUtils;
import dbUtils.dbPolicy;

//for the node 0701 &amp; POLICY_OID=DEF5738E5501633AE0401F0A05990CC0
//DEEFE1E42331AC95E0401F0A079924CF
myDb = new dbPolicy(log,"LP1");
status =myDb.policySetStatus("DEF5738E5501633AE0401F0A05990CC0","active");

assert status==1;
</script></con:config></con:testStep><con:properties>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SAMLExpDate</con:name>
          <con:value>2017-06-11 06:17:41.0</con:value>
        </con:property>
        <con:property>
          <con:name>rcUUID</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>nodetype</con:name>
          <con:value>retailer</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>0701</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>firstfullusername_20130612_06223</con:value>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>testing</con:value>
        </con:property>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">DEF5738E543B633AE0401F0A05990CC0</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">DEF5738E544A633AE0401F0A05990CC0</con:value>
        </con:property>
        <con:property>
          <con:name>assertid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SAMLassertion</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">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</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>loopuntil</con:name>
          <con:value>25</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTS</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value>_87aa3e8d-2de2-46dd-b572-414003e22e9a</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value>urn:dece:userid:org:dece:DEDB0DD90C83E264E0401F0A079920A4</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value>DEDB0DD90C83E264E0401F0A079920A4</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3ADEDB0DD90C1CE264E0401F0A079920A4</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value>DEDB0DD90C1CE264E0401F0A079920A4</con:value>
        </con:property>
        <con:property>
          <con:name>AccountID</con:name>
          <con:value>urn:dece:accountid:org:dece:DEF5738E543A633AE0401F0A05990CC0</con:value>
        </con:property>
        <con:property>
          <con:name>ErrorDataVal</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>Policy:ManageAccountConsentRequired</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetReqXml</con:name>
          <con:value>User-Agent: Apache-HttpClient/4.1.1 (java 1.5)
</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResXml</con:name>
          <con:value><![CDATA[<Device IsLegacy="false" DeviceID="urn:dece:deviceid:org:dece:A09D9C22F11CBC6DE0401F0A05996898" xmlns="http://www.decellc.org/schema/2010/10/dece" xmlns:ns2="http://www.movielabs.com/schema/md/v1.07/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <DisplayName>DeviceInfoDisplayName</DisplayName>
   <Manufacturer>Microsoft</Manufacturer>
   <Model>V344</Model>
   <Brand Language="en-US">DeviceInfoBrand</Brand>
   <SerialNo>123432442323424</SerialNo>
   <Image MimeType="MimeType3" Width="50" Height="50">http://www.oxygenxml.com/1234</Image>
   <LicAppID>urn:dece:licappid:org:dece:A09D9C22F11EBC6DE0401F0A05996898</LicAppID>
   <DRMClientID>urn:dece:drmclientid:org:dece:A0E2E4B822DB1B7CE0401F0A07994404</DRMClientID>
   <ResourceStatus>
      <Current CreatedBy="urn:dece:org:org:dece:0701" CreationDate="2011-04-11T04:02:39.637Z">
         <Value>urn:dece:type:status:pending</Value>
         <Description>Device Created</Description>
      </Current>
   </ResourceStatus>
</Device>]]></con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResTime</con:name>
          <con:value>190</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceID</con:name>
          <con:value>urn:dece:deviceid:org:dece:DEF585C6AEA11471E0401F0A07994634</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeDVGGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>SqlStr</con:name>
          <con:value>select Status from USER_STATUS_REF where Status !='active'</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeLAC</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>DomainID</con:name>
          <con:value>urn:dece:domainid:dece:DEF587A47AF1508CE0401F0A07994D03</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>aee4be24-47c9-4526-bbd5-54cad6cd6350</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:properties/>
    <con:reportParameters/>
  </con:testSuite>
  <con:testSuite name="DeviceGet  Retailer_CS Test Cases_R4">
    <con:description/>
    <con:settings><con:setting id="IncludeOverview">true</con:setting><con:setting id="IncludeResults">true</con:setting><con:setting id="FlowLayout">false</con:setting><con:setting id="ErrorDetails">true</con:setting><con:setting id="IncludeCoverage">true</con:setting><con:setting id="GeneratableJUnitReport@Style">Single Page (Print)</con:setting><con:setting id="GeneratableJUnitReport@Folder">C:\Users\raju.ganji\Desktop\DeviceGet_170613\4.0.3</con:setting></con:settings>
    <con:runType>SEQUENTIAL</con:runType>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00001_DeviceGet_RetailerCS_FUNC_with_ValidData" searchProperties="true" id="4c89e271-8a66-4b76-b600-ca6346a9afae">
      <con:description>This test case will verify that Application Tier properly handles a DeviceGet request when invoked with the GET method and valid header request .

Expected Result:

System should return successful message.</con:description>
      <con:settings/>
      <con:testStep type="groovy" name="Verify Node User SAML Asssertion" disabled="true">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.model.testsuite.TestRunner.Status


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def ValSamlAssertion = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Validate SAML Assertion");

	ValSamlAssertion.setPropertyValue("TCaseName",testCase.getName());
	ValSamlAssertion.setPropertyValue("TSuiteName",testSuite.getName());

	def runnerTc = ValSamlAssertion.run( null , false )
	assert runnerTc.status == Status.FINISHED;

	rcUUID = testCase.getPropertyValue("rcUUID");

	if (runnerTc.status != Status.FINISHED || rcUUID.toInteger()!= 1){

			
		testCase.setPropertyValue("nodetype","retailer");
		testCase.setPropertyValue("nodeid","0701");
		testCase.setPropertyValue("audienceNodeid","0702");
		testCase.setPropertyValue("username","sch-drm_user1");
		testCase.setPropertyValue("password","Password1");
		testCase.setPropertyValue("accountoid",null);
		testCase.setPropertyValue("useroid",null);
		testCase.setPropertyValue("assertid",null);
		testCase.setPropertyValue("SAMLassertion",null);
		testCase.setPropertyValue("tokentype","urn:dece:type:tokentype:usernamepassword");
		testCase.setPropertyValue("loopuntil","25");
		testCase.setPropertyValue("expectErrTypeSTS","SUCCESS");
		testCase.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
			
		log.info " SAML Assertion Expired ! re-generating Assertion";
		def RunSTS = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get SAML Assertion - STS")

				RunSTS.setPropertyValue("TCaseName",testCase.getName());
				RunSTS.setPropertyValue("TSuiteName",testSuite.getName());

				def runnerSTS = RunSTS.run( null , false )

				assert runnerSTS.status == Status.FINISHED;

		}</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call LicAppCreate Request with Valid Data" disabled="true">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0");
testCase.setPropertyValue("expectErrTypeLAC","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedDeviceDDReq = testProject.getTestSuiteByName("Staging DeviceGet").getTestCaseByName("LicAppCreate Request");

FeedDeviceDDReq.setPropertyValue("TCaseName",testCase.getName());
FeedDeviceDDReq.setPropertyValue("TSuiteName",testSuite.getName());


def runnerTC = FeedDeviceDDReq.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call DeviceUpdate Request for evict Cache" id="310ced0c-a3e6-4a3f-8eb6-7317b740b90c">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )
WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );


TSrunnerRTC.runTestStepByName("DeviceUpdateRequest");

assert TSrunnerRTC.status == Status.INITIALIZED;</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Feed DeviceGet Request with Valid Data">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//DeviceGet Request and properties

// setup Retailer CS Nodeid with the account
testCase.setPropertyValue("NodeID","0702");

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("SAMLassertion","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");
testCase.setPropertyValue("assertionUUID","_87aa3e8d-2de2-46dd-b572-414003e22e9a");
testCase.setPropertyValue("username","firstfullusername_20130612_06223");
testCase.setPropertyValue("password","testing");
testCase.setPropertyValue("accountoid","DEF5738E543B633AE0401F0A05990CC0");
testCase.setPropertyValue("useroid","DEF5738E544A633AE0401F0A05990CC0");
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:DEF5738E543A633AE0401F0A05990CC0");
testCase.setPropertyValue("DeviceID","urn:dece:deviceid:org:dece:DEF585C6AEA11471E0401F0A07994634");
testCase.setPropertyValue("DomainID","urn:dece:domainid:dece:DEF587A47AF1508CE0401F0A07994D03");
testCase.setPropertyValue("ErrorDataVal","0");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedRTLReq = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request");

FeedRTLReq.setPropertyValue("TCaseName",testCase.getName());
FeedRTLReq.setPropertyValue("TSuiteName",testSuite.getName());

WsdlTestCaseRunner TSrunner = new WsdlTestCaseRunner( FeedRTLReq, null );

TSrunner.runTestStepByName("Get the DeviceGet Properties");
TSrunner.runTestStepByName("pem set");
assert TSrunner.status == Status.INITIALIZED;</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call DeviceGet Request">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();



def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )

WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );

TSrunnerRTC.runTestStepByName("DeviceGetRequest");

assert TSrunnerRTC.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract DeviceGet Response" id="c79e1467-4aab-4c33-bfee-e0fbca2f5a46">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Extract DeviceGet Information")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify theDeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Response Validation")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify the DeviceGet Response against DB Result">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGdataVal = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Data Validation");

RTGdataVal.setPropertyValue("TCaseName",testCase.getName());
RTGdataVal.setPropertyValue("TSuiteName",testSuite.getName());


def runnerRTC = RTGdataVal.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SAMLExpDate</con:name>
          <con:value>2017-06-11 05:48:25.0</con:value>
        </con:property>
        <con:property>
          <con:name>rcUUID</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>nodetype</con:name>
          <con:value>retailer</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>0702</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>firstfullusername_20130612_06223</con:value>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>testing</con:value>
        </con:property>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">DEF5738E543B633AE0401F0A05990CC0</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">DEF5738E544A633AE0401F0A05990CC0</con:value>
        </con:property>
        <con:property>
          <con:name>assertid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SAMLassertion</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">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</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>loopuntil</con:name>
          <con:value>25</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTS</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value>_87aa3e8d-2de2-46dd-b572-414003e22e9a</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value>urn:dece:userid:org:dece:A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value>A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value>urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value>A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>AccountID</con:name>
          <con:value>urn:dece:accountid:org:dece:DEF5738E543A633AE0401F0A05990CC0</con:value>
        </con:property>
        <con:property>
          <con:name>ErrorDataVal</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetReqXml</con:name>
          <con:value>User-Agent: Apache-HttpClient/4.1.1 (java 1.5)
</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResXml</con:name>
          <con:value><![CDATA[<Device IsLegacy="false" DeviceID="urn:dece:deviceid:org:dece:A09D9C22F11CBC6DE0401F0A05996898" xmlns="http://www.decellc.org/schema/2010/10/dece" xmlns:ns2="http://www.movielabs.com/schema/md/v1.07/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <DisplayName>DeviceInfoDisplayName</DisplayName>
   <Manufacturer>Microsoft</Manufacturer>
   <Model>V344</Model>
   <Brand Language="en-US">DeviceInfoBrand</Brand>
   <SerialNo>123432442323424</SerialNo>
   <Image MimeType="MimeType3" Width="50" Height="50">http://www.oxygenxml.com/1234</Image>
   <LicAppID>urn:dece:licappid:org:dece:A09D9C22F11EBC6DE0401F0A05996898</LicAppID>
   <DRMClientID>urn:dece:drmclientid:org:dece:A0E2E4B822DB1B7CE0401F0A07994404</DRMClientID>
   <ResourceStatus>
      <Current CreatedBy="urn:dece:org:org:dece:0701" CreationDate="2011-04-11T04:02:39.637Z">
         <Value>urn:dece:type:status:pending</Value>
         <Description>Device Created</Description>
      </Current>
   </ResourceStatus>
</Device>]]></con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResTime</con:name>
          <con:value>544</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceID</con:name>
          <con:value>urn:dece:deviceid:org:dece:DEF585C6AEA11471E0401F0A07994634</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeDVGGet</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SqlStr</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectErrTypeLAC</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>DomainID</con:name>
          <con:value>urn:dece:domainid:dece:DEF587A47AF1508CE0401F0A07994D03</con:value>
        </con:property>
      <con:property><con:name>audienceNodeid</con:name><con:value>0702</con:value></con:property><con:property><con:name>ETag</con:name><con:value>"E940B28D41723CF6E0401F0A05995485:F0246DC7"</con:value></con:property><con:property><con:name>Last-Modified</con:name><con:value>Mon, 21 Oct 2013 12:48:45 GMT</con:value></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>310ced0c-a3e6-4a3f-8eb6-7317b740b90c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c79e1467-4aab-4c33-bfee-e0fbca2f5a46</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00002_DeviceGet_RetailerCS_FUNC_with_Invalid AccountID" searchProperties="true" id="23188d79-5381-42a1-a97a-6fcb6b581368">
      <con:description>This test case will verify that Application Tier properly handles a DeviceGet request when invoked with the GET method and Invalid Account ID in request .

Expected Result:

System should return an Error message.</con:description>
      <con:settings/>
      <con:testStep type="groovy" name="Verify Node User SAML Asssertion" disabled="true">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.model.testsuite.TestRunner.Status


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def ValSamlAssertion = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Validate SAML Assertion");

	ValSamlAssertion.setPropertyValue("TCaseName",testCase.getName());
	ValSamlAssertion.setPropertyValue("TSuiteName",testSuite.getName());

	def runnerTc = ValSamlAssertion.run( null , false )
	assert runnerTc.status == Status.FINISHED;

	rcUUID = testCase.getPropertyValue("rcUUID");

	if (runnerTc.status != Status.FINISHED || rcUUID.toInteger()!= 1){

			
		testCase.setPropertyValue("nodetype","retailer");
		testCase.setPropertyValue("nodeid","0701");
		testCase.setPropertyValue("audienceNodeid","0702");
		testCase.setPropertyValue("username","sch-drm_user1");
		testCase.setPropertyValue("password","Password1");
		testCase.setPropertyValue("accountoid",null);
		testCase.setPropertyValue("useroid",null);
		testCase.setPropertyValue("assertid",null);
		testCase.setPropertyValue("SAMLassertion",null);
		testCase.setPropertyValue("tokentype","urn:dece:type:tokentype:usernamepassword");
		testCase.setPropertyValue("loopuntil","25");
		testCase.setPropertyValue("expectErrTypeSTS","SUCCESS");
		testCase.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
			
		log.info " SAML Assertion Expired ! re-generating Assertion";
		def RunSTS = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get SAML Assertion - STS")

				RunSTS.setPropertyValue("TCaseName",testCase.getName());
				RunSTS.setPropertyValue("TSuiteName",testSuite.getName());

				def runnerSTS = RunSTS.run( null , false )

				assert runnerSTS.status == Status.FINISHED;

		}</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call LicAppCreate Request with Valid Data" disabled="true">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0");
testCase.setPropertyValue("expectErrTypeLAC","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedDeviceDDReq = testProject.getTestSuiteByName("Staging DeviceGet").getTestCaseByName("LicAppCreate Request");

FeedDeviceDDReq.setPropertyValue("TCaseName",testCase.getName());
FeedDeviceDDReq.setPropertyValue("TSuiteName",testSuite.getName());


def runnerTC = FeedDeviceDDReq.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Feed DeviceGet Request with Invalid AccountID">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

// setup Retailer CS Nodeid with the account
testCase.setPropertyValue("NodeID","0702");

//DeviceGet Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("SAMLassertion","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");
testCase.setPropertyValue("assertionUUID","_87aa3e8d-2de2-46dd-b572-414003e22e9a");
testCase.setPropertyValue("username","firstfullusername_20130612_06223");
testCase.setPropertyValue("password","testing");
testCase.setPropertyValue("accountoid","DEF5738E543B633AE0401F0A05990CC0");
testCase.setPropertyValue("useroid","DEF5738E544A633AE0401F0A05990CC0");
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:org:dece:DEF5738E543A633AE0401F0A05990CC0"); // invalid Account format
testCase.setPropertyValue("DeviceID","urn:dece:deviceid:org:dece:DEF585C6AEA11471E0401F0A07994634");
testCase.setPropertyValue("DomainID","urn:dece:domainid:dece:DEF587A47AF1508CE0401F0A07994D03");
testCase.setPropertyValue("expectErrType","ACCOUNTID NOT MATCH");
testCase.setPropertyValue("ErrorDataVal","1");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedRTLReq = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request");

FeedRTLReq.setPropertyValue("TCaseName",testCase.getName());
FeedRTLReq.setPropertyValue("TSuiteName",testSuite.getName());

WsdlTestCaseRunner TSrunner = new WsdlTestCaseRunner( FeedRTLReq, null );

TSrunner.runTestStepByName("Get the DeviceGet Properties");
TSrunner.runTestStepByName("pem set");
assert TSrunner.status == Status.INITIALIZED;</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call DeviceGet Request">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )

WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );

TSrunnerRTC.runTestStepByName("DeviceGetRequest");

assert TSrunnerRTC.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract DeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Extract DeviceGet Information")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify theDeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Response Validation")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SAMLExpDate</con:name>
          <con:value>2014-06-11 06:24:48.0</con:value>
        </con:property>
        <con:property>
          <con:name>rcUUID</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>nodetype</con:name>
          <con:value>retailer</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>0702</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>firstfullusername_20130612_06223</con:value>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>testing</con:value>
        </con:property>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">DEF5738E543B633AE0401F0A05990CC0</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">DEF5738E544A633AE0401F0A05990CC0</con:value>
        </con:property>
        <con:property>
          <con:name>assertid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SAMLassertion</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">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</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>loopuntil</con:name>
          <con:value>25</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTS</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value>_87aa3e8d-2de2-46dd-b572-414003e22e9a</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value>urn:dece:userid:org:dece:A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value>A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value>urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value>A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>AccountID</con:name>
          <con:value>urn:dece:accountid:org:org:dece:DEF5738E543A633AE0401F0A05990CC0</con:value>
        </con:property>
        <con:property>
          <con:name>ErrorDataVal</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>ACCOUNTID NOT MATCH</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetReqXml</con:name>
          <con:value>User-Agent: Apache-HttpClient/4.1.1 (java 1.5)
</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResXml</con:name>
          <con:value><![CDATA[<Device IsLegacy="false" DeviceID="urn:dece:deviceid:org:dece:A09D9C22F11CBC6DE0401F0A05996898" xmlns="http://www.decellc.org/schema/2010/10/dece" xmlns:ns2="http://www.movielabs.com/schema/md/v1.07/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <DisplayName>DeviceInfoDisplayName</DisplayName>
   <Manufacturer>Microsoft</Manufacturer>
   <Model>V344</Model>
   <Brand Language="en-US">DeviceInfoBrand</Brand>
   <SerialNo>123432442323424</SerialNo>
   <Image MimeType="MimeType3" Width="50" Height="50">http://www.oxygenxml.com/1234</Image>
   <LicAppID>urn:dece:licappid:org:dece:A09D9C22F11EBC6DE0401F0A05996898</LicAppID>
   <DRMClientID>urn:dece:drmclientid:org:dece:A0E2E4B822DB1B7CE0401F0A07994404</DRMClientID>
   <ResourceStatus>
      <Current CreatedBy="urn:dece:org:org:dece:0701" CreationDate="2011-04-11T04:02:39.637Z">
         <Value>urn:dece:type:status:pending</Value>
         <Description>Device Created</Description>
      </Current>
   </ResourceStatus>
</Device>]]></con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResTime</con:name>
          <con:value>688</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetID</con:name>
          <con:value>Request Account ID not matchhttps://qa.q.uvvu.com:7001/rest/1/0/Account/urn%3Adece%3Aaccountid%3Aorg%3Aorg%3Aorg%3Adece%3AA06A9AA49F6E73D7E0401F0A059915F0/Device/urn%3Adece%3Adeviceid%3Aorg%3Adece%3AA09D9C22F11CBC6DE0401F0A05996898/DECEDomainhttps://qa.q.uvvu.com:7001/rest/1/0/error/en/ErrorList.html#AccountIdUnmatched</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceID</con:name>
          <con:value>urn:dece:deviceid:org:dece:DEF585C6AEA11471E0401F0A07994634</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeDVGGet</con:name>
          <con:value>ACCOUNTID NOT MATCH</con:value>
        </con:property>
        <con:property>
          <con:name>DomainID</con:name>
          <con:value>urn:dece:domainid:dece:DEF587A47AF1508CE0401F0A07994D03</con:value>
        </con:property>
      <con:property><con:name>audienceNodeid</con:name><con:value>0702</con:value></con:property></con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00003_DeviceGet_RetailerCS_FUNC_with_Non_Existing_ AccountID" searchProperties="true" id="270ab382-98d0-4b30-9590-320562d41f52" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="">
      <con:settings/>
      <con:testStep type="groovy" name="Verify Node User SAML Asssertion" disabled="true">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.model.testsuite.TestRunner.Status


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def ValSamlAssertion = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Validate SAML Assertion");

	ValSamlAssertion.setPropertyValue("TCaseName",testCase.getName());
	ValSamlAssertion.setPropertyValue("TSuiteName",testSuite.getName());

	def runnerTc = ValSamlAssertion.run( null , false )
	assert runnerTc.status == Status.FINISHED;

	rcUUID = testCase.getPropertyValue("rcUUID");

	if (runnerTc.status != Status.FINISHED || rcUUID.toInteger()!= 1){

			
		testCase.setPropertyValue("nodetype","device");
		testCase.setPropertyValue("nodeid","0701");
		testCase.setPropertyValue("audienceNodeid","0702");
		testCase.setPropertyValue("username","sch-drm_user1");
		testCase.setPropertyValue("password","Password1");
		testCase.setPropertyValue("accountoid",null);
		testCase.setPropertyValue("useroid",null);
		testCase.setPropertyValue("assertid",null);
		testCase.setPropertyValue("SAMLassertion",null);
		testCase.setPropertyValue("tokentype","urn:dece:type:tokentype:usernamepassword");
		testCase.setPropertyValue("loopuntil","25");
		testCase.setPropertyValue("expectErrTypeSTS","SUCCESS");
		testCase.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
			
		log.info " SAML Assertion Expired ! re-generating Assertion";
		def RunSTS = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get SAML Assertion - STS")

				RunSTS.setPropertyValue("TCaseName",testCase.getName());
				RunSTS.setPropertyValue("TSuiteName",testSuite.getName());

				def runnerSTS = RunSTS.run( null , false )

				assert runnerSTS.status == Status.FINISHED;

		}</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call LicAppCreate Request with Valid Data" disabled="true">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0");
testCase.setPropertyValue("expectErrTypeLAC","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedDeviceDDReq = testProject.getTestSuiteByName("Staging DeviceGet").getTestCaseByName("LicAppCreate Request");

FeedDeviceDDReq.setPropertyValue("TCaseName",testCase.getName());
FeedDeviceDDReq.setPropertyValue("TSuiteName",testSuite.getName());


def runnerTC = FeedDeviceDDReq.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Feed DeviceGet Request with Non-Existing AccountID">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


// setup Retailer CS Nodeid with the account
testCase.setPropertyValue("NodeID","0702");

//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("SAMLassertion","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");
testCase.setPropertyValue("assertionUUID","_87aa3e8d-2de2-46dd-b572-414003e22e9a");
testCase.setPropertyValue("username","firstfullusername_20130612_06223");
testCase.setPropertyValue("password","testing");
testCase.setPropertyValue("accountoid","DEF5738E543B633AE0401F0A05990CC0");
testCase.setPropertyValue("useroid","DEF5738E544A633AE0401F0A05990CC0");
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:DEEEFEAC4"); // nonexisting Account
testCase.setPropertyValue("DeviceID","urn:dece:deviceid:org:dece:DEF585C6AEA11471E0401F0A07994634");
testCase.setPropertyValue("DomainID","urn:dece:domainid:dece:DEF587A47AF1508CE0401F0A07994D03");
testCase.setPropertyValue("expectErrType","ACCOUNTID NOT MATCH");
testCase.setPropertyValue("ErrorDataVal","1");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedRTLReq = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request");

FeedRTLReq.setPropertyValue("TCaseName",testCase.getName());
FeedRTLReq.setPropertyValue("TSuiteName",testSuite.getName());

WsdlTestCaseRunner TSrunner = new WsdlTestCaseRunner( FeedRTLReq, null );

TSrunner.runTestStepByName("Get the DeviceGet Properties");
TSrunner.runTestStepByName("pem set");
assert TSrunner.status == Status.INITIALIZED;</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call DeviceGet Request">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )

WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );

TSrunnerRTC.runTestStepByName("DeviceGetRequest");

assert TSrunnerRTC.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract DeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Extract DeviceGet Information")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify theDeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Response Validation")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Reset AccountID"><con:settings/><con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));

testCase.setPropertyValue("SAMLassertion","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");
testCase.setPropertyValue("assertionUUID","_87aa3e8d-2de2-46dd-b572-414003e22e9a");
testCase.setPropertyValue("username","firstfullusername_20130612_06223");
testCase.setPropertyValue("password","testing");
testCase.setPropertyValue("accountoid","DEF5738E543B633AE0401F0A05990CC0");
testCase.setPropertyValue("useroid","DEF5738E544A633AE0401F0A05990CC0");
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:DEF5738E543A633AE0401F0A05990CC0");
testCase.setPropertyValue("DeviceID","urn:dece:deviceid:org:dece:DEF585C6AEA11471E0401F0A07994634");

testCase.setPropertyValue("DomainID","urn:dece:domainid:dece:DEF587A47AF1508CE0401F0A07994D03"); 


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedRTLReq = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request");

FeedRTLReq.setPropertyValue("TCaseName",testCase.getName());
FeedRTLReq.setPropertyValue("TSuiteName",testSuite.getName());

WsdlTestCaseRunner TSrunner = new WsdlTestCaseRunner( FeedRTLReq, null );

TSrunner.runTestStepByName("Get the DeviceGet Properties");
TSrunner.runTestStepByName("pem set");
assert TSrunner.status == Status.INITIALIZED;</script></con:config></con:testStep><con:properties>
        <con:property>
          <con:name>SAMLExpDate</con:name>
          <con:value>2013-06-14 18:31:45.0</con:value>
        </con:property>
        <con:property>
          <con:name>rcUUID</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>nodetype</con:name>
          <con:value>device</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>0702</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>firstfullusername_20130612_06223</con:value>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>testing</con:value>
        </con:property>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value>DEF5738E543B633AE0401F0A05990CC0</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value>DEF5738E544A633AE0401F0A05990CC0</con:value>
        </con:property>
        <con:property>
          <con:name>assertid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SAMLassertion</con:name>
          <con:value>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</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>loopuntil</con:name>
          <con:value>25</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTS</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value>_87aa3e8d-2de2-46dd-b572-414003e22e9a</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value>urn:dece:userid:org:dece:A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value>A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value>urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value>A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>AccountID</con:name>
          <con:value>urn:dece:accountid:org:dece:DEF5738E543A633AE0401F0A05990CC0</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceID</con:name>
          <con:value>urn:dece:deviceid:org:dece:DEF585C6AEA11471E0401F0A07994634</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>ACCOUNTID NOT MATCH</con:value>
        </con:property>
        <con:property>
          <con:name>ErrorDataVal</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetReqXml</con:name>
          <con:value>User-Agent: Apache-HttpClient/4.1.1 (java 1.5)
</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResXml</con:name>
          <con:value><![CDATA[<ErrorList xmlns="http://www.decellc.org/schema/2010/10/dece" xmlns:ns2="http://www.movielabs.com/schema/md/v1.07/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Error ErrorID="urn:dece:errorid:org:dece:AccountIdUnmatched">
      <Reason Language="en">Request Account ID not match</Reason>
      <OriginalRequest>https://qa.q.uvvu.com:7001/rest/1/0/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3AA06A9AA49F6E73D7E0401F0A059915F0STSTTTSTTSTSTTSST/Domain/urn%3Adece%3Adomainid%3Adece%3AA09DA589BD63A036E0401F0A05996D9A/Device/urn%3Adece%3Adeviceid%3Aorg%3Adece%3AA09D9C22F11CBC6DE0401F0A05996898</OriginalRequest>
      <ErrorLink>https://qa.q.uvvu.com:7001/rest/1/0/error/en/ErrorList.html#AccountIdUnmatched</ErrorLink>
   </Error>
</ErrorList>]]></con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResTime</con:name>
          <con:value>160</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetID</con:name>
          <con:value>Request Account ID not matchhttps://qa.q.uvvu.com:7001/rest/1/0/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3AA06A9AA49F6E73D7E0401F0A059915F0STSTTTSTTSTSTTSST/Device/urn%3Adece%3Adeviceid%3Aorg%3Adece%3AA09D9C22F11CBC6DE0401F0A05996898/DECEDomainhttps://qa.q.uvvu.com:7001/rest/1/0/error/en/ErrorList.html#AccountIdUnmatched</con:value>
        </con:property>
        <con:property>
          <con:name>DomainID</con:name>
          <con:value>urn:dece:domainid:dece:DEF587A47AF1508CE0401F0A07994D03</con:value>
        </con:property>
      <con:property><con:name>audienceNodeid</con:name><con:value>0702</con:value></con:property></con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00004_DeviceGet_RetailerCS_FUNC_with_Nonexistent_NodeID" searchProperties="true" disabled="true">
      <con:description>This test case will verify that Application Tier properly handles a RightsLockerDataGet  request when the nodeID supplied doesn't exist.

Expected Result:

System should return error message.</con:description>
      <con:settings/>
      <con:testStep type="groovy" name="Verify Node User SAML Asssertion">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.model.testsuite.TestRunner.Status


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def ValSamlAssertion = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Validate SAML Assertion");

	ValSamlAssertion.setPropertyValue("TCaseName",testCase.getName());
	ValSamlAssertion.setPropertyValue("TSuiteName",testSuite.getName());

	def runnerTc = ValSamlAssertion.run( null , false )
	assert runnerTc.status == Status.FINISHED;

	rcUUID = testCase.getPropertyValue("rcUUID");

	if (runnerTc.status != Status.FINISHED || rcUUID.toInteger()!= 1){

			
		testCase.setPropertyValue("nodetype","device");
		testCase.setPropertyValue("nodeid","0701");
		testCase.setPropertyValue("username","sch-drm_user1");
		testCase.setPropertyValue("password","Password1");
		testCase.setPropertyValue("accountoid",null);
		testCase.setPropertyValue("useroid",null);
		testCase.setPropertyValue("assertid",null);
		testCase.setPropertyValue("SAMLassertion",null);
		testCase.setPropertyValue("tokentype","urn:dece:type:tokentype:usernamepassword");
		testCase.setPropertyValue("loopuntil","25");
		testCase.setPropertyValue("expectErrTypeSTS","SUCCESS");
		testCase.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
			
		log.info " SAML Assertion Expired ! re-generating Assertion";
		def RunSTS = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get SAML Assertion - STS")

				RunSTS.setPropertyValue("TCaseName",testCase.getName());
				RunSTS.setPropertyValue("TSuiteName",testSuite.getName());

				def runnerSTS = RunSTS.run( null , false )

				assert runnerSTS.status == Status.FINISHED;

		}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call LicAppCreate Request with Valid Data" disabled="true">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0");
testCase.setPropertyValue("expectErrTypeLAC","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedDeviceDDReq = testProject.getTestSuiteByName("Staging DeviceGet").getTestCaseByName("LicAppCreate Request");

FeedDeviceDDReq.setPropertyValue("TCaseName",testCase.getName());
FeedDeviceDDReq.setPropertyValue("TSuiteName",testSuite.getName());


def runnerTC = FeedDeviceDDReq.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Feed DeviceGet Request with Non-Existing NodeID">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0");
testCase.setPropertyValue("DeviceID","urn:dece:deviceid:org:dece:A09D9C22F11CBC6DE0401F0A05996898");
testCase.setPropertyValue("DomainID","urn:dece:domainid:dece:A09DA589BD63A036E0401F0A05996D9A");
testCase.setPropertyValue("expectErrType","FORBIDDEN");
testCase.setPropertyValue("ErrorDataVal","1");

// setup Non-Existing Nodeid with the account
testCase.setPropertyValue("NodeID","700030");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedRTLReq = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request");

FeedRTLReq.setPropertyValue("TCaseName",testCase.getName());
FeedRTLReq.setPropertyValue("TSuiteName",testSuite.getName());

WsdlTestCaseRunner TSrunner = new WsdlTestCaseRunner( FeedRTLReq, null );

TSrunner.runTestStepByName("Get the DeviceGet Properties");
TSrunner.runTestStepByName("pem set");
assert TSrunner.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call DeviceGet Request">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )

WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );

TSrunnerRTC.runTestStepByName("DeviceGetRequest");

assert TSrunnerRTC.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract DeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Extract DeviceGet Information")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify theDeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Response Validation")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Re-Set Node id">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("NodeID","0701");</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value>30570</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>SAMLExpDate</con:name>
          <con:value>2012-04-18 16:10:01.0</con:value>
        </con:property>
        <con:property>
          <con:name>rcUUID</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>nodetype</con:name>
          <con:value>device</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>700030</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>sch-drm_user1</con:value>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>Password1</con:value>
        </con:property>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value>A06A9AA49F7073D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value>A06A9AA49F7973D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SAMLassertion</con:name>
          <con:value>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</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>loopuntil</con:name>
          <con:value>25</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTS</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value>17478c99-a1eb-4499-be1d-cca4ae630020</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value>urn:dece:userid:org:dece:A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value>A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value>urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value>A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>AccountID</con:name>
          <con:value>urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeRTLGet</con:name>
          <con:value>FORBIDDEN</con:value>
        </con:property>
        <con:property>
          <con:name>ErrorDataVal</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>RightsResXml</con:name>
          <con:value><![CDATA[<ErrorList xmlns="http://www.decellc.org/schema/2010/10/dece" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Error ErrorID="token_rejected">
      <Reason>CN specified and Audience in Affiliation are disjoint</Reason>
      <OriginalRequest/>
      <ErrorLink/>
   </Error>
</ErrorList>]]></con:value>
        </con:property>
        <con:property>
          <con:name>RightsResTime</con:name>
          <con:value>373</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceID</con:name>
          <con:value>urn:dece:deviceid:org:dece:A09D9C22F11CBC6DE0401F0A05996898</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>FORBIDDEN</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetReqXml</con:name>
          <con:value>Host: qa.q.uvvu.com:7001</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResXml</con:name>
          <con:value><![CDATA[<ErrorList xmlns="http://www.decellc.org/schema/2010/10/dece" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Error ErrorID="token_rejected">
      <Reason>CN specified and Audience in Affiliation are disjoint</Reason>
      <OriginalRequest/>
      <ErrorLink/>
   </Error>
</ErrorList>]]></con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResTime</con:name>
          <con:value>420</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetID</con:name>
          <con:value>CN specified and Audience in Affiliation are disjoint</con:value>
        </con:property>
        <con:property>
          <con:name>DomainID</con:name>
          <con:value>urn:dece:domainid:dece:A09DA589BD63A036E0401F0A05996D9A</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00008_DeviceGet_RetailerCS_FUNC_HouseholdAccount_User_Status_Inactive" searchProperties="true" id="9561c6f4-2072-4e73-8fe2-2ee1a22a849c" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="">
      <con:description>This test case will verify that Application Tier properly handles a DeviceGet request when invoked with the GET method and Invalid Account ID in request .

Expected Result:

System should return an Error message.</con:description>
      <con:settings/>
      <con:testStep type="groovy" name="Verify Node User SAML Asssertion" disabled="true">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.model.testsuite.TestRunner.Status


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def ValSamlAssertion = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Validate SAML Assertion");

	ValSamlAssertion.setPropertyValue("TCaseName",testCase.getName());
	ValSamlAssertion.setPropertyValue("TSuiteName",testSuite.getName());

	def runnerTc = ValSamlAssertion.run( null , false )
	assert runnerTc.status == Status.FINISHED;

	rcUUID = testCase.getPropertyValue("rcUUID");

	if (runnerTc.status != Status.FINISHED || rcUUID.toInteger()!= 1){

			
		testCase.setPropertyValue("nodetype","device");
		testCase.setPropertyValue("nodeid","0701");
		testCase.setPropertyValue("username","sch-drm_user1");
		testCase.setPropertyValue("password","Password1");
		testCase.setPropertyValue("accountoid",null);
		testCase.setPropertyValue("useroid",null);
		testCase.setPropertyValue("assertid",null);
		testCase.setPropertyValue("SAMLassertion",null);
		testCase.setPropertyValue("tokentype","urn:dece:type:tokentype:usernamepassword");
		testCase.setPropertyValue("loopuntil","25");
		testCase.setPropertyValue("expectErrTypeSTS","SUCCESS");
		testCase.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
			
		log.info " SAML Assertion Expired ! re-generating Assertion";
		def RunSTS = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get SAML Assertion - STS")

				RunSTS.setPropertyValue("TCaseName",testCase.getName());
				RunSTS.setPropertyValue("TSuiteName",testSuite.getName());

				def runnerSTS = RunSTS.run( null , false )

				assert runnerSTS.status == Status.FINISHED;

		}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call LicAppCreate Request with Valid Data" disabled="true">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0");
testCase.setPropertyValue("expectErrTypeLAC","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedDeviceDDReq = testProject.getTestSuiteByName("Staging DeviceGet").getTestCaseByName("LicAppCreate Request");

FeedDeviceDDReq.setPropertyValue("TCaseName",testCase.getName());
FeedDeviceDDReq.setPropertyValue("TSuiteName",testSuite.getName());


def runnerTC = FeedDeviceDDReq.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call DeviceUpdate Request for evict Cache" id="06260546-01b1-4a51-8b0d-ad14d9a90b29">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )
WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );


TSrunnerRTC.runTestStepByName("DeviceUpdateRequest");

assert TSrunnerRTC.status == Status.INITIALIZED;</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Get User Inactive Statuses">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def GetUserStatus = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get-Set User Status");

// Get ALL inactive Status from USER_STATUS_REF Except = 'Pending'

SqlStr = "select Status from USER_STATUS_REF where Status !='active'";

testCase.setPropertyValue("SqlStr",SqlStr);

GetUserStatus.setPropertyValue("TCaseName",testCase.getName());
GetUserStatus.setPropertyValue("TSuiteName",testSuite.getName());

WsdlTestCaseRunner TSrunner = new WsdlTestCaseRunner( GetUserStatus, null );

TSrunner.runTestStepByName("Get User Status for DVG");

assert TSrunner.status == Status.INITIALIZED;

 log.info " Current User Status: " + testCase.getPropertyValue("UserStatus");

testCase.getPropertyValue("UserStatusXML");</script>
        </con:config>
      </con:testStep>
      <con:testStep type="datasource" name="Feed DataSource for Inactive User Statuses">
        <con:settings/>
        <con:config xsi:type="con:DataSourceStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dataSource type="XML">
            <con:configuration><sourceStep>Get User Inactive Statuses</sourceStep><sourceProperty>result</sourceProperty><rowPath>//Results[1]/ResultSet[1]/Row</rowPath><columnPath>STATUS</columnPath></con:configuration>
          </con:dataSource>
          <con:property>UserStatus</con:property>
          <con:restartOnRun>true</con:restartOnRun>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Feed DeviceGet Request with Inactive User">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


// setup Retailer CS Nodeid with the account
testCase.setPropertyValue("NodeID","0702");


//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("SAMLassertion","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");
testCase.setPropertyValue("assertionUUID","_87aa3e8d-2de2-46dd-b572-414003e22e9a");
testCase.setPropertyValue("username","firstfullusername_20130612_06223");
testCase.setPropertyValue("password","testing");
testCase.setPropertyValue("accountoid","DEF5738E543B633AE0401F0A05990CC0");
testCase.setPropertyValue("useroid","DEF5738E544A633AE0401F0A05990CC0");
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:DEF5738E543A633AE0401F0A05990CC0");
testCase.setPropertyValue("DeviceID","urn:dece:deviceid:org:dece:DEF585C6AEA11471E0401F0A07994634");
testCase.setPropertyValue("DomainID","urn:dece:domainid:dece:DEF587A47AF1508CE0401F0A07994D03");
testCase.setPropertyValue("expectErrType","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedRTLReq = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request");

FeedRTLReq.setPropertyValue("TCaseName",testCase.getName());
FeedRTLReq.setPropertyValue("TSuiteName",testSuite.getName());

WsdlTestCaseRunner TSrunner = new WsdlTestCaseRunner( FeedRTLReq, null );

TSrunner.runTestStepByName("Get the DeviceGet Properties");
TSrunner.runTestStepByName("pem set");
assert TSrunner.status == Status.INITIALIZED;</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="SetUp User Inactive Status for DVG">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

// SetUp the Node Status from the Data Source

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

// Get NodeStatus Values from Data Source

def DsUserStatus = testRunner.testCase.testSteps['Feed DataSource for Inactive User Statuses'];
log.info  "User Status is to set to: " + DsUserStatus.getPropertyValue("UserStatus");

testCase.setPropertyValue("UserStatus",DsUserStatus.getPropertyValue("UserStatus"));

def SetUserStatus = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get-Set User Status");

SetUserStatus.setPropertyValue("TCaseName",testCase.getName());
SetUserStatus.setPropertyValue("TSuiteName",testSuite.getName());

WsdlTestCaseRunner TSrunner = new WsdlTestCaseRunner( SetUserStatus, null );

TSrunner.runTestStepByName("Set User Status for DVG")

assert TSrunner.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call DeviceGet Request">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )

WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );

TSrunnerRTC.runTestStepByName("DeviceGetRequest");

assert TSrunnerRTC.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract DeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Extract DeviceGet Information")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify theDeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Response Validation")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="datasourceloop" name="DataSource Loop">
        <con:settings/>
        <con:config>
          <dataSourceStep>Feed DataSource for Inactive User Statuses</dataSourceStep>
          <targetStep>SetUp User Inactive Status for DVG</targetStep>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Re-Set User Status to Active">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

// SetUp the Node Status from the Data Source

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

// Re - Set NodeStatus Value to Active


def SetUserStatus = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get-Set User Status");

SetUserStatus.setPropertyValue("TCaseName",testCase.getName());
SetUserStatus.setPropertyValue("TSuiteName",testSuite.getName());

testCase.setPropertyValue("UserStatus", "active");
log.info " Re-Set User Status to : " + testCase.getPropertyValue("UserStatus");

WsdlTestCaseRunner TSrunner = new WsdlTestCaseRunner( SetUserStatus, null );

TSrunner.runTestStepByName("Set User Status for DVG")

assert TSrunner.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SAMLExpDate</con:name>
          <con:value>2012-04-18 16:10:01.0</con:value>
        </con:property>
        <con:property>
          <con:name>rcUUID</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>nodetype</con:name>
          <con:value>device</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>0702</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>firstfullusername_20130612_06223</con:value>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>testing</con:value>
        </con:property>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">DEF5738E543B633AE0401F0A05990CC0</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">DEF5738E544A633AE0401F0A05990CC0</con:value>
        </con:property>
        <con:property>
          <con:name>assertid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SAMLassertion</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">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</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>loopuntil</con:name>
          <con:value>25</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTS</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value>_87aa3e8d-2de2-46dd-b572-414003e22e9a</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value>urn:dece:userid:org:dece:A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value>A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value>urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value>A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>AccountID</con:name>
          <con:value>urn:dece:accountid:org:dece:DEF5738E543A633AE0401F0A05990CC0</con:value>
        </con:property>
        <con:property>
          <con:name>ErrorDataVal</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetReqXml</con:name>
          <con:value>User-Agent: Apache-HttpClient/4.1.1 (java 1.5)
</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResXml</con:name>
          <con:value><![CDATA[<ErrorList xmlns="http://www.decellc.org/schema/2010/10/dece" xmlns:ns2="http://www.movielabs.com/schema/md/v1.07/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Error ErrorID="urn:dece:errorid:org:dece:RequestorNotActive">
      <Reason Language="en">The requestor is not active.</Reason>
      <OriginalRequest>https://qa.q.uvvu.com:7001/rest/1/0/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3AA06A9AA49F6E73D7E0401F0A059915F0/Domain/urn%3Adece%3Adomainid%3Adece%3AA09DA589BD63A036E0401F0A05996D9A/Device/urn%3Adece%3Adeviceid%3Aorg%3Adece%3AA09D9C22F11CBC6DE0401F0A05996898</OriginalRequest>
      <ErrorLink>https://qa.q.uvvu.com:7001/rest/1/0/error/en/ErrorList.html#RequestorNotActive</ErrorLink>
   </Error>
</ErrorList>]]></con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResTime</con:name>
          <con:value>144</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetID</con:name>
          <con:value>The identified user is not active.https://qa.q.uvvu.com:7001/rest/1/0/Account/urn%3Adece%3Aaccountid%3Aorg%3Aorg%3Aorg%3Adece%3AA06A9AA49F6E73D7E0401F0A059915F0/Device/urn%3Adece%3Adeviceid%3Aorg%3Adece%3AA09D9C22F11CBC6DE0401F0A05996898/DECEDomainhttps://qa.q.uvvu.com:7001/rest/1/0/error/en/ErrorList.html#UserNotActive</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceID</con:name>
          <con:value>urn:dece:deviceid:org:dece:DEF585C6AEA11471E0401F0A07994634</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeDVGGet</con:name>
          <con:value>ACCOUNTID NOT MATCH</con:value>
        </con:property>
        <con:property>
          <con:name>SqlStr</con:name>
          <con:value>select Status from USER_STATUS_REF where Status !='active'</con:value>
        </con:property>
        <con:property>
          <con:name>UserStatusXML</con:name>
          <con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <STATUS>archived</STATUS>
    </Row>
    <Row rowNumber='2'>
      <STATUS>blocked</STATUS>
    </Row>
    <Row rowNumber='3'>
      <STATUS>blocked:clg</STATUS>
    </Row>
    <Row rowNumber='4'>
      <STATUS>blocked:tou</STATUS>
    </Row>
    <Row rowNumber='5'>
      <STATUS>deleted</STATUS>
    </Row>
    <Row rowNumber='6'>
      <STATUS>forcedeleted</STATUS>
    </Row>
    <Row rowNumber='7'>
      <STATUS>mergedeleted</STATUS>
    </Row>
    <Row rowNumber='8'>
      <STATUS>other</STATUS>
    </Row>
    <Row rowNumber='9'>
      <STATUS>pending</STATUS>
    </Row>
    <Row rowNumber='10'>
      <STATUS>suspended</STATUS>
    </Row>
  </ResultSet>
</Results>]]></con:value>
        </con:property>
        <con:property>
          <con:name>UserStatus</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceStatusXML</con:name>
          <con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <STATUS>archived</STATUS>
    </Row>
    <Row rowNumber='2'>
      <STATUS>blocked</STATUS>
    </Row>
    <Row rowNumber='3'>
      <STATUS>blocked:clg</STATUS>
    </Row>
    <Row rowNumber='4'>
      <STATUS>blocked:tou</STATUS>
    </Row>
    <Row rowNumber='5'>
      <STATUS>deleted</STATUS>
    </Row>
    <Row rowNumber='6'>
      <STATUS>forceddelete</STATUS>
    </Row>
    <Row rowNumber='7'>
      <STATUS>other</STATUS>
    </Row>
    <Row rowNumber='8'>
      <STATUS>pending</STATUS>
    </Row>
    <Row rowNumber='9'>
      <STATUS>suspended</STATUS>
    </Row>
  </ResultSet>
</Results>]]></con:value>
        </con:property>
        <con:property>
          <con:name>DomainID</con:name>
          <con:value>urn:dece:domainid:dece:DEF587A47AF1508CE0401F0A07994D03</con:value>
        </con:property>
      <con:property><con:name>ETag</con:name><con:value>"E940B235496CA878E0401F0A05995487:F0246DC7"</con:value></con:property><con:property><con:name>Last-Modified</con:name><con:value>Mon, 21 Oct 2013 12:49:11 GMT</con:value></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>06260546-01b1-4a51-8b0d-ad14d9a90b29</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00005_DeviceGet_RetailerCS_FUNC_with_Invalid_NodeID" searchProperties="true" id="3a6bf9aa-de07-402e-9eb3-983df759b660">
      <con:description>This test case will verify that Application Tier properly handles a RightsLockerDataGet  request when the nodeID supplied doesn't exist.

Expected Result:

System should return error message.</con:description>
      <con:settings/>
      <con:testStep type="groovy" name="Verify Node User SAML Asssertion" disabled="true">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.model.testsuite.TestRunner.Status


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def ValSamlAssertion = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Validate SAML Assertion");

	ValSamlAssertion.setPropertyValue("TCaseName",testCase.getName());
	ValSamlAssertion.setPropertyValue("TSuiteName",testSuite.getName());

	def runnerTc = ValSamlAssertion.run( null , false )
	assert runnerTc.status == Status.FINISHED;

	rcUUID = testCase.getPropertyValue("rcUUID");

	if (runnerTc.status != Status.FINISHED || rcUUID.toInteger()!= 1){

			
		testCase.setPropertyValue("nodetype","device");
		testCase.setPropertyValue("nodeid","0701");
		testCase.setPropertyValue("username","sch-drm_user1");
		testCase.setPropertyValue("password","Password1");
		testCase.setPropertyValue("accountoid",null);
		testCase.setPropertyValue("useroid",null);
		testCase.setPropertyValue("assertid",null);
		testCase.setPropertyValue("SAMLassertion",null);
		testCase.setPropertyValue("tokentype","urn:dece:type:tokentype:usernamepassword");
		testCase.setPropertyValue("loopuntil","25");
		testCase.setPropertyValue("expectErrTypeSTS","SUCCESS");
		testCase.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
			
		log.info " SAML Assertion Expired ! re-generating Assertion";
		def RunSTS = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get SAML Assertion - STS")

				RunSTS.setPropertyValue("TCaseName",testCase.getName());
				RunSTS.setPropertyValue("TSuiteName",testSuite.getName());

				def runnerSTS = RunSTS.run( null , false )

				assert runnerSTS.status == Status.FINISHED;

		}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call LicAppCreate Request with Valid Data" disabled="true">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0");
testCase.setPropertyValue("expectErrTypeLAC","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedDeviceDDReq = testProject.getTestSuiteByName("Staging DeviceGet").getTestCaseByName("LicAppCreate Request");

FeedDeviceDDReq.setPropertyValue("TCaseName",testCase.getName());
FeedDeviceDDReq.setPropertyValue("TSuiteName",testSuite.getName());


def runnerTC = FeedDeviceDDReq.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Feed DeviceGet Request with Invalid NodeID">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


// setup Retailer CS Nodeid with the account
testCase.setPropertyValue("NodeID","0702");


//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("SAMLassertion","nVdpc6pKE/7ur7A8Hy3D5oaVpGpYVFRUBBf4cgthQJRNBgT99e9gosfk5OTNvVWpitP0dD+9TM8zz8gMfLoHEIJJ6kVhVRJeav90O6bJwK7doG1IN5pt225sWx38i2qSJANpGrJmrSohlEEpRKkZpi81mqSYBtluULRG0b0W/us8teiWUauuYIKwaazyRNaqReCHqHd1+1LLkrAXmchDvdAMIOqlVk8F8qSHNXvmDVPt9fkN5dVh8rpL07hHENaTDS3o+9aTFQXEM/FB59lGPdVzQzPNEvju00Yvtfe9eZ4/5cxTlLgETZIkQbIE1rGR5/6qvVZum6EthU70tubNMAo9y/S9i1mCkmG6i+wq8N0o8dJd8BfTFEGRpekGLKyGRTXDXzXit4Mruh9a+gAyQWYD7UzqZmwBHZjA0ILV5UJ6qf36WQXf9mqJGSInSgL0af3vIMHwBP0ohnYD3SK7ofu5xS/S9foMrZ4UWn6GvBOclm0SmxZE1XkCHa+YeAg3n42q1/JXC3TrMGj9m5I8E484MWzii8wIngtR+l/q9VirNysr08/gq21mCa/b9XV97ygnlx7F2oISl1R/3ny5QnhUfgN1L/X7+nOj3vvqfdOM2pOh49gXXZ/wW2FjCqrVFYB4ljVrZguTyBLlBaHKmXiM18TUTLlwNerE9TUKDD50wvO+OwQrekAeh3wFjQb1UUtZzdqbZHieZ8SO6vDCkNWngQ62QE1jbhAoBKH2SX5jaEzfG6oTn0W6fCHcgrH7zNHY8ItseZaTysxDLe4wlFOvXU8ulA4P0svvmB5jKOMaw/M1yPL3pkWygpma9wVfTgoHH88UvsqSxNcFngeQd0EuccCVuMkFTDn3cNwdvAGbkxxQln0ggLO8ALng6sJKUcZibq9WvrGS+n1OXjTzIdCFCv4giMVKMDYj0lwbsU73SUPlOHuziLbMKLaHh3y4s6ayJudTTTrLe7GYaiK5vsrcAq8v8l6mZtqSqaz3HCsvxFzIrx4FMd9NjfUi1pdsbl1ERQbNAaCWIr+Th1qwoixmsbP24kQGh6uc28n8aiUXogbmFc6drnBsGt83Yiuw423g7x6MD7FxzR6sztuBnxkXcS/z4oBXjwNV2jKCIo7AQl9u16uDue6fKtZwCrY3j17LMzdR7hrdXFD00TgypN3JmgJF5DgF4HSRQJYGIxANOCA3gVdc+D3Xjni7nxMjGlXqrD9ob87ecYPMAembVLdL6ZN1e35sC2JYN8bZdr+Td5v+rD5W7dOSTdmLjk71U9v0KKuIHWUjDtNx4QwVtbKdC8XGGtZtd0T4F7afyJ0RSC7nnS+7i3TdnqHz1nOcNbeZNf2O48vMInZ8Jz6juhYph4Rsc5ChCf18GqcV4MocAIP9cs8pMtctk2pLuaLLnAn6YpqBy55Ox/TqOBqefEtnQFSM17P94b0wtpCLHJErIm4rsYIPkV0WYaguxf4eLDnXTThX7HOKJQBFl8a5jvO1HGLlz3nsX/PoihwQGQO02WGFWZJsOkvVZhOcQ24Z9tmdfCzWdjsgO0coTtRp3MxlNHVCYx0d5MBLlkmmLsfj6aTYatngsMezyiHV8YkxKuLpEANvOtZ2ByESzHms62lcD63ESqU4kKXiMjPQvuttA3JUb1HcnBSsDr0MtvlyYIrGOHFVajxchHOmw1ZQ5pyHQX3fzdd1TW3HHRtPBeF8JoxkRUYg6rOL1tEuaPqwW+aTdu6MwGFr0tPCZ7kzK44NzcoXynitBvVWpXWaTALyohHNaTzL1UHeFBWlzticNtRQnHh61nWLZBbatG6m7ZNBrtpe7B9YOjtozZhZuQEu1vxkxx15XlGaG8sI3E5sjYgFcQJix5lIg/P2Yl7iYGa9DdDP0+EufJsfxONk+TB6bqRDxd0KrfS2LC8gSaj28a1gpt8TmFLi2Q3nqtqLSxaEUhimtddyV0leehmmOJ7dw1fG21oQ+60O0xVbzSbbZhggkk2S6pOAbLEsyfPkjeW8ofgEkY9Cxyt9lTzu7Zb6HqAV9BAMbZg0TlFm7SCqfWOxzFdVChf4+o1CBLUI88Qmy5M0wwhsk+pwQOgIFMOKtMCSNM93WoCvVadROgtnCXBSmHzkiK0PHHEBLS/2YEkk329TlOKMHM1TlvrU08l8CmGGmWZSkr0e3ey2COQFsQ9LvIQfuV5IzGeq9hTv4ut1/tc4Pn+7hYx1bK9UQCVoDuKywS9YbfOG+I/Iml+y35t5kNleeWvj/KWJZ70h+fjpd1uU/XDvCbJD0jfMd9Ufb6X+3Ep8g4j4nIy7J/vkPfi9cXNMNzEhuVJyhIt2NJ+OT9nplF3L1CnJVoLNExRBtgkVWhlmTGctOsCQuJsgfkRW76g/eb7LP+LL0l2opvjAB7inqtflD14qKkTlS0XCZ6L46TPog0uctxQW6Vcy3scPmhLxt28eq2eVelg8x//yKLF/l+sLWw9+cJzlhPNCt1yV1PT8l66wImzWw1MuSh6Nf2XgK+cfhfck37GkuJu2WQr//qVajq+XmmlZURamklC7Ch5H6hVneo5h77fSH2au5PCd7Rfor2x/I09UPNwCs3bX9f6/csO7tosF8S7kXbG81Ar8cMXOQ/dhhL8D/HqKM+C7Kf4xktc/xH9KHnL6+Ty8/g8=");
testCase.setPropertyValue("assertionUUID","_87aa3e8d-2de2-46dd-b572-414003e22e9a");
testCase.setPropertyValue("username","firstfullusername_20130612_06223");
testCase.setPropertyValue("password","testing");
testCase.setPropertyValue("accountoid","DEF5738E543B633AE0401F0A05990CC0");
testCase.setPropertyValue("useroid","DEF5738E544A633AE0401F0A05990CC0");
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:DEF5738E543A633AE0401F0A05990CC0");
testCase.setPropertyValue("DeviceID","urn:dece:deviceid:org:dece:DEF585C6AEA11471E0401F0A07994634");
testCase.setPropertyValue("DomainID","urn:dece:domainid:dece:DEF587A47AF1508CE0401F0A07994D03");
testCase.setPropertyValue("expectErrType","FORBIDDEN");
testCase.setPropertyValue("ErrorDataVal","1");

// setup Non-Existing Nodeid with the account
testCase.setPropertyValue("NodeID","700030");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedRTLReq = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request");

FeedRTLReq.setPropertyValue("TCaseName",testCase.getName());
FeedRTLReq.setPropertyValue("TSuiteName",testSuite.getName());

WsdlTestCaseRunner TSrunner = new WsdlTestCaseRunner( FeedRTLReq, null );

TSrunner.runTestStepByName("Get the DeviceGet Properties");
TSrunner.runTestStepByName("pem set");
assert TSrunner.status == Status.INITIALIZED;</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call DeviceGet Request">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )

WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );

TSrunnerRTC.runTestStepByName("DeviceGetRequest");

assert TSrunnerRTC.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract DeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Extract DeviceGet Information")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify theDeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Response Validation")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Re-Set Node id">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("nodeid","0702");
testCase.setPropertyValue("SAMLassertion","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");
testCase.setPropertyValue("assertionUUID","_87aa3e8d-2de2-46dd-b572-414003e22e9a");
testCase.setPropertyValue("username","firstfullusername_20130612_06223");
testCase.setPropertyValue("password","testing");
testCase.setPropertyValue("accountoid","DEF5738E543B633AE0401F0A05990CC0");
testCase.setPropertyValue("useroid","DEF5738E544A633AE0401F0A05990CC0");
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:DEF5738E543A633AE0401F0A05990CC0");
testCase.setPropertyValue("DeviceID","urn:dece:deviceid:org:dece:DEF585C6AEA11471E0401F0A07994634");

testCase.setPropertyValue("DomainID","urn:dece:domainid:dece:DEF587A47AF1508CE0401F0A07994D03"); 


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedRTLReq = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request");

FeedRTLReq.setPropertyValue("TCaseName",testCase.getName());
FeedRTLReq.setPropertyValue("TSuiteName",testSuite.getName());

WsdlTestCaseRunner TSrunner = new WsdlTestCaseRunner( FeedRTLReq, null );

TSrunner.runTestStepByName("Get the DeviceGet Properties");
TSrunner.runTestStepByName("pem set");
assert TSrunner.status == Status.INITIALIZED;</script></con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value>30570</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>SAMLExpDate</con:name>
          <con:value>2012-04-18 16:10:01.0</con:value>
        </con:property>
        <con:property>
          <con:name>rcUUID</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>nodetype</con:name>
          <con:value>device</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>0702</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>firstfullusername_20130612_06223</con:value>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>testing</con:value>
        </con:property>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value>DEF5738E543B633AE0401F0A05990CC0</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value>DEF5738E544A633AE0401F0A05990CC0</con:value>
        </con:property>
        <con:property>
          <con:name>assertid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SAMLassertion</con:name>
          <con:value>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</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>loopuntil</con:name>
          <con:value>25</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTS</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value>_87aa3e8d-2de2-46dd-b572-414003e22e9a</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value>urn:dece:userid:org:dece:A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value>A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value>urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value>A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>AccountID</con:name>
          <con:value>urn:dece:accountid:org:dece:DEF5738E543A633AE0401F0A05990CC0</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeRTLGet</con:name>
          <con:value>FORBIDDEN</con:value>
        </con:property>
        <con:property>
          <con:name>ErrorDataVal</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>RightsResXml</con:name>
          <con:value><![CDATA[<ErrorList xmlns="http://www.decellc.org/schema/2010/10/dece" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Error ErrorID="token_rejected">
      <Reason>CN specified and Audience in Affiliation are disjoint</Reason>
      <OriginalRequest/>
      <ErrorLink/>
   </Error>
</ErrorList>]]></con:value>
        </con:property>
        <con:property>
          <con:name>RightsResTime</con:name>
          <con:value>373</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceID</con:name>
          <con:value>urn:dece:deviceid:org:dece:DEF585C6AEA11471E0401F0A07994634</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>FORBIDDEN</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetReqXml</con:name>
          <con:value>User-Agent: Apache-HttpClient/4.1.1 (java 1.5)
</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResXml</con:name>
          <con:value><![CDATA[<ErrorList xmlns="http://www.decellc.org/schema/2010/10/dece" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Error ErrorID="token_rejected">
      <Reason>CN specified and Audience in Affiliation are disjoint</Reason>
      <OriginalRequest/>
      <ErrorLink/>
   </Error>
</ErrorList>]]></con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResTime</con:name>
          <con:value>442</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetID</con:name>
          <con:value>CN specified and Audience in Affiliation are disjoint</con:value>
        </con:property>
        <con:property>
          <con:name>DomainID</con:name>
          <con:value>urn:dece:domainid:dece:DEF587A47AF1508CE0401F0A07994D03</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    
    <con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00007_DeviceGet_RetailerCS_FUNC_with_InActive AccountID_CS_ROLE_Allowed" searchProperties="true" id="188a60d5-3461-43ef-8946-cd03a6199bac" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="">
      <con:description>This test case will verify that Application Tier properly handles a DeviceGet request when invoked with the GET method and Invalid Account ID in request .

Expected Result:

System should return an Error message.</con:description>
      <con:settings/>
      <con:testStep type="groovy" name="Verify Node User SAML Asssertion" disabled="true">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.model.testsuite.TestRunner.Status


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def ValSamlAssertion = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Validate SAML Assertion");

	ValSamlAssertion.setPropertyValue("TCaseName",testCase.getName());
	ValSamlAssertion.setPropertyValue("TSuiteName",testSuite.getName());

	def runnerTc = ValSamlAssertion.run( null , false )
	assert runnerTc.status == Status.FINISHED;

	rcUUID = testCase.getPropertyValue("rcUUID");

	if (runnerTc.status != Status.FINISHED || rcUUID.toInteger()!= 1){

			
		testCase.setPropertyValue("nodetype","device");
		testCase.setPropertyValue("nodeid","0701");
		testCase.setPropertyValue("audienceNodeid","0702");
		testCase.setPropertyValue("username","sch-drm_user1");
		testCase.setPropertyValue("password","Password1");
		testCase.setPropertyValue("accountoid",null);
		testCase.setPropertyValue("useroid",null);
		testCase.setPropertyValue("assertid",null);
		testCase.setPropertyValue("SAMLassertion",null);
		testCase.setPropertyValue("tokentype","urn:dece:type:tokentype:usernamepassword");
		testCase.setPropertyValue("loopuntil","25");
		testCase.setPropertyValue("expectErrTypeSTS","SUCCESS");
		testCase.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
			
		log.info " SAML Assertion Expired ! re-generating Assertion";
		def RunSTS = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get SAML Assertion - STS")

				RunSTS.setPropertyValue("TCaseName",testCase.getName());
				RunSTS.setPropertyValue("TSuiteName",testSuite.getName());

				def runnerSTS = RunSTS.run( null , false )

				assert runnerSTS.status == Status.FINISHED;

		}</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call LicAppCreate Request with Valid Data" disabled="true">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0");
testCase.setPropertyValue("expectErrTypeLAC","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedDeviceDDReq = testProject.getTestSuiteByName("Staging DeviceGet").getTestCaseByName("LicAppCreate Request");

FeedDeviceDDReq.setPropertyValue("TCaseName",testCase.getName());
FeedDeviceDDReq.setPropertyValue("TSuiteName",testSuite.getName());


def runnerTC = FeedDeviceDDReq.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call DeviceUpdate Request for evict Cache" id="efbf27d6-fabf-48a7-8418-593d4e1a6ee6">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )
WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );


TSrunnerRTC.runTestStepByName("DeviceUpdateRequest");

assert TSrunnerRTC.status == Status.INITIALIZED;</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Get Account Inactive Statuses">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def GetAccountStatus = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get-Set Account Status");

// Get ALL inactive Status from ACCOUNT_STATUS_REF Except = 'Pending'

SqlStr = "select Status from ACCOUNT_STATUS_REF where Status !='active' AND Status !='mergedeleted' AND Status !='forcedeleted' AND Status !='suspended' AND Status !='other'";

testCase.setPropertyValue("SqlStr",SqlStr);

GetAccountStatus.setPropertyValue("TCaseName",testCase.getName());
GetAccountStatus.setPropertyValue("TSuiteName",testSuite.getName());

WsdlTestCaseRunner TSrunner = new WsdlTestCaseRunner( GetAccountStatus, null );

TSrunner.runTestStepByName("Get Account Status for DVG");

assert TSrunner.status == Status.INITIALIZED;

 log.info " Current Account Status: " + testCase.getPropertyValue("AccountStatus");

testCase.getPropertyValue("AccountStatusXML");</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Feed DeviceGet Request with Inactive AccountID">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


// setup Retailer CS Nodeid with the account
testCase.setPropertyValue("NodeID","0702");


//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("SAMLassertion","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");
testCase.setPropertyValue("assertionUUID","_87aa3e8d-2de2-46dd-b572-414003e22e9a");
testCase.setPropertyValue("username","firstfullusername_20130612_06223");
testCase.setPropertyValue("password","testing");
testCase.setPropertyValue("accountoid","DEF5738E543B633AE0401F0A05990CC0");
testCase.setPropertyValue("useroid","DEF5738E544A633AE0401F0A05990CC0");
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:DEF5738E543A633AE0401F0A05990CC0");
testCase.setPropertyValue("DeviceID","urn:dece:deviceid:org:dece:DEF585C6AEA11471E0401F0A07994634");
testCase.setPropertyValue("DomainID","urn:dece:domainid:dece:DEF587A47AF1508CE0401F0A07994D03");
testCase.setPropertyValue("expectErrType","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedRTLReq = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request");

FeedRTLReq.setPropertyValue("TCaseName",testCase.getName());
FeedRTLReq.setPropertyValue("TSuiteName",testSuite.getName());

WsdlTestCaseRunner TSrunner = new WsdlTestCaseRunner( FeedRTLReq, null );

TSrunner.runTestStepByName("Get the DeviceGet Properties");
TSrunner.runTestStepByName("pem set");
assert TSrunner.status == Status.INITIALIZED;</script></con:config>
      </con:testStep>
      <con:testStep type="datasource" name="Feed DataSource for Inactive Account Statuses">
        <con:settings/>
        <con:config xsi:type="con:DataSourceStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dataSource type="XML">
            <con:configuration><sourceStep>Get Account Inactive Statuses</sourceStep><sourceProperty>result</sourceProperty><rowPath>//Results[1]/ResultSet[1]/Row</rowPath><columnPath>STATUS</columnPath></con:configuration>
          </con:dataSource>
          <con:property>AccountStatus</con:property>
          <con:restartOnRun>true</con:restartOnRun>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="SetUp inactive Account Status for DVG">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

// SetUp the Node Status from the Data Source

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

// Get AccountStatus Values from Data Source

def DsAccountStatus = testRunner.testCase.testSteps['Feed DataSource for Inactive Account Statuses'];
log.info  "Account Status is to set to: " + DsAccountStatus.getPropertyValue("AccountStatus");

testCase.setPropertyValue("AccountStatus",DsAccountStatus.getPropertyValue("AccountStatus"));

def SetAccountStatus = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get-Set Account Status");

SetAccountStatus.setPropertyValue("TCaseName",testCase.getName());
SetAccountStatus.setPropertyValue("TSuiteName",testSuite.getName());

WsdlTestCaseRunner TSrunner = new WsdlTestCaseRunner( SetAccountStatus, null );

TSrunner.runTestStepByName("Set Account Status for DVG")

assert TSrunner.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call DeviceGet Request">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )

WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );

TSrunnerRTC.runTestStepByName("DeviceGetRequest");

assert TSrunnerRTC.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract DeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Extract DeviceGet Information")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify theDeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Response Validation")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="datasourceloop" name="DataSource Loop">
        <con:settings/>
        <con:config>
          <dataSourceStep>Feed DataSource for Inactive Account Statuses</dataSourceStep>
          <targetStep>SetUp inactive Account Status for DVG</targetStep>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Re-Setactive Account Status">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

// SetUp the Node Status from the Data Source

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

// Re-set AccountStatus Values  = 'active'

testCase.setPropertyValue("AccountStatus","active");

def SetAccountStatus = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get-Set Account Status");

SetAccountStatus.setPropertyValue("TCaseName",testCase.getName());
SetAccountStatus.setPropertyValue("TSuiteName",testSuite.getName());

WsdlTestCaseRunner TSrunner = new WsdlTestCaseRunner( SetAccountStatus, null );

TSrunner.runTestStepByName("Set Account Status for DVG")

assert TSrunner.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SAMLExpDate</con:name>
          <con:value>2013-06-14 18:31:45.0</con:value>
        </con:property>
        <con:property>
          <con:name>rcUUID</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>nodetype</con:name>
          <con:value>device</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>0702</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>firstfullusername_20130612_06223</con:value>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>testing</con:value>
        </con:property>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">DEF5738E543B633AE0401F0A05990CC0</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">DEF5738E544A633AE0401F0A05990CC0</con:value>
        </con:property>
        <con:property>
          <con:name>assertid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SAMLassertion</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">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</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>loopuntil</con:name>
          <con:value>25</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTS</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value>_87aa3e8d-2de2-46dd-b572-414003e22e9a</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value>urn:dece:userid:org:dece:A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value>A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value>urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value>A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>AccountID</con:name>
          <con:value>urn:dece:accountid:org:dece:DEF5738E543A633AE0401F0A05990CC0</con:value>
        </con:property>
        <con:property>
          <con:name>ErrorDataVal</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetReqXml</con:name>
          <con:value>User-Agent: Apache-HttpClient/4.1.1 (java 1.5)
</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResXml</con:name>
          <con:value><![CDATA[<Device IsLegacy="false" DeviceID="urn:dece:deviceid:org:dece:A09D9C22F11CBC6DE0401F0A05996898" xmlns="http://www.decellc.org/schema/2010/10/dece" xmlns:ns2="http://www.movielabs.com/schema/md/v1.07/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <DisplayName>DeviceInfoDisplayName</DisplayName>
   <Manufacturer>Microsoft</Manufacturer>
   <Model>V344</Model>
   <Brand Language="en-US">DeviceInfoBrand</Brand>
   <SerialNo>123432442323424</SerialNo>
   <Image MimeType="MimeType3" Width="50" Height="50">http://www.oxygenxml.com/1234</Image>
   <LicAppID>urn:dece:licappid:org:dece:A09D9C22F11EBC6DE0401F0A05996898</LicAppID>
   <DRMClientID>urn:dece:drmclientid:org:dece:A0E2E4B822DB1B7CE0401F0A07994404</DRMClientID>
   <ResourceStatus>
      <Current CreatedBy="urn:dece:org:org:dece:0701" CreationDate="2011-04-11T04:02:39.637Z">
         <Value>urn:dece:type:status:pending</Value>
         <Description>Device Created</Description>
      </Current>
   </ResourceStatus>
</Device>]]></con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResTime</con:name>
          <con:value>477</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetID</con:name>
          <con:value>The supplied AccountID is invalid.https://qa.q.uvvu.com:7001/rest/1/0/Account/urn%3Adece%3Aaccountid%3Aorg%3Aorg%3Aorg%3Adece%3AA06A9AA49F6E73D7E0401F0A059915F0/Device/urn%3Adece%3Adeviceid%3Aorg%3Adece%3AA09D9C22F11CBC6DE0401F0A05996898/DECEDomainhttps://qa.q.uvvu.com:7001/rest/1/0/error/en/ErrorList.html#AccountIdNotValid</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceID</con:name>
          <con:value>urn:dece:deviceid:org:dece:DEF585C6AEA11471E0401F0A07994634</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeDVGGet</con:name>
          <con:value>ACCOUNTID NOT MATCH</con:value>
        </con:property>
        <con:property>
          <con:name>SqlStr</con:name>
          <con:value>select Status from ACCOUNT_STATUS_REF where Status !='active' AND Status !='mergedeleted' AND Status !='forcedeleted' AND Status !='suspended' AND Status !='other'</con:value>
        </con:property>
        <con:property>
          <con:name>AccountStatusXML</con:name>
          <con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <STATUS>archived</STATUS>
    </Row>
    <Row rowNumber='2'>
      <STATUS>blocked</STATUS>
    </Row>
    <Row rowNumber='3'>
      <STATUS>blocked:tou</STATUS>
    </Row>
    <Row rowNumber='4'>
      <STATUS>deleted</STATUS>
    </Row>
    <Row rowNumber='5'>
      <STATUS>pending</STATUS>
    </Row>
  </ResultSet>
</Results>]]></con:value>
        </con:property>
        <con:property>
          <con:name>AccountStatus</con:name>
          <con:value>active</con:value>
        </con:property>
        <con:property>
          <con:name>DomainID</con:name>
          <con:value>urn:dece:domainid:dece:DEF587A47AF1508CE0401F0A07994D03</con:value>
        </con:property>
      <con:property><con:name>audienceNodeid</con:name><con:value>0702</con:value></con:property><con:property><con:name>ETag</con:name><con:value>"E940BC58F2AB40BFE0401F0A05996AC8:F0246DC7"</con:value></con:property><con:property><con:name>Last-Modified</con:name><con:value>Mon, 21 Oct 2013 12:51:48 GMT</con:value></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>efbf27d6-fabf-48a7-8418-593d4e1a6ee6</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00009_DeviceGet_RetailerCS_FUNC_with_Invalid DeviceID" searchProperties="true" id="e54cb6dd-eeef-450b-a5c8-4213b44a8a25">
      <con:description>This test case will verify that Application Tier properly handles a DeviceGet request when invoked with the GET method and Invalid Account ID in request .

Expected Result:

System should return an Error message.</con:description>
      <con:settings/>
      <con:testStep type="groovy" name="Verify Node User SAML Asssertion" disabled="true">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.model.testsuite.TestRunner.Status


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def ValSamlAssertion = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Validate SAML Assertion");

	ValSamlAssertion.setPropertyValue("TCaseName",testCase.getName());
	ValSamlAssertion.setPropertyValue("TSuiteName",testSuite.getName());

	def runnerTc = ValSamlAssertion.run( null , false )
	assert runnerTc.status == Status.FINISHED;

	rcUUID = testCase.getPropertyValue("rcUUID");

	if (runnerTc.status != Status.FINISHED || rcUUID.toInteger()!= 1){

			
		testCase.setPropertyValue("nodetype","device");
		testCase.setPropertyValue("nodeid","0701");
		testCase.setPropertyValue("audienceNodeid","0702");
		testCase.setPropertyValue("username","sch-drm_user1");
		testCase.setPropertyValue("password","Password1");
		testCase.setPropertyValue("accountoid",null);
		testCase.setPropertyValue("useroid",null);
		testCase.setPropertyValue("assertid",null);
		testCase.setPropertyValue("SAMLassertion",null);
		testCase.setPropertyValue("tokentype","urn:dece:type:tokentype:usernamepassword");
		testCase.setPropertyValue("loopuntil","25");
		testCase.setPropertyValue("expectErrTypeSTS","SUCCESS");
		testCase.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
			
		log.info " SAML Assertion Expired ! re-generating Assertion";
		def RunSTS = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get SAML Assertion - STS")

				RunSTS.setPropertyValue("TCaseName",testCase.getName());
				RunSTS.setPropertyValue("TSuiteName",testSuite.getName());

				def runnerSTS = RunSTS.run( null , false )

				assert runnerSTS.status == Status.FINISHED;

		}</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call LicAppCreate Request with Valid Data" disabled="true">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0");
testCase.setPropertyValue("expectErrTypeLAC","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedDeviceDDReq = testProject.getTestSuiteByName("Staging DeviceGet").getTestCaseByName("LicAppCreate Request");

FeedDeviceDDReq.setPropertyValue("TCaseName",testCase.getName());
FeedDeviceDDReq.setPropertyValue("TSuiteName",testSuite.getName());


def runnerTC = FeedDeviceDDReq.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Feed DeviceGet Request with Invalid DeviceID">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

// setup Retailer CS Nodeid with the account
testCase.setPropertyValue("NodeID","0702");


//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("SAMLassertion","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");
testCase.setPropertyValue("assertionUUID","_87aa3e8d-2de2-46dd-b572-414003e22e9a");
testCase.setPropertyValue("username","firstfullusername_20130612_06223");
testCase.setPropertyValue("password","testing");
testCase.setPropertyValue("accountoid","DEF5738E543B633AE0401F0A05990CC0");
testCase.setPropertyValue("useroid","DEF5738E544A633AE0401F0A05990CC0");
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:DEF5738E543A633AE0401F0A05990CC0");
testCase.setPropertyValue("DeviceID","urn:dece:deviceid:org:org:dece:DEF585C6AEA11471E0401F0A07994634");//invalid device id format
testCase.setPropertyValue("DomainID","urn:dece:domainid:dece:DEF587A47AF1508CE0401F0A07994D03");
testCase.setPropertyValue("expectErrType","DEVICEID_NOT_FOUND");
testCase.setPropertyValue("ErrorDataVal","1");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedRTLReq = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request");

FeedRTLReq.setPropertyValue("TCaseName",testCase.getName());
FeedRTLReq.setPropertyValue("TSuiteName",testSuite.getName());

WsdlTestCaseRunner TSrunner = new WsdlTestCaseRunner( FeedRTLReq, null );

TSrunner.runTestStepByName("Get the DeviceGet Properties");
TSrunner.runTestStepByName("pem set");
assert TSrunner.status == Status.INITIALIZED;</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call DeviceGet Request">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )

WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );

TSrunnerRTC.runTestStepByName("DeviceGetRequest");

assert TSrunnerRTC.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract DeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Extract DeviceGet Information")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify theDeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Response Validation")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SAMLExpDate</con:name>
          <con:value>2013-06-14 18:31:45.0</con:value>
        </con:property>
        <con:property>
          <con:name>rcUUID</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>nodetype</con:name>
          <con:value>device</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>0702</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>firstfullusername_20130612_06223</con:value>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>testing</con:value>
        </con:property>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">DEF5738E543B633AE0401F0A05990CC0</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">DEF5738E544A633AE0401F0A05990CC0</con:value>
        </con:property>
        <con:property>
          <con:name>assertid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SAMLassertion</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">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</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>loopuntil</con:name>
          <con:value>25</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTS</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value>_87aa3e8d-2de2-46dd-b572-414003e22e9a</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value>urn:dece:userid:org:dece:A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value>A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value>urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value>A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>AccountID</con:name>
          <con:value>urn:dece:accountid:org:dece:DEF5738E543A633AE0401F0A05990CC0</con:value>
        </con:property>
        <con:property>
          <con:name>ErrorDataVal</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>DEVICEID_NOT_FOUND</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetReqXml</con:name>
          <con:value>User-Agent: Apache-HttpClient/4.1.1 (java 1.5)
</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResXml</con:name>
          <con:value><![CDATA[<ErrorList xmlns="http://www.decellc.org/schema/2010/10/dece" xmlns:ns2="http://www.movielabs.com/schema/md/v1.07/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Error ErrorID="urn:dece:errorid:org:dece:DeviceIdInvalid">
      <Reason Language="en">Device ID Invalid.</Reason>
      <OriginalRequest>https://qa.q.uvvu.com:7001/rest/1/0/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3AA06A9AA49F6E73D7E0401F0A059915F0/Domain/urn%3Adece%3Adomainid%3Adece%3AA09DA589BD63A036E0401F0A05996D9A/Device/urn%3Adece%3Adeviceid%3Aorg%3Atree%3Adece%3AA09D9C22F11CBC6DE0401F0A05996898</OriginalRequest>
      <ErrorLink>https://qa.q.uvvu.com:7001/rest/1/0/error/en/ErrorList.html#DeviceIdInvalid</ErrorLink>
   </Error>
</ErrorList>]]></con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResTime</con:name>
          <con:value>156</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetID</con:name>
          <con:value>Device ID Invalid.https://qa.q.uvvu.com:7001/rest/1/0/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3AA06A9AA49F6E73D7E0401F0A059915F0/Device/urn%3Adece%3Adeviceid%3Aorg%3Atree%3Adece%3AA09D9C22F11CBC6DE0401F0A05996898/DECEDomainhttps://qa.q.uvvu.com:7001/rest/1/0/error/en/ErrorList.html#DeviceIdInvalid</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceID</con:name>
          <con:value>urn:dece:deviceid:org:org:dece:DEF585C6AEA11471E0401F0A07994634</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeDVGGet</con:name>
          <con:value>ACCOUNTID NOT MATCH</con:value>
        </con:property>
        <con:property>
          <con:name>DomainID</con:name>
          <con:value>urn:dece:domainid:dece:DEF587A47AF1508CE0401F0A07994D03</con:value>
        </con:property>
      <con:property><con:name>audienceNodeid</con:name><con:value>0702</con:value></con:property></con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00010_DeviceGet_RetailerCS_FUNC_with_Non_Existing_ DeviceID" searchProperties="true" id="8fdcf0bf-a546-438f-a796-2fa5dc9e28cd">
      <con:description>This test case will verify that Application Tier properly handles a DeviceGet request when invoked with the GET method and Invalid Account ID in request .

Expected Result:

System should return an Error message.</con:description>
      <con:settings/>
      <con:testStep type="groovy" name="Verify Node User SAML Asssertion" disabled="true">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.model.testsuite.TestRunner.Status


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def ValSamlAssertion = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Validate SAML Assertion");

	ValSamlAssertion.setPropertyValue("TCaseName",testCase.getName());
	ValSamlAssertion.setPropertyValue("TSuiteName",testSuite.getName());

	def runnerTc = ValSamlAssertion.run( null , false )
	assert runnerTc.status == Status.FINISHED;

	rcUUID = testCase.getPropertyValue("rcUUID");

	if (runnerTc.status != Status.FINISHED || rcUUID.toInteger()!= 1){

			
		testCase.setPropertyValue("nodetype","device");
		testCase.setPropertyValue("nodeid","0701");
		testCase.setPropertyValue("username","sch-drm_user1");
		testCase.setPropertyValue("password","Password1");
		testCase.setPropertyValue("accountoid",null);
		testCase.setPropertyValue("useroid",null);
		testCase.setPropertyValue("assertid",null);
		testCase.setPropertyValue("SAMLassertion",null);
		testCase.setPropertyValue("tokentype","urn:dece:type:tokentype:usernamepassword");
		testCase.setPropertyValue("loopuntil","25");
		testCase.setPropertyValue("expectErrTypeSTS","SUCCESS");
		testCase.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
			
		log.info " SAML Assertion Expired ! re-generating Assertion";
		def RunSTS = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get SAML Assertion - STS")

				RunSTS.setPropertyValue("TCaseName",testCase.getName());
				RunSTS.setPropertyValue("TSuiteName",testSuite.getName());

				def runnerSTS = RunSTS.run( null , false )

				assert runnerSTS.status == Status.FINISHED;

		}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call LicAppCreate Request with Valid Data" disabled="true">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0");
testCase.setPropertyValue("expectErrTypeLAC","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedDeviceDDReq = testProject.getTestSuiteByName("Staging DeviceGet").getTestCaseByName("LicAppCreate Request");

FeedDeviceDDReq.setPropertyValue("TCaseName",testCase.getName());
FeedDeviceDDReq.setPropertyValue("TSuiteName",testSuite.getName());


def runnerTC = FeedDeviceDDReq.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Feed DeviceGet Request with Non-Existing DeviceID">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

// setup Retailer CS Nodeid with the account
testCase.setPropertyValue("NodeID","0702");


//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("SAMLassertion","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");
testCase.setPropertyValue("assertionUUID","_87aa3e8d-2de2-46dd-b572-414003e22e9a");
testCase.setPropertyValue("username","firstfullusername_20130612_06223");
testCase.setPropertyValue("password","testing");
testCase.setPropertyValue("accountoid","DEF5738E543B633AE0401F0A05990CC0");
testCase.setPropertyValue("useroid","DEF5738E544A633AE0401F0A05990CC0");
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:DEF5738E543A633AE0401F0A05990CC0");
testCase.setPropertyValue("DeviceID","urn:dece:deviceid:org:dece:DEEF07BB3B2E53F0E0401");//non existing device id
testCase.setPropertyValue("DomainID","urn:dece:domainid:dece:DEF587A47AF1508CE0401F0A07994D03");
testCase.setPropertyValue("expectErrType","DEVICEID_NOT_FOUND");
testCase.setPropertyValue("ErrorDataVal","1");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedRTLReq = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request");

FeedRTLReq.setPropertyValue("TCaseName",testCase.getName());
FeedRTLReq.setPropertyValue("TSuiteName",testSuite.getName());

WsdlTestCaseRunner TSrunner = new WsdlTestCaseRunner( FeedRTLReq, null );

TSrunner.runTestStepByName("Get the DeviceGet Properties");
TSrunner.runTestStepByName("pem set");
assert TSrunner.status == Status.INITIALIZED;</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call DeviceGet Request">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )

WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );

TSrunnerRTC.runTestStepByName("DeviceGetRequest");

assert TSrunnerRTC.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract DeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Extract DeviceGet Information")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify theDeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Response Validation")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SAMLExpDate</con:name>
          <con:value>2012-04-18 16:10:01.0</con:value>
        </con:property>
        <con:property>
          <con:name>rcUUID</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>nodetype</con:name>
          <con:value>device</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>0702</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>firstfullusername_20130612_06223</con:value>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>testing</con:value>
        </con:property>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">DEF5738E543B633AE0401F0A05990CC0</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">DEF5738E544A633AE0401F0A05990CC0</con:value>
        </con:property>
        <con:property>
          <con:name>assertid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SAMLassertion</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">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</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>loopuntil</con:name>
          <con:value>25</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTS</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value>_87aa3e8d-2de2-46dd-b572-414003e22e9a</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value>urn:dece:userid:org:dece:A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value>A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value>urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value>A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>AccountID</con:name>
          <con:value>urn:dece:accountid:org:dece:DEF5738E543A633AE0401F0A05990CC0</con:value>
        </con:property>
        <con:property>
          <con:name>ErrorDataVal</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>DEVICEID_NOT_FOUND</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetReqXml</con:name>
          <con:value>User-Agent: Apache-HttpClient/4.1.1 (java 1.5)
</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResXml</con:name>
          <con:value><![CDATA[<ErrorList xmlns="http://www.decellc.org/schema/2010/10/dece" xmlns:ns2="http://www.movielabs.com/schema/md/v1.07/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Error ErrorID="urn:dece:errorid:org:dece:DeviceIdInvalid">
      <Reason Language="en">Device ID Invalid.</Reason>
      <OriginalRequest>https://qa.q.uvvu.com:7001/rest/1/0/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3AA06A9AA49F6E73D7E0401F0A059915F0/Domain/urn%3Adece%3Adomainid%3Adece%3AA09DA589BD63A036E0401F0A05996D9A/Device/urn%3Adece%3Adeviceid%3Aorg%3Adece%3AA09D9C22F11CBC6DE0401F0A059968989233</OriginalRequest>
      <ErrorLink>https://qa.q.uvvu.com:7001/rest/1/0/error/en/ErrorList.html#DeviceIdInvalid</ErrorLink>
   </Error>
</ErrorList>]]></con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResTime</con:name>
          <con:value>249</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetID</con:name>
          <con:value>Device ID Invalid.https://qa.q.uvvu.com:7001/rest/1/0/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3AA06A9AA49F6E73D7E0401F0A059915F0/Device/urn%3Adece%3Adeviceid%3Aorg%3Adece%3AA09D9C22F11CBC6DE0401F0A059968989238487847849821942174/DECEDomainhttps://qa.q.uvvu.com:7001/rest/1/0/error/en/ErrorList.html#DeviceIdInvalid</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceID</con:name>
          <con:value>urn:dece:deviceid:org:dece:DEEF07BB3B2E53F0E0401</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeDVGGet</con:name>
          <con:value>ACCOUNTID NOT MATCH</con:value>
        </con:property>
        <con:property>
          <con:name>DomainID</con:name>
          <con:value>urn:dece:domainid:dece:DEF587A47AF1508CE0401F0A07994D03</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00011_DeviceGet_RetailerCS_FUNC_with_Inactive_ DeviceID" searchProperties="true" id="c0d96b7e-f5dc-4239-bbcd-9b4ad96b16af" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="">
      <con:description>This test case will verify that Application Tier properly handles a DeviceGet request when invoked with the GET method and Invalid Account ID in request .

Expected Result:

System should return an Error message.</con:description>
      <con:settings/>
      <con:testStep type="groovy" name="Verify Node User SAML Asssertion" disabled="true">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.model.testsuite.TestRunner.Status


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def ValSamlAssertion = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Validate SAML Assertion");

	ValSamlAssertion.setPropertyValue("TCaseName",testCase.getName());
	ValSamlAssertion.setPropertyValue("TSuiteName",testSuite.getName());

	def runnerTc = ValSamlAssertion.run( null , false )
	assert runnerTc.status == Status.FINISHED;

	rcUUID = testCase.getPropertyValue("rcUUID");

	if (runnerTc.status != Status.FINISHED || rcUUID.toInteger()!= 1){

			
		testCase.setPropertyValue("nodetype","device");
		testCase.setPropertyValue("nodeid","0701");
		testCase.setPropertyValue("audienceNodeid","0702");
		testCase.setPropertyValue("username","sch-drm_user1");
		testCase.setPropertyValue("password","Password1");
		testCase.setPropertyValue("accountoid",null);
		testCase.setPropertyValue("useroid",null);
		testCase.setPropertyValue("assertid",null);
		testCase.setPropertyValue("SAMLassertion",null);
		testCase.setPropertyValue("tokentype","urn:dece:type:tokentype:usernamepassword");
		testCase.setPropertyValue("loopuntil","25");
		testCase.setPropertyValue("expectErrTypeSTS","SUCCESS");
		testCase.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
			
		log.info " SAML Assertion Expired ! re-generating Assertion";
		def RunSTS = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get SAML Assertion - STS")

				RunSTS.setPropertyValue("TCaseName",testCase.getName());
				RunSTS.setPropertyValue("TSuiteName",testSuite.getName());

				def runnerSTS = RunSTS.run( null , false )

				assert runnerSTS.status == Status.FINISHED;

		}</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call LicAppCreate Request with Valid Data" disabled="true">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0");
testCase.setPropertyValue("expectErrTypeLAC","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedDeviceDDReq = testProject.getTestSuiteByName("Staging DeviceGet").getTestCaseByName("LicAppCreate Request");

FeedDeviceDDReq.setPropertyValue("TCaseName",testCase.getName());
FeedDeviceDDReq.setPropertyValue("TSuiteName",testSuite.getName());


def runnerTC = FeedDeviceDDReq.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call DeviceUpdate Request for evict Cache" id="5331b9b4-4501-4085-84e3-e6ff4922f79f">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )
WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );


TSrunnerRTC.runTestStepByName("DeviceUpdateRequest");

assert TSrunnerRTC.status == Status.INITIALIZED;</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Get Device Inactive Statuses">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def GetDeviceStatus = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get-Set Device Status");

// Get ALL inactive Status from DEVICE_STATUS_REF Except = 'Pending'

SqlStr = "select Status from DEVICE_STATUS_REF";

testCase.setPropertyValue("SqlStr",SqlStr);

GetDeviceStatus.setPropertyValue("TCaseName",testCase.getName());
GetDeviceStatus.setPropertyValue("TSuiteName",testSuite.getName());

WsdlTestCaseRunner TSrunner = new WsdlTestCaseRunner( GetDeviceStatus, null );

TSrunner.runTestStepByName("Get Device Status for DVG");

assert TSrunner.status == Status.INITIALIZED;

 log.info " Current Device Status: " + testCase.getPropertyValue("DeviceStatus");

testCase.getPropertyValue("DeviceStatusXML");</script></con:config>
      </con:testStep>
      <con:testStep type="datasource" name="Feed DataSource for Inactive Device Statuses">
        <con:settings/>
        <con:config xsi:type="con:DataSourceStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dataSource type="XML">
            <con:configuration><sourceStep>Get Device Inactive Statuses</sourceStep><sourceProperty>result</sourceProperty><rowPath>//Results[1]/ResultSet[1]/Row</rowPath><columnPath>STATUS</columnPath></con:configuration>
          </con:dataSource>
          <con:property>DeviceStatus</con:property>
          <con:restartOnRun>true</con:restartOnRun>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Feed DeviceGet Request with Inactive DeviceID">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//RightsToken Request and properties

// setup Retailer CS Nodeid with the account
testCase.setPropertyValue("NodeID","0702");


//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("SAMLassertion","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");
testCase.setPropertyValue("assertionUUID","_87aa3e8d-2de2-46dd-b572-414003e22e9a");
testCase.setPropertyValue("username","firstfullusername_20130612_06223");
testCase.setPropertyValue("password","testing");
testCase.setPropertyValue("accountoid","DEF5738E543B633AE0401F0A05990CC0");
testCase.setPropertyValue("useroid","DEF5738E544A633AE0401F0A05990CC0");
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:DEF5738E543A633AE0401F0A05990CC0");
testCase.setPropertyValue("DeviceID","urn:dece:deviceid:org:dece:DEF585C6AEA11471E0401F0A07994634");
testCase.setPropertyValue("DomainID","urn:dece:domainid:dece:DEF587A47AF1508CE0401F0A07994D03");
testCase.setPropertyValue("expectErrType","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedRTLReq = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request");

FeedRTLReq.setPropertyValue("TCaseName",testCase.getName());
FeedRTLReq.setPropertyValue("TSuiteName",testSuite.getName());

WsdlTestCaseRunner TSrunner = new WsdlTestCaseRunner( FeedRTLReq, null );

TSrunner.runTestStepByName("Get the DeviceGet Properties");
TSrunner.runTestStepByName("pem set");
assert TSrunner.status == Status.INITIALIZED;</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="SetUp Device Inactive Status for DVG">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

// SetUp the Node Status from the Data Source

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

// Get NodeStatus Values from Data Source

def DsDeviceStatus = testRunner.testCase.testSteps['Feed DataSource for Inactive Device Statuses'];
log.info  "Device Status is to set to: " + DsDeviceStatus.getPropertyValue("DeviceStatus");

testCase.setPropertyValue("DeviceStatus",DsDeviceStatus.getPropertyValue("DeviceStatus"));

def SetDeviceStatus = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get-Set Device Status");

SetDeviceStatus.setPropertyValue("TCaseName",testCase.getName());
SetDeviceStatus.setPropertyValue("TSuiteName",testSuite.getName());
SetDeviceStatus.setPropertyValue("DeviceID",testCase.getPropertyValue("DeviceID"));

WsdlTestCaseRunner TSrunner = new WsdlTestCaseRunner( SetDeviceStatus, null );

TSrunner.runTestStepByName("Set Device Status for DVG")

assert TSrunner.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call DeviceGet Request">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )

WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );

TSrunnerRTC.runTestStepByName("DeviceGetRequest");

assert TSrunnerRTC.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify theDeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Response Validation")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="datasourceloop" name="DataSource Loop">
        <con:settings/>
        <con:config>
          <dataSourceStep>Feed DataSource for Inactive Device Statuses</dataSourceStep>
          <targetStep>SetUp Device Inactive Status for DVG</targetStep>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Re-Set Device Status to Active">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

// SetUp the Node Status from the Data Source

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

// Get NodeStatus Values from Data Source

testCase.setPropertyValue("DeviceStatus","pending");

def SetDeviceStatus = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get-Set Device Status");

SetDeviceStatus.setPropertyValue("TCaseName",testCase.getName());
SetDeviceStatus.setPropertyValue("TSuiteName",testSuite.getName());

WsdlTestCaseRunner TSrunner = new WsdlTestCaseRunner( SetDeviceStatus, null );

TSrunner.runTestStepByName("Set Device Status for DVG")

assert TSrunner.status == Status.INITIALIZED;

TSrunner.runTestStepByName("Get Device Status for DVG")

assert TSrunner.status == Status.INITIALIZED;

log.info " Current Device Status: " + testCase.getPropertyValue("DeviceStatus");</script>
        </con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SAMLExpDate</con:name>
          <con:value>2013-06-14 18:31:45.0</con:value>
        </con:property>
        <con:property>
          <con:name>rcUUID</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>nodetype</con:name>
          <con:value>device</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>0702</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>firstfullusername_20130612_06223</con:value>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>testing</con:value>
        </con:property>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">DEF5738E543B633AE0401F0A05990CC0</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">DEF5738E544A633AE0401F0A05990CC0</con:value>
        </con:property>
        <con:property>
          <con:name>assertid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SAMLassertion</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">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</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>loopuntil</con:name>
          <con:value>25</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTS</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value>_87aa3e8d-2de2-46dd-b572-414003e22e9a</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value>urn:dece:userid:org:dece:A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value>A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value>urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value>A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>AccountID</con:name>
          <con:value>urn:dece:accountid:org:dece:DEF5738E543A633AE0401F0A05990CC0</con:value>
        </con:property>
        <con:property>
          <con:name>ErrorDataVal</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetReqXml</con:name>
          <con:value>Host: qa.q.uvvu.com:7001</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResXml</con:name>
          <con:value><![CDATA[<ErrorList xmlns="http://www.decellc.org/schema/2010/10/dece" xmlns:ns2="http://www.movielabs.com/schema/md/v1.07/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Error ErrorID="urn:dece:errorid:org:dece:DeviceNotFound">
      <Reason Language="en">The device cannot be found</Reason>
      <OriginalRequest>https://qa.q.uvvu.com:7001/rest/1/0/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3AA06A9AA49F6E73D7E0401F0A059915F0/Domain/urn%3Adece%3Adomainid%3Adece%3AA09DA589BD63A036E0401F0A05996D9A/Device/urn%3Adece%3Adeviceid%3Aorg%3Adece%3AA09D9C22F11CBC6DE0401F0A05996898</OriginalRequest>
      <ErrorLink>https://qa.q.uvvu.com:7001/rest/1/0/error/en/ErrorList.html#DeviceNotFound</ErrorLink>
   </Error>
</ErrorList>]]></con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResTime</con:name>
          <con:value>935</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetID</con:name>
          <con:value>The device cannot be foundhttps://qa.q.uvvu.com:7001/rest/1/0/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3AA06A9AA49F6E73D7E0401F0A059915F0/Device/urn%3Adece%3Adeviceid%3Aorg%3Adece%3AA09D9C22F11CBC6DE0401F0A05996898/DECEDomainhttps://qa.q.uvvu.com:7001/rest/1/0/error/en/ErrorList.html#DeviceNotFound</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceID</con:name>
          <con:value>urn:dece:deviceid:org:dece:DEF585C6AEA11471E0401F0A07994634</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeDVGGet</con:name>
          <con:value>ACCOUNTID NOT MATCH</con:value>
        </con:property>
        <con:property>
          <con:name>SqlStr</con:name>
          <con:value>select Status from DEVICE_STATUS_REF</con:value>
        </con:property>
        <con:property>
          <con:name>UserStatusXML</con:name>
          <con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <STATUS>deleted</STATUS>
    </Row>
    <Row rowNumber='2'>
      <STATUS>forceddelete</STATUS>
    </Row>
  </ResultSet>
</Results>]]></con:value>
        </con:property>
        <con:property>
          <con:name>UserStatus</con:name>
          <con:value>active</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceStatusXML</con:name>
          <con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <STATUS>active</STATUS>
    </Row>
    <Row rowNumber='2'>
      <STATUS>deleted</STATUS>
    </Row>
    <Row rowNumber='3'>
      <STATUS>forcedeleted</STATUS>
    </Row>
    <Row rowNumber='4'>
      <STATUS>mergedeleted</STATUS>
    </Row>
    <Row rowNumber='5'>
      <STATUS>pending</STATUS>
    </Row>
  </ResultSet>
</Results>]]></con:value>
        </con:property>
        <con:property>
          <con:name>DeviceStatus</con:name>
          <con:value>pending</con:value>
        </con:property>
        <con:property>
          <con:name>rcDeviceStatus</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>DomainID</con:name>
          <con:value>urn:dece:domainid:dece:DEF587A47AF1508CE0401F0A07994D03</con:value>
        </con:property>
      <con:property><con:name>audienceNodeid</con:name><con:value>0702</con:value></con:property><con:property><con:name>ETag</con:name><con:value>"E940BC58F43240BFE0401F0A05996AC8:F0246DC7"</con:value></con:property><con:property><con:name>Last-Modified</con:name><con:value>Mon, 21 Oct 2013 12:53:04 GMT</con:value></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>5331b9b4-4501-4085-84e3-e6ff4922f79f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00012_DeviceGet_RetailerCS_FUNC_Verify_DECE_DomainID_with_DEVICE_DomainID" searchProperties="true" id="d4967d43-c2f2-45cf-81ca-3f9bd209b610">
      <con:description>This test case will verify that Application Tier properly handles a DeviceGet request when invoked with the GET method and valid header request .

Expected Result:

System should return successful message.</con:description>
      <con:settings/>
      <con:testStep type="groovy" name="Verify Node User SAML Asssertion" disabled="true">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.model.testsuite.TestRunner.Status


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def ValSamlAssertion = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Validate SAML Assertion");

	ValSamlAssertion.setPropertyValue("TCaseName",testCase.getName());
	ValSamlAssertion.setPropertyValue("TSuiteName",testSuite.getName());

	def runnerTc = ValSamlAssertion.run( null , false )
	assert runnerTc.status == Status.FINISHED;

	rcUUID = testCase.getPropertyValue("rcUUID");

	if (runnerTc.status != Status.FINISHED || rcUUID.toInteger()!= 1){

			
		testCase.setPropertyValue("nodetype","device");
		testCase.setPropertyValue("nodeid","0701");
		testCase.setPropertyValue("audienceNodeid","0702");
		testCase.setPropertyValue("username","sch-drm_user1");
		testCase.setPropertyValue("password","Password1");
		testCase.setPropertyValue("accountoid",null);
		testCase.setPropertyValue("useroid",null);
		testCase.setPropertyValue("assertid",null);
		testCase.setPropertyValue("SAMLassertion",null);
		testCase.setPropertyValue("tokentype","urn:dece:type:tokentype:usernamepassword");
		testCase.setPropertyValue("loopuntil","25");
		testCase.setPropertyValue("expectErrTypeSTS","SUCCESS");
		testCase.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
			
		log.info " SAML Assertion Expired ! re-generating Assertion";
		def RunSTS = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get SAML Assertion - STS")

				RunSTS.setPropertyValue("TCaseName",testCase.getName());
				RunSTS.setPropertyValue("TSuiteName",testSuite.getName());

				def runnerSTS = RunSTS.run( null , false )

				assert runnerSTS.status == Status.FINISHED;

		}</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call LicAppCreate Request with Valid Data" disabled="true">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0");
testCase.setPropertyValue("expectErrTypeLAC","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedDeviceDDReq = testProject.getTestSuiteByName("Staging DeviceGet").getTestCaseByName("LicAppCreate Request");

FeedDeviceDDReq.setPropertyValue("TCaseName",testCase.getName());
FeedDeviceDDReq.setPropertyValue("TSuiteName",testSuite.getName());


def runnerTC = FeedDeviceDDReq.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Feed DeviceGet Request with Valid Data">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();



// setup Retailer CS Nodeid with the account
testCase.setPropertyValue("NodeID","0702");

//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0");
testCase.setPropertyValue("DeviceID","urn:dece:deviceid:org:dece:A09D9C22F11CBC6DE0401F0A05996898");
testCase.setPropertyValue("DomainID","urn:dece:domainid:dece:A09DA589BD63A036E0401F0A05996D9A");
testCase.setPropertyValue("expectErrType","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedRTLReq = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request");

FeedRTLReq.setPropertyValue("TCaseName",testCase.getName());
FeedRTLReq.setPropertyValue("TSuiteName",testSuite.getName());

WsdlTestCaseRunner TSrunner = new WsdlTestCaseRunner( FeedRTLReq, null );

TSrunner.runTestStepByName("Get the DeviceGet Properties");
TSrunner.runTestStepByName("pem set");
assert TSrunner.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call DeviceGet Request">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )

WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );

TSrunnerRTC.runTestStepByName("DeviceGetRequest");

assert TSrunnerRTC.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract DeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Extract DeviceGet Information")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify theDeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Response Validation")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify the DeviceGet Response against DB Result">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGdataVal = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Data Validation");

RTGdataVal.setPropertyValue("TCaseName",testCase.getName());
RTGdataVal.setPropertyValue("TSuiteName",testSuite.getName());


def runnerRTC = RTGdataVal.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SAMLExpDate</con:name>
          <con:value>2017-06-11 06:17:41.0</con:value>
        </con:property>
        <con:property>
          <con:name>rcUUID</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>nodetype</con:name>
          <con:value>device</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>0702</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>sch-drm_user1</con:value>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>Password1</con:value>
        </con:property>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SAMLassertion</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>loopuntil</con:name>
          <con:value>25</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTS</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value>_b57f348b-ca9c-416a-8f88-41fd5b7c38da</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value>urn:dece:userid:org:dece:A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value>A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value>urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value>A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>AccountID</con:name>
          <con:value>urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>ErrorDataVal</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetReqXml</con:name>
          <con:value>User-Agent: Apache-HttpClient/4.1.1 (java 1.5)
</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResXml</con:name>
          <con:value><![CDATA[<Device IsLegacy="false" DeviceID="urn:dece:deviceid:org:dece:A09D9C22F11CBC6DE0401F0A05996898" xmlns="http://www.decellc.org/schema/2010/10/dece" xmlns:ns2="http://www.movielabs.com/schema/md/v1.07/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <DisplayName>DeviceInfoDisplayName</DisplayName>
   <Manufacturer>Microsoft</Manufacturer>
   <Model>V344</Model>
   <Brand Language="en-US">DeviceInfoBrand</Brand>
   <SerialNo>123432442323424</SerialNo>
   <Image MimeType="MimeType3" Width="50" Height="50">http://www.oxygenxml.com/1234</Image>
   <LicAppID>urn:dece:licappid:org:dece:A09D9C22F11EBC6DE0401F0A05996898</LicAppID>
   <DRMClientID>urn:dece:drmclientid:org:dece:A0E2E4B822DB1B7CE0401F0A07994404</DRMClientID>
   <ResourceStatus>
      <Current CreatedBy="urn:dece:org:org:dece:0701" CreationDate="2011-04-11T04:02:39.637Z">
         <Value>urn:dece:type:status:pending</Value>
         <Description>Device Created</Description>
      </Current>
   </ResourceStatus>
</Device>]]></con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResTime</con:name>
          <con:value>446</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetID</con:name>
          <con:value>A09DA589BD63A036E0401F0A05996D9A</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceID</con:name>
          <con:value>urn:dece:deviceid:org:dece:A09D9C22F11CBC6DE0401F0A05996898</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeDVGGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>SqlStr</con:name>
          <con:value>select Status from USER_STATUS_REF where Status !='active'</con:value>
        </con:property>
        <con:property>
          <con:name>DomainID</con:name>
          <con:value>urn:dece:domainid:dece:A09DA589BD63A036E0401F0A05996D9A</con:value>
        </con:property>
      <con:property><con:name>audienceNodeid</con:name><con:value>0702</con:value></con:property></con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00013_DeviceGet_RetailerCS_FUNC_with_NULL AccountID" searchProperties="true" id="6c2a4c17-f4cd-45ce-b0ee-d4af9965646f">
      <con:description>This test case will verify that Application Tier properly handles a DeviceGet request when invoked with the GET method and Invalid Account ID in request .

Expected Result:

System should return an Error message.</con:description>
      <con:settings/>
      <con:testStep type="groovy" name="Verify Node User SAML Asssertion" disabled="true">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.model.testsuite.TestRunner.Status


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def ValSamlAssertion = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Validate SAML Assertion");

	ValSamlAssertion.setPropertyValue("TCaseName",testCase.getName());
	ValSamlAssertion.setPropertyValue("TSuiteName",testSuite.getName());

	def runnerTc = ValSamlAssertion.run( null , false )
	assert runnerTc.status == Status.FINISHED;

	rcUUID = testCase.getPropertyValue("rcUUID");

	if (runnerTc.status != Status.FINISHED || rcUUID.toInteger()!= 1){

			
		testCase.setPropertyValue("nodetype","device");
		testCase.setPropertyValue("nodeid","0701");
		testCase.setPropertyValue("audienceNodeid","0702");
		testCase.setPropertyValue("username","sch-drm_user1");
		testCase.setPropertyValue("password","Password1");
		testCase.setPropertyValue("accountoid",null);
		testCase.setPropertyValue("useroid",null);
		testCase.setPropertyValue("assertid",null);
		testCase.setPropertyValue("SAMLassertion",null);
		testCase.setPropertyValue("tokentype","urn:dece:type:tokentype:usernamepassword");
		testCase.setPropertyValue("loopuntil","25");
		testCase.setPropertyValue("expectErrTypeSTS","SUCCESS");
		testCase.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
			
		log.info " SAML Assertion Expired ! re-generating Assertion";
		def RunSTS = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get SAML Assertion - STS")

				RunSTS.setPropertyValue("TCaseName",testCase.getName());
				RunSTS.setPropertyValue("TSuiteName",testSuite.getName());

				def runnerSTS = RunSTS.run( null , false )

				assert runnerSTS.status == Status.FINISHED;

		}</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call LicAppCreate Request with Valid Data" disabled="true">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0");
testCase.setPropertyValue("expectErrTypeLAC","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedDeviceDDReq = testProject.getTestSuiteByName("Staging DeviceGet").getTestCaseByName("LicAppCreate Request");

FeedDeviceDDReq.setPropertyValue("TCaseName",testCase.getName());
FeedDeviceDDReq.setPropertyValue("TSuiteName",testSuite.getName());


def runnerTC = FeedDeviceDDReq.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Feed DeviceGet Request with Invalid AccountID">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


// setup Retailer CS Nodeid with the account
testCase.setPropertyValue("NodeID","0702");


//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("SAMLassertion","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");
testCase.setPropertyValue("assertionUUID","_87aa3e8d-2de2-46dd-b572-414003e22e9a");
testCase.setPropertyValue("username","firstfullusername_20130612_06223");
testCase.setPropertyValue("password","testing");
testCase.setPropertyValue("accountoid","DEF5738E543B633AE0401F0A05990CC0");
testCase.setPropertyValue("useroid","DEF5738E544A633AE0401F0A05990CC0");
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:");
testCase.setPropertyValue("DeviceID","urn:dece:deviceid:org:dece:DEF585C6AEA11471E0401F0A07994634");
testCase.setPropertyValue("DomainID","urn:dece:domainid:dece:DEF587A47AF1508CE0401F0A07994D03");
testCase.setPropertyValue("expectErrType","ACCOUNTID NOT MATCH");
testCase.setPropertyValue("ErrorDataVal","1");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedRTLReq = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request");

FeedRTLReq.setPropertyValue("TCaseName",testCase.getName());
FeedRTLReq.setPropertyValue("TSuiteName",testSuite.getName());

WsdlTestCaseRunner TSrunner = new WsdlTestCaseRunner( FeedRTLReq, null );

TSrunner.runTestStepByName("Get the DeviceGet Properties");
TSrunner.runTestStepByName("pem set");
assert TSrunner.status == Status.INITIALIZED;</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call DeviceGet Request">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )

WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );

TSrunnerRTC.runTestStepByName("DeviceGetRequest");

assert TSrunnerRTC.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract DeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Extract DeviceGet Information")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify theDeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Response Validation")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SAMLExpDate</con:name>
          <con:value>2013-06-14 18:31:45.0</con:value>
        </con:property>
        <con:property>
          <con:name>rcUUID</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>nodetype</con:name>
          <con:value>device</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>0702</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>firstfullusername_20130612_06223</con:value>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>testing</con:value>
        </con:property>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">DEF5738E543B633AE0401F0A05990CC0</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">DEF5738E544A633AE0401F0A05990CC0</con:value>
        </con:property>
        <con:property>
          <con:name>assertid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SAMLassertion</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">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</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>loopuntil</con:name>
          <con:value>25</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTS</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value>_87aa3e8d-2de2-46dd-b572-414003e22e9a</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value>urn:dece:userid:org:dece:A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value>A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value>urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value>A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>AccountID</con:name>
          <con:value>urn:dece:accountid:org:dece:</con:value>
        </con:property>
        <con:property>
          <con:name>ErrorDataVal</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>ACCOUNTID NOT MATCH</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetReqXml</con:name>
          <con:value>User-Agent: Apache-HttpClient/4.1.1 (java 1.5)
</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResXml</con:name>
          <con:value><![CDATA[<ErrorList xmlns="http://www.decellc.org/schema/2010/10/dece" xmlns:ns2="http://www.movielabs.com/schema/md/v1.07/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Error ErrorID="urn:dece:errorid:org:dece:AccountIdUnmatched">
      <Reason Language="en">Request Account ID not match</Reason>
      <OriginalRequest>https://qa.q.uvvu.com:7001/rest/1/0/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3A/Domain/urn%3Adece%3Adomainid%3Adece%3AA09DA589BD63A036E0401F0A05996D9A/Device/urn%3Adece%3Adeviceid%3Aorg%3Adece%3AA09D9C22F11CBC6DE0401F0A05996898</OriginalRequest>
      <ErrorLink>https://qa.q.uvvu.com:7001/rest/1/0/error/en/ErrorList.html#AccountIdUnmatched</ErrorLink>
   </Error>
</ErrorList>]]></con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResTime</con:name>
          <con:value>204</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetID</con:name>
          <con:value>Request Account ID not matchhttps://qa.q.uvvu.com:7001/rest/1/0/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3A/Device/urn%3Adece%3Adeviceid%3Aorg%3Adece%3AA09D9C22F11CBC6DE0401F0A05996898/DECEDomainhttps://qa.q.uvvu.com:7001/rest/1/0/error/en/ErrorList.html#AccountIdUnmatched</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceID</con:name>
          <con:value>urn:dece:deviceid:org:dece:DEF585C6AEA11471E0401F0A07994634</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeDVGGet</con:name>
          <con:value>ACCOUNTID NOT MATCH</con:value>
        </con:property>
        <con:property>
          <con:name>DomainID</con:name>
          <con:value>urn:dece:domainid:dece:DEF587A47AF1508CE0401F0A07994D03</con:value>
        </con:property>
      <con:property><con:name>audienceNodeid</con:name><con:value>0702</con:value></con:property></con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00014_DeviceGet_RetailerCS_FUNC_with_NULL_ DeviceID" searchProperties="true" id="48fccb8d-1b54-4fa6-9f72-14d35c334bcc" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="">
      <con:description>This test case will verify that Application Tier properly handles a DeviceGet request when invoked with the GET method and Invalid Account ID in request .

Expected Result:

System should return an Error message.</con:description>
      <con:settings/>
      <con:testStep type="groovy" name="Verify Node User SAML Asssertion" disabled="true">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.model.testsuite.TestRunner.Status


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def ValSamlAssertion = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Validate SAML Assertion");

	ValSamlAssertion.setPropertyValue("TCaseName",testCase.getName());
	ValSamlAssertion.setPropertyValue("TSuiteName",testSuite.getName());

	def runnerTc = ValSamlAssertion.run( null , false )
	assert runnerTc.status == Status.FINISHED;

	rcUUID = testCase.getPropertyValue("rcUUID");

	if (runnerTc.status != Status.FINISHED || rcUUID.toInteger()!= 1){

			
		testCase.setPropertyValue("nodetype","device");
		testCase.setPropertyValue("nodeid","0701");
		testCase.setPropertyValue("audienceNodeid","0702");
		testCase.setPropertyValue("username","sch-drm_user1");
		testCase.setPropertyValue("password","Password1");
		testCase.setPropertyValue("accountoid",null);
		testCase.setPropertyValue("useroid",null);
		testCase.setPropertyValue("assertid",null);
		testCase.setPropertyValue("SAMLassertion",null);
		testCase.setPropertyValue("tokentype","urn:dece:type:tokentype:usernamepassword");
		testCase.setPropertyValue("loopuntil","25");
		testCase.setPropertyValue("expectErrTypeSTS","SUCCESS");
		testCase.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
			
		log.info " SAML Assertion Expired ! re-generating Assertion";
		def RunSTS = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get SAML Assertion - STS")

				RunSTS.setPropertyValue("TCaseName",testCase.getName());
				RunSTS.setPropertyValue("TSuiteName",testSuite.getName());

				def runnerSTS = RunSTS.run( null , false )

				assert runnerSTS.status == Status.FINISHED;

		}</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call LicAppCreate Request with Valid Data" disabled="true">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0");
testCase.setPropertyValue("expectErrTypeLAC","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedDeviceDDReq = testProject.getTestSuiteByName("Staging DeviceGet").getTestCaseByName("LicAppCreate Request");

FeedDeviceDDReq.setPropertyValue("TCaseName",testCase.getName());
FeedDeviceDDReq.setPropertyValue("TSuiteName",testSuite.getName());


def runnerTC = FeedDeviceDDReq.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Feed DeviceGet Request with Invalid DeviceID">
        <con:settings/>
        <con:config><script> import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//DeviceGet Request and properties

// setup Retailer CS Nodeid with the account
testCase.setPropertyValue("NodeID","0702");

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("SAMLassertion","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");
testCase.setPropertyValue("assertionUUID","_87aa3e8d-2de2-46dd-b572-414003e22e9a");
testCase.setPropertyValue("username","firstfullusername_20130612_06223");
testCase.setPropertyValue("password","testing");
testCase.setPropertyValue("accountoid","DEF5738E543B633AE0401F0A05990CC0");
testCase.setPropertyValue("useroid","DEF5738E544A633AE0401F0A05990CC0");
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:DEF5738E543A633AE0401F0A05990CC0");
testCase.setPropertyValue("DeviceID","urn:dece:deviceid:org:dece:");
testCase.setPropertyValue("DomainID","urn:dece:domainid:dece:DEF587A47AF1508CE0401F0A07994D03");
testCase.setPropertyValue("ErrorDataVal","1");
testCase.setPropertyValue("expectErrType","DEVICEID_NOT_FOUND");

// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedRTLReq = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request");

FeedRTLReq.setPropertyValue("TCaseName",testCase.getName());
FeedRTLReq.setPropertyValue("TSuiteName",testSuite.getName());

WsdlTestCaseRunner TSrunner = new WsdlTestCaseRunner( FeedRTLReq, null );

TSrunner.runTestStepByName("Get the DeviceGet Properties");
TSrunner.runTestStepByName("pem set");
assert TSrunner.status == Status.INITIALIZED;</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call DeviceGet Request">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )

WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );

TSrunnerRTC.runTestStepByName("DeviceGetRequest");

assert TSrunnerRTC.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract DeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Extract DeviceGet Information")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify theDeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Response Validation")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Reset DeviceID"><con:settings/><con:config><script> import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//DeviceGet Request and properties

// setup Retailer CS Nodeid with the account
testCase.setPropertyValue("NodeID","0702");

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("SAMLassertion","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");
testCase.setPropertyValue("assertionUUID","_87aa3e8d-2de2-46dd-b572-414003e22e9a");
testCase.setPropertyValue("username","firstfullusername_20130612_06223");
testCase.setPropertyValue("password","testing");
testCase.setPropertyValue("accountoid","DEF5738E543B633AE0401F0A05990CC0");
testCase.setPropertyValue("useroid","DEF5738E544A633AE0401F0A05990CC0");
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:DEF5738E543A633AE0401F0A05990CC0");
testCase.setPropertyValue("DeviceID","urn:dece:deviceid:org:dece:DEF585C6AEA11471E0401F0A07994634");
testCase.setPropertyValue("DomainID","urn:dece:domainid:dece:DEF587A47AF1508CE0401F0A07994D03");
testCase.setPropertyValue("ErrorDataVal","0");
testCase.setPropertyValue("expectErrType","DEVICEID_NOT_FOUND");

// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedRTLReq = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request");

FeedRTLReq.setPropertyValue("TCaseName",testCase.getName());
FeedRTLReq.setPropertyValue("TSuiteName",testSuite.getName());

WsdlTestCaseRunner TSrunner = new WsdlTestCaseRunner( FeedRTLReq, null );

TSrunner.runTestStepByName("Get the DeviceGet Properties");
TSrunner.runTestStepByName("pem set");
assert TSrunner.status == Status.INITIALIZED;</script></con:config></con:testStep><con:properties>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SAMLExpDate</con:name>
          <con:value>2013-06-14 18:31:45.0</con:value>
        </con:property>
        <con:property>
          <con:name>rcUUID</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>nodetype</con:name>
          <con:value>device</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>0702</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>firstfullusername_20130612_06223</con:value>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>testing</con:value>
        </con:property>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">DEF5738E543B633AE0401F0A05990CC0</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">DEF5738E544A633AE0401F0A05990CC0</con:value>
        </con:property>
        <con:property>
          <con:name>assertid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SAMLassertion</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">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</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>loopuntil</con:name>
          <con:value>25</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTS</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value>_87aa3e8d-2de2-46dd-b572-414003e22e9a</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value>urn:dece:userid:org:dece:A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value>A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value>urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value>A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>AccountID</con:name>
          <con:value>urn:dece:accountid:org:dece:DEF5738E543A633AE0401F0A05990CC0</con:value>
        </con:property>
        <con:property>
          <con:name>ErrorDataVal</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>DEVICEID_NOT_FOUND</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetReqXml</con:name>
          <con:value>User-Agent: Apache-HttpClient/4.1.1 (java 1.5)
</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResXml</con:name>
          <con:value><![CDATA[<ErrorList xmlns="http://www.decellc.org/schema/2010/10/dece" xmlns:ns2="http://www.movielabs.com/schema/md/v1.07/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Error ErrorID="urn:dece:errorid:org:dece:DeviceIdInvalid">
      <Reason Language="en">Device ID Invalid.</Reason>
      <OriginalRequest>https://qa.q.uvvu.com:7001/rest/1/0/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3AA06A9AA49F6E73D7E0401F0A059915F0/Domain/urn%3Adece%3Adomainid%3Adece%3AA09DA589BD63A036E0401F0A05996D9A/Device/urn%3Adece%3Adeviceid%3Aorg%3Adece%3A</OriginalRequest>
      <ErrorLink>https://qa.q.uvvu.com:7001/rest/1/0/error/en/ErrorList.html#DeviceIdInvalid</ErrorLink>
   </Error>
</ErrorList>]]></con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResTime</con:name>
          <con:value>233</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetID</con:name>
          <con:value>Device ID Invalid.https://qa.q.uvvu.com:7001/rest/1/0/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3AA06A9AA49F6E73D7E0401F0A059915F0/Device/urn%3Adece%3Adeviceid%3Aorg%3Adece%3A/DECEDomainhttps://qa.q.uvvu.com:7001/rest/1/0/error/en/ErrorList.html#DeviceIdInvalid</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceID</con:name>
          <con:value>urn:dece:deviceid:org:dece:DEF585C6AEA11471E0401F0A07994634</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeDVGGet</con:name>
          <con:value>ACCOUNTID NOT MATCH</con:value>
        </con:property>
        <con:property>
          <con:name>DomainID</con:name>
          <con:value>urn:dece:domainid:dece:DEF587A47AF1508CE0401F0A07994D03</con:value>
        </con:property>
      <con:property><con:name>audienceNodeid</con:name><con:value>0702</con:value></con:property></con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00015_DeviceGet_RetailerCS_FUNC_Verify_DECE_DomainID_associated to Account" searchProperties="true" id="4a645abb-57c7-4ed7-8f7f-83e0be4645a9">
      <con:description>This test case will verify that Application Tier properly handles a DeviceGet request when invoked with the GET method and valid header request .

Expected Result:

System should return successful message.</con:description>
      <con:settings/>
      <con:testStep type="groovy" name="Verify Node User SAML Asssertion" disabled="true">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.model.testsuite.TestRunner.Status


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def ValSamlAssertion = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Validate SAML Assertion");

	ValSamlAssertion.setPropertyValue("TCaseName",testCase.getName());
	ValSamlAssertion.setPropertyValue("TSuiteName",testSuite.getName());

	def runnerTc = ValSamlAssertion.run( null , false )
	assert runnerTc.status == Status.FINISHED;

	rcUUID = testCase.getPropertyValue("rcUUID");

	if (runnerTc.status != Status.FINISHED || rcUUID.toInteger()!= 1){

			
		testCase.setPropertyValue("nodetype","device");
		testCase.setPropertyValue("nodeid","0701");
		testCase.setPropertyValue("audienceNodeid","0702");
		testCase.setPropertyValue("username","sch-drm_user1");
		testCase.setPropertyValue("password","Password1");
		testCase.setPropertyValue("accountoid",null);
		testCase.setPropertyValue("useroid",null);
		testCase.setPropertyValue("assertid",null);
		testCase.setPropertyValue("SAMLassertion",null);
		testCase.setPropertyValue("tokentype","urn:dece:type:tokentype:usernamepassword");
		testCase.setPropertyValue("loopuntil","25");
		testCase.setPropertyValue("expectErrTypeSTS","SUCCESS");
		testCase.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
			
		log.info " SAML Assertion Expired ! re-generating Assertion";
		def RunSTS = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get SAML Assertion - STS")

				RunSTS.setPropertyValue("TCaseName",testCase.getName());
				RunSTS.setPropertyValue("TSuiteName",testSuite.getName());

				def runnerSTS = RunSTS.run( null , false )

				assert runnerSTS.status == Status.FINISHED;

		}</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call LicAppCreate Request with Valid Data" disabled="true">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0");
testCase.setPropertyValue("expectErrTypeLAC","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedDeviceDDReq = testProject.getTestSuiteByName("Staging DeviceGet").getTestCaseByName("LicAppCreate Request");

FeedDeviceDDReq.setPropertyValue("TCaseName",testCase.getName());
FeedDeviceDDReq.setPropertyValue("TSuiteName",testSuite.getName());


def runnerTC = FeedDeviceDDReq.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call DeviceUpdate Request for evict Cache" id="c60718fa-08e6-43c2-9673-1f8c54345450">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )
WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );


TSrunnerRTC.runTestStepByName("DeviceUpdateRequest");

assert TSrunnerRTC.status == Status.INITIALIZED;</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Feed DeviceGet Request with Valid Data">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

// setup Retailer CS Nodeid with the account
testCase.setPropertyValue("NodeID","0702");


//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("SAMLassertion","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");
testCase.setPropertyValue("assertionUUID","_87aa3e8d-2de2-46dd-b572-414003e22e9a");
testCase.setPropertyValue("username","firstfullusername_20130612_06223");
testCase.setPropertyValue("password","testing");
testCase.setPropertyValue("accountoid","DEF5738E543B633AE0401F0A05990CC0");
testCase.setPropertyValue("useroid","DEF5738E544A633AE0401F0A05990CC0");
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:DEF5738E543A633AE0401F0A05990CC0");
testCase.setPropertyValue("DeviceID","urn:dece:deviceid:org:dece:DEF585C6AEA11471E0401F0A07994634");
testCase.setPropertyValue("DomainID","urn:dece:domainid:dece:DEF587A47AF1508CE0401F0A07994D03");
testCase.setPropertyValue("expectErrType","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedRTLReq = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request");

FeedRTLReq.setPropertyValue("TCaseName",testCase.getName());
FeedRTLReq.setPropertyValue("TSuiteName",testSuite.getName());

WsdlTestCaseRunner TSrunner = new WsdlTestCaseRunner( FeedRTLReq, null );

TSrunner.runTestStepByName("Get the DeviceGet Properties");
TSrunner.runTestStepByName("pem set");
assert TSrunner.status == Status.INITIALIZED;</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call DeviceGet Request">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )

WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );

TSrunnerRTC.runTestStepByName("DeviceGetRequest");

assert TSrunnerRTC.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract DeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Extract DeviceGet Information")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify theDeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Response Validation")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify the DeviceGet Response against DB Result">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGdataVal = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Data Validation");

RTGdataVal.setPropertyValue("TCaseName",testCase.getName());
RTGdataVal.setPropertyValue("TSuiteName",testSuite.getName());


def runnerRTC = RTGdataVal.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SAMLExpDate</con:name>
          <con:value>2013-06-14 18:31:45.0</con:value>
        </con:property>
        <con:property>
          <con:name>rcUUID</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>nodetype</con:name>
          <con:value>device</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>0702</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>firstfullusername_20130612_06223</con:value>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>testing</con:value>
        </con:property>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">DEF5738E543B633AE0401F0A05990CC0</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">DEF5738E544A633AE0401F0A05990CC0</con:value>
        </con:property>
        <con:property>
          <con:name>assertid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SAMLassertion</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">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</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>loopuntil</con:name>
          <con:value>25</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTS</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value>_87aa3e8d-2de2-46dd-b572-414003e22e9a</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value>urn:dece:userid:org:dece:A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value>A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value>urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value>A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>AccountID</con:name>
          <con:value>urn:dece:accountid:org:dece:DEF5738E543A633AE0401F0A05990CC0</con:value>
        </con:property>
        <con:property>
          <con:name>ErrorDataVal</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetReqXml</con:name>
          <con:value>User-Agent: Apache-HttpClient/4.1.1 (java 1.5)
</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResXml</con:name>
          <con:value><![CDATA[<Device IsLegacy="false" DeviceID="urn:dece:deviceid:org:dece:A09D9C22F11CBC6DE0401F0A05996898" xmlns="http://www.decellc.org/schema/2010/10/dece" xmlns:ns2="http://www.movielabs.com/schema/md/v1.07/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <DisplayName>DeviceInfoDisplayName</DisplayName>
   <Manufacturer>Microsoft</Manufacturer>
   <Model>V344</Model>
   <Brand Language="en-US">DeviceInfoBrand</Brand>
   <SerialNo>123432442323424</SerialNo>
   <Image MimeType="MimeType3" Width="50" Height="50">http://www.oxygenxml.com/1234</Image>
   <LicAppID>urn:dece:licappid:org:dece:A09D9C22F11EBC6DE0401F0A05996898</LicAppID>
   <DRMClientID>urn:dece:drmclientid:org:dece:A0E2E4B822DB1B7CE0401F0A07994404</DRMClientID>
   <ResourceStatus>
      <Current CreatedBy="urn:dece:org:org:dece:0701" CreationDate="2011-04-11T04:02:39.637Z">
         <Value>urn:dece:type:status:pending</Value>
         <Description>Device Created</Description>
      </Current>
   </ResourceStatus>
</Device>]]></con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResTime</con:name>
          <con:value>442</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetID</con:name>
          <con:value>A09DA589BD63A036E0401F0A05996D9A</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceID</con:name>
          <con:value>urn:dece:deviceid:org:dece:DEF585C6AEA11471E0401F0A07994634</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeDVGGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>SqlStr</con:name>
          <con:value>select Status from USER_STATUS_REF where Status !='active'</con:value>
        </con:property>
        <con:property>
          <con:name>DomainID</con:name>
          <con:value>urn:dece:domainid:dece:DEF587A47AF1508CE0401F0A07994D03</con:value>
        </con:property>
      <con:property><con:name>audienceNodeid</con:name><con:value>0702</con:value></con:property><con:property><con:name>ETag</con:name><con:value>"E940C44587792883E0401F0A07992B67:F0246DC7"</con:value></con:property><con:property><con:name>Last-Modified</con:name><con:value>Mon, 21 Oct 2013 12:54:45 GMT</con:value></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>c60718fa-08e6-43c2-9673-1f8c54345450</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00016_DeviceGet_RetailerCS_FUNC_Verify_DeviceID_Belongs_to_Account" searchProperties="true" disabled="true">
      <con:description>This test case will verify that Application Tier properly handles a DeviceGet request when invoked with the GET method and Invalid Account ID in request .

Expected Result:

System should return an Error message.</con:description>
      <con:settings/>
      <con:testStep type="groovy" name="Verify Node User SAML Asssertion">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.model.testsuite.TestRunner.Status


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def ValSamlAssertion = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Validate SAML Assertion");

	ValSamlAssertion.setPropertyValue("TCaseName",testCase.getName());
	ValSamlAssertion.setPropertyValue("TSuiteName",testSuite.getName());

	def runnerTc = ValSamlAssertion.run( null , false )
	assert runnerTc.status == Status.FINISHED;

	rcUUID = testCase.getPropertyValue("rcUUID");

	if (runnerTc.status != Status.FINISHED || rcUUID.toInteger()!= 1){

			
		testCase.setPropertyValue("nodetype","device");
		testCase.setPropertyValue("nodeid","0701");
		testCase.setPropertyValue("username","sch-drm_user1");
		testCase.setPropertyValue("password","Password1");
		testCase.setPropertyValue("accountoid",null);
		testCase.setPropertyValue("useroid",null);
		testCase.setPropertyValue("assertid",null);
		testCase.setPropertyValue("SAMLassertion",null);
		testCase.setPropertyValue("tokentype","urn:dece:type:tokentype:usernamepassword");
		testCase.setPropertyValue("loopuntil","25");
		testCase.setPropertyValue("expectErrTypeSTS","SUCCESS");
		testCase.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
			
		log.info " SAML Assertion Expired ! re-generating Assertion";
		def RunSTS = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get SAML Assertion - STS")

				RunSTS.setPropertyValue("TCaseName",testCase.getName());
				RunSTS.setPropertyValue("TSuiteName",testSuite.getName());

				def runnerSTS = RunSTS.run( null , false )

				assert runnerSTS.status == Status.FINISHED;

		}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call LicAppCreate Request with Valid Data" disabled="true">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0");
testCase.setPropertyValue("expectErrTypeLAC","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedDeviceDDReq = testProject.getTestSuiteByName("Staging DeviceGet").getTestCaseByName("LicAppCreate Request");

FeedDeviceDDReq.setPropertyValue("TCaseName",testCase.getName());
FeedDeviceDDReq.setPropertyValue("TSuiteName",testSuite.getName());


def runnerTC = FeedDeviceDDReq.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Feed DeviceGet Request with Invalid DeviceID">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


// setup Retailer CS Nodeid with the account
testCase.setPropertyValue("NodeID","0702");


//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0");
testCase.setPropertyValue("DeviceID","urn:dece:deviceid:org:dece:A04559CE239D84F3E0401F0A07993907");
testCase.setPropertyValue("DomainID","urn:dece:domainid:dece:A09DA589BD63A036E0401F0A05996D9A");
testCase.setPropertyValue("expectErrType","DEVICEID_NOT_FOUND");
testCase.setPropertyValue("ErrorDataVal","1");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedRTLReq = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request");

FeedRTLReq.setPropertyValue("TCaseName",testCase.getName());
FeedRTLReq.setPropertyValue("TSuiteName",testSuite.getName());

WsdlTestCaseRunner TSrunner = new WsdlTestCaseRunner( FeedRTLReq, null );

TSrunner.runTestStepByName("Get the DeviceGet Properties");
TSrunner.runTestStepByName("pem set");
assert TSrunner.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call DeviceGet Request">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )

WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );

TSrunnerRTC.runTestStepByName("DeviceGetRequest");

assert TSrunnerRTC.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract DeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Extract DeviceGet Information")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify theDeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Response Validation")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SAMLExpDate</con:name>
          <con:value>2012-04-18 16:10:01.0</con:value>
        </con:property>
        <con:property>
          <con:name>rcUUID</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>nodetype</con:name>
          <con:value>device</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>0701</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>sch-drm_user1</con:value>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>Password1</con:value>
        </con:property>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">A06A9AA49F7073D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">A06A9AA49F7973D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SAMLassertion</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">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</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>loopuntil</con:name>
          <con:value>25</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTS</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value>e904f17a-ad06-4408-b651-09f88237af01</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value>urn:dece:userid:org:dece:A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value>A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value>urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value>A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>AccountID</con:name>
          <con:value>urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>ErrorDataVal</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>DEVICEID_NOT_FOUND</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetReqXml</con:name>
          <con:value>Host: qa.q.uvvu.com:7001</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResXml</con:name>
          <con:value><![CDATA[<Device IsLegacy="false" DeviceID="urn:dece:deviceid:org:dece:A04559CE239D84F3E0401F0A07993907" xmlns="http://www.decellc.org/schema/2010/10/dece" xmlns:ns2="http://www.movielabs.com/schema/md/v1.07/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <DisplayName>DeviceInfoDisplayName</DisplayName>
   <Manufacturer>DeviceInfoManufacturer</Manufacturer>
   <Model>DeviceInfoModel</Model>
   <Brand Language="en-US">DeviceInfoBrand</Brand>
   <SerialNo>DeviceInfoSerialNo</SerialNo>
   <Image MimeType="MimeType3" Width="50" Height="50">http://www.oxygenxml.com/</Image>
   <LicAppID>urn:dece:licappid:org:dece:A04559CE239F84F3E0401F0A07993907</LicAppID>
   <ResourceStatus>
      <Current CreatedBy="urn:dece:org:org:dece:1397" CreationDate="2011-04-06T19:02:37.674Z">
         <Value>urn:dece:type:status:pending</Value>
         <Description>Device Created</Description>
      </Current>
   </ResourceStatus>
</Device>]]></con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResTime</con:name>
          <con:value>183</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetID</con:name>
          <con:value>Device ID Invalid.https://qa.q.uvvu.com:7001/rest/1/0/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3AA06A9AA49F6E73D7E0401F0A059915F0/Device/urn%3Adece%3Adeviceid%3Aorg%3Adece%3A/DECEDomainhttps://qa.q.uvvu.com:7001/rest/1/0/error/en/ErrorList.html#DeviceIdInvalid</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceID</con:name>
          <con:value>urn:dece:deviceid:org:dece:A04559CE239D84F3E0401F0A07993907</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeDVGGet</con:name>
          <con:value>ACCOUNTID NOT MATCH</con:value>
        </con:property>
        <con:property>
          <con:name>DomainID</con:name>
          <con:value>urn:dece:domainid:dece:A09DA589BD63A036E0401F0A05996D9A</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00017_DeviceGet_RetailerCS_FUNC_with_Verify_Device_Info" searchProperties="true" id="a8ad1a9e-26b6-493c-b42e-74a30a5e6aa3">
      <con:description>This test case will verify that Application Tier properly handles a DeviceGet request when invoked with the GET method and valid header request .

Expected Result:

System should return successful message.</con:description>
      <con:settings/>
      <con:testStep type="groovy" name="Verify Node User SAML Asssertion" disabled="true">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.model.testsuite.TestRunner.Status


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def ValSamlAssertion = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Validate SAML Assertion");

	ValSamlAssertion.setPropertyValue("TCaseName",testCase.getName());
	ValSamlAssertion.setPropertyValue("TSuiteName",testSuite.getName());

	def runnerTc = ValSamlAssertion.run( null , false )
	assert runnerTc.status == Status.FINISHED;

	rcUUID = testCase.getPropertyValue("rcUUID");

	if (runnerTc.status != Status.FINISHED || rcUUID.toInteger()!= 1){

			
		testCase.setPropertyValue("nodetype","retailer");
		testCase.setPropertyValue("nodeid","0701");
		testCase.setPropertyValue("audienceNodeid","0702");
		testCase.setPropertyValue("username","sch-drm_user1");
		testCase.setPropertyValue("password","Password1");
		testCase.setPropertyValue("accountoid",null);
		testCase.setPropertyValue("useroid",null);
		testCase.setPropertyValue("assertid",null);
		testCase.setPropertyValue("SAMLassertion",null);
		testCase.setPropertyValue("tokentype","urn:dece:type:tokentype:usernamepassword");
		testCase.setPropertyValue("loopuntil","25");
		testCase.setPropertyValue("expectErrTypeSTS","SUCCESS");
		testCase.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
			
		log.info " SAML Assertion Expired ! re-generating Assertion";
		def RunSTS = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get SAML Assertion - STS")

				RunSTS.setPropertyValue("TCaseName",testCase.getName());
				RunSTS.setPropertyValue("TSuiteName",testSuite.getName());

				def runnerSTS = RunSTS.run( null , false )

				assert runnerSTS.status == Status.FINISHED;

		}</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call LicAppCreate Request with Valid Data" disabled="true">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0");
testCase.setPropertyValue("expectErrTypeLAC","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedDeviceDDReq = testProject.getTestSuiteByName("Staging DeviceGet").getTestCaseByName("LicAppCreate Request");

FeedDeviceDDReq.setPropertyValue("TCaseName",testCase.getName());
FeedDeviceDDReq.setPropertyValue("TSuiteName",testSuite.getName());


def runnerTC = FeedDeviceDDReq.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call DeviceUpdate Request for evict Cache" id="5de99702-605c-4703-8d1c-76b86a95897d">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )
WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );


TSrunnerRTC.runTestStepByName("DeviceUpdateRequest");

assert TSrunnerRTC.status == Status.INITIALIZED;</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Feed DeviceGet Request with Valid Data">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


// setup Retailer CS Nodeid with the account
testCase.setPropertyValue("NodeID","0702");


//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("SAMLassertion","nVdpc6pKE/7ur7A8Hy3D5oaVpGpYVFRUBBf4cgthQJRNBgT99e9gosfk5OTNvVWpitP0dD+9TM8zz8gMfLoHEIJJ6kVhVRJeav90O6bJwK7doG1IN5pt225sWx38i2qSJANpGrJmrSohlEEpRKkZpi81mqSYBtluULRG0b0W/us8teiWUauuYIKwaazyRNaqReCHqHd1+1LLkrAXmchDvdAMIOqlVk8F8qSHNXvmDVPt9fkN5dVh8rpL07hHENaTDS3o+9aTFQXEM/FB59lGPdVzQzPNEvju00Yvtfe9eZ4/5cxTlLgETZIkQbIE1rGR5/6qvVZum6EthU70tubNMAo9y/S9i1mCkmG6i+wq8N0o8dJd8BfTFEGRpekGLKyGRTXDXzXit4Mruh9a+gAyQWYD7UzqZmwBHZjA0ILV5UJ6qf36WQXf9mqJGSInSgL0af3vIMHwBP0ohnYD3SK7ofu5xS/S9foMrZ4UWn6GvBOclm0SmxZE1XkCHa+YeAg3n42q1/JXC3TrMGj9m5I8E484MWzii8wIngtR+l/q9VirNysr08/gq21mCa/b9XV97ygnlx7F2oISl1R/3ny5QnhUfgN1L/X7+nOj3vvqfdOM2pOh49gXXZ/wW2FjCqrVFYB4ljVrZguTyBLlBaHKmXiM18TUTLlwNerE9TUKDD50wvO+OwQrekAeh3wFjQb1UUtZzdqbZHieZ8SO6vDCkNWngQ62QE1jbhAoBKH2SX5jaEzfG6oTn0W6fCHcgrH7zNHY8ItseZaTysxDLe4wlFOvXU8ulA4P0svvmB5jKOMaw/M1yPL3pkWygpma9wVfTgoHH88UvsqSxNcFngeQd0EuccCVuMkFTDn3cNwdvAGbkxxQln0ggLO8ALng6sJKUcZibq9WvrGS+n1OXjTzIdCFCv4giMVKMDYj0lwbsU73SUPlOHuziLbMKLaHh3y4s6ayJudTTTrLe7GYaiK5vsrcAq8v8l6mZtqSqaz3HCsvxFzIrx4FMd9NjfUi1pdsbl1ERQbNAaCWIr+Th1qwoixmsbP24kQGh6uc28n8aiUXogbmFc6drnBsGt83Yiuw423g7x6MD7FxzR6sztuBnxkXcS/z4oBXjwNV2jKCIo7AQl9u16uDue6fKtZwCrY3j17LMzdR7hrdXFD00TgypN3JmgJF5DgF4HSRQJYGIxANOCA3gVdc+D3Xjni7nxMjGlXqrD9ob87ecYPMAembVLdL6ZN1e35sC2JYN8bZdr+Td5v+rD5W7dOSTdmLjk71U9v0KKuIHWUjDtNx4QwVtbKdC8XGGtZtd0T4F7afyJ0RSC7nnS+7i3TdnqHz1nOcNbeZNf2O48vMInZ8Jz6juhYph4Rsc5ChCf18GqcV4MocAIP9cs8pMtctk2pLuaLLnAn6YpqBy55Ox/TqOBqefEtnQFSM17P94b0wtpCLHJErIm4rsYIPkV0WYaguxf4eLDnXTThX7HOKJQBFl8a5jvO1HGLlz3nsX/PoihwQGQO02WGFWZJsOkvVZhOcQ24Z9tmdfCzWdjsgO0coTtRp3MxlNHVCYx0d5MBLlkmmLsfj6aTYatngsMezyiHV8YkxKuLpEANvOtZ2ByESzHms62lcD63ESqU4kKXiMjPQvuttA3JUb1HcnBSsDr0MtvlyYIrGOHFVajxchHOmw1ZQ5pyHQX3fzdd1TW3HHRtPBeF8JoxkRUYg6rOL1tEuaPqwW+aTdu6MwGFr0tPCZ7kzK44NzcoXynitBvVWpXWaTALyohHNaTzL1UHeFBWlzticNtRQnHh61nWLZBbatG6m7ZNBrtpe7B9YOjtozZhZuQEu1vxkxx15XlGaG8sI3E5sjYgFcQJix5lIg/P2Yl7iYGa9DdDP0+EufJsfxONk+TB6bqRDxd0KrfS2LC8gSaj28a1gpt8TmFLi2Q3nqtqLSxaEUhimtddyV0leehmmOJ7dw1fG21oQ+60O0xVbzSbbZhggkk2S6pOAbLEsyfPkjeW8ofgEkY9Cxyt9lTzu7Zb6HqAV9BAMbZg0TlFm7SCqfWOxzFdVChf4+o1CBLUI88Qmy5M0wwhsk+pwQOgIFMOKtMCSNM93WoCvVadROgtnCXBSmHzkiK0PHHEBLS/2YEkk329TlOKMHM1TlvrU08l8CmGGmWZSkr0e3ey2COQFsQ9LvIQfuV5IzGeq9hTv4ut1/tc4Pn+7hYx1bK9UQCVoDuKywS9YbfOG+I/Iml+y35t5kNleeWvj/KWJZ70h+fjpd1uU/XDvCbJD0jfMd9Ufb6X+3Ep8g4j4nIy7J/vkPfi9cXNMNzEhuVJyhIt2NJ+OT9nplF3L1CnJVoLNExRBtgkVWhlmTGctOsCQuJsgfkRW76g/eb7LP+LL0l2opvjAB7inqtflD14qKkTlS0XCZ6L46TPog0uctxQW6Vcy3scPmhLxt28eq2eVelg8x//yKLF/l+sLWw9+cJzlhPNCt1yV1PT8l66wImzWw1MuSh6Nf2XgK+cfhfck37GkuJu2WQr//qVajq+XmmlZURamklC7Ch5H6hVneo5h77fSH2au5PCd7Rfor2x/I09UPNwCs3bX9f6/csO7tosF8S7kXbG81Ar8cMXOQ/dhhL8D/HqKM+C7Kf4xktc/xH9KHnL6+Ty8/g8=");
testCase.setPropertyValue("assertionUUID","_87aa3e8d-2de2-46dd-b572-414003e22e9a");
testCase.setPropertyValue("username","firstfullusername_20130612_06223");
testCase.setPropertyValue("password","testing");
testCase.setPropertyValue("accountoid","DEF5738E543B633AE0401F0A05990CC0");
testCase.setPropertyValue("useroid","DEF5738E544A633AE0401F0A05990CC0");
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:DEF5738E543A633AE0401F0A05990CC0");
testCase.setPropertyValue("DeviceID","urn:dece:deviceid:org:dece:DEF585C6AEA11471E0401F0A07994634");
testCase.setPropertyValue("DomainID","urn:dece:domainid:dece:DEF587A47AF1508CE0401F0A07994D03");
testCase.setPropertyValue("expectErrType","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedRTLReq = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request");

FeedRTLReq.setPropertyValue("TCaseName",testCase.getName());
FeedRTLReq.setPropertyValue("TSuiteName",testSuite.getName());

WsdlTestCaseRunner TSrunner = new WsdlTestCaseRunner( FeedRTLReq, null );

TSrunner.runTestStepByName("Get the DeviceGet Properties");
TSrunner.runTestStepByName("pem set");
assert TSrunner.status == Status.INITIALIZED;</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call DeviceGet Request">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )

WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );

TSrunnerRTC.runTestStepByName("DeviceGetRequest");

assert TSrunnerRTC.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract DeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Extract DeviceGet Information")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify theDeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Response Validation")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify the DeviceGet Response against DB Result">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGdataVal = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Data Validation");

RTGdataVal.setPropertyValue("TCaseName",testCase.getName());
RTGdataVal.setPropertyValue("TSuiteName",testSuite.getName());


def runnerRTC = RTGdataVal.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SAMLExpDate</con:name>
          <con:value>2013-06-14 18:31:45.0</con:value>
        </con:property>
        <con:property>
          <con:name>rcUUID</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>nodetype</con:name>
          <con:value>retailer</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>0702</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>firstfullusername_20130612_06223</con:value>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>testing</con:value>
        </con:property>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">DEF5738E543B633AE0401F0A05990CC0</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">DEF5738E544A633AE0401F0A05990CC0</con:value>
        </con:property>
        <con:property>
          <con:name>assertid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SAMLassertion</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">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</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>loopuntil</con:name>
          <con:value>25</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTS</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value>_87aa3e8d-2de2-46dd-b572-414003e22e9a</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value>urn:dece:userid:org:dece:A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value>A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value>urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value>A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>AccountID</con:name>
          <con:value>urn:dece:accountid:org:dece:DEF5738E543A633AE0401F0A05990CC0</con:value>
        </con:property>
        <con:property>
          <con:name>ErrorDataVal</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetReqXml</con:name>
          <con:value>User-Agent: Apache-HttpClient/4.1.1 (java 1.5)
</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResXml</con:name>
          <con:value><![CDATA[<Device IsLegacy="false" DeviceID="urn:dece:deviceid:org:dece:A09D9C22F11CBC6DE0401F0A05996898" xmlns="http://www.decellc.org/schema/2010/10/dece" xmlns:ns2="http://www.movielabs.com/schema/md/v1.07/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <DisplayName>DeviceInfoDisplayName</DisplayName>
   <Manufacturer>Microsoft</Manufacturer>
   <Model>V344</Model>
   <Brand Language="en-US">DeviceInfoBrand</Brand>
   <SerialNo>123432442323424</SerialNo>
   <Image MimeType="MimeType3" Width="50" Height="50">http://www.oxygenxml.com/1234</Image>
   <LicAppID>urn:dece:licappid:org:dece:A09D9C22F11EBC6DE0401F0A05996898</LicAppID>
   <DRMClientID>urn:dece:drmclientid:org:dece:A0E2E4B822DB1B7CE0401F0A07994404</DRMClientID>
   <ResourceStatus>
      <Current CreatedBy="urn:dece:org:org:dece:0701" CreationDate="2011-04-11T04:02:39.637Z">
         <Value>urn:dece:type:status:pending</Value>
         <Description>Device Created</Description>
      </Current>
   </ResourceStatus>
</Device>]]></con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResTime</con:name>
          <con:value>549</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceID</con:name>
          <con:value>urn:dece:deviceid:org:dece:DEF585C6AEA11471E0401F0A07994634</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeDVGGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>SqlStr</con:name>
          <con:value>select Status from USER_STATUS_REF where Status !='active'</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeLAC</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>DomainID</con:name>
          <con:value>urn:dece:domainid:dece:DEF587A47AF1508CE0401F0A07994D03</con:value>
        </con:property>
      <con:property><con:name>audienceNodeid</con:name><con:value>0702</con:value></con:property><con:property><con:name>ETag</con:name><con:value>"E940C41796117D87E0401F0A07992B6D:F0246DC7"</con:value></con:property><con:property><con:name>Last-Modified</con:name><con:value>Mon, 21 Oct 2013 12:54:53 GMT</con:value></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>5de99702-605c-4703-8d1c-76b86a95897d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00018_DeviceGet_RetailerCS_FUNC_with_Verify_LICAPP_ID" searchProperties="true" id="b8862039-9ef1-4278-8137-804bcddcb7a1">
      <con:description>This test case will verify that Application Tier properly handles a DeviceGet request when invoked with the GET method and valid header request .

Expected Result:

System should return successful message.</con:description>
      <con:settings/>
      <con:testStep type="groovy" name="Verify Node User SAML Asssertion" disabled="true">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.model.testsuite.TestRunner.Status


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def ValSamlAssertion = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Validate SAML Assertion");

	ValSamlAssertion.setPropertyValue("TCaseName",testCase.getName());
	ValSamlAssertion.setPropertyValue("TSuiteName",testSuite.getName());

	def runnerTc = ValSamlAssertion.run( null , false )
	assert runnerTc.status == Status.FINISHED;

	rcUUID = testCase.getPropertyValue("rcUUID");

	if (runnerTc.status != Status.FINISHED || rcUUID.toInteger()!= 1){

			
		testCase.setPropertyValue("nodetype","retailer");
		testCase.setPropertyValue("nodeid","0701");
		testCase.setPropertyValue("audienceNodeid","0702");
		testCase.setPropertyValue("username","sch-drm_user1");
		testCase.setPropertyValue("password","Password1");
		testCase.setPropertyValue("accountoid",null);
		testCase.setPropertyValue("useroid",null);
		testCase.setPropertyValue("assertid",null);
		testCase.setPropertyValue("SAMLassertion",null);
		testCase.setPropertyValue("tokentype","urn:dece:type:tokentype:usernamepassword");
		testCase.setPropertyValue("loopuntil","25");
		testCase.setPropertyValue("expectErrTypeSTS","SUCCESS");
		testCase.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
			
		log.info " SAML Assertion Expired ! re-generating Assertion";
		def RunSTS = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get SAML Assertion - STS")

				RunSTS.setPropertyValue("TCaseName",testCase.getName());
				RunSTS.setPropertyValue("TSuiteName",testSuite.getName());

				def runnerSTS = RunSTS.run( null , false )

				assert runnerSTS.status == Status.FINISHED;

		}</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call LicAppCreate Request with Valid Data" disabled="true">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0");
testCase.setPropertyValue("expectErrTypeLAC","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedDeviceDDReq = testProject.getTestSuiteByName("Staging DeviceGet").getTestCaseByName("LicAppCreate Request");

FeedDeviceDDReq.setPropertyValue("TCaseName",testCase.getName());
FeedDeviceDDReq.setPropertyValue("TSuiteName",testSuite.getName());


def runnerTC = FeedDeviceDDReq.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call DeviceUpdate Request for evict Cache" id="15cc00ac-1953-4e03-bbfd-4be669d324e9">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )
WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );


TSrunnerRTC.runTestStepByName("DeviceUpdateRequest");

assert TSrunnerRTC.status == Status.INITIALIZED;</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Feed DeviceGet Request with Valid Data">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


// setup Retailer CS Nodeid with the account
testCase.setPropertyValue("NodeID","0702");


//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("SAMLassertion","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");
testCase.setPropertyValue("assertionUUID","_87aa3e8d-2de2-46dd-b572-414003e22e9a");
testCase.setPropertyValue("username","firstfullusername_20130612_06223");
testCase.setPropertyValue("password","testing");
testCase.setPropertyValue("accountoid","DEF5738E543B633AE0401F0A05990CC0");
testCase.setPropertyValue("useroid","DEF5738E544A633AE0401F0A05990CC0");
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:DEF5738E543A633AE0401F0A05990CC0");
testCase.setPropertyValue("DeviceID","urn:dece:deviceid:org:dece:DEF585C6AEA41471E0401F0A07994634"); //LIC_APP_OID
testCase.setPropertyValue("DomainID","urn:dece:domainid:dece:DEF587A47AF1508CE0401F0A07994D03");
testCase.setPropertyValue("expectErrType","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedRTLReq = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request");

FeedRTLReq.setPropertyValue("TCaseName",testCase.getName());
FeedRTLReq.setPropertyValue("TSuiteName",testSuite.getName());

WsdlTestCaseRunner TSrunner = new WsdlTestCaseRunner( FeedRTLReq, null );

TSrunner.runTestStepByName("Get the DeviceGet Properties");
TSrunner.runTestStepByName("pem set");
assert TSrunner.status == Status.INITIALIZED;</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call DeviceGet Request">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )

WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );

TSrunnerRTC.runTestStepByName("DeviceGetRequest");

assert TSrunnerRTC.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract DeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Extract DeviceGet Information")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify theDeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Response Validation")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify the DeviceGet Response against DB Result">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGdataVal = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Data Validation");

RTGdataVal.setPropertyValue("TCaseName",testCase.getName());
RTGdataVal.setPropertyValue("TSuiteName",testSuite.getName());


def runnerRTC = RTGdataVal.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SAMLExpDate</con:name>
          <con:value>2013-06-14 18:31:45.0</con:value>
        </con:property>
        <con:property>
          <con:name>rcUUID</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>nodetype</con:name>
          <con:value>retailer</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>0702</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>firstfullusername_20130612_06223</con:value>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>testing</con:value>
        </con:property>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">DEF5738E543B633AE0401F0A05990CC0</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">DEF5738E544A633AE0401F0A05990CC0</con:value>
        </con:property>
        <con:property>
          <con:name>assertid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SAMLassertion</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">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</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>loopuntil</con:name>
          <con:value>25</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTS</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value>_87aa3e8d-2de2-46dd-b572-414003e22e9a</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value>urn:dece:userid:org:dece:A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value>A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value>urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value>A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>AccountID</con:name>
          <con:value>urn:dece:accountid:org:dece:DEF5738E543A633AE0401F0A05990CC0</con:value>
        </con:property>
        <con:property>
          <con:name>ErrorDataVal</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetReqXml</con:name>
          <con:value>User-Agent: Apache-HttpClient/4.1.1 (java 1.5)
</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResXml</con:name>
          <con:value><![CDATA[<Device IsLegacy="false" DeviceID="urn:dece:deviceid:org:dece:A09D9C22F11CBC6DE0401F0A05996898" xmlns="http://www.decellc.org/schema/2010/10/dece" xmlns:ns2="http://www.movielabs.com/schema/md/v1.07/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <DisplayName>DeviceInfoDisplayName</DisplayName>
   <Manufacturer>Microsoft</Manufacturer>
   <Model>V344</Model>
   <Brand Language="en-US">DeviceInfoBrand</Brand>
   <SerialNo>123432442323424</SerialNo>
   <Image MimeType="MimeType3" Width="50" Height="50">http://www.oxygenxml.com/1234</Image>
   <LicAppID>urn:dece:licappid:org:dece:A09D9C22F11EBC6DE0401F0A05996898</LicAppID>
   <DRMClientID>urn:dece:drmclientid:org:dece:A0E2E4B822DB1B7CE0401F0A07994404</DRMClientID>
   <ResourceStatus>
      <Current CreatedBy="urn:dece:org:org:dece:0701" CreationDate="2011-04-11T04:02:39.637Z">
         <Value>urn:dece:type:status:pending</Value>
         <Description>Device Created</Description>
      </Current>
   </ResourceStatus>
</Device>]]></con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResTime</con:name>
          <con:value>484</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceID</con:name>
          <con:value>urn:dece:deviceid:org:dece:DEF585C6AEA41471E0401F0A07994634</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeDVGGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>SqlStr</con:name>
          <con:value>select Status from USER_STATUS_REF where Status !='active'</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeLAC</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>DomainID</con:name>
          <con:value>urn:dece:domainid:dece:DEF587A47AF1508CE0401F0A07994D03</con:value>
        </con:property>
      <con:property><con:name>audienceNodeid</con:name><con:value>0702</con:value></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>15cc00ac-1953-4e03-bbfd-4be669d324e9</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00019_DeviceGet_RetailerCS_FUNC_with_Verify_DRMClientID" searchProperties="true" id="ffdad28b-b424-486c-941c-07c32998d4d6">
      <con:description>This test case will verify that Application Tier properly handles a DeviceGet request when invoked with the GET method and valid header request .

Expected Result:

System should return successful message.</con:description>
      <con:settings/>
      <con:testStep type="groovy" name="Verify Node User SAML Asssertion" disabled="true">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.model.testsuite.TestRunner.Status


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def ValSamlAssertion = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Validate SAML Assertion");

	ValSamlAssertion.setPropertyValue("TCaseName",testCase.getName());
	ValSamlAssertion.setPropertyValue("TSuiteName",testSuite.getName());

	def runnerTc = ValSamlAssertion.run( null , false )
	assert runnerTc.status == Status.FINISHED;

	rcUUID = testCase.getPropertyValue("rcUUID");

	if (runnerTc.status != Status.FINISHED || rcUUID.toInteger()!= 1){

			
		testCase.setPropertyValue("nodetype","retailer");
		testCase.setPropertyValue("nodeid","0701");
		testCase.setPropertyValue("audienceNodeid","0702");
		testCase.setPropertyValue("username","sch-drm_user1");
		testCase.setPropertyValue("password","Password1");
		testCase.setPropertyValue("accountoid",null);
		testCase.setPropertyValue("useroid",null);
		testCase.setPropertyValue("assertid",null);
		testCase.setPropertyValue("SAMLassertion",null);
		testCase.setPropertyValue("tokentype","urn:dece:type:tokentype:usernamepassword");
		testCase.setPropertyValue("loopuntil","25");
		testCase.setPropertyValue("expectErrTypeSTS","SUCCESS");
		testCase.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
			
		log.info " SAML Assertion Expired ! re-generating Assertion";
		def RunSTS = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get SAML Assertion - STS")

				RunSTS.setPropertyValue("TCaseName",testCase.getName());
				RunSTS.setPropertyValue("TSuiteName",testSuite.getName());

				def runnerSTS = RunSTS.run( null , false )

				assert runnerSTS.status == Status.FINISHED;

		}</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call LicAppCreate Request with Valid Data" disabled="true">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0");
testCase.setPropertyValue("expectErrTypeLAC","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedDeviceDDReq = testProject.getTestSuiteByName("Staging DeviceGet").getTestCaseByName("LicAppCreate Request");

FeedDeviceDDReq.setPropertyValue("TCaseName",testCase.getName());
FeedDeviceDDReq.setPropertyValue("TSuiteName",testSuite.getName());


def runnerTC = FeedDeviceDDReq.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Feed DeviceGet Request with Valid Data">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//RightsToken Request and properties

// setup Retailer CS Nodeid with the account
testCase.setPropertyValue("NodeID","0702");


//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("SAMLassertion","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");
testCase.setPropertyValue("assertionUUID","_87aa3e8d-2de2-46dd-b572-414003e22e9a");
testCase.setPropertyValue("username","firstfullusername_20130612_06223");
testCase.setPropertyValue("password","testing");
testCase.setPropertyValue("accountoid","DEF5738E543B633AE0401F0A05990CC0");
testCase.setPropertyValue("useroid","DEF5738E544A633AE0401F0A05990CC0");
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:DEF5738E543A633AE0401F0A05990CC0");
testCase.setPropertyValue("DeviceID","urn:dece:deviceid:org:dece:DEF585C6AEA11471E0401F0A07994634");
testCase.setPropertyValue("DomainID","urn:dece:domainid:dece:DEF587A47AF1508CE0401F0A07994D03"); 
testCase.setPropertyValue("expectErrType","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedRTLReq = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request");

FeedRTLReq.setPropertyValue("TCaseName",testCase.getName());
FeedRTLReq.setPropertyValue("TSuiteName",testSuite.getName());

WsdlTestCaseRunner TSrunner = new WsdlTestCaseRunner( FeedRTLReq, null );

TSrunner.runTestStepByName("Get the DeviceGet Properties");
TSrunner.runTestStepByName("pem set");
assert TSrunner.status == Status.INITIALIZED;</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call DeviceGet Request">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )

WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );

TSrunnerRTC.runTestStepByName("DeviceGetRequest");

assert TSrunnerRTC.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract DeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Extract DeviceGet Information")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify theDeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Response Validation")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify the DeviceGet Response against DB Result">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGdataVal = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Data Validation");

RTGdataVal.setPropertyValue("TCaseName",testCase.getName());
RTGdataVal.setPropertyValue("TSuiteName",testSuite.getName());


def runnerRTC = RTGdataVal.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SAMLExpDate</con:name>
          <con:value>2013-06-14 18:31:45.0</con:value>
        </con:property>
        <con:property>
          <con:name>rcUUID</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>nodetype</con:name>
          <con:value>retailer</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>0702</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>firstfullusername_20130612_06223</con:value>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>testing</con:value>
        </con:property>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">DEF5738E543B633AE0401F0A05990CC0</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">DEF5738E544A633AE0401F0A05990CC0</con:value>
        </con:property>
        <con:property>
          <con:name>assertid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SAMLassertion</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">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</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>loopuntil</con:name>
          <con:value>25</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTS</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value>_87aa3e8d-2de2-46dd-b572-414003e22e9a</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value>urn:dece:userid:org:dece:A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value>A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value>urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value>A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>AccountID</con:name>
          <con:value>urn:dece:accountid:org:dece:DEF5738E543A633AE0401F0A05990CC0</con:value>
        </con:property>
        <con:property>
          <con:name>ErrorDataVal</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetReqXml</con:name>
          <con:value>User-Agent: Apache-HttpClient/4.1.1 (java 1.5)
</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResXml</con:name>
          <con:value><![CDATA[<Device IsLegacy="false" DeviceID="urn:dece:deviceid:org:dece:A09D9C22F11CBC6DE0401F0A05996898" xmlns="http://www.decellc.org/schema/2010/10/dece" xmlns:ns2="http://www.movielabs.com/schema/md/v1.07/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <DisplayName>DeviceInfoDisplayName</DisplayName>
   <Manufacturer>Microsoft</Manufacturer>
   <Model>V344</Model>
   <Brand Language="en-US">DeviceInfoBrand</Brand>
   <SerialNo>123432442323424</SerialNo>
   <Image MimeType="MimeType3" Width="50" Height="50">http://www.oxygenxml.com/1234</Image>
   <LicAppID>urn:dece:licappid:org:dece:A09D9C22F11EBC6DE0401F0A05996898</LicAppID>
   <DRMClientID>urn:dece:drmclientid:org:dece:A0E2E4B822DB1B7CE0401F0A07994404</DRMClientID>
   <ResourceStatus>
      <Current CreatedBy="urn:dece:org:org:dece:0701" CreationDate="2011-04-11T04:02:39.637Z">
         <Value>urn:dece:type:status:pending</Value>
         <Description>Device Created</Description>
      </Current>
   </ResourceStatus>
</Device>]]></con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResTime</con:name>
          <con:value>488</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceID</con:name>
          <con:value>urn:dece:deviceid:org:dece:DEF585C6AEA11471E0401F0A07994634</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeDVGGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>SqlStr</con:name>
          <con:value>select Status from USER_STATUS_REF where Status !='active'</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeLAC</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>DomainID</con:name>
          <con:value>urn:dece:domainid:dece:DEF587A47AF1508CE0401F0A07994D03</con:value>
        </con:property>
      <con:property><con:name>audienceNodeid</con:name><con:value>0702</con:value></con:property><con:property><con:name>ETag</con:name><con:value>"E940C44587FA2883E0401F0A07992B67:F0246DC7"</con:value></con:property><con:property><con:name>Last-Modified</con:name><con:value>Mon, 21 Oct 2013 12:55:01 GMT</con:value></con:property></con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00020_DeviceGet_RetailerCS_FUNC_with_Verify_Resource_Status" searchProperties="true" id="3bd97299-10fd-4722-a0a1-903b0b607d4b">
      <con:description>This test case will verify that Application Tier properly handles a DeviceGet request when invoked with the GET method and valid header request .

Expected Result:

System should return successful message.</con:description>
      <con:settings/>
      <con:testStep type="groovy" name="Verify Node User SAML Asssertion" disabled="true">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.model.testsuite.TestRunner.Status


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def ValSamlAssertion = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Validate SAML Assertion");

	ValSamlAssertion.setPropertyValue("TCaseName",testCase.getName());
	ValSamlAssertion.setPropertyValue("TSuiteName",testSuite.getName());

	def runnerTc = ValSamlAssertion.run( null , false )
	assert runnerTc.status == Status.FINISHED;

	rcUUID = testCase.getPropertyValue("rcUUID");

	if (runnerTc.status != Status.FINISHED || rcUUID.toInteger()!= 1){

			
		testCase.setPropertyValue("nodetype","retailer");
		testCase.setPropertyValue("nodeid","0701");
		testCase.setPropertyValue("audienceNodeid","0702");
		testCase.setPropertyValue("username","sch-drm_user1");
		testCase.setPropertyValue("password","Password1");
		testCase.setPropertyValue("accountoid",null);
		testCase.setPropertyValue("useroid",null);
		testCase.setPropertyValue("assertid",null);
		testCase.setPropertyValue("SAMLassertion",null);
		testCase.setPropertyValue("tokentype","urn:dece:type:tokentype:usernamepassword");
		testCase.setPropertyValue("loopuntil","25");
		testCase.setPropertyValue("expectErrTypeSTS","SUCCESS");
		testCase.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
			
		log.info " SAML Assertion Expired ! re-generating Assertion";
		def RunSTS = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get SAML Assertion - STS")

				RunSTS.setPropertyValue("TCaseName",testCase.getName());
				RunSTS.setPropertyValue("TSuiteName",testSuite.getName());

				def runnerSTS = RunSTS.run( null , false )

				assert runnerSTS.status == Status.FINISHED;

		}</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call LicAppCreate Request with Valid Data" disabled="true">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0");
testCase.setPropertyValue("expectErrTypeLAC","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedDeviceDDReq = testProject.getTestSuiteByName("Staging DeviceGet").getTestCaseByName("LicAppCreate Request");

FeedDeviceDDReq.setPropertyValue("TCaseName",testCase.getName());
FeedDeviceDDReq.setPropertyValue("TSuiteName",testSuite.getName());


def runnerTC = FeedDeviceDDReq.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call DeviceUpdate Request for evict Cache" id="21c97e3d-a6b4-4839-bc30-a7fb62a709b8">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )
WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );


TSrunnerRTC.runTestStepByName("DeviceUpdateRequest");

assert TSrunnerRTC.status == Status.INITIALIZED;</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Feed DeviceGet Request with Valid Data">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


// setup Retailer CS Nodeid with the account
testCase.setPropertyValue("NodeID","0702");

//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("SAMLassertion","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");
testCase.setPropertyValue("assertionUUID","_87aa3e8d-2de2-46dd-b572-414003e22e9a");
testCase.setPropertyValue("username","firstfullusername_20130612_06223");
testCase.setPropertyValue("password","testing");
testCase.setPropertyValue("accountoid","DEF5738E543B633AE0401F0A05990CC0");
testCase.setPropertyValue("useroid","DEF5738E544A633AE0401F0A05990CC0");
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:DEF5738E543A633AE0401F0A05990CC0");
testCase.setPropertyValue("DeviceID","urn:dece:deviceid:org:dece:DEF585C6AEA11471E0401F0A07994634");
testCase.setPropertyValue("DomainID","urn:dece:domainid:dece:DEF587A47AF1508CE0401F0A07994D03");
testCase.setPropertyValue("expectErrType","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedRTLReq = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request");

FeedRTLReq.setPropertyValue("TCaseName",testCase.getName());
FeedRTLReq.setPropertyValue("TSuiteName",testSuite.getName());

WsdlTestCaseRunner TSrunner = new WsdlTestCaseRunner( FeedRTLReq, null );

TSrunner.runTestStepByName("Get the DeviceGet Properties");
TSrunner.runTestStepByName("pem set");
assert TSrunner.status == Status.INITIALIZED;</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call DeviceGet Request">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )

WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );

TSrunnerRTC.runTestStepByName("DeviceGetRequest");

assert TSrunnerRTC.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract DeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Extract DeviceGet Information")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify theDeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Response Validation")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify the DeviceGet Response against DB Result">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGdataVal = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Data Validation");

RTGdataVal.setPropertyValue("TCaseName",testCase.getName());
RTGdataVal.setPropertyValue("TSuiteName",testSuite.getName());


def runnerRTC = RTGdataVal.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SAMLExpDate</con:name>
          <con:value>2013-06-14 18:31:45.0</con:value>
        </con:property>
        <con:property>
          <con:name>rcUUID</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>nodetype</con:name>
          <con:value>retailer</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>0702</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>firstfullusername_20130612_06223</con:value>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>testing</con:value>
        </con:property>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">DEF5738E543B633AE0401F0A05990CC0</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">DEF5738E544A633AE0401F0A05990CC0</con:value>
        </con:property>
        <con:property>
          <con:name>assertid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SAMLassertion</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">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</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>loopuntil</con:name>
          <con:value>25</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTS</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value>_87aa3e8d-2de2-46dd-b572-414003e22e9a</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value>urn:dece:userid:org:dece:A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value>A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value>urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value>A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>AccountID</con:name>
          <con:value>urn:dece:accountid:org:dece:DEF5738E543A633AE0401F0A05990CC0</con:value>
        </con:property>
        <con:property>
          <con:name>ErrorDataVal</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetReqXml</con:name>
          <con:value>User-Agent: Apache-HttpClient/4.1.1 (java 1.5)
</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResXml</con:name>
          <con:value><![CDATA[<Device IsLegacy="false" DeviceID="urn:dece:deviceid:org:dece:A09D9C22F11CBC6DE0401F0A05996898" xmlns="http://www.decellc.org/schema/2010/10/dece" xmlns:ns2="http://www.movielabs.com/schema/md/v1.07/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <DisplayName>DeviceInfoDisplayName</DisplayName>
   <Manufacturer>Microsoft</Manufacturer>
   <Model>V344</Model>
   <Brand Language="en-US">DeviceInfoBrand</Brand>
   <SerialNo>123432442323424</SerialNo>
   <Image MimeType="MimeType3" Width="50" Height="50">http://www.oxygenxml.com/1234</Image>
   <LicAppID>urn:dece:licappid:org:dece:A09D9C22F11EBC6DE0401F0A05996898</LicAppID>
   <DRMClientID>urn:dece:drmclientid:org:dece:A0E2E4B822DB1B7CE0401F0A07994404</DRMClientID>
   <ResourceStatus>
      <Current CreatedBy="urn:dece:org:org:dece:0701" CreationDate="2011-04-11T04:02:39.637Z">
         <Value>urn:dece:type:status:pending</Value>
         <Description>Device Created</Description>
      </Current>
   </ResourceStatus>
</Device>]]></con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResTime</con:name>
          <con:value>497</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceID</con:name>
          <con:value>urn:dece:deviceid:org:dece:DEF585C6AEA11471E0401F0A07994634</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeDVGGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>SqlStr</con:name>
          <con:value>select Status from USER_STATUS_REF where Status !='active'</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeLAC</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>DomainID</con:name>
          <con:value>urn:dece:domainid:dece:DEF587A47AF1508CE0401F0A07994D03</con:value>
        </con:property>
      <con:property><con:name>audienceNodeid</con:name><con:value>0702</con:value></con:property><con:property><con:name>ETag</con:name><con:value>"E940C417966B7D87E0401F0A07992B6D:F0246DC7"</con:value></con:property><con:property><con:name>Last-Modified</con:name><con:value>Mon, 21 Oct 2013 12:55:14 GMT</con:value></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>21c97e3d-a6b4-4839-bc30-a7fb62a709b8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase>
    <con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00021_DeviceGet_RetailerCS_FUNC_with_InActive AccountID_CS_ROLE_NOT_Allowed" searchProperties="true" id="eede613a-880a-4995-8388-7e7865f5b746" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="">
      <con:description>This test case will verify that Application Tier properly handles a DeviceGet request when invoked with the GET method and Invalid Account ID in request .

Expected Result:

System should return an Error message.</con:description>
      <con:settings/>
      <con:testStep type="groovy" name="Verify Node User SAML Asssertion" disabled="true">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.model.testsuite.TestRunner.Status


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def ValSamlAssertion = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Validate SAML Assertion");

	ValSamlAssertion.setPropertyValue("TCaseName",testCase.getName());
	ValSamlAssertion.setPropertyValue("TSuiteName",testSuite.getName());

	def runnerTc = ValSamlAssertion.run( null , false )
	assert runnerTc.status == Status.FINISHED;

	rcUUID = testCase.getPropertyValue("rcUUID");

	if (runnerTc.status != Status.FINISHED || rcUUID.toInteger()!= 1){

			
		testCase.setPropertyValue("nodetype","device");
		testCase.setPropertyValue("nodeid","0701");
		testCase.setPropertyValue("audienceNodeid","0702");
		testCase.setPropertyValue("username","sch-drm_user1");
		testCase.setPropertyValue("password","Password1");
		testCase.setPropertyValue("accountoid",null);
		testCase.setPropertyValue("useroid",null);
		testCase.setPropertyValue("assertid",null);
		testCase.setPropertyValue("SAMLassertion",null);
		testCase.setPropertyValue("tokentype","urn:dece:type:tokentype:usernamepassword");
		testCase.setPropertyValue("loopuntil","25");
		testCase.setPropertyValue("expectErrTypeSTS","SUCCESS");
		testCase.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
			
		log.info " SAML Assertion Expired ! re-generating Assertion";
		def RunSTS = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get SAML Assertion - STS")

				RunSTS.setPropertyValue("TCaseName",testCase.getName());
				RunSTS.setPropertyValue("TSuiteName",testSuite.getName());

				def runnerSTS = RunSTS.run( null , false )

				assert runnerSTS.status == Status.FINISHED;

		}</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call LicAppCreate Request with Valid Data" disabled="true">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0");
testCase.setPropertyValue("expectErrTypeLAC","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedDeviceDDReq = testProject.getTestSuiteByName("Staging DeviceGet").getTestCaseByName("LicAppCreate Request");

FeedDeviceDDReq.setPropertyValue("TCaseName",testCase.getName());
FeedDeviceDDReq.setPropertyValue("TSuiteName",testSuite.getName());


def runnerTC = FeedDeviceDDReq.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call DeviceUpdate Request for evict Cache" id="07d3b061-cbc6-4c89-9911-55523ab75a7f">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )
WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );


TSrunnerRTC.runTestStepByName("DeviceUpdateRequest");

assert TSrunnerRTC.status == Status.INITIALIZED;</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Get Account Inactive Statuses">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def GetAccountStatus = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get-Set Account Status");

// Get ALL inactive Status from ACCOUNT_STATUS_REF Except = 'Pending'

SqlStr = "select Status from ACCOUNT_STATUS_REF where Status !='active' AND Status !='archived' AND Status !='blocked:tou' AND Status !='pending' AND Status !='deleted' AND Status !='blocked'";


testCase.setPropertyValue("SqlStr",SqlStr);

GetAccountStatus.setPropertyValue("TCaseName",testCase.getName());
GetAccountStatus.setPropertyValue("TSuiteName",testSuite.getName());

WsdlTestCaseRunner TSrunner = new WsdlTestCaseRunner( GetAccountStatus, null );

TSrunner.runTestStepByName("Get Account Status for DVG");

assert TSrunner.status == Status.INITIALIZED;

 log.info " Current Account Status: " + testCase.getPropertyValue("AccountStatus");

testCase.getPropertyValue("AccountStatusXML");</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Feed DeviceGet Request with Inactive AccountID" id="c18c6418-c612-4b19-b8b3-33ec6e008eab">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


// setup Retailer CS Nodeid with the account
testCase.setPropertyValue("NodeID","0702");


//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("SAMLassertion","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");
testCase.setPropertyValue("assertionUUID","_87aa3e8d-2de2-46dd-b572-414003e22e9a");
testCase.setPropertyValue("username","firstfullusername_20130612_06223");
testCase.setPropertyValue("password","testing");
testCase.setPropertyValue("accountoid","DEF5738E543B633AE0401F0A05990CC0");
testCase.setPropertyValue("useroid","DEF5738E544A633AE0401F0A05990CC0");
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:DEF5738E543A633AE0401F0A05990CC0");
testCase.setPropertyValue("DeviceID","urn:dece:deviceid:org:dece:DEF585C6AEA11471E0401F0A07994634");
testCase.setPropertyValue("DomainID","urn:dece:domainid:dece:DEF587A47AF1508CE0401F0A07994D03");
testCase.setPropertyValue("expectErrType","NODE_UNAUTHORIZED");
testCase.setPropertyValue("ErrorDataVal","1");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedRTLReq = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request");

FeedRTLReq.setPropertyValue("TCaseName",testCase.getName());
FeedRTLReq.setPropertyValue("TSuiteName",testSuite.getName());

WsdlTestCaseRunner TSrunner = new WsdlTestCaseRunner( FeedRTLReq, null );

TSrunner.runTestStepByName("Get the DeviceGet Properties");
TSrunner.runTestStepByName("pem set");
assert TSrunner.status == Status.INITIALIZED;</script></con:config>
      </con:testStep>
      <con:testStep type="datasource" name="Feed DataSource for Inactive Account Statuses">
        <con:settings/>
        <con:config xsi:type="con:DataSourceStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dataSource type="XML">
            <con:configuration><sourceStep>Get Account Inactive Statuses</sourceStep><sourceProperty>result</sourceProperty><rowPath>//Results[1]/ResultSet[1]/Row</rowPath><columnPath>STATUS</columnPath></con:configuration>
          </con:dataSource>
          <con:property>AccountStatus</con:property>
          <con:restartOnRun>true</con:restartOnRun>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="SetUp inactive Account Status for DVG">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

// SetUp the Node Status from the Data Source

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

// Get AccountStatus Values from Data Source

def DsAccountStatus = testRunner.testCase.testSteps['Feed DataSource for Inactive Account Statuses'];
log.info  "Account Status is to set to: " + DsAccountStatus.getPropertyValue("AccountStatus");

testCase.setPropertyValue("AccountStatus",DsAccountStatus.getPropertyValue("AccountStatus"));

def SetAccountStatus = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get-Set Account Status");

SetAccountStatus.setPropertyValue("TCaseName",testCase.getName());
SetAccountStatus.setPropertyValue("TSuiteName",testSuite.getName());

WsdlTestCaseRunner TSrunner = new WsdlTestCaseRunner( SetAccountStatus, null );

TSrunner.runTestStepByName("Set Account Status for DVG")

assert TSrunner.status == Status.INITIALIZED;</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call DeviceGet Request">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )

WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );

TSrunnerRTC.runTestStepByName("DeviceGetRequest");

assert TSrunnerRTC.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract DeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Extract DeviceGet Information")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify theDeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Response Validation")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="datasourceloop" name="DataSource Loop">
        <con:settings/>
        <con:config>
          <dataSourceStep>Feed DataSource for Inactive Account Statuses</dataSourceStep>
          <targetStep>SetUp inactive Account Status for DVG</targetStep>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Re-Setactive Account Status">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

// SetUp the Node Status from the Data Source

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

// Re-set AccountStatus Values  = 'active'

testCase.setPropertyValue("AccountStatus","active");

def SetAccountStatus = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get-Set Account Status");

SetAccountStatus.setPropertyValue("TCaseName",testCase.getName());
SetAccountStatus.setPropertyValue("TSuiteName",testSuite.getName());

WsdlTestCaseRunner TSrunner = new WsdlTestCaseRunner( SetAccountStatus, null );

TSrunner.runTestStepByName("Set Account Status for DVG")

assert TSrunner.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SAMLExpDate</con:name>
          <con:value>2013-06-15 02:50:22.0</con:value>
        </con:property>
        <con:property>
          <con:name>rcUUID</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>nodetype</con:name>
          <con:value>device</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>0702</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>firstfullusername_20130612_06223</con:value>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>testing</con:value>
        </con:property>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">DEF5738E543B633AE0401F0A05990CC0</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">DEF5738E544A633AE0401F0A05990CC0</con:value>
        </con:property>
        <con:property>
          <con:name>assertid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SAMLassertion</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">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</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>loopuntil</con:name>
          <con:value>25</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTS</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value>_87aa3e8d-2de2-46dd-b572-414003e22e9a</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value>urn:dece:userid:org:dece:A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value>A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value>urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value>A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>AccountID</con:name>
          <con:value>urn:dece:accountid:org:dece:DEF5738E543A633AE0401F0A05990CC0</con:value>
        </con:property>
        <con:property>
          <con:name>ErrorDataVal</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>NODE_UNAUTHORIZED</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetReqXml</con:name>
          <con:value>User-Agent: Apache-HttpClient/4.1.1 (java 1.5)
</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResXml</con:name>
          <con:value><![CDATA[<Device IsLegacy="false" DeviceID="urn:dece:deviceid:org:dece:A09D9C22F11CBC6DE0401F0A05996898" xmlns="http://www.decellc.org/schema/2010/10/dece" xmlns:ns2="http://www.movielabs.com/schema/md/v1.07/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <DisplayName>DeviceInfoDisplayName</DisplayName>
   <Manufacturer>Microsoft</Manufacturer>
   <Model>V344</Model>
   <Brand Language="en-US">DeviceInfoBrand</Brand>
   <SerialNo>123432442323424</SerialNo>
   <Image MimeType="MimeType3" Width="50" Height="50">http://www.oxygenxml.com/1234</Image>
   <LicAppID>urn:dece:licappid:org:dece:A09D9C22F11EBC6DE0401F0A05996898</LicAppID>
   <DRMClientID>urn:dece:drmclientid:org:dece:A0E2E4B822DB1B7CE0401F0A07994404</DRMClientID>
   <ResourceStatus>
      <Current CreatedBy="urn:dece:org:org:dece:0701" CreationDate="2011-04-11T04:02:39.637Z">
         <Value>urn:dece:type:status:pending</Value>
         <Description>Device Created</Description>
      </Current>
   </ResourceStatus>
</Device>]]></con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResTime</con:name>
          <con:value>532</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetID</con:name>
          <con:value>The supplied AccountID is invalid.https://qa.q.uvvu.com:7001/rest/1/0/Account/urn%3Adece%3Aaccountid%3Aorg%3Aorg%3Aorg%3Adece%3AA06A9AA49F6E73D7E0401F0A059915F0/Device/urn%3Adece%3Adeviceid%3Aorg%3Adece%3AA09D9C22F11CBC6DE0401F0A05996898/DECEDomainhttps://qa.q.uvvu.com:7001/rest/1/0/error/en/ErrorList.html#AccountIdNotValid</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceID</con:name>
          <con:value>urn:dece:deviceid:org:dece:DEF585C6AEA11471E0401F0A07994634</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeDVGGet</con:name>
          <con:value>ACCOUNTID NOT MATCH</con:value>
        </con:property>
        <con:property>
          <con:name>SqlStr</con:name>
          <con:value>select Status from ACCOUNT_STATUS_REF where Status !='active' AND Status !='archived' AND Status !='blocked:tou' AND Status !='pending' AND Status !='deleted' AND Status !='blocked'</con:value>
        </con:property>
        <con:property>
          <con:name>AccountStatusXML</con:name>
          <con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <STATUS>forcedeleted</STATUS>
    </Row>
    <Row rowNumber='2'>
      <STATUS>mergedeleted</STATUS>
    </Row>
    <Row rowNumber='3'>
      <STATUS>other</STATUS>
    </Row>
    <Row rowNumber='4'>
      <STATUS>suspended</STATUS>
    </Row>
  </ResultSet>
</Results>]]></con:value>
        </con:property>
        <con:property>
          <con:name>AccountStatus</con:name>
          <con:value>active</con:value>
        </con:property>
        <con:property>
          <con:name>DomainID</con:name>
          <con:value>urn:dece:domainid:dece:DEF587A47AF1508CE0401F0A07994D03</con:value>
        </con:property>
      <con:property><con:name>audienceNodeid</con:name><con:value>0702</con:value></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>c18c6418-c612-4b19-b8b3-33ec6e008eab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>07d3b061-cbc6-4c89-9911-55523ab75a7f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase>
    <con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00022_DeviceGet_RetailerCS_FUNC_with_Deleted_MAC_Policy" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="2178ee95-938d-4acc-83be-d8b288a8681a">
      <con:description>This test case will verify that Application Tier properly handles a DeviceGet request when invoked with the GET method and valid header request .

Expected Result:

System should return successful message.</con:description>
      <con:settings/>
      <con:testStep type="groovy" name="Verify Node User SAML Asssertion" disabled="true">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def ValSamlAssertion = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Validate SAML Assertion");

	ValSamlAssertion.setPropertyValue("TCaseName",testCase.getName());
	ValSamlAssertion.setPropertyValue("TSuiteName",testSuite.getName());

	def runnerTc = ValSamlAssertion.run( null , false )
	assert runnerTc.status == Status.FINISHED;

	rcUUID = testCase.getPropertyValue("rcUUID");

	if (runnerTc.status != Status.FINISHED || rcUUID.toInteger()!= 1){

			
		testCase.setPropertyValue("nodetype","retailer");
		testCase.setPropertyValue("nodeid","0701");
		testCase.setPropertyValue("username","sch-drm_user1");
		testCase.setPropertyValue("password","Password1");
		testCase.setPropertyValue("accountoid",null);
		testCase.setPropertyValue("useroid",null);
		testCase.setPropertyValue("assertid",null);
		testCase.setPropertyValue("SAMLassertion",null);
		testCase.setPropertyValue("tokentype","urn:dece:type:tokentype:usernamepassword");
		testCase.setPropertyValue("loopuntil","25");
		testCase.setPropertyValue("expectErrTypeSTS","SUCCESS");
		testCase.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
			
		log.info " SAML Assertion Expired ! re-generating Assertion";
		
		def RunSTS = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get SAML Assertion - STS")

				RunSTS.setPropertyValue("TCaseName",testCase.getName());
				RunSTS.setPropertyValue("TSuiteName",testSuite.getName());

				def runnerSTS = RunSTS.run( null , false )

				assert runnerSTS.status == Status.FINISHED;

		}</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call LicAppCreate Request with Valid Data" disabled="true">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0");
testCase.setPropertyValue("expectErrTypeLAC","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedDeviceDDReq = testProject.getTestSuiteByName("Staging DeviceGet").getTestCaseByName("LicAppCreate Request");

FeedDeviceDDReq.setPropertyValue("TCaseName",testCase.getName());
FeedDeviceDDReq.setPropertyValue("TSuiteName",testSuite.getName());


def runnerTC = FeedDeviceDDReq.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Feed DeviceGet Request with Valid Data">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


// setup Retailer CS Nodeid with the account
testCase.setPropertyValue("NodeID","0702");

//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));

testCase.setPropertyValue("SAMLassertion","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");
testCase.setPropertyValue("assertionUUID","_87aa3e8d-2de2-46dd-b572-414003e22e9a");
testCase.setPropertyValue("username","firstfullusername_20130612_06223");
testCase.setPropertyValue("password","testing");
testCase.setPropertyValue("accountoid","DEF5738E543B633AE0401F0A05990CC0");
testCase.setPropertyValue("useroid","DEF5738E544A633AE0401F0A05990CC0");
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:DEF5738E543A633AE0401F0A05990CC0");
testCase.setPropertyValue("DeviceID","urn:dece:deviceid:org:dece:DEF585C6AEA11471E0401F0A07994634");
testCase.setPropertyValue("DomainID","urn:dece:domainid:dece:DEF587A47AF1508CE0401F0A07994D03"); 
testCase.setPropertyValue("expectErrType","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","1");
// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedRTLReq = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request");

FeedRTLReq.setPropertyValue("TCaseName",testCase.getName());
FeedRTLReq.setPropertyValue("TSuiteName",testSuite.getName());

WsdlTestCaseRunner TSrunner = new WsdlTestCaseRunner( FeedRTLReq, null );

TSrunner.runTestStepByName("Get the DeviceGet Properties");
TSrunner.runTestStepByName("pem set");
assert TSrunner.status == Status.INITIALIZED;</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call DeviceUpdate Request for evict Cache">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )
WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );


TSrunnerRTC.runTestStepByName("DeviceUpdateRequest");

assert TSrunnerRTC.status == Status.INITIALIZED;</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Set MAC Policy to deleted"><con:settings/><con:config><script>import dbUtils.dbUtils;
import dbUtils.dbPolicy;

//for the node 0702 &amp; POLICY_OID=DEF57C67ADCB2F50E0401F0A05991E46
//
myDb = new dbPolicy(log,"LP1");
status = myDb.policySetStatus("DEF57C67ADCB2F50E0401F0A05991E46","deleted");

assert status==1;
</script></con:config></con:testStep><con:testStep type="groovy" name="Call DeviceGet Request">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )
WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );


TSrunnerRTC.runTestStepByName("DeviceGetRequest");

assert TSrunnerRTC.status == Status.INITIALIZED;</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract DeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Extract DeviceGet Information")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify theDeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Response Validation")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Set MAC Policy to active"><con:settings/><con:config><script>import dbUtils.dbUtils;
import dbUtils.dbPolicy;

//for the node 0702 &amp; POLICY_OID=DEF57C67ADCB2F50E0401F0A05991E46
//
myDb = new dbPolicy(log,"LP1");
status =myDb.policySetStatus("DEF57C67ADCB2F50E0401F0A05991E46","active");

assert status==1;
</script></con:config></con:testStep><con:properties>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SAMLExpDate</con:name>
          <con:value>2017-06-11 06:17:41.0</con:value>
        </con:property>
        <con:property>
          <con:name>rcUUID</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>nodetype</con:name>
          <con:value>retailer</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>0702</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>firstfullusername_20130612_06223</con:value>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>testing</con:value>
        </con:property>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">DEF5738E543B633AE0401F0A05990CC0</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">DEF5738E544A633AE0401F0A05990CC0</con:value>
        </con:property>
        <con:property>
          <con:name>assertid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SAMLassertion</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">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</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>loopuntil</con:name>
          <con:value>25</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTS</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value>_87aa3e8d-2de2-46dd-b572-414003e22e9a</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value>urn:dece:userid:org:dece:DEDB0DD90C83E264E0401F0A079920A4</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value>DEDB0DD90C83E264E0401F0A079920A4</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value>urn%3Adece%3Aaccountid%3Aorg%3Adece%3ADEDB0DD90C1CE264E0401F0A079920A4</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value>DEDB0DD90C1CE264E0401F0A079920A4</con:value>
        </con:property>
        <con:property>
          <con:name>AccountID</con:name>
          <con:value>urn:dece:accountid:org:dece:DEF5738E543A633AE0401F0A05990CC0</con:value>
        </con:property>
        <con:property>
          <con:name>ErrorDataVal</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetReqXml</con:name>
          <con:value>User-Agent: Apache-HttpClient/4.1.1 (java 1.5)
</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResXml</con:name>
          <con:value><![CDATA[<Device IsLegacy="false" DeviceID="urn:dece:deviceid:org:dece:A09D9C22F11CBC6DE0401F0A05996898" xmlns="http://www.decellc.org/schema/2010/10/dece" xmlns:ns2="http://www.movielabs.com/schema/md/v1.07/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <DisplayName>DeviceInfoDisplayName</DisplayName>
   <Manufacturer>Microsoft</Manufacturer>
   <Model>V344</Model>
   <Brand Language="en-US">DeviceInfoBrand</Brand>
   <SerialNo>123432442323424</SerialNo>
   <Image MimeType="MimeType3" Width="50" Height="50">http://www.oxygenxml.com/1234</Image>
   <LicAppID>urn:dece:licappid:org:dece:A09D9C22F11EBC6DE0401F0A05996898</LicAppID>
   <DRMClientID>urn:dece:drmclientid:org:dece:A0E2E4B822DB1B7CE0401F0A07994404</DRMClientID>
   <ResourceStatus>
      <Current CreatedBy="urn:dece:org:org:dece:0701" CreationDate="2011-04-11T04:02:39.637Z">
         <Value>urn:dece:type:status:pending</Value>
         <Description>Device Created</Description>
      </Current>
   </ResourceStatus>
</Device>]]></con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResTime</con:name>
          <con:value>190</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceID</con:name>
          <con:value>urn:dece:deviceid:org:dece:DEF585C6AEA11471E0401F0A07994634</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeDVGGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>SqlStr</con:name>
          <con:value>select Status from USER_STATUS_REF where Status !='active'</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeLAC</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>DomainID</con:name>
          <con:value>urn:dece:domainid:dece:DEF587A47AF1508CE0401F0A07994D03</con:value>
        </con:property>
      <con:property><con:name>ETag</con:name><con:value>"E940CFAC9BA0AA34E0401F0A059916AC:F0246DC7"</con:value></con:property><con:property><con:name>Last-Modified</con:name><con:value>Mon, 21 Oct 2013 12:56:23 GMT</con:value></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>aee4be24-47c9-4526-bbd5-54cad6cd6350</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:properties/>
    <con:reportParameters/>
  </con:testSuite>
  <con:testSuite name="DeviceGet_Invocation_ByPermission_TestCases_R4">
    <con:description/>
    <con:settings><con:setting id="IncludeOverview">true</con:setting><con:setting id="IncludeResults">true</con:setting><con:setting id="FlowLayout">false</con:setting><con:setting id="ErrorDetails">true</con:setting><con:setting id="IncludeCoverage">true</con:setting><con:setting id="GeneratableJUnitReport@Style">Single Page (Print)</con:setting><con:setting id="GeneratableJUnitReport@Folder">C:\Users\raju.ganji\Desktop\DeviceGet_170613\4.0.3</con:setting></con:settings>
    <con:runType>SEQUENTIAL</con:runType>
    <con:properties/>
    <con:reportParameters/>
    <con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_30001 -  DeviceGet - PERM - SecurityRoleInvalid - Invocation with DECE" searchProperties="true" id="9407f528-b133-4fc9-bd42-efdcbb61771b" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="">
      <con:description>This test case will verify that the Application Tier properly responses to a DeviceGet invocation when the requesting node is DECE.

Expected Result :

It should not allow API invocation for the "DECE" node.</con:description>
      <con:settings/>
      <con:testStep type="groovy" name="Verify Node User SAML Asssertion" disabled="true">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.model.testsuite.TestRunner.Status


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def ValSamlAssertion = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Validate SAML Assertion");

	ValSamlAssertion.setPropertyValue("TCaseName",testCase.getName());
	ValSamlAssertion.setPropertyValue("TSuiteName",testSuite.getName());

	def runnerTc = ValSamlAssertion.run( null , false )
	assert runnerTc.status == Status.FINISHED;

	rcUUID = testCase.getPropertyValue("rcUUID");

	if (runnerTc.status != Status.FINISHED || rcUUID.toInteger()!= 1){

			
		testCase.setPropertyValue("nodetype","manufacturerportal");
		testCase.setPropertyValue("nodeid","0701");
		testCase.setPropertyValue("username","sch-drm_user1");
		testCase.setPropertyValue("password","Password1");
		testCase.setPropertyValue("accountoid",null);
		testCase.setPropertyValue("useroid",null);
		testCase.setPropertyValue("assertid",null);
		testCase.setPropertyValue("SAMLassertion",null);
		testCase.setPropertyValue("tokentype","urn:dece:type:tokentype:usernamepassword");
		testCase.setPropertyValue("loopuntil","25");
		testCase.setPropertyValue("expectErrTypeSTS","SUCCESS");
		testCase.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
			
		log.info " SAML Assertion Expired ! re-generating Assertion";
		def RunSTS = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get SAML Assertion - STS")

				RunSTS.setPropertyValue("TCaseName",testCase.getName());
				RunSTS.setPropertyValue("TSuiteName",testSuite.getName());

				def runnerSTS = RunSTS.run( null , false )

				assert runnerSTS.status == Status.FINISHED;

		}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call LicAppCreate Request with Valid Data" disabled="true">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0");
testCase.setPropertyValue("expectErrTypeLAC","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedDeviceDDReq = testProject.getTestSuiteByName("Staging DeviceGet").getTestCaseByName("LicAppCreate Request");

FeedDeviceDDReq.setPropertyValue("TCaseName",testCase.getName());
FeedDeviceDDReq.setPropertyValue("TSuiteName",testSuite.getName());


def runnerTC = FeedDeviceDDReq.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call DeviceUpdate Request for evict Cache" id="f1c77429-b68c-4807-bb25-8afd362d36d3">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )
WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );


TSrunnerRTC.runTestStepByName("DeviceUpdateRequest");

assert TSrunnerRTC.status == Status.INITIALIZED;</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Feed DeviceGet Request with Valid Data">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("SAMLassertion","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");
testCase.setPropertyValue("assertionUUID","_87aa3e8d-2de2-46dd-b572-414003e22e9a");
testCase.setPropertyValue("username","firstfullusername_20130612_06223");
testCase.setPropertyValue("password","testing");
testCase.setPropertyValue("accountoid","DEF5738E543B633AE0401F0A05990CC0");
testCase.setPropertyValue("useroid","DEF5738E544A633AE0401F0A05990CC0");
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:DEF5738E543A633AE0401F0A05990CC0");
testCase.setPropertyValue("DeviceID","urn:dece:deviceid:org:dece:DEF585C6AEA11471E0401F0A07994634");
testCase.setPropertyValue("DomainID","urn:dece:domainid:dece:DEF587A47AF1508CE0401F0A07994D03");
testCase.setPropertyValue("expectErrType","API_NOT_AUTH");
testCase.setPropertyValue("ErrorDataVal","1");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedRTLReq = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request");

FeedRTLReq.setPropertyValue("TCaseName",testCase.getName());
FeedRTLReq.setPropertyValue("TSuiteName",testSuite.getName());

WsdlTestCaseRunner TSrunner = new WsdlTestCaseRunner( FeedRTLReq, null );

TSrunner.runTestStepByName("Get the DeviceGet Properties");
TSrunner.runTestStepByName("pem set");
assert TSrunner.status == Status.INITIALIZED;</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Set Node Role to DECE">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

// Set Node Role

testCase.setPropertyValue("NodeRole","urn:dece:role:dece");


def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get-Set Node Role")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )

WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );

TSrunnerRTC.runTestStepByName("Set Node Role for DDD");

assert TSrunnerRTC.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call DeviceGet Request">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTCRequest.run( null , false )

WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );

TSrunnerRTC.runTestStepByName("DeviceGetRequest");

assert TSrunnerRTC.status == Status.INITIALIZED;</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract DeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Extract DeviceGet Information")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify theDeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Response Validation")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep><con:testStep type="groovy" name="Set Node Role to Retailer">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

// Set Node Role

testCase.setPropertyValue("NodeRole","urn:dece:role:retailer");


def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get-Set Node Role")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )

WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );

TSrunnerRTC.runTestStepByName("Set Node Role for DDD");

assert TSrunnerRTC.status == Status.INITIALIZED;</script></con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value>28192</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>SAMLExpDate</con:name>
          <con:value>2013-06-11 15:49:23.0</con:value>
        </con:property>
        <con:property>
          <con:name>rcUUID</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>nodetype</con:name>
          <con:value>manufacturerportal</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>0701</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>firstfullusername_20130612_06223</con:value>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>testing</con:value>
        </con:property>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value>DEF5738E543B633AE0401F0A05990CC0</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value>DEF5738E544A633AE0401F0A05990CC0</con:value>
        </con:property>
        <con:property>
          <con:name>assertid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SAMLassertion</con:name>
          <con:value>nVdpc6pKE/7ur7A8Hy3D5oaVpGpYVFRUBBf4cgthQJRNBgT99e9gosfk5OTNvVWpitP0dD+9TM8zz8gMfLoHEIJJ6kVhVRJeav90O6bJwK7doG1IN5pt225sWx38i2qSJANpGrJmrSohlEEpRKkZpi81mqSYBtluULRG0b0W/us8teiWUauuYIKwaazyRNaqReCHqHd1+1LLkrAXmchDvdAMIOqlVk8F8qSHNXvmDVPt9fkN5dVh8rpL07hHENaTDS3o+9aTFQXEM/FB59lGPdVzQzPNEvju00Yvtfe9eZ4/5cxTlLgETZIkQbIE1rGR5/6qvVZum6EthU70tubNMAo9y/S9i1mCkmG6i+wq8N0o8dJd8BfTFEGRpekGLKyGRTXDXzXit4Mruh9a+gAyQWYD7UzqZmwBHZjA0ILV5UJ6qf36WQXf9mqJGSInSgL0af3vIMHwBP0ohnYD3SK7ofu5xS/S9foMrZ4UWn6GvBOclm0SmxZE1XkCHa+YeAg3n42q1/JXC3TrMGj9m5I8E484MWzii8wIngtR+l/q9VirNysr08/gq21mCa/b9XV97ygnlx7F2oISl1R/3ny5QnhUfgN1L/X7+nOj3vvqfdOM2pOh49gXXZ/wW2FjCqrVFYB4ljVrZguTyBLlBaHKmXiM18TUTLlwNerE9TUKDD50wvO+OwQrekAeh3wFjQb1UUtZzdqbZHieZ8SO6vDCkNWngQ62QE1jbhAoBKH2SX5jaEzfG6oTn0W6fCHcgrH7zNHY8ItseZaTysxDLe4wlFOvXU8ulA4P0svvmB5jKOMaw/M1yPL3pkWygpma9wVfTgoHH88UvsqSxNcFngeQd0EuccCVuMkFTDn3cNwdvAGbkxxQln0ggLO8ALng6sJKUcZibq9WvrGS+n1OXjTzIdCFCv4giMVKMDYj0lwbsU73SUPlOHuziLbMKLaHh3y4s6ayJudTTTrLe7GYaiK5vsrcAq8v8l6mZtqSqaz3HCsvxFzIrx4FMd9NjfUi1pdsbl1ERQbNAaCWIr+Th1qwoixmsbP24kQGh6uc28n8aiUXogbmFc6drnBsGt83Yiuw423g7x6MD7FxzR6sztuBnxkXcS/z4oBXjwNV2jKCIo7AQl9u16uDue6fKtZwCrY3j17LMzdR7hrdXFD00TgypN3JmgJF5DgF4HSRQJYGIxANOCA3gVdc+D3Xjni7nxMjGlXqrD9ob87ecYPMAembVLdL6ZN1e35sC2JYN8bZdr+Td5v+rD5W7dOSTdmLjk71U9v0KKuIHWUjDtNx4QwVtbKdC8XGGtZtd0T4F7afyJ0RSC7nnS+7i3TdnqHz1nOcNbeZNf2O48vMInZ8Jz6juhYph4Rsc5ChCf18GqcV4MocAIP9cs8pMtctk2pLuaLLnAn6YpqBy55Ox/TqOBqefEtnQFSM17P94b0wtpCLHJErIm4rsYIPkV0WYaguxf4eLDnXTThX7HOKJQBFl8a5jvO1HGLlz3nsX/PoihwQGQO02WGFWZJsOkvVZhOcQ24Z9tmdfCzWdjsgO0coTtRp3MxlNHVCYx0d5MBLlkmmLsfj6aTYatngsMezyiHV8YkxKuLpEANvOtZ2ByESzHms62lcD63ESqU4kKXiMjPQvuttA3JUb1HcnBSsDr0MtvlyYIrGOHFVajxchHOmw1ZQ5pyHQX3fzdd1TW3HHRtPBeF8JoxkRUYg6rOL1tEuaPqwW+aTdu6MwGFr0tPCZ7kzK44NzcoXynitBvVWpXWaTALyohHNaTzL1UHeFBWlzticNtRQnHh61nWLZBbatG6m7ZNBrtpe7B9YOjtozZhZuQEu1vxkxx15XlGaG8sI3E5sjYgFcQJix5lIg/P2Yl7iYGa9DdDP0+EufJsfxONk+TB6bqRDxd0KrfS2LC8gSaj28a1gpt8TmFLi2Q3nqtqLSxaEUhimtddyV0leehmmOJ7dw1fG21oQ+60O0xVbzSbbZhggkk2S6pOAbLEsyfPkjeW8ofgEkY9Cxyt9lTzu7Zb6HqAV9BAMbZg0TlFm7SCqfWOxzFdVChf4+o1CBLUI88Qmy5M0wwhsk+pwQOgIFMOKtMCSNM93WoCvVadROgtnCXBSmHzkiK0PHHEBLS/2YEkk329TlOKMHM1TlvrU08l8CmGGmWZSkr0e3ey2COQFsQ9LvIQfuV5IzGeq9hTv4ut1/tc4Pn+7hYx1bK9UQCVoDuKywS9YbfOG+I/Iml+y35t5kNleeWvj/KWJZ70h+fjpd1uU/XDvCbJD0jfMd9Ufb6X+3Ep8g4j4nIy7J/vkPfi9cXNMNzEhuVJyhIt2NJ+OT9nplF3L1CnJVoLNExRBtgkVWhlmTGctOsCQuJsgfkRW76g/eb7LP+LL0l2opvjAB7inqtflD14qKkTlS0XCZ6L46TPog0uctxQW6Vcy3scPmhLxt28eq2eVelg8x//yKLF/l+sLWw9+cJzlhPNCt1yV1PT8l66wImzWw1MuSh6Nf2XgK+cfhfck37GkuJu2WQr//qVajq+XmmlZURamklC7Ch5H6hVneo5h77fSH2au5PCd7Rfor2x/I09UPNwCs3bX9f6/csO7tosF8S7kXbG81Ar8cMXOQ/dhhL8D/HqKM+C7Kf4xktc/xH9KHnL6+Ty8/g8=</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>loopuntil</con:name>
          <con:value>25</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTS</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value>_87aa3e8d-2de2-46dd-b572-414003e22e9a</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value>urn:dece:userid:org:dece:A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value>A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value>urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value>A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>NodeRole</con:name>
          <con:value>urn:dece:role:retailer</con:value>
        </con:property>
        <con:property>
          <con:name>AccountID</con:name>
          <con:value>urn:dece:accountid:org:dece:DEF5738E543A633AE0401F0A05990CC0</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceID</con:name>
          <con:value>urn:dece:deviceid:org:dece:DEF585C6AEA11471E0401F0A07994634</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>API_NOT_AUTH</con:value>
        </con:property>
        <con:property>
          <con:name>ErrorDataVal</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetReqXml</con:name>
          <con:value>User-Agent: Apache-HttpClient/4.1.1 (java 1.5)
</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResXml</con:name>
          <con:value><![CDATA[<ErrorList xmlns="http://www.decellc.org/schema/2010/10/dece" xmlns:ns2="http://www.movielabs.com/schema/md/v1.07/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Error ErrorID="urn:dece:errorid:org:dece:Security:RoleInvalid">
      <Reason Language="en">API call not authorized</Reason>
      <OriginalRequest>https://qa.q.uvvu.com:7001/rest/1/0/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3AA06A9AA49F6E73D7E0401F0A059915F0/Device/urn%3Adece%3Adeviceid%3Aorg%3Adece%3AA09D9C22F11CBC6DE0401F0A05996898/DECEDomain</OriginalRequest>
      <ErrorLink>https://qa.q.uvvu.com:7001/rest/1/0/error/en/ErrorList.html#Security:RoleInvalid</ErrorLink>
   </Error>
</ErrorList>]]></con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResTime</con:name>
          <con:value>3419</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetID</con:name>
          <con:value>API call not authorizedhttps://qa.q.uvvu.com:7001/rest/1/0/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3AA06A9AA49F6E73D7E0401F0A059915F0/Device/urn%3Adece%3Adeviceid%3Aorg%3Adece%3AA09D9C22F11CBC6DE0401F0A05996898/DECEDomainhttps://qa.q.uvvu.com:7001/rest/1/0/error/en/ErrorList.html#Security:RoleInvalid</con:value>
        </con:property>
        <con:property>
          <con:name>DomainID</con:name>
          <con:value>urn:dece:domainid:dece:DEF587A47AF1508CE0401F0A07994D03</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_30002 -  DeviceGet - PERM - SecurityRoleValid - Invocation with DECE_CS" searchProperties="true" id="a7ffdb6f-137f-4c98-81a9-32256c563170" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="">
      <con:description>This test case will verify that the Application Tier properly responses to a DeviceGet invocation when the requesting node is DECE Customer Support.

Expected Result :

It should not allow API invocation for the "DECE CUSTOMER SERVICE" node.</con:description>
      <con:settings/>
      <con:testStep type="groovy" name="Verify Node User SAML Asssertion" disabled="true">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.model.testsuite.TestRunner.Status


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def ValSamlAssertion = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Validate SAML Assertion");

	ValSamlAssertion.setPropertyValue("TCaseName",testCase.getName());
	ValSamlAssertion.setPropertyValue("TSuiteName",testSuite.getName());

	def runnerTc = ValSamlAssertion.run( null , false )
	assert runnerTc.status == Status.FINISHED;

	rcUUID = testCase.getPropertyValue("rcUUID");

	if (runnerTc.status != Status.FINISHED || rcUUID.toInteger()!= 1){

			
		testCase.setPropertyValue("nodetype","manufacturerportal");
		testCase.setPropertyValue("nodeid","0701");
		testCase.setPropertyValue("username","sch-drm_user1");
		testCase.setPropertyValue("password","Password1");
		testCase.setPropertyValue("accountoid",null);
		testCase.setPropertyValue("useroid",null);
		testCase.setPropertyValue("assertid",null);
		testCase.setPropertyValue("SAMLassertion",null);
		testCase.setPropertyValue("tokentype","urn:dece:type:tokentype:usernamepassword");
		testCase.setPropertyValue("loopuntil","25");
		testCase.setPropertyValue("expectErrTypeSTS","SUCCESS");
		testCase.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
			
		log.info " SAML Assertion Expired ! re-generating Assertion";
		def RunSTS = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get SAML Assertion - STS")

				RunSTS.setPropertyValue("TCaseName",testCase.getName());
				RunSTS.setPropertyValue("TSuiteName",testSuite.getName());

				def runnerSTS = RunSTS.run( null , false )

				assert runnerSTS.status == Status.FINISHED;

		}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call LicAppCreate Request with Valid Data" disabled="true">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0");
testCase.setPropertyValue("expectErrTypeLAC","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedDeviceDDReq = testProject.getTestSuiteByName("Staging DeviceGet").getTestCaseByName("LicAppCreate Request");

FeedDeviceDDReq.setPropertyValue("TCaseName",testCase.getName());
FeedDeviceDDReq.setPropertyValue("TSuiteName",testSuite.getName());


def runnerTC = FeedDeviceDDReq.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call DeviceUpdate Request for evict Cache" id="ce20a9c6-4367-424d-acc1-882267aad4f7">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )
WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );


TSrunnerRTC.runTestStepByName("DeviceUpdateRequest");

assert TSrunnerRTC.status == Status.INITIALIZED;</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Feed DeviceGet Request with Valid Data">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("SAMLassertion","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");
testCase.setPropertyValue("assertionUUID","_87aa3e8d-2de2-46dd-b572-414003e22e9a");
testCase.setPropertyValue("username","firstfullusername_20130612_06223");
testCase.setPropertyValue("password","testing");
testCase.setPropertyValue("accountoid","DEF5738E543B633AE0401F0A05990CC0");
testCase.setPropertyValue("useroid","DEF5738E544A633AE0401F0A05990CC0");
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:DEF5738E543A633AE0401F0A05990CC0");
testCase.setPropertyValue("DeviceID","urn:dece:deviceid:org:dece:DEF585C6AEA11471E0401F0A07994634");
testCase.setPropertyValue("DomainID","urn:dece:domainid:dece:DEF587A47AF1508CE0401F0A07994D03");
testCase.setPropertyValue("expectErrType","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedRTLReq = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request");

FeedRTLReq.setPropertyValue("TCaseName",testCase.getName());
FeedRTLReq.setPropertyValue("TSuiteName",testSuite.getName());

WsdlTestCaseRunner TSrunner = new WsdlTestCaseRunner( FeedRTLReq, null );

TSrunner.runTestStepByName("Get the DeviceGet Properties");
TSrunner.runTestStepByName("pem set");
assert TSrunner.status == Status.INITIALIZED;</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Set Node Role to DECE_CS">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

// Set Node Role

testCase.setPropertyValue("NodeRole","urn:dece:role:dece:customersupport");

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get-Set Node Role")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )

WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );

TSrunnerRTC.runTestStepByName("Set Node Role for DDD");

assert TSrunnerRTC.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call DeviceGet Request">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )

WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );

TSrunnerRTC.runTestStepByName("DeviceGetRequest");

assert TSrunnerRTC.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract DeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Extract DeviceGet Information")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify theDeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Response Validation")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep><con:testStep type="groovy" name="Set Node Role to Retailer" id="073f97e6-b3c8-4ca1-baec-a67a18a23edd">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

// Set Node Role

testCase.setPropertyValue("NodeRole","urn:dece:role:retailer");


def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get-Set Node Role")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )

WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );

TSrunnerRTC.runTestStepByName("Set Node Role for DDD");

assert TSrunnerRTC.status == Status.INITIALIZED;</script></con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value>28193</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>SAMLExpDate</con:name>
          <con:value>2014-06-11 06:24:48.0</con:value>
        </con:property>
        <con:property>
          <con:name>rcUUID</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>nodetype</con:name>
          <con:value>manufacturerportal</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>0701</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>firstfullusername_20130612_06223</con:value>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>testing</con:value>
        </con:property>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">DEF5738E543B633AE0401F0A05990CC0</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">DEF5738E544A633AE0401F0A05990CC0</con:value>
        </con:property>
        <con:property>
          <con:name>assertid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SAMLassertion</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">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</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>loopuntil</con:name>
          <con:value>25</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTS</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value>_87aa3e8d-2de2-46dd-b572-414003e22e9a</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value>urn:dece:userid:org:dece:A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value>A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value>urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value>A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>AccountID</con:name>
          <con:value>urn:dece:accountid:org:dece:DEF5738E543A633AE0401F0A05990CC0</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceID</con:name>
          <con:value>urn:dece:deviceid:org:dece:DEF585C6AEA11471E0401F0A07994634</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>ErrorDataVal</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>NodeRole</con:name>
          <con:value>urn:dece:role:retailer</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetReqXml</con:name>
          <con:value>User-Agent: Apache-HttpClient/4.1.1 (java 1.5)
</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResXml</con:name>
          <con:value><![CDATA[<Device IsLegacy="false" DeviceID="urn:dece:deviceid:org:dece:A09D9C22F11CBC6DE0401F0A05996898" xmlns="http://www.decellc.org/schema/2010/10/dece" xmlns:ns2="http://www.movielabs.com/schema/md/v1.07/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <DisplayName>DeviceInfoDisplayName</DisplayName>
   <Manufacturer>Microsoft</Manufacturer>
   <Model>V344</Model>
   <Brand Language="en-US">DeviceInfoBrand</Brand>
   <SerialNo>123432442323424</SerialNo>
   <Image MimeType="MimeType3" Width="50" Height="50">http://www.oxygenxml.com/1234</Image>
   <LicAppID>urn:dece:licappid:org:dece:A09D9C22F11EBC6DE0401F0A05996898</LicAppID>
   <DRMClientID>urn:dece:drmclientid:org:dece:A0E2E4B822DB1B7CE0401F0A07994404</DRMClientID>
   <ResourceStatus>
      <Current CreatedBy="urn:dece:org:org:dece:0701" CreationDate="2011-04-11T04:02:39.637Z">
         <Value>urn:dece:type:status:pending</Value>
         <Description>Device Created</Description>
      </Current>
   </ResourceStatus>
</Device>]]></con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResTime</con:name>
          <con:value>132</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetID</con:name>
          <con:value>API call not authorizedhttps://qa.q.uvvu.com:7001/rest/1/0/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3AA06A9AA49F6E73D7E0401F0A059915F0/Device/urn%3Adece%3Adeviceid%3Aorg%3Adece%3AA09D9C22F11CBC6DE0401F0A05996898/DECEDomainhttps://qa.q.uvvu.com:7001/rest/1/0/error/en/ErrorList.html#Security:RoleInvalid</con:value>
        </con:property>
        <con:property>
          <con:name>DomainID</con:name>
          <con:value>urn:dece:domainid:dece:DEF587A47AF1508CE0401F0A07994D03</con:value>
        </con:property>
      <con:property><con:name>ETag</con:name><con:value>"E940CE4DDAFD787EE0401F0A059916AE:F0246DC7"</con:value></con:property><con:property><con:name>Last-Modified</con:name><con:value>Mon, 21 Oct 2013 12:57:01 GMT</con:value></con:property></con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_30003 -  DeviceGet - PERM - SecurityRoleInvalid - Invocation with DECE_Coordinator" searchProperties="true" id="254513fd-dd17-4715-8e7a-a4deb993063c" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="">
      <con:description>This test case will verify that the Application Tier properly responses to a DeviceGet invocation when the requesting node is DECE Coordinator.

Expected Result :

It should not allow API invocation for the "DECE COORDINATOR" node.</con:description>
      <con:settings/>
      <con:testStep type="groovy" name="Verify Node User SAML Asssertion" disabled="true">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.model.testsuite.TestRunner.Status


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def ValSamlAssertion = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Validate SAML Assertion");

	ValSamlAssertion.setPropertyValue("TCaseName",testCase.getName());
	ValSamlAssertion.setPropertyValue("TSuiteName",testSuite.getName());

	def runnerTc = ValSamlAssertion.run( null , false )
	assert runnerTc.status == Status.FINISHED;

	rcUUID = testCase.getPropertyValue("rcUUID");

	if (runnerTc.status != Status.FINISHED || rcUUID.toInteger()!= 1){

			
		testCase.setPropertyValue("nodetype","manufacturerportal");
		testCase.setPropertyValue("nodeid","0701");
		testCase.setPropertyValue("username","sch-drm_user1");
		testCase.setPropertyValue("password","Password1");
		testCase.setPropertyValue("accountoid",null);
		testCase.setPropertyValue("useroid",null);
		testCase.setPropertyValue("assertid",null);
		testCase.setPropertyValue("SAMLassertion",null);
		testCase.setPropertyValue("tokentype","urn:dece:type:tokentype:usernamepassword");
		testCase.setPropertyValue("loopuntil","25");
		testCase.setPropertyValue("expectErrTypeSTS","SUCCESS");
		testCase.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
			
		log.info " SAML Assertion Expired ! re-generating Assertion";
		def RunSTS = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get SAML Assertion - STS")

				RunSTS.setPropertyValue("TCaseName",testCase.getName());
				RunSTS.setPropertyValue("TSuiteName",testSuite.getName());

				def runnerSTS = RunSTS.run( null , false )

				assert runnerSTS.status == Status.FINISHED;

		}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call LicAppCreate Request with Valid Data" disabled="true">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0");
testCase.setPropertyValue("expectErrTypeLAC","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedDeviceDDReq = testProject.getTestSuiteByName("Staging DeviceGet").getTestCaseByName("LicAppCreate Request");

FeedDeviceDDReq.setPropertyValue("TCaseName",testCase.getName());
FeedDeviceDDReq.setPropertyValue("TSuiteName",testSuite.getName());


def runnerTC = FeedDeviceDDReq.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call DeviceUpdate Request for evict Cache" id="75ab2ade-efd3-4523-b1a3-c87c386e3f0f">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )
WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );


TSrunnerRTC.runTestStepByName("DeviceUpdateRequest");

assert TSrunnerRTC.status == Status.INITIALIZED;</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Feed DeviceGet Request with Valid Data">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("SAMLassertion","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");
testCase.setPropertyValue("assertionUUID","_87aa3e8d-2de2-46dd-b572-414003e22e9a");
testCase.setPropertyValue("username","firstfullusername_20130612_06223");
testCase.setPropertyValue("password","testing");
testCase.setPropertyValue("accountoid","DEF5738E543B633AE0401F0A05990CC0");
testCase.setPropertyValue("useroid","DEF5738E544A633AE0401F0A05990CC0");
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:DEF5738E543A633AE0401F0A05990CC0");
testCase.setPropertyValue("DeviceID","urn:dece:deviceid:org:dece:DEF585C6AEA11471E0401F0A07994634");
testCase.setPropertyValue("DomainID","urn:dece:domainid:dece:DEF587A47AF1508CE0401F0A07994D03");
testCase.setPropertyValue("expectErrType","API_NOT_AUTH");
testCase.setPropertyValue("ErrorDataVal","1");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedRTLReq = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request");

FeedRTLReq.setPropertyValue("TCaseName",testCase.getName());
FeedRTLReq.setPropertyValue("TSuiteName",testSuite.getName());

WsdlTestCaseRunner TSrunner = new WsdlTestCaseRunner( FeedRTLReq, null );

TSrunner.runTestStepByName("Get the DeviceGet Properties");
TSrunner.runTestStepByName("pem set");
assert TSrunner.status == Status.INITIALIZED;</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Set Node Role to Coordinator">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

// Set Node Role

testCase.setPropertyValue("NodeRole","urn:dece:role:coordinator");


def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get-Set Node Role")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )

WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );

TSrunnerRTC.runTestStepByName("Set Node Role for DDD");

assert TSrunnerRTC.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call DeviceGet Request">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )

WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );

TSrunnerRTC.runTestStepByName("DeviceGetRequest");

assert TSrunnerRTC.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract DeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Extract DeviceGet Information")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify theDeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Response Validation")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep><con:testStep type="groovy" name="Set Node Role to Retailer">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

// Set Node Role

testCase.setPropertyValue("NodeRole","urn:dece:role:retailer");


def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get-Set Node Role")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )

WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );

TSrunnerRTC.runTestStepByName("Set Node Role for DDD");

assert TSrunnerRTC.status == Status.INITIALIZED;</script></con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value>28194</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>SAMLExpDate</con:name>
          <con:value>2014-06-11 06:24:48.0</con:value>
        </con:property>
        <con:property>
          <con:name>rcUUID</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>nodetype</con:name>
          <con:value>manufacturerportal</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>0701</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>firstfullusername_20130612_06223</con:value>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>testing</con:value>
        </con:property>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value>DEF5738E543B633AE0401F0A05990CC0</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value>DEF5738E544A633AE0401F0A05990CC0</con:value>
        </con:property>
        <con:property>
          <con:name>assertid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SAMLassertion</con:name>
          <con:value>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</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>loopuntil</con:name>
          <con:value>25</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTS</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value>_87aa3e8d-2de2-46dd-b572-414003e22e9a</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value>urn:dece:userid:org:dece:A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value>A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value>urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value>A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>AccountID</con:name>
          <con:value>urn:dece:accountid:org:dece:DEF5738E543A633AE0401F0A05990CC0</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceID</con:name>
          <con:value>urn:dece:deviceid:org:dece:DEF585C6AEA11471E0401F0A07994634</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>API_NOT_AUTH</con:value>
        </con:property>
        <con:property>
          <con:name>ErrorDataVal</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>NodeRole</con:name>
          <con:value>urn:dece:role:retailer</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetReqXml</con:name>
          <con:value>User-Agent: Apache-HttpClient/4.1.1 (java 1.5)
</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResXml</con:name>
          <con:value><![CDATA[<ErrorList xmlns="http://www.decellc.org/schema/2010/10/dece" xmlns:ns2="http://www.movielabs.com/schema/md/v1.07/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Error ErrorID="urn:dece:errorid:org:dece:Security:RoleInvalid">
      <Reason Language="en">API call not authorized</Reason>
      <OriginalRequest>https://qa.q.uvvu.com:7001/rest/1/0/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3AA06A9AA49F6E73D7E0401F0A059915F0/Device/urn%3Adece%3Adeviceid%3Aorg%3Adece%3AA09D9C22F11CBC6DE0401F0A05996898/DECEDomain</OriginalRequest>
      <ErrorLink>https://qa.q.uvvu.com:7001/rest/1/0/error/en/ErrorList.html#Security:RoleInvalid</ErrorLink>
   </Error>
</ErrorList>]]></con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResTime</con:name>
          <con:value>116</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetID</con:name>
          <con:value>API call not authorizedhttps://qa.q.uvvu.com:7001/rest/1/0/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3AA06A9AA49F6E73D7E0401F0A059915F0/Device/urn%3Adece%3Adeviceid%3Aorg%3Adece%3AA09D9C22F11CBC6DE0401F0A05996898/DECEDomainhttps://qa.q.uvvu.com:7001/rest/1/0/error/en/ErrorList.html#Security:RoleInvalid</con:value>
        </con:property>
        <con:property>
          <con:name>DomainID</con:name>
          <con:value>urn:dece:domainid:dece:DEF587A47AF1508CE0401F0A07994D03</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_30004 -  DeviceGet - PERM - SecurityRoleInvalid - Invocation with DECE_Coordinator_CS" searchProperties="true" id="9c362576-db1a-4e7c-8e21-de39099d23ca" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="">
      <con:description>This test case will verify that the Application Tier properly responses to a DeviceGet invocation when the requesting node is DECE Coordinator Customer Support.

Expected Result :

It should not allow API invocation for the "DECE COORDINATOR CUSTOMER SUPPORT" node.</con:description>
      <con:settings/>
      <con:testStep type="groovy" name="Verify Node User SAML Asssertion" disabled="true">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.model.testsuite.TestRunner.Status


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def ValSamlAssertion = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Validate SAML Assertion");

	ValSamlAssertion.setPropertyValue("TCaseName",testCase.getName());
	ValSamlAssertion.setPropertyValue("TSuiteName",testSuite.getName());

	def runnerTc = ValSamlAssertion.run( null , false )
	assert runnerTc.status == Status.FINISHED;

	rcUUID = testCase.getPropertyValue("rcUUID");

	if (runnerTc.status != Status.FINISHED || rcUUID.toInteger()!= 1){

			
		testCase.setPropertyValue("nodetype","manufacturerportal");
		testCase.setPropertyValue("nodeid","0701");
		testCase.setPropertyValue("username","sch-drm_user1");
		testCase.setPropertyValue("password","Password1");
		testCase.setPropertyValue("accountoid",null);
		testCase.setPropertyValue("useroid",null);
		testCase.setPropertyValue("assertid",null);
		testCase.setPropertyValue("SAMLassertion",null);
		testCase.setPropertyValue("tokentype","urn:dece:type:tokentype:usernamepassword");
		testCase.setPropertyValue("loopuntil","25");
		testCase.setPropertyValue("expectErrTypeSTS","SUCCESS");
		testCase.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
			
		log.info " SAML Assertion Expired ! re-generating Assertion";
		def RunSTS = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get SAML Assertion - STS")

				RunSTS.setPropertyValue("TCaseName",testCase.getName());
				RunSTS.setPropertyValue("TSuiteName",testSuite.getName());

				def runnerSTS = RunSTS.run( null , false )

				assert runnerSTS.status == Status.FINISHED;

		}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call LicAppCreate Request with Valid Data" disabled="true">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0");
testCase.setPropertyValue("expectErrTypeLAC","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedDeviceDDReq = testProject.getTestSuiteByName("Staging DeviceGet").getTestCaseByName("LicAppCreate Request");

FeedDeviceDDReq.setPropertyValue("TCaseName",testCase.getName());
FeedDeviceDDReq.setPropertyValue("TSuiteName",testSuite.getName());


def runnerTC = FeedDeviceDDReq.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call DeviceUpdate Request for evict Cache" id="ff2a192b-24dd-4742-8dba-5c2d99416a73">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )
WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );


TSrunnerRTC.runTestStepByName("DeviceUpdateRequest");

assert TSrunnerRTC.status == Status.INITIALIZED;</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Feed DeviceGet Request with Valid Data">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("SAMLassertion","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");
testCase.setPropertyValue("assertionUUID","_87aa3e8d-2de2-46dd-b572-414003e22e9a");
testCase.setPropertyValue("username","firstfullusername_20130612_06223");
testCase.setPropertyValue("password","testing");
testCase.setPropertyValue("accountoid","DEF5738E543B633AE0401F0A05990CC0");
testCase.setPropertyValue("useroid","DEF5738E544A633AE0401F0A05990CC0");
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:DEF5738E543A633AE0401F0A05990CC0");
testCase.setPropertyValue("DeviceID","urn:dece:deviceid:org:dece:DEF585C6AEA11471E0401F0A07994634");
testCase.setPropertyValue("DomainID","urn:dece:domainid:dece:DEF587A47AF1508CE0401F0A07994D03");
testCase.setPropertyValue("expectErrType","API_NOT_AUTH");
testCase.setPropertyValue("ErrorDataVal","1");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedRTLReq = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request");

FeedRTLReq.setPropertyValue("TCaseName",testCase.getName());
FeedRTLReq.setPropertyValue("TSuiteName",testSuite.getName());

WsdlTestCaseRunner TSrunner = new WsdlTestCaseRunner( FeedRTLReq, null );

TSrunner.runTestStepByName("Get the DeviceGet Properties");
TSrunner.runTestStepByName("pem set");
assert TSrunner.status == Status.INITIALIZED;</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Set Node Role to Coordinator CS">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

// Set Node Role

testCase.setPropertyValue("NodeRole","urn:dece:role:coordinator:customersupport");


def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get-Set Node Role")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )

WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );

TSrunnerRTC.runTestStepByName("Set Node Role for DDD");

assert TSrunnerRTC.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call DeviceGet Request" id="6c4693cd-3542-4ec1-80ab-d6c4c1bf5a45">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )

WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );

TSrunnerRTC.runTestStepByName("DeviceGetRequest");

assert TSrunnerRTC.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract DeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Extract DeviceGet Information")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify theDeviceGet Response" id="783036f4-e239-4e7b-8f08-c0d835dc7f1f">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Response Validation")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep><con:testStep type="groovy" name="Set Node Role to Retailer">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

// Set Node Role

testCase.setPropertyValue("NodeRole","urn:dece:role:retailer");


def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get-Set Node Role")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )

WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );

TSrunnerRTC.runTestStepByName("Set Node Role for DDD");

assert TSrunnerRTC.status == Status.INITIALIZED;</script></con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value>28195</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>SAMLExpDate</con:name>
          <con:value>2013-06-11 15:49:23.0</con:value>
        </con:property>
        <con:property>
          <con:name>rcUUID</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>nodetype</con:name>
          <con:value>manufacturerportal</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>0701</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>firstfullusername_20130612_06223</con:value>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>testing</con:value>
        </con:property>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">DEF5738E543B633AE0401F0A05990CC0</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">DEF5738E544A633AE0401F0A05990CC0</con:value>
        </con:property>
        <con:property>
          <con:name>assertid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SAMLassertion</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">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</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>loopuntil</con:name>
          <con:value>25</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTS</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value>_87aa3e8d-2de2-46dd-b572-414003e22e9a</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value>urn:dece:userid:org:dece:A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value>A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value>urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value>A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>AccountID</con:name>
          <con:value>urn:dece:accountid:org:dece:DEF5738E543A633AE0401F0A05990CC0</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceID</con:name>
          <con:value>urn:dece:deviceid:org:dece:DEF585C6AEA11471E0401F0A07994634</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>API_NOT_AUTH</con:value>
        </con:property>
        <con:property>
          <con:name>ErrorDataVal</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>NodeRole</con:name>
          <con:value>urn:dece:role:retailer</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetReqXml</con:name>
          <con:value>User-Agent: Apache-HttpClient/4.1.1 (java 1.5)
</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResXml</con:name>
          <con:value><![CDATA[<ErrorList xmlns="http://www.decellc.org/schema/2010/10/dece" xmlns:ns2="http://www.movielabs.com/schema/md/v1.07/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Error ErrorID="urn:dece:errorid:org:dece:Security:RoleInvalid">
      <Reason Language="en">API call not authorized</Reason>
      <OriginalRequest>https://qa.q.uvvu.com:7001/rest/1/0/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3AA06A9AA49F6E73D7E0401F0A059915F0/Device/urn%3Adece%3Adeviceid%3Aorg%3Adece%3AA09D9C22F11CBC6DE0401F0A05996898/DECEDomain</OriginalRequest>
      <ErrorLink>https://qa.q.uvvu.com:7001/rest/1/0/error/en/ErrorList.html#Security:RoleInvalid</ErrorLink>
   </Error>
</ErrorList>]]></con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResTime</con:name>
          <con:value>111</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetID</con:name>
          <con:value>API call not authorizedhttps://qa.q.uvvu.com:7001/rest/1/0/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3AA06A9AA49F6E73D7E0401F0A059915F0/Device/urn%3Adece%3Adeviceid%3Aorg%3Adece%3AA09D9C22F11CBC6DE0401F0A05996898/DECEDomainhttps://qa.q.uvvu.com:7001/rest/1/0/error/en/ErrorList.html#Security:RoleInvalid</con:value>
        </con:property>
        <con:property>
          <con:name>DomainID</con:name>
          <con:value>urn:dece:domainid:dece:DEF587A47AF1508CE0401F0A07994D03</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_30005 -  DeviceGet - PERM - SecurityRoleValid - Invocation with DECE_Portal." searchProperties="true" id="5da99f00-2f0e-45b3-8b1d-56292f4028a1" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="">
      <con:description>This test case will verify that the Application Tier properly responses to a DeviceGet invocation when the requesting node is DECE Coordinator Portal.

Expected Result :

It should not allow API invocation for the "DECE PORTAL" node.</con:description>
      <con:settings/>
      <con:testStep type="groovy" name="Verify Node User SAML Asssertion" disabled="true">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.model.testsuite.TestRunner.Status


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def ValSamlAssertion = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Validate SAML Assertion");

	ValSamlAssertion.setPropertyValue("TCaseName",testCase.getName());
	ValSamlAssertion.setPropertyValue("TSuiteName",testSuite.getName());

	def runnerTc = ValSamlAssertion.run( null , false )
	assert runnerTc.status == Status.FINISHED;

	rcUUID = testCase.getPropertyValue("rcUUID");

	if (runnerTc.status != Status.FINISHED || rcUUID.toInteger()!= 1){

			
		testCase.setPropertyValue("nodetype","manufacturerportal");
		testCase.setPropertyValue("nodeid","0701");
		testCase.setPropertyValue("username","sch-drm_user1");
		testCase.setPropertyValue("password","Password1");
		testCase.setPropertyValue("accountoid",null);
		testCase.setPropertyValue("useroid",null);
		testCase.setPropertyValue("assertid",null);
		testCase.setPropertyValue("SAMLassertion",null);
		testCase.setPropertyValue("tokentype","urn:dece:type:tokentype:usernamepassword");
		testCase.setPropertyValue("loopuntil","25");
		testCase.setPropertyValue("expectErrTypeSTS","SUCCESS");
		testCase.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
			
		log.info " SAML Assertion Expired ! re-generating Assertion";
		def RunSTS = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get SAML Assertion - STS")

				RunSTS.setPropertyValue("TCaseName",testCase.getName());
				RunSTS.setPropertyValue("TSuiteName",testSuite.getName());

				def runnerSTS = RunSTS.run( null , false )

				assert runnerSTS.status == Status.FINISHED;

		}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call LicAppCreate Request with Valid Data" disabled="true">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0");
testCase.setPropertyValue("expectErrTypeLAC","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedDeviceDDReq = testProject.getTestSuiteByName("Staging DeviceGet").getTestCaseByName("LicAppCreate Request");

FeedDeviceDDReq.setPropertyValue("TCaseName",testCase.getName());
FeedDeviceDDReq.setPropertyValue("TSuiteName",testSuite.getName());


def runnerTC = FeedDeviceDDReq.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call DeviceUpdate Request for evict Cache" id="9733da0b-e84b-48c3-bbe4-8d9b4f10cd52">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )
WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );


TSrunnerRTC.runTestStepByName("DeviceUpdateRequest");

assert TSrunnerRTC.status == Status.INITIALIZED;</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Feed DeviceGet Request with Valid Data">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("SAMLassertion","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");
testCase.setPropertyValue("assertionUUID","_87aa3e8d-2de2-46dd-b572-414003e22e9a");
testCase.setPropertyValue("username","firstfullusername_20130612_06223");
testCase.setPropertyValue("password","testing");
testCase.setPropertyValue("accountoid","DEF5738E543B633AE0401F0A05990CC0");
testCase.setPropertyValue("useroid","DEF5738E544A633AE0401F0A05990CC0");
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:DEF5738E543A633AE0401F0A05990CC0");
testCase.setPropertyValue("DeviceID","urn:dece:deviceid:org:dece:DEF585C6AEA11471E0401F0A07994634");
testCase.setPropertyValue("DomainID","urn:dece:domainid:dece:DEF587A47AF1508CE0401F0A07994D03");
testCase.setPropertyValue("expectErrType","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedRTLReq = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request");

FeedRTLReq.setPropertyValue("TCaseName",testCase.getName());
FeedRTLReq.setPropertyValue("TSuiteName",testSuite.getName());

WsdlTestCaseRunner TSrunner = new WsdlTestCaseRunner( FeedRTLReq, null );

TSrunner.runTestStepByName("Get the DeviceGet Properties");
TSrunner.runTestStepByName("pem set");
assert TSrunner.status == Status.INITIALIZED;</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Set Node Role to DECE- Portal">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

// Set Node Role

testCase.setPropertyValue("NodeRole","urn:dece:role:portal");


def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get-Set Node Role")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )

WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );

TSrunnerRTC.runTestStepByName("Set Node Role for DDD");

assert TSrunnerRTC.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call DeviceGet Request">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )

WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );

TSrunnerRTC.runTestStepByName("DeviceGetRequest");

assert TSrunnerRTC.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract DeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Extract DeviceGet Information")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify theDeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Response Validation")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep><con:testStep type="groovy" name="Set Node Role to Retailer">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

// Set Node Role

testCase.setPropertyValue("NodeRole","urn:dece:role:retailer");


def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get-Set Node Role")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )

WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );

TSrunnerRTC.runTestStepByName("Set Node Role for DDD");

assert TSrunnerRTC.status == Status.INITIALIZED;</script></con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value>28196</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>SAMLExpDate</con:name>
          <con:value>2014-06-11 06:24:48.0</con:value>
        </con:property>
        <con:property>
          <con:name>rcUUID</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>nodetype</con:name>
          <con:value>manufacturerportal</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>0701</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>firstfullusername_20130612_06223</con:value>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>testing</con:value>
        </con:property>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value>DEF5738E543B633AE0401F0A05990CC0</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value>DEF5738E544A633AE0401F0A05990CC0</con:value>
        </con:property>
        <con:property>
          <con:name>assertid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SAMLassertion</con:name>
          <con:value>nVdpc6pKE/7ur7A8Hy3D5oaVpGpYVFRUBBf4cgthQJRNBgT99e9gosfk5OTNvVWpitP0dD+9TM8zz8gMfLoHEIJJ6kVhVRJeav90O6bJwK7doG1IN5pt225sWx38i2qSJANpGrJmrSohlEEpRKkZpi81mqSYBtluULRG0b0W/us8teiWUauuYIKwaazyRNaqReCHqHd1+1LLkrAXmchDvdAMIOqlVk8F8qSHNXvmDVPt9fkN5dVh8rpL07hHENaTDS3o+9aTFQXEM/FB59lGPdVzQzPNEvju00Yvtfe9eZ4/5cxTlLgETZIkQbIE1rGR5/6qvVZum6EthU70tubNMAo9y/S9i1mCkmG6i+wq8N0o8dJd8BfTFEGRpekGLKyGRTXDXzXit4Mruh9a+gAyQWYD7UzqZmwBHZjA0ILV5UJ6qf36WQXf9mqJGSInSgL0af3vIMHwBP0ohnYD3SK7ofu5xS/S9foMrZ4UWn6GvBOclm0SmxZE1XkCHa+YeAg3n42q1/JXC3TrMGj9m5I8E484MWzii8wIngtR+l/q9VirNysr08/gq21mCa/b9XV97ygnlx7F2oISl1R/3ny5QnhUfgN1L/X7+nOj3vvqfdOM2pOh49gXXZ/wW2FjCqrVFYB4ljVrZguTyBLlBaHKmXiM18TUTLlwNerE9TUKDD50wvO+OwQrekAeh3wFjQb1UUtZzdqbZHieZ8SO6vDCkNWngQ62QE1jbhAoBKH2SX5jaEzfG6oTn0W6fCHcgrH7zNHY8ItseZaTysxDLe4wlFOvXU8ulA4P0svvmB5jKOMaw/M1yPL3pkWygpma9wVfTgoHH88UvsqSxNcFngeQd0EuccCVuMkFTDn3cNwdvAGbkxxQln0ggLO8ALng6sJKUcZibq9WvrGS+n1OXjTzIdCFCv4giMVKMDYj0lwbsU73SUPlOHuziLbMKLaHh3y4s6ayJudTTTrLe7GYaiK5vsrcAq8v8l6mZtqSqaz3HCsvxFzIrx4FMd9NjfUi1pdsbl1ERQbNAaCWIr+Th1qwoixmsbP24kQGh6uc28n8aiUXogbmFc6drnBsGt83Yiuw423g7x6MD7FxzR6sztuBnxkXcS/z4oBXjwNV2jKCIo7AQl9u16uDue6fKtZwCrY3j17LMzdR7hrdXFD00TgypN3JmgJF5DgF4HSRQJYGIxANOCA3gVdc+D3Xjni7nxMjGlXqrD9ob87ecYPMAembVLdL6ZN1e35sC2JYN8bZdr+Td5v+rD5W7dOSTdmLjk71U9v0KKuIHWUjDtNx4QwVtbKdC8XGGtZtd0T4F7afyJ0RSC7nnS+7i3TdnqHz1nOcNbeZNf2O48vMInZ8Jz6juhYph4Rsc5ChCf18GqcV4MocAIP9cs8pMtctk2pLuaLLnAn6YpqBy55Ox/TqOBqefEtnQFSM17P94b0wtpCLHJErIm4rsYIPkV0WYaguxf4eLDnXTThX7HOKJQBFl8a5jvO1HGLlz3nsX/PoihwQGQO02WGFWZJsOkvVZhOcQ24Z9tmdfCzWdjsgO0coTtRp3MxlNHVCYx0d5MBLlkmmLsfj6aTYatngsMezyiHV8YkxKuLpEANvOtZ2ByESzHms62lcD63ESqU4kKXiMjPQvuttA3JUb1HcnBSsDr0MtvlyYIrGOHFVajxchHOmw1ZQ5pyHQX3fzdd1TW3HHRtPBeF8JoxkRUYg6rOL1tEuaPqwW+aTdu6MwGFr0tPCZ7kzK44NzcoXynitBvVWpXWaTALyohHNaTzL1UHeFBWlzticNtRQnHh61nWLZBbatG6m7ZNBrtpe7B9YOjtozZhZuQEu1vxkxx15XlGaG8sI3E5sjYgFcQJix5lIg/P2Yl7iYGa9DdDP0+EufJsfxONk+TB6bqRDxd0KrfS2LC8gSaj28a1gpt8TmFLi2Q3nqtqLSxaEUhimtddyV0leehmmOJ7dw1fG21oQ+60O0xVbzSbbZhggkk2S6pOAbLEsyfPkjeW8ofgEkY9Cxyt9lTzu7Zb6HqAV9BAMbZg0TlFm7SCqfWOxzFdVChf4+o1CBLUI88Qmy5M0wwhsk+pwQOgIFMOKtMCSNM93WoCvVadROgtnCXBSmHzkiK0PHHEBLS/2YEkk329TlOKMHM1TlvrU08l8CmGGmWZSkr0e3ey2COQFsQ9LvIQfuV5IzGeq9hTv4ut1/tc4Pn+7hYx1bK9UQCVoDuKywS9YbfOG+I/Iml+y35t5kNleeWvj/KWJZ70h+fjpd1uU/XDvCbJD0jfMd9Ufb6X+3Ep8g4j4nIy7J/vkPfi9cXNMNzEhuVJyhIt2NJ+OT9nplF3L1CnJVoLNExRBtgkVWhlmTGctOsCQuJsgfkRW76g/eb7LP+LL0l2opvjAB7inqtflD14qKkTlS0XCZ6L46TPog0uctxQW6Vcy3scPmhLxt28eq2eVelg8x//yKLF/l+sLWw9+cJzlhPNCt1yV1PT8l66wImzWw1MuSh6Nf2XgK+cfhfck37GkuJu2WQr//qVajq+XmmlZURamklC7Ch5H6hVneo5h77fSH2au5PCd7Rfor2x/I09UPNwCs3bX9f6/csO7tosF8S7kXbG81Ar8cMXOQ/dhhL8D/HqKM+C7Kf4xktc/xH9KHnL6+Ty8/g8=</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>loopuntil</con:name>
          <con:value>25</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTS</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value>_87aa3e8d-2de2-46dd-b572-414003e22e9a</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value>urn:dece:userid:org:dece:A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value>A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value>urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value>A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>AccountID</con:name>
          <con:value>urn:dece:accountid:org:dece:DEF5738E543A633AE0401F0A05990CC0</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceID</con:name>
          <con:value>urn:dece:deviceid:org:dece:DEF585C6AEA11471E0401F0A07994634</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>ErrorDataVal</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>NodeRole</con:name>
          <con:value>urn:dece:role:retailer</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetReqXml</con:name>
          <con:value>User-Agent: Apache-HttpClient/4.1.1 (java 1.5)
</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResXml</con:name>
          <con:value><![CDATA[<Device IsLegacy="false" DeviceID="urn:dece:deviceid:org:dece:A09D9C22F11CBC6DE0401F0A05996898" xmlns="http://www.decellc.org/schema/2010/10/dece" xmlns:ns2="http://www.movielabs.com/schema/md/v1.07/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <DisplayName>DeviceInfoDisplayName</DisplayName>
   <Manufacturer>Microsoft</Manufacturer>
   <Model>V344</Model>
   <Brand Language="en-US">DeviceInfoBrand</Brand>
   <SerialNo>123432442323424</SerialNo>
   <Image MimeType="MimeType3" Width="50" Height="50">http://www.oxygenxml.com/1234</Image>
   <LicAppID>urn:dece:licappid:org:dece:A09D9C22F11EBC6DE0401F0A05996898</LicAppID>
   <DRMClientID>urn:dece:drmclientid:org:dece:A0E2E4B822DB1B7CE0401F0A07994404</DRMClientID>
   <ResourceStatus>
      <Current CreatedBy="urn:dece:org:org:dece:0701" CreationDate="2011-04-11T04:02:39.637Z">
         <Value>urn:dece:type:status:pending</Value>
         <Description>Device Created</Description>
      </Current>
   </ResourceStatus>
</Device>]]></con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResTime</con:name>
          <con:value>248</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetID</con:name>
          <con:value>API call not authorizedhttps://qa.q.uvvu.com:7001/rest/1/0/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3AA06A9AA49F6E73D7E0401F0A059915F0/Device/urn%3Adece%3Adeviceid%3Aorg%3Adece%3AA09D9C22F11CBC6DE0401F0A05996898/DECEDomainhttps://qa.q.uvvu.com:7001/rest/1/0/error/en/ErrorList.html#Security:RoleInvalid</con:value>
        </con:property>
        <con:property>
          <con:name>DomainID</con:name>
          <con:value>urn:dece:domainid:dece:DEF587A47AF1508CE0401F0A07994D03</con:value>
        </con:property>
      <con:property><con:name>ETag</con:name><con:value>"E940CD06ACB0F988E0401F0A059916B0:F0246DC7"</con:value></con:property><con:property><con:name>Last-Modified</con:name><con:value>Mon, 21 Oct 2013 12:58:05 GMT</con:value></con:property></con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_30006 -  DeviceGet - PERM - SecurityRoleValid - Invocation with DECE_Portal_CS" searchProperties="true" id="193ae3d0-d952-4bb0-8cec-e3c3e103d936">
      <con:description>This test case will verify that the Application Tier properly responses to a DeviceGet invocation when the requesting node is DECE  Portal Customer Support.

Expected Result :

It should not allow API invocation for the "DECE PORTAL CUSTOMER SUPPORT" node.</con:description>
      <con:settings/>
      <con:testStep type="groovy" name="Verify Node User SAML Asssertion" disabled="true">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.model.testsuite.TestRunner.Status


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def ValSamlAssertion = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Validate SAML Assertion");

	ValSamlAssertion.setPropertyValue("TCaseName",testCase.getName());
	ValSamlAssertion.setPropertyValue("TSuiteName",testSuite.getName());

	def runnerTc = ValSamlAssertion.run( null , false )
	assert runnerTc.status == Status.FINISHED;

	rcUUID = testCase.getPropertyValue("rcUUID");

	if (runnerTc.status != Status.FINISHED || rcUUID.toInteger()!= 1){

			
		testCase.setPropertyValue("nodetype","manufacturerportal");
		testCase.setPropertyValue("nodeid","0701");
		testCase.setPropertyValue("username","sch-drm_user1");
		testCase.setPropertyValue("password","Password1");
		testCase.setPropertyValue("accountoid",null);
		testCase.setPropertyValue("useroid",null);
		testCase.setPropertyValue("assertid",null);
		testCase.setPropertyValue("SAMLassertion",null);
		testCase.setPropertyValue("tokentype","urn:dece:type:tokentype:usernamepassword");
		testCase.setPropertyValue("loopuntil","25");
		testCase.setPropertyValue("expectErrTypeSTS","SUCCESS");
		testCase.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
			
		log.info " SAML Assertion Expired ! re-generating Assertion";
		def RunSTS = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get SAML Assertion - STS")

				RunSTS.setPropertyValue("TCaseName",testCase.getName());
				RunSTS.setPropertyValue("TSuiteName",testSuite.getName());

				def runnerSTS = RunSTS.run( null , false )

				assert runnerSTS.status == Status.FINISHED;

		}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call LicAppCreate Request with Valid Data" disabled="true">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0");
testCase.setPropertyValue("expectErrTypeLAC","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedDeviceDDReq = testProject.getTestSuiteByName("Staging DeviceGet").getTestCaseByName("LicAppCreate Request");

FeedDeviceDDReq.setPropertyValue("TCaseName",testCase.getName());
FeedDeviceDDReq.setPropertyValue("TSuiteName",testSuite.getName());


def runnerTC = FeedDeviceDDReq.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call DeviceUpdate Request for evict Cache" id="5a75f689-de3d-42d4-95fd-88cadf0a99c6">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )
WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );


TSrunnerRTC.runTestStepByName("DeviceUpdateRequest");

assert TSrunnerRTC.status == Status.INITIALIZED;</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Feed DeviceGet Request with Valid Data">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("SAMLassertion","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");
testCase.setPropertyValue("assertionUUID","_87aa3e8d-2de2-46dd-b572-414003e22e9a");
testCase.setPropertyValue("username","firstfullusername_20130612_06223");
testCase.setPropertyValue("password","testing");
testCase.setPropertyValue("accountoid","DEF5738E543B633AE0401F0A05990CC0");
testCase.setPropertyValue("useroid","DEF5738E544A633AE0401F0A05990CC0");
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:DEF5738E543A633AE0401F0A05990CC0");
testCase.setPropertyValue("DeviceID","urn:dece:deviceid:org:dece:DEF585C6AEA11471E0401F0A07994634");
testCase.setPropertyValue("DomainID","urn:dece:domainid:dece:DEF587A47AF1508CE0401F0A07994D03");
testCase.setPropertyValue("expectErrType","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedRTLReq = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request");

FeedRTLReq.setPropertyValue("TCaseName",testCase.getName());
FeedRTLReq.setPropertyValue("TSuiteName",testSuite.getName());

WsdlTestCaseRunner TSrunner = new WsdlTestCaseRunner( FeedRTLReq, null );

TSrunner.runTestStepByName("Get the DeviceGet Properties");
TSrunner.runTestStepByName("pem set");
assert TSrunner.status == Status.INITIALIZED;</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Set Node Role to DECE Portal CS">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

// Set Node Role

testCase.setPropertyValue("NodeRole","urn:dece:role:portal:customersupport");

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get-Set Node Role")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )

WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );

TSrunnerRTC.runTestStepByName("Set Node Role for DDD");

assert TSrunnerRTC.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call DeviceGet Request">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )

WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );

TSrunnerRTC.runTestStepByName("DeviceGetRequest");

assert TSrunnerRTC.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract DeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Extract DeviceGet Information")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify theDeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Response Validation")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep><con:testStep type="groovy" name="Set Node Role to Retailer">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

// Set Node Role

testCase.setPropertyValue("NodeRole","urn:dece:role:retailer");


def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get-Set Node Role")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )

WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );

TSrunnerRTC.runTestStepByName("Set Node Role for DDD");

assert TSrunnerRTC.status == Status.INITIALIZED;</script></con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value>28197</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>SAMLExpDate</con:name>
          <con:value>2014-06-11 06:24:48.0</con:value>
        </con:property>
        <con:property>
          <con:name>rcUUID</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>nodetype</con:name>
          <con:value>manufacturerportal</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>0701</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>firstfullusername_20130612_06223</con:value>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>testing</con:value>
        </con:property>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value>DEF5738E543B633AE0401F0A05990CC0</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value>DEF5738E544A633AE0401F0A05990CC0</con:value>
        </con:property>
        <con:property>
          <con:name>assertid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SAMLassertion</con:name>
          <con:value>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</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>loopuntil</con:name>
          <con:value>25</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTS</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value>_87aa3e8d-2de2-46dd-b572-414003e22e9a</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value>urn:dece:userid:org:dece:A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value>A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value>urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value>A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>AccountID</con:name>
          <con:value>urn:dece:accountid:org:dece:DEF5738E543A633AE0401F0A05990CC0</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceID</con:name>
          <con:value>urn:dece:deviceid:org:dece:DEF585C6AEA11471E0401F0A07994634</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>ErrorDataVal</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>NodeRole</con:name>
          <con:value>urn:dece:role:retailer</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetReqXml</con:name>
          <con:value>User-Agent: Apache-HttpClient/4.1.1 (java 1.5)
</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResXml</con:name>
          <con:value><![CDATA[<Device IsLegacy="false" DeviceID="urn:dece:deviceid:org:dece:A09D9C22F11CBC6DE0401F0A05996898" xmlns="http://www.decellc.org/schema/2010/10/dece" xmlns:ns2="http://www.movielabs.com/schema/md/v1.07/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <DisplayName>DeviceInfoDisplayName</DisplayName>
   <Manufacturer>Microsoft</Manufacturer>
   <Model>V344</Model>
   <Brand Language="en-US">DeviceInfoBrand</Brand>
   <SerialNo>123432442323424</SerialNo>
   <Image MimeType="MimeType3" Width="50" Height="50">http://www.oxygenxml.com/1234</Image>
   <LicAppID>urn:dece:licappid:org:dece:A09D9C22F11EBC6DE0401F0A05996898</LicAppID>
   <DRMClientID>urn:dece:drmclientid:org:dece:A0E2E4B822DB1B7CE0401F0A07994404</DRMClientID>
   <ResourceStatus>
      <Current CreatedBy="urn:dece:org:org:dece:0701" CreationDate="2011-04-11T04:02:39.637Z">
         <Value>urn:dece:type:status:pending</Value>
         <Description>Device Created</Description>
      </Current>
   </ResourceStatus>
</Device>]]></con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResTime</con:name>
          <con:value>224</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetID</con:name>
          <con:value>API call not authorizedhttps://qa.q.uvvu.com:7001/rest/1/0/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3AA06A9AA49F6E73D7E0401F0A059915F0/Device/urn%3Adece%3Adeviceid%3Aorg%3Adece%3AA09D9C22F11CBC6DE0401F0A05996898/DECEDomainhttps://qa.q.uvvu.com:7001/rest/1/0/error/en/ErrorList.html#Security:RoleInvalid</con:value>
        </con:property>
        <con:property>
          <con:name>DomainID</con:name>
          <con:value>urn:dece:domainid:dece:DEF587A47AF1508CE0401F0A07994D03</con:value>
        </con:property>
      <con:property><con:name>ETag</con:name><con:value>"E940D5E899DFBFEDE0401F0A05993115:F0246DC7"</con:value></con:property><con:property><con:name>Last-Modified</con:name><con:value>Mon, 21 Oct 2013 12:58:26 GMT</con:value></con:property></con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_30007 -  DeviceGet - PERM - SecurityRoleValid - Invocation with LLASP" searchProperties="true" id="3ffeb2cd-ffe6-40bf-a933-a85c487651d5">
      <con:description>This test case will verify that the Application Tier properly responses to a DeviceGet invocation when the requesting node is Linked LASP

Expected Result :

It should not allow API invocation for the "L-LASP" node.</con:description>
      <con:settings/>
      <con:testStep type="groovy" name="Verify Node User SAML Asssertion" disabled="true">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.model.testsuite.TestRunner.Status


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def ValSamlAssertion = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Validate SAML Assertion");

	ValSamlAssertion.setPropertyValue("TCaseName",testCase.getName());
	ValSamlAssertion.setPropertyValue("TSuiteName",testSuite.getName());

	def runnerTc = ValSamlAssertion.run( null , false )
	assert runnerTc.status == Status.FINISHED;

	rcUUID = testCase.getPropertyValue("rcUUID");

	if (runnerTc.status != Status.FINISHED || rcUUID.toInteger()!= 1){

			
		testCase.setPropertyValue("nodetype","manufacturerportal");
		testCase.setPropertyValue("nodeid","0701");
		testCase.setPropertyValue("username","sch-drm_user1");
		testCase.setPropertyValue("password","Password1");
		testCase.setPropertyValue("accountoid",null);
		testCase.setPropertyValue("useroid",null);
		testCase.setPropertyValue("assertid",null);
		testCase.setPropertyValue("SAMLassertion",null);
		testCase.setPropertyValue("tokentype","urn:dece:type:tokentype:usernamepassword");
		testCase.setPropertyValue("loopuntil","25");
		testCase.setPropertyValue("expectErrTypeSTS","SUCCESS");
		testCase.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
			
		log.info " SAML Assertion Expired ! re-generating Assertion";
		def RunSTS = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get SAML Assertion - STS")

				RunSTS.setPropertyValue("TCaseName",testCase.getName());
				RunSTS.setPropertyValue("TSuiteName",testSuite.getName());

				def runnerSTS = RunSTS.run( null , false )

				assert runnerSTS.status == Status.FINISHED;

		}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call LicAppCreate Request with Valid Data" disabled="true">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0");
testCase.setPropertyValue("expectErrTypeLAC","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedDeviceDDReq = testProject.getTestSuiteByName("Staging DeviceGet").getTestCaseByName("LicAppCreate Request");

FeedDeviceDDReq.setPropertyValue("TCaseName",testCase.getName());
FeedDeviceDDReq.setPropertyValue("TSuiteName",testSuite.getName());


def runnerTC = FeedDeviceDDReq.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call DeviceUpdate Request for evict Cache" id="c1860c72-1b3a-42bc-9519-73f11accf833">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )
WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );


TSrunnerRTC.runTestStepByName("DeviceUpdateRequest");

assert TSrunnerRTC.status == Status.INITIALIZED;</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Feed DeviceGet Request with Valid Data">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("NodeRole","urn:dece:role:dece");

//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("SAMLassertion","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");
testCase.setPropertyValue("assertionUUID","_87aa3e8d-2de2-46dd-b572-414003e22e9a");
testCase.setPropertyValue("username","firstfullusername_20130612_06223");
testCase.setPropertyValue("password","testing");
testCase.setPropertyValue("accountoid","DEF5738E543B633AE0401F0A05990CC0");
testCase.setPropertyValue("useroid","DEF5738E544A633AE0401F0A05990CC0");
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:DEF5738E543A633AE0401F0A05990CC0");
testCase.setPropertyValue("DeviceID","urn:dece:deviceid:org:dece:DEF585C6AEA11471E0401F0A07994634");
testCase.setPropertyValue("DomainID","urn:dece:domainid:dece:DEF587A47AF1508CE0401F0A07994D03");
testCase.setPropertyValue("expectErrType","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedRTLReq = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request");

FeedRTLReq.setPropertyValue("TCaseName",testCase.getName());
FeedRTLReq.setPropertyValue("TSuiteName",testSuite.getName());

WsdlTestCaseRunner TSrunner = new WsdlTestCaseRunner( FeedRTLReq, null );

TSrunner.runTestStepByName("Get the DeviceGet Properties");
TSrunner.runTestStepByName("pem set");
assert TSrunner.status == Status.INITIALIZED;</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Set Node Role to LLASP">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
// Set Node Role

testCase.setPropertyValue("NodeRole","urn:dece:role:lasp:linked");

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get-Set Node Role")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )

WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );

TSrunnerRTC.runTestStepByName("Set Node Role for DDD");

assert TSrunnerRTC.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call DeviceGet Request">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )

WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );

TSrunnerRTC.runTestStepByName("DeviceGetRequest");

assert TSrunnerRTC.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract DeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Extract DeviceGet Information")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify theDeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Response Validation")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep><con:testStep type="groovy" name="Set Node Role to Retailer">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

// Set Node Role

testCase.setPropertyValue("NodeRole","urn:dece:role:retailer");


def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get-Set Node Role")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )

WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );

TSrunnerRTC.runTestStepByName("Set Node Role for DDD");

assert TSrunnerRTC.status == Status.INITIALIZED;</script></con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value>28198</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>SAMLExpDate</con:name>
          <con:value>2014-06-11 06:24:48.0</con:value>
        </con:property>
        <con:property>
          <con:name>rcUUID</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>nodetype</con:name>
          <con:value>manufacturerportal</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>0701</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>firstfullusername_20130612_06223</con:value>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>testing</con:value>
        </con:property>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value>DEF5738E543B633AE0401F0A05990CC0</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value>DEF5738E544A633AE0401F0A05990CC0</con:value>
        </con:property>
        <con:property>
          <con:name>assertid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SAMLassertion</con:name>
          <con:value>nVdpc6pKE/7ur7A8Hy3D5oaVpGpYVFRUBBf4cgthQJRNBgT99e9gosfk5OTNvVWpitP0dD+9TM8zz8gMfLoHEIJJ6kVhVRJeav90O6bJwK7doG1IN5pt225sWx38i2qSJANpGrJmrSohlEEpRKkZpi81mqSYBtluULRG0b0W/us8teiWUauuYIKwaazyRNaqReCHqHd1+1LLkrAXmchDvdAMIOqlVk8F8qSHNXvmDVPt9fkN5dVh8rpL07hHENaTDS3o+9aTFQXEM/FB59lGPdVzQzPNEvju00Yvtfe9eZ4/5cxTlLgETZIkQbIE1rGR5/6qvVZum6EthU70tubNMAo9y/S9i1mCkmG6i+wq8N0o8dJd8BfTFEGRpekGLKyGRTXDXzXit4Mruh9a+gAyQWYD7UzqZmwBHZjA0ILV5UJ6qf36WQXf9mqJGSInSgL0af3vIMHwBP0ohnYD3SK7ofu5xS/S9foMrZ4UWn6GvBOclm0SmxZE1XkCHa+YeAg3n42q1/JXC3TrMGj9m5I8E484MWzii8wIngtR+l/q9VirNysr08/gq21mCa/b9XV97ygnlx7F2oISl1R/3ny5QnhUfgN1L/X7+nOj3vvqfdOM2pOh49gXXZ/wW2FjCqrVFYB4ljVrZguTyBLlBaHKmXiM18TUTLlwNerE9TUKDD50wvO+OwQrekAeh3wFjQb1UUtZzdqbZHieZ8SO6vDCkNWngQ62QE1jbhAoBKH2SX5jaEzfG6oTn0W6fCHcgrH7zNHY8ItseZaTysxDLe4wlFOvXU8ulA4P0svvmB5jKOMaw/M1yPL3pkWygpma9wVfTgoHH88UvsqSxNcFngeQd0EuccCVuMkFTDn3cNwdvAGbkxxQln0ggLO8ALng6sJKUcZibq9WvrGS+n1OXjTzIdCFCv4giMVKMDYj0lwbsU73SUPlOHuziLbMKLaHh3y4s6ayJudTTTrLe7GYaiK5vsrcAq8v8l6mZtqSqaz3HCsvxFzIrx4FMd9NjfUi1pdsbl1ERQbNAaCWIr+Th1qwoixmsbP24kQGh6uc28n8aiUXogbmFc6drnBsGt83Yiuw423g7x6MD7FxzR6sztuBnxkXcS/z4oBXjwNV2jKCIo7AQl9u16uDue6fKtZwCrY3j17LMzdR7hrdXFD00TgypN3JmgJF5DgF4HSRQJYGIxANOCA3gVdc+D3Xjni7nxMjGlXqrD9ob87ecYPMAembVLdL6ZN1e35sC2JYN8bZdr+Td5v+rD5W7dOSTdmLjk71U9v0KKuIHWUjDtNx4QwVtbKdC8XGGtZtd0T4F7afyJ0RSC7nnS+7i3TdnqHz1nOcNbeZNf2O48vMInZ8Jz6juhYph4Rsc5ChCf18GqcV4MocAIP9cs8pMtctk2pLuaLLnAn6YpqBy55Ox/TqOBqefEtnQFSM17P94b0wtpCLHJErIm4rsYIPkV0WYaguxf4eLDnXTThX7HOKJQBFl8a5jvO1HGLlz3nsX/PoihwQGQO02WGFWZJsOkvVZhOcQ24Z9tmdfCzWdjsgO0coTtRp3MxlNHVCYx0d5MBLlkmmLsfj6aTYatngsMezyiHV8YkxKuLpEANvOtZ2ByESzHms62lcD63ESqU4kKXiMjPQvuttA3JUb1HcnBSsDr0MtvlyYIrGOHFVajxchHOmw1ZQ5pyHQX3fzdd1TW3HHRtPBeF8JoxkRUYg6rOL1tEuaPqwW+aTdu6MwGFr0tPCZ7kzK44NzcoXynitBvVWpXWaTALyohHNaTzL1UHeFBWlzticNtRQnHh61nWLZBbatG6m7ZNBrtpe7B9YOjtozZhZuQEu1vxkxx15XlGaG8sI3E5sjYgFcQJix5lIg/P2Yl7iYGa9DdDP0+EufJsfxONk+TB6bqRDxd0KrfS2LC8gSaj28a1gpt8TmFLi2Q3nqtqLSxaEUhimtddyV0leehmmOJ7dw1fG21oQ+60O0xVbzSbbZhggkk2S6pOAbLEsyfPkjeW8ofgEkY9Cxyt9lTzu7Zb6HqAV9BAMbZg0TlFm7SCqfWOxzFdVChf4+o1CBLUI88Qmy5M0wwhsk+pwQOgIFMOKtMCSNM93WoCvVadROgtnCXBSmHzkiK0PHHEBLS/2YEkk329TlOKMHM1TlvrU08l8CmGGmWZSkr0e3ey2COQFsQ9LvIQfuV5IzGeq9hTv4ut1/tc4Pn+7hYx1bK9UQCVoDuKywS9YbfOG+I/Iml+y35t5kNleeWvj/KWJZ70h+fjpd1uU/XDvCbJD0jfMd9Ufb6X+3Ep8g4j4nIy7J/vkPfi9cXNMNzEhuVJyhIt2NJ+OT9nplF3L1CnJVoLNExRBtgkVWhlmTGctOsCQuJsgfkRW76g/eb7LP+LL0l2opvjAB7inqtflD14qKkTlS0XCZ6L46TPog0uctxQW6Vcy3scPmhLxt28eq2eVelg8x//yKLF/l+sLWw9+cJzlhPNCt1yV1PT8l66wImzWw1MuSh6Nf2XgK+cfhfck37GkuJu2WQr//qVajq+XmmlZURamklC7Ch5H6hVneo5h77fSH2au5PCd7Rfor2x/I09UPNwCs3bX9f6/csO7tosF8S7kXbG81Ar8cMXOQ/dhhL8D/HqKM+C7Kf4xktc/xH9KHnL6+Ty8/g8=</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>loopuntil</con:name>
          <con:value>25</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTS</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value>_87aa3e8d-2de2-46dd-b572-414003e22e9a</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value>urn:dece:userid:org:dece:A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value>A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value>urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value>A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>NodeRole</con:name>
          <con:value>urn:dece:role:retailer</con:value>
        </con:property>
        <con:property>
          <con:name>AccountID</con:name>
          <con:value>urn:dece:accountid:org:dece:DEF5738E543A633AE0401F0A05990CC0</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceID</con:name>
          <con:value>urn:dece:deviceid:org:dece:DEF585C6AEA11471E0401F0A07994634</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>ErrorDataVal</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetReqXml</con:name>
          <con:value>User-Agent: Apache-HttpClient/4.1.1 (java 1.5)
</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResXml</con:name>
          <con:value><![CDATA[<Device IsLegacy="false" DeviceID="urn:dece:deviceid:org:dece:A09D9C22F11CBC6DE0401F0A05996898" xmlns="http://www.decellc.org/schema/2010/10/dece" xmlns:ns2="http://www.movielabs.com/schema/md/v1.07/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <DisplayName>DeviceInfoDisplayName</DisplayName>
   <Manufacturer>Microsoft</Manufacturer>
   <Model>V344</Model>
   <Brand Language="en-US">DeviceInfoBrand</Brand>
   <SerialNo>123432442323424</SerialNo>
   <Image MimeType="MimeType3" Width="50" Height="50">http://www.oxygenxml.com/1234</Image>
   <LicAppID>urn:dece:licappid:org:dece:A09D9C22F11EBC6DE0401F0A05996898</LicAppID>
   <DRMClientID>urn:dece:drmclientid:org:dece:A0E2E4B822DB1B7CE0401F0A07994404</DRMClientID>
   <ResourceStatus>
      <Current CreatedBy="urn:dece:org:org:dece:0701" CreationDate="2011-04-11T04:02:39.637Z">
         <Value>urn:dece:type:status:pending</Value>
         <Description>Device Created</Description>
      </Current>
   </ResourceStatus>
</Device>]]></con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResTime</con:name>
          <con:value>172</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetID</con:name>
          <con:value>API call not authorizedhttps://qa.q.uvvu.com:7001/rest/1/0/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3AA06A9AA49F6E73D7E0401F0A059915F0/Device/urn%3Adece%3Adeviceid%3Aorg%3Adece%3AA09D9C22F11CBC6DE0401F0A05996898/DECEDomainhttps://qa.q.uvvu.com:7001/rest/1/0/error/en/ErrorList.html#Security:RoleInvalid</con:value>
        </con:property>
        <con:property>
          <con:name>DomainID</con:name>
          <con:value>urn:dece:domainid:dece:DEF587A47AF1508CE0401F0A07994D03</con:value>
        </con:property>
      <con:property><con:name>ETag</con:name><con:value>"E940D5E9237A301EE0401F0A05993117:F0246DC7"</con:value></con:property><con:property><con:name>Last-Modified</con:name><con:value>Mon, 21 Oct 2013 12:58:48 GMT</con:value></con:property></con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_30008 -  DeviceGet - PERM - SecurityRoleValid - Invocation with LLASP_CS" searchProperties="true" id="2ebcc4c9-0cfc-4471-9791-c779ac909268">
      <con:description>This test case will verify that the Application Tier properly responses to a DeviceGet invocation when the requesting node is Linked LASP CustomerSupport

Expected Result :

It should not allow API invocation for the "L-LASP CUSTOMER SERVICE" node.</con:description>
      <con:settings/>
      <con:testStep type="groovy" name="Verify Node User SAML Asssertion" disabled="true">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.model.testsuite.TestRunner.Status


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def ValSamlAssertion = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Validate SAML Assertion");

	ValSamlAssertion.setPropertyValue("TCaseName",testCase.getName());
	ValSamlAssertion.setPropertyValue("TSuiteName",testSuite.getName());

	def runnerTc = ValSamlAssertion.run( null , false )
	assert runnerTc.status == Status.FINISHED;

	rcUUID = testCase.getPropertyValue("rcUUID");

	if (runnerTc.status != Status.FINISHED || rcUUID.toInteger()!= 1){

			
		testCase.setPropertyValue("nodetype","manufacturerportal");
		testCase.setPropertyValue("nodeid","0701");
		testCase.setPropertyValue("username","sch-drm_user1");
		testCase.setPropertyValue("password","Password1");
		testCase.setPropertyValue("accountoid",null);
		testCase.setPropertyValue("useroid",null);
		testCase.setPropertyValue("assertid",null);
		testCase.setPropertyValue("SAMLassertion",null);
		testCase.setPropertyValue("tokentype","urn:dece:type:tokentype:usernamepassword");
		testCase.setPropertyValue("loopuntil","25");
		testCase.setPropertyValue("expectErrTypeSTS","SUCCESS");
		testCase.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
			
		log.info " SAML Assertion Expired ! re-generating Assertion";
		def RunSTS = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get SAML Assertion - STS")

				RunSTS.setPropertyValue("TCaseName",testCase.getName());
				RunSTS.setPropertyValue("TSuiteName",testSuite.getName());

				def runnerSTS = RunSTS.run( null , false )

				assert runnerSTS.status == Status.FINISHED;

		}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call LicAppCreate Request with Valid Data" disabled="true">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0");
testCase.setPropertyValue("expectErrTypeLAC","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedDeviceDDReq = testProject.getTestSuiteByName("Staging DeviceGet").getTestCaseByName("LicAppCreate Request");

FeedDeviceDDReq.setPropertyValue("TCaseName",testCase.getName());
FeedDeviceDDReq.setPropertyValue("TSuiteName",testSuite.getName());


def runnerTC = FeedDeviceDDReq.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call DeviceUpdate Request for evict Cache" id="85047279-7825-4b64-81b6-b5552e69e780">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )
WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );


TSrunnerRTC.runTestStepByName("DeviceUpdateRequest");

assert TSrunnerRTC.status == Status.INITIALIZED;</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Feed DeviceGet Request with Valid Data">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("SAMLassertion","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");
testCase.setPropertyValue("assertionUUID","_87aa3e8d-2de2-46dd-b572-414003e22e9a");
testCase.setPropertyValue("username","firstfullusername_20130612_06223");
testCase.setPropertyValue("password","testing");
testCase.setPropertyValue("accountoid","DEF5738E543B633AE0401F0A05990CC0");
testCase.setPropertyValue("useroid","DEF5738E544A633AE0401F0A05990CC0");
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:DEF5738E543A633AE0401F0A05990CC0");
testCase.setPropertyValue("DeviceID","urn:dece:deviceid:org:dece:DEF585C6AEA11471E0401F0A07994634");
testCase.setPropertyValue("DomainID","urn:dece:domainid:dece:DEF587A47AF1508CE0401F0A07994D03");
testCase.setPropertyValue("expectErrType","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedRTLReq = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request");

FeedRTLReq.setPropertyValue("TCaseName",testCase.getName());
FeedRTLReq.setPropertyValue("TSuiteName",testSuite.getName());

WsdlTestCaseRunner TSrunner = new WsdlTestCaseRunner( FeedRTLReq, null );

TSrunner.runTestStepByName("Get the DeviceGet Properties");
TSrunner.runTestStepByName("pem set");
assert TSrunner.status == Status.INITIALIZED;</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Set Node Role to LLASP CS">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

// Set Node Role

testCase.setPropertyValue("NodeRole","urn:dece:role:lasp:linked:customersupport");

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get-Set Node Role")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )

WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );

TSrunnerRTC.runTestStepByName("Set Node Role for DDD");

assert TSrunnerRTC.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call DeviceGet Request">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )

WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );

TSrunnerRTC.runTestStepByName("DeviceGetRequest");

assert TSrunnerRTC.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract DeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Extract DeviceGet Information")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify theDeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Response Validation")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep><con:testStep type="groovy" name="Set Node Role to Retailer">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

// Set Node Role

testCase.setPropertyValue("NodeRole","urn:dece:role:retailer");


def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get-Set Node Role")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )

WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );

TSrunnerRTC.runTestStepByName("Set Node Role for DDD");

assert TSrunnerRTC.status == Status.INITIALIZED;</script></con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value>28199</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>SAMLExpDate</con:name>
          <con:value>2014-06-11 06:24:48.0</con:value>
        </con:property>
        <con:property>
          <con:name>rcUUID</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>nodetype</con:name>
          <con:value>manufacturerportal</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>0701</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>firstfullusername_20130612_06223</con:value>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>testing</con:value>
        </con:property>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value>DEF5738E543B633AE0401F0A05990CC0</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value>DEF5738E544A633AE0401F0A05990CC0</con:value>
        </con:property>
        <con:property>
          <con:name>assertid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SAMLassertion</con:name>
          <con:value>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</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>loopuntil</con:name>
          <con:value>25</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTS</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value>_87aa3e8d-2de2-46dd-b572-414003e22e9a</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value>urn:dece:userid:org:dece:A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value>A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value>urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value>A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>AccountID</con:name>
          <con:value>urn:dece:accountid:org:dece:DEF5738E543A633AE0401F0A05990CC0</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceID</con:name>
          <con:value>urn:dece:deviceid:org:dece:DEF585C6AEA11471E0401F0A07994634</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>ErrorDataVal</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>NodeRole</con:name>
          <con:value>urn:dece:role:retailer</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetReqXml</con:name>
          <con:value>User-Agent: Apache-HttpClient/4.1.1 (java 1.5)
</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResXml</con:name>
          <con:value><![CDATA[<Device IsLegacy="false" DeviceID="urn:dece:deviceid:org:dece:A09D9C22F11CBC6DE0401F0A05996898" xmlns="http://www.decellc.org/schema/2010/10/dece" xmlns:ns2="http://www.movielabs.com/schema/md/v1.07/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <DisplayName>DeviceInfoDisplayName</DisplayName>
   <Manufacturer>Microsoft</Manufacturer>
   <Model>V344</Model>
   <Brand Language="en-US">DeviceInfoBrand</Brand>
   <SerialNo>123432442323424</SerialNo>
   <Image MimeType="MimeType3" Width="50" Height="50">http://www.oxygenxml.com/1234</Image>
   <LicAppID>urn:dece:licappid:org:dece:A09D9C22F11EBC6DE0401F0A05996898</LicAppID>
   <DRMClientID>urn:dece:drmclientid:org:dece:A0E2E4B822DB1B7CE0401F0A07994404</DRMClientID>
   <ResourceStatus>
      <Current CreatedBy="urn:dece:org:org:dece:0701" CreationDate="2011-04-11T04:02:39.637Z">
         <Value>urn:dece:type:status:pending</Value>
         <Description>Device Created</Description>
      </Current>
   </ResourceStatus>
</Device>]]></con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResTime</con:name>
          <con:value>159</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetID</con:name>
          <con:value>API call not authorizedhttps://qa.q.uvvu.com:7001/rest/1/0/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3AA06A9AA49F6E73D7E0401F0A059915F0/Device/urn%3Adece%3Adeviceid%3Aorg%3Adece%3AA09D9C22F11CBC6DE0401F0A05996898/DECEDomainhttps://qa.q.uvvu.com:7001/rest/1/0/error/en/ErrorList.html#Security:RoleInvalid</con:value>
        </con:property>
        <con:property>
          <con:name>DomainID</con:name>
          <con:value>urn:dece:domainid:dece:DEF587A47AF1508CE0401F0A07994D03</con:value>
        </con:property>
      <con:property><con:name>ETag</con:name><con:value>"E940D5E92380301EE0401F0A05993117:F0246DC7"</con:value></con:property><con:property><con:name>Last-Modified</con:name><con:value>Mon, 21 Oct 2013 12:59:09 GMT</con:value></con:property></con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_30009 -  DeviceGet - PERM - SecurityRoleValid - Invocation with DLASP" searchProperties="true" id="0734706d-2b15-4c08-8f04-8e2decd1d85d">
      <con:description>This test case will verify that the Application Tier properly responses to a DeviceGet invocation when the requesting node is Dynamic LASP

Expected Result :

It should not allow API invocation for the "D-LASP" node.</con:description>
      <con:settings/>
      <con:testStep type="groovy" name="Verify Node User SAML Asssertion" disabled="true">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.model.testsuite.TestRunner.Status


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def ValSamlAssertion = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Validate SAML Assertion");

	ValSamlAssertion.setPropertyValue("TCaseName",testCase.getName());
	ValSamlAssertion.setPropertyValue("TSuiteName",testSuite.getName());

	def runnerTc = ValSamlAssertion.run( null , false )
	assert runnerTc.status == Status.FINISHED;

	rcUUID = testCase.getPropertyValue("rcUUID");

	if (runnerTc.status != Status.FINISHED || rcUUID.toInteger()!= 1){

			
		testCase.setPropertyValue("nodetype","manufacturerportal");
		testCase.setPropertyValue("nodeid","0701");
		testCase.setPropertyValue("username","sch-drm_user1");
		testCase.setPropertyValue("password","Password1");
		testCase.setPropertyValue("accountoid",null);
		testCase.setPropertyValue("useroid",null);
		testCase.setPropertyValue("assertid",null);
		testCase.setPropertyValue("SAMLassertion",null);
		testCase.setPropertyValue("tokentype","urn:dece:type:tokentype:usernamepassword");
		testCase.setPropertyValue("loopuntil","25");
		testCase.setPropertyValue("expectErrTypeSTS","SUCCESS");
		testCase.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
			
		log.info " SAML Assertion Expired ! re-generating Assertion";
		def RunSTS = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get SAML Assertion - STS")

				RunSTS.setPropertyValue("TCaseName",testCase.getName());
				RunSTS.setPropertyValue("TSuiteName",testSuite.getName());

				def runnerSTS = RunSTS.run( null , false )

				assert runnerSTS.status == Status.FINISHED;

		}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call LicAppCreate Request with Valid Data" disabled="true">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0");
testCase.setPropertyValue("expectErrTypeLAC","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedDeviceDDReq = testProject.getTestSuiteByName("Staging DeviceGet").getTestCaseByName("LicAppCreate Request");

FeedDeviceDDReq.setPropertyValue("TCaseName",testCase.getName());
FeedDeviceDDReq.setPropertyValue("TSuiteName",testSuite.getName());


def runnerTC = FeedDeviceDDReq.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call DeviceUpdate Request for evict Cache" id="8cc369f0-556a-4a8d-a190-8d9bf5f094fe">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )
WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );


TSrunnerRTC.runTestStepByName("DeviceUpdateRequest");

assert TSrunnerRTC.status == Status.INITIALIZED;</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Feed DeviceGet Request with Valid Data">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("SAMLassertion","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");
testCase.setPropertyValue("assertionUUID","_87aa3e8d-2de2-46dd-b572-414003e22e9a");
testCase.setPropertyValue("username","firstfullusername_20130612_06223");
testCase.setPropertyValue("password","testing");
testCase.setPropertyValue("accountoid","DEF5738E543B633AE0401F0A05990CC0");
testCase.setPropertyValue("useroid","DEF5738E544A633AE0401F0A05990CC0");
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:DEF5738E543A633AE0401F0A05990CC0");
testCase.setPropertyValue("DeviceID","urn:dece:deviceid:org:dece:DEF585C6AEA11471E0401F0A07994634");
testCase.setPropertyValue("DomainID","urn:dece:domainid:dece:DEF587A47AF1508CE0401F0A07994D03");
testCase.setPropertyValue("expectErrType","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","1");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedRTLReq = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request");

FeedRTLReq.setPropertyValue("TCaseName",testCase.getName());
FeedRTLReq.setPropertyValue("TSuiteName",testSuite.getName());

WsdlTestCaseRunner TSrunner = new WsdlTestCaseRunner( FeedRTLReq, null );

TSrunner.runTestStepByName("Get the DeviceGet Properties");
TSrunner.runTestStepByName("pem set");
assert TSrunner.status == Status.INITIALIZED;</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Set Node Role to DLASP">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
// Set Node Role

testCase.setPropertyValue("NodeRole","urn:dece:role:lasp:dynamic");


def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get-Set Node Role")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )

WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );

TSrunnerRTC.runTestStepByName("Set Node Role for DDD");

assert TSrunnerRTC.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call DeviceGet Request">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )

WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );

TSrunnerRTC.runTestStepByName("DeviceGetRequest");

assert TSrunnerRTC.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract DeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Extract DeviceGet Information")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify theDeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Response Validation")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep><con:testStep type="groovy" name="Set Node Role to Retailer">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

// Set Node Role

testCase.setPropertyValue("NodeRole","urn:dece:role:retailer");


def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get-Set Node Role")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )

WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );

TSrunnerRTC.runTestStepByName("Set Node Role for DDD");

assert TSrunnerRTC.status == Status.INITIALIZED;</script></con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value>28200</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>SAMLExpDate</con:name>
          <con:value>2014-06-11 06:24:48.0</con:value>
        </con:property>
        <con:property>
          <con:name>rcUUID</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>nodetype</con:name>
          <con:value>manufacturerportal</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>0701</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>firstfullusername_20130612_06223</con:value>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>testing</con:value>
        </con:property>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value>DEF5738E543B633AE0401F0A05990CC0</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value>DEF5738E544A633AE0401F0A05990CC0</con:value>
        </con:property>
        <con:property>
          <con:name>assertid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SAMLassertion</con:name>
          <con:value>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</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>loopuntil</con:name>
          <con:value>25</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTS</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value>_87aa3e8d-2de2-46dd-b572-414003e22e9a</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value>urn:dece:userid:org:dece:A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value>A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value>urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value>A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>AccountID</con:name>
          <con:value>urn:dece:accountid:org:dece:DEF5738E543A633AE0401F0A05990CC0</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceID</con:name>
          <con:value>urn:dece:deviceid:org:dece:DEF585C6AEA11471E0401F0A07994634</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>ErrorDataVal</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>NodeRole</con:name>
          <con:value>urn:dece:role:retailer</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetReqXml</con:name>
          <con:value>User-Agent: Apache-HttpClient/4.1.1 (java 1.5)
</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResXml</con:name>
          <con:value><![CDATA[<Device IsLegacy="false" DeviceID="urn:dece:deviceid:org:dece:A09D9C22F11CBC6DE0401F0A05996898" xmlns="http://www.decellc.org/schema/2010/10/dece" xmlns:ns2="http://www.movielabs.com/schema/md/v1.07/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <DisplayName>DeviceInfoDisplayName</DisplayName>
   <Manufacturer>Microsoft</Manufacturer>
   <Model>V344</Model>
   <Brand Language="en-US">DeviceInfoBrand</Brand>
   <SerialNo>123432442323424</SerialNo>
   <Image MimeType="MimeType3" Width="50" Height="50">http://www.oxygenxml.com/1234</Image>
   <LicAppID>urn:dece:licappid:org:dece:A09D9C22F11EBC6DE0401F0A05996898</LicAppID>
   <DRMClientID>urn:dece:drmclientid:org:dece:A0E2E4B822DB1B7CE0401F0A07994404</DRMClientID>
   <ResourceStatus>
      <Current CreatedBy="urn:dece:org:org:dece:0701" CreationDate="2011-04-11T04:02:39.637Z">
         <Value>urn:dece:type:status:pending</Value>
         <Description>Device Created</Description>
      </Current>
   </ResourceStatus>
</Device>]]></con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResTime</con:name>
          <con:value>195</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetID</con:name>
          <con:value>API call not authorizedhttps://qa.q.uvvu.com:7001/rest/1/0/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3AA06A9AA49F6E73D7E0401F0A059915F0/Device/urn%3Adece%3Adeviceid%3Aorg%3Adece%3AA09D9C22F11CBC6DE0401F0A05996898/DECEDomainhttps://qa.q.uvvu.com:7001/rest/1/0/error/en/ErrorList.html#Security:RoleInvalid</con:value>
        </con:property>
        <con:property>
          <con:name>DomainID</con:name>
          <con:value>urn:dece:domainid:dece:DEF587A47AF1508CE0401F0A07994D03</con:value>
        </con:property>
      <con:property><con:name>ETag</con:name><con:value>"E940CD055F3C565EE0401F0A059916A6:F0246DC7"</con:value></con:property><con:property><con:name>Last-Modified</con:name><con:value>Mon, 21 Oct 2013 12:59:30 GMT</con:value></con:property></con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_30010 -  DeviceGet - PERM - SecurityRoleValid - Invocation with DLASP_CS" searchProperties="true" id="ec2b1963-8e17-403c-86cc-8953b2c7263c">
      <con:description>This test case will verify that the Application Tier properly responses to a DeviceGet invocation when the requesting node is Dynamic LASP Customer Support

Expected Result :

It should not allow API invocation for the "D-LASP CUSTOMER SUPPORT" node.</con:description>
      <con:settings/>
      <con:testStep type="groovy" name="Verify Node User SAML Asssertion" disabled="true">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.model.testsuite.TestRunner.Status


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def ValSamlAssertion = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Validate SAML Assertion");

	ValSamlAssertion.setPropertyValue("TCaseName",testCase.getName());
	ValSamlAssertion.setPropertyValue("TSuiteName",testSuite.getName());

	def runnerTc = ValSamlAssertion.run( null , false )
	assert runnerTc.status == Status.FINISHED;

	rcUUID = testCase.getPropertyValue("rcUUID");

	if (runnerTc.status != Status.FINISHED || rcUUID.toInteger()!= 1){

			
		testCase.setPropertyValue("nodetype","manufacturerportal");
		testCase.setPropertyValue("nodeid","0701");
		testCase.setPropertyValue("username","sch-drm_user1");
		testCase.setPropertyValue("password","Password1");
		testCase.setPropertyValue("accountoid",null);
		testCase.setPropertyValue("useroid",null);
		testCase.setPropertyValue("assertid",null);
		testCase.setPropertyValue("SAMLassertion",null);
		testCase.setPropertyValue("tokentype","urn:dece:type:tokentype:usernamepassword");
		testCase.setPropertyValue("loopuntil","25");
		testCase.setPropertyValue("expectErrTypeSTS","SUCCESS");
		testCase.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
			
		log.info " SAML Assertion Expired ! re-generating Assertion";
		def RunSTS = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get SAML Assertion - STS")

				RunSTS.setPropertyValue("TCaseName",testCase.getName());
				RunSTS.setPropertyValue("TSuiteName",testSuite.getName());

				def runnerSTS = RunSTS.run( null , false )

				assert runnerSTS.status == Status.FINISHED;

		}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call LicAppCreate Request with Valid Data" disabled="true">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0");
testCase.setPropertyValue("expectErrTypeLAC","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedDeviceDDReq = testProject.getTestSuiteByName("Staging DeviceGet").getTestCaseByName("LicAppCreate Request");

FeedDeviceDDReq.setPropertyValue("TCaseName",testCase.getName());
FeedDeviceDDReq.setPropertyValue("TSuiteName",testSuite.getName());


def runnerTC = FeedDeviceDDReq.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call DeviceUpdate Request for evict Cache" id="ccf128d1-3c78-4569-9512-72160c87e738">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )
WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );


TSrunnerRTC.runTestStepByName("DeviceUpdateRequest");

assert TSrunnerRTC.status == Status.INITIALIZED;</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Feed DeviceGet Request with Valid Data">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("SAMLassertion","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");
testCase.setPropertyValue("assertionUUID","_87aa3e8d-2de2-46dd-b572-414003e22e9a");
testCase.setPropertyValue("username","firstfullusername_20130612_06223");
testCase.setPropertyValue("password","testing");
testCase.setPropertyValue("accountoid","DEF5738E543B633AE0401F0A05990CC0");
testCase.setPropertyValue("useroid","DEF5738E544A633AE0401F0A05990CC0");
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:DEF5738E543A633AE0401F0A05990CC0");
testCase.setPropertyValue("DeviceID","urn:dece:deviceid:org:dece:DEF585C6AEA11471E0401F0A07994634");
testCase.setPropertyValue("DomainID","urn:dece:domainid:dece:DEF587A47AF1508CE0401F0A07994D03");

testCase.setPropertyValue("expectErrType","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","1");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedRTLReq = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request");

FeedRTLReq.setPropertyValue("TCaseName",testCase.getName());
FeedRTLReq.setPropertyValue("TSuiteName",testSuite.getName());

WsdlTestCaseRunner TSrunner = new WsdlTestCaseRunner( FeedRTLReq, null );

TSrunner.runTestStepByName("Get the DeviceGet Properties");
TSrunner.runTestStepByName("pem set");
assert TSrunner.status == Status.INITIALIZED;</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Set Node Role to DLASP CS">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

// Set Node Role

testCase.setPropertyValue("NodeRole","urn:dece:role:lasp:dynamic:customersupport");


def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get-Set Node Role")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )

WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );

TSrunnerRTC.runTestStepByName("Set Node Role for DDD");

assert TSrunnerRTC.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call DeviceGet Request">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )

WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );

TSrunnerRTC.runTestStepByName("DeviceGetRequest");

assert TSrunnerRTC.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract DeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Extract DeviceGet Information")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify theDeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Response Validation")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep><con:testStep type="groovy" name="Set Node Role to Retailer">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

// Set Node Role

testCase.setPropertyValue("NodeRole","urn:dece:role:retailer");


def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get-Set Node Role")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )

WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );

TSrunnerRTC.runTestStepByName("Set Node Role for DDD");

assert TSrunnerRTC.status == Status.INITIALIZED;</script></con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value>28201</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>SAMLExpDate</con:name>
          <con:value>2014-06-11 06:24:48.0</con:value>
        </con:property>
        <con:property>
          <con:name>rcUUID</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>nodetype</con:name>
          <con:value>manufacturerportal</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>0701</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>firstfullusername_20130612_06223</con:value>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>testing</con:value>
        </con:property>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value>DEF5738E543B633AE0401F0A05990CC0</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value>DEF5738E544A633AE0401F0A05990CC0</con:value>
        </con:property>
        <con:property>
          <con:name>assertid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SAMLassertion</con:name>
          <con:value>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</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>loopuntil</con:name>
          <con:value>25</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTS</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value>_87aa3e8d-2de2-46dd-b572-414003e22e9a</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value>urn:dece:userid:org:dece:A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value>A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value>urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value>A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>AccountID</con:name>
          <con:value>urn:dece:accountid:org:dece:DEF5738E543A633AE0401F0A05990CC0</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceID</con:name>
          <con:value>urn:dece:deviceid:org:dece:DEF585C6AEA11471E0401F0A07994634</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>ErrorDataVal</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>NodeRole</con:name>
          <con:value>urn:dece:role:retailer</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetReqXml</con:name>
          <con:value>User-Agent: Apache-HttpClient/4.1.1 (java 1.5)
</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResXml</con:name>
          <con:value><![CDATA[<Device IsLegacy="false" DeviceID="urn:dece:deviceid:org:dece:A09D9C22F11CBC6DE0401F0A05996898" xmlns="http://www.decellc.org/schema/2010/10/dece" xmlns:ns2="http://www.movielabs.com/schema/md/v1.07/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <DisplayName>DeviceInfoDisplayName</DisplayName>
   <Manufacturer>Microsoft</Manufacturer>
   <Model>V344</Model>
   <Brand Language="en-US">DeviceInfoBrand</Brand>
   <SerialNo>123432442323424</SerialNo>
   <Image MimeType="MimeType3" Width="50" Height="50">http://www.oxygenxml.com/1234</Image>
   <LicAppID>urn:dece:licappid:org:dece:A09D9C22F11EBC6DE0401F0A05996898</LicAppID>
   <DRMClientID>urn:dece:drmclientid:org:dece:A0E2E4B822DB1B7CE0401F0A07994404</DRMClientID>
   <ResourceStatus>
      <Current CreatedBy="urn:dece:org:org:dece:0701" CreationDate="2011-04-11T04:02:39.637Z">
         <Value>urn:dece:type:status:pending</Value>
         <Description>Device Created</Description>
      </Current>
   </ResourceStatus>
</Device>]]></con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResTime</con:name>
          <con:value>203</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetID</con:name>
          <con:value>API call not authorizedhttps://qa.q.uvvu.com:7001/rest/1/0/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3AA06A9AA49F6E73D7E0401F0A059915F0/Device/urn%3Adece%3Adeviceid%3Aorg%3Adece%3AA09D9C22F11CBC6DE0401F0A05996898/DECEDomainhttps://qa.q.uvvu.com:7001/rest/1/0/error/en/ErrorList.html#Security:RoleInvalid</con:value>
        </con:property>
        <con:property>
          <con:name>DomainID</con:name>
          <con:value>urn:dece:domainid:dece:DEF587A47AF1508CE0401F0A07994D03</con:value>
        </con:property>
      <con:property><con:name>ETag</con:name><con:value>"E940CD056171565EE0401F0A059916A6:F0246DC7"</con:value></con:property><con:property><con:name>Last-Modified</con:name><con:value>Mon, 21 Oct 2013 12:59:51 GMT</con:value></con:property></con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_30011 -  DeviceGet - PERM - SecurityRoleInvalid - Invocation with DSP" searchProperties="true" id="b5246d0e-0902-46c1-8e15-69316cdadd26">
      <con:description>This test case will verify that the Application Tier properly responses to a DeviceGet invocation when the requesting node is DSP

Expected Result :

It should not allow API invocation for the "DSP" node.</con:description>
      <con:settings/>
      <con:testStep type="groovy" name="Verify Node User SAML Asssertion" disabled="true">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.model.testsuite.TestRunner.Status


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def ValSamlAssertion = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Validate SAML Assertion");

	ValSamlAssertion.setPropertyValue("TCaseName",testCase.getName());
	ValSamlAssertion.setPropertyValue("TSuiteName",testSuite.getName());

	def runnerTc = ValSamlAssertion.run( null , false )
	assert runnerTc.status == Status.FINISHED;

	rcUUID = testCase.getPropertyValue("rcUUID");

	if (runnerTc.status != Status.FINISHED || rcUUID.toInteger()!= 1){

			
		testCase.setPropertyValue("nodetype","manufacturerportal");
		testCase.setPropertyValue("nodeid","0701");
		testCase.setPropertyValue("username","sch-drm_user1");
		testCase.setPropertyValue("password","Password1");
		testCase.setPropertyValue("accountoid",null);
		testCase.setPropertyValue("useroid",null);
		testCase.setPropertyValue("assertid",null);
		testCase.setPropertyValue("SAMLassertion",null);
		testCase.setPropertyValue("tokentype","urn:dece:type:tokentype:usernamepassword");
		testCase.setPropertyValue("loopuntil","25");
		testCase.setPropertyValue("expectErrTypeSTS","SUCCESS");
		testCase.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
			
		log.info " SAML Assertion Expired ! re-generating Assertion";
		def RunSTS = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get SAML Assertion - STS")

				RunSTS.setPropertyValue("TCaseName",testCase.getName());
				RunSTS.setPropertyValue("TSuiteName",testSuite.getName());

				def runnerSTS = RunSTS.run( null , false )

				assert runnerSTS.status == Status.FINISHED;

		}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call LicAppCreate Request with Valid Data" disabled="true">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0");
testCase.setPropertyValue("expectErrTypeLAC","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedDeviceDDReq = testProject.getTestSuiteByName("Staging DeviceGet").getTestCaseByName("LicAppCreate Request");

FeedDeviceDDReq.setPropertyValue("TCaseName",testCase.getName());
FeedDeviceDDReq.setPropertyValue("TSuiteName",testSuite.getName());


def runnerTC = FeedDeviceDDReq.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call DeviceUpdate Request for evict Cache" id="6d72cf05-cff7-48bb-a846-582a4be98874">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )
WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );


TSrunnerRTC.runTestStepByName("DeviceUpdateRequest");

assert TSrunnerRTC.status == Status.INITIALIZED;</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Feed DeviceGet Request with Valid Data">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("SAMLassertion","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");
testCase.setPropertyValue("assertionUUID","_87aa3e8d-2de2-46dd-b572-414003e22e9a");
testCase.setPropertyValue("username","firstfullusername_20130612_06223");
testCase.setPropertyValue("password","testing");
testCase.setPropertyValue("accountoid","DEF5738E543B633AE0401F0A05990CC0");
testCase.setPropertyValue("useroid","DEF5738E544A633AE0401F0A05990CC0");
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:DEF5738E543A633AE0401F0A05990CC0");
testCase.setPropertyValue("DeviceID","urn:dece:deviceid:org:dece:DEF585C6AEA11471E0401F0A07994634");
testCase.setPropertyValue("DomainID","urn:dece:domainid:dece:DEF587A47AF1508CE0401F0A07994D03");
testCase.setPropertyValue("expectErrType","API_NOT_AUTH");
testCase.setPropertyValue("ErrorDataVal","1");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedRTLReq = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request");

FeedRTLReq.setPropertyValue("TCaseName",testCase.getName());
FeedRTLReq.setPropertyValue("TSuiteName",testSuite.getName());

WsdlTestCaseRunner TSrunner = new WsdlTestCaseRunner( FeedRTLReq, null );

TSrunner.runTestStepByName("Get the DeviceGet Properties");
TSrunner.runTestStepByName("pem set");
assert TSrunner.status == Status.INITIALIZED;</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Set Node Role to DSP">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
// Set Node Role

testCase.setPropertyValue("NodeRole","urn:dece:role:dsp");


def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get-Set Node Role")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )

WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );

TSrunnerRTC.runTestStepByName("Set Node Role for DDD");

assert TSrunnerRTC.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call DeviceGet Request">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )

WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );

TSrunnerRTC.runTestStepByName("DeviceGetRequest");

assert TSrunnerRTC.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract DeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Extract DeviceGet Information")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify theDeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Response Validation")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep><con:testStep type="groovy" name="Set Node Role to Retailer">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

// Set Node Role

testCase.setPropertyValue("NodeRole","urn:dece:role:retailer");


def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get-Set Node Role")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )

WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );

TSrunnerRTC.runTestStepByName("Set Node Role for DDD");

assert TSrunnerRTC.status == Status.INITIALIZED;</script></con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value>28202</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>SAMLExpDate</con:name>
          <con:value>2014-06-11 06:24:48.0</con:value>
        </con:property>
        <con:property>
          <con:name>rcUUID</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>nodetype</con:name>
          <con:value>manufacturerportal</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>0701</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>firstfullusername_20130612_06223</con:value>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>testing</con:value>
        </con:property>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value>DEF5738E543B633AE0401F0A05990CC0</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value>DEF5738E544A633AE0401F0A05990CC0</con:value>
        </con:property>
        <con:property>
          <con:name>assertid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SAMLassertion</con:name>
          <con:value>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</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>loopuntil</con:name>
          <con:value>25</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTS</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value>_87aa3e8d-2de2-46dd-b572-414003e22e9a</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value>urn:dece:userid:org:dece:A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value>A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value>urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value>A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>AccountID</con:name>
          <con:value>urn:dece:accountid:org:dece:DEF5738E543A633AE0401F0A05990CC0</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceID</con:name>
          <con:value>urn:dece:deviceid:org:dece:DEF585C6AEA11471E0401F0A07994634</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>API_NOT_AUTH</con:value>
        </con:property>
        <con:property>
          <con:name>ErrorDataVal</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>NodeRole</con:name>
          <con:value>urn:dece:role:retailer</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetReqXml</con:name>
          <con:value>User-Agent: Apache-HttpClient/4.1.1 (java 1.5)
</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResXml</con:name>
          <con:value><![CDATA[<Device IsLegacy="false" DeviceID="urn:dece:deviceid:org:dece:A09D9C22F11CBC6DE0401F0A05996898" xmlns="http://www.decellc.org/schema/2010/10/dece" xmlns:ns2="http://www.movielabs.com/schema/md/v1.07/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <DisplayName>DeviceInfoDisplayName</DisplayName>
   <Manufacturer>Microsoft</Manufacturer>
   <Model>V344</Model>
   <Brand Language="en-US">DeviceInfoBrand</Brand>
   <SerialNo>123432442323424</SerialNo>
   <Image MimeType="MimeType3" Width="50" Height="50">http://www.oxygenxml.com/1234</Image>
   <LicAppID>urn:dece:licappid:org:dece:A09D9C22F11EBC6DE0401F0A05996898</LicAppID>
   <DRMClientID>urn:dece:drmclientid:org:dece:A0E2E4B822DB1B7CE0401F0A07994404</DRMClientID>
   <ResourceStatus>
      <Current CreatedBy="urn:dece:org:org:dece:0701" CreationDate="2011-04-11T04:02:39.637Z">
         <Value>urn:dece:type:status:pending</Value>
         <Description>Device Created</Description>
      </Current>
   </ResourceStatus>
</Device>]]></con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResTime</con:name>
          <con:value>162</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetID</con:name>
          <con:value>API call not authorizedhttps://qa.q.uvvu.com:7001/rest/1/0/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3AA06A9AA49F6E73D7E0401F0A059915F0/Device/urn%3Adece%3Adeviceid%3Aorg%3Adece%3AA09D9C22F11CBC6DE0401F0A05996898/DECEDomainhttps://qa.q.uvvu.com:7001/rest/1/0/error/en/ErrorList.html#Security:RoleInvalid</con:value>
        </con:property>
        <con:property>
          <con:name>DomainID</con:name>
          <con:value>urn:dece:domainid:dece:DEF587A47AF1508CE0401F0A07994D03</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_30012 -  DeviceGet - PERM - SecurityRoleInvalid - Invocation with DSP_CS" searchProperties="true" id="1f4bedcb-61f3-4c14-a531-39417196d4a0" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="">
      <con:description>This test case will verify that the Application Tier properly responses to a DeviceGet invocation when the requesting node is DSP Cusomter Support

Expected Result :

It should not allow API invocation for the "DSP CUSTOMER SUPPORT" node.</con:description>
      <con:settings/>
      <con:testStep type="groovy" name="Verify Node User SAML Asssertion" disabled="true">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.model.testsuite.TestRunner.Status


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def ValSamlAssertion = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Validate SAML Assertion");

	ValSamlAssertion.setPropertyValue("TCaseName",testCase.getName());
	ValSamlAssertion.setPropertyValue("TSuiteName",testSuite.getName());

	def runnerTc = ValSamlAssertion.run( null , false )
	assert runnerTc.status == Status.FINISHED;

	rcUUID = testCase.getPropertyValue("rcUUID");

	if (runnerTc.status != Status.FINISHED || rcUUID.toInteger()!= 1){

			
		testCase.setPropertyValue("nodetype","manufacturerportal");
		testCase.setPropertyValue("nodeid","0701");
		testCase.setPropertyValue("username","sch-drm_user1");
		testCase.setPropertyValue("password","Password1");
		testCase.setPropertyValue("accountoid",null);
		testCase.setPropertyValue("useroid",null);
		testCase.setPropertyValue("assertid",null);
		testCase.setPropertyValue("SAMLassertion",null);
		testCase.setPropertyValue("tokentype","urn:dece:type:tokentype:usernamepassword");
		testCase.setPropertyValue("loopuntil","25");
		testCase.setPropertyValue("expectErrTypeSTS","SUCCESS");
		testCase.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
			
		log.info " SAML Assertion Expired ! re-generating Assertion";
		def RunSTS = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get SAML Assertion - STS")

				RunSTS.setPropertyValue("TCaseName",testCase.getName());
				RunSTS.setPropertyValue("TSuiteName",testSuite.getName());

				def runnerSTS = RunSTS.run( null , false )

				assert runnerSTS.status == Status.FINISHED;

		}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call LicAppCreate Request with Valid Data" disabled="true">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0");
testCase.setPropertyValue("expectErrTypeLAC","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedDeviceDDReq = testProject.getTestSuiteByName("Staging DeviceGet").getTestCaseByName("LicAppCreate Request");

FeedDeviceDDReq.setPropertyValue("TCaseName",testCase.getName());
FeedDeviceDDReq.setPropertyValue("TSuiteName",testSuite.getName());


def runnerTC = FeedDeviceDDReq.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call DeviceUpdate Request for evict Cache" id="b576bd66-4ba8-4733-a7d4-bcd2fdde17da">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )
WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );


TSrunnerRTC.runTestStepByName("DeviceUpdateRequest");

assert TSrunnerRTC.status == Status.INITIALIZED;</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Feed DeviceGet Request with Valid Data">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("SAMLassertion","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");
testCase.setPropertyValue("assertionUUID","_87aa3e8d-2de2-46dd-b572-414003e22e9a");
testCase.setPropertyValue("username","firstfullusername_20130612_06223");
testCase.setPropertyValue("password","testing");
testCase.setPropertyValue("accountoid","DEF5738E543B633AE0401F0A05990CC0");
testCase.setPropertyValue("useroid","DEF5738E544A633AE0401F0A05990CC0");
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:DEF5738E543A633AE0401F0A05990CC0");
testCase.setPropertyValue("DeviceID","urn:dece:deviceid:org:dece:DEF585C6AEA11471E0401F0A07994634");
testCase.setPropertyValue("DomainID","urn:dece:domainid:dece:DEF587A47AF1508CE0401F0A07994D03");
testCase.setPropertyValue("expectErrType","API_NOT_AUTH");
testCase.setPropertyValue("ErrorDataVal","1");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedRTLReq = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request");

FeedRTLReq.setPropertyValue("TCaseName",testCase.getName());
FeedRTLReq.setPropertyValue("TSuiteName",testSuite.getName());

WsdlTestCaseRunner TSrunner = new WsdlTestCaseRunner( FeedRTLReq, null );

TSrunner.runTestStepByName("Get the DeviceGet Properties");
TSrunner.runTestStepByName("pem set");
assert TSrunner.status == Status.INITIALIZED;</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Set Node Role to DSP CS">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
// Set Node Role

testCase.setPropertyValue("NodeRole","urn:dece:role:dsp:customersupport");


def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get-Set Node Role")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )

WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );

TSrunnerRTC.runTestStepByName("Set Node Role for DDD");

assert TSrunnerRTC.status == Status.INITIALIZED;</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call DeviceGet Request">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )

WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );

TSrunnerRTC.runTestStepByName("DeviceGetRequest");

assert TSrunnerRTC.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract DeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Extract DeviceGet Information")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify theDeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Response Validation")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep><con:testStep type="groovy" name="Set Node Role to Retailer">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

// Set Node Role

testCase.setPropertyValue("NodeRole","urn:dece:role:retailer");


def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get-Set Node Role")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )

WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );

TSrunnerRTC.runTestStepByName("Set Node Role for DDD");

assert TSrunnerRTC.status == Status.INITIALIZED;</script></con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value>28203</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>SAMLExpDate</con:name>
          <con:value>2014-06-11 06:24:48.0</con:value>
        </con:property>
        <con:property>
          <con:name>rcUUID</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>nodetype</con:name>
          <con:value>manufacturerportal</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>0701</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>firstfullusername_20130612_06223</con:value>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>testing</con:value>
        </con:property>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value>DEF5738E543B633AE0401F0A05990CC0</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value>DEF5738E544A633AE0401F0A05990CC0</con:value>
        </con:property>
        <con:property>
          <con:name>assertid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SAMLassertion</con:name>
          <con:value>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</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>loopuntil</con:name>
          <con:value>25</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTS</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value>_87aa3e8d-2de2-46dd-b572-414003e22e9a</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value>urn:dece:userid:org:dece:A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value>A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value>urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value>A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>AccountID</con:name>
          <con:value>urn:dece:accountid:org:dece:DEF5738E543A633AE0401F0A05990CC0</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceID</con:name>
          <con:value>urn:dece:deviceid:org:dece:DEF585C6AEA11471E0401F0A07994634</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>API_NOT_AUTH</con:value>
        </con:property>
        <con:property>
          <con:name>ErrorDataVal</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>NodeRole</con:name>
          <con:value>urn:dece:role:retailer</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetReqXml</con:name>
          <con:value>User-Agent: Apache-HttpClient/4.1.1 (java 1.5)
</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResXml</con:name>
          <con:value><![CDATA[<Device IsLegacy="false" DeviceID="urn:dece:deviceid:org:dece:A09D9C22F11CBC6DE0401F0A05996898" xmlns="http://www.decellc.org/schema/2010/10/dece" xmlns:ns2="http://www.movielabs.com/schema/md/v1.07/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <DisplayName>DeviceInfoDisplayName</DisplayName>
   <Manufacturer>Microsoft</Manufacturer>
   <Model>V344</Model>
   <Brand Language="en-US">DeviceInfoBrand</Brand>
   <SerialNo>123432442323424</SerialNo>
   <Image MimeType="MimeType3" Width="50" Height="50">http://www.oxygenxml.com/1234</Image>
   <LicAppID>urn:dece:licappid:org:dece:A09D9C22F11EBC6DE0401F0A05996898</LicAppID>
   <DRMClientID>urn:dece:drmclientid:org:dece:A0E2E4B822DB1B7CE0401F0A07994404</DRMClientID>
   <ResourceStatus>
      <Current CreatedBy="urn:dece:org:org:dece:0701" CreationDate="2011-04-11T04:02:39.637Z">
         <Value>urn:dece:type:status:pending</Value>
         <Description>Device Created</Description>
      </Current>
   </ResourceStatus>
</Device>]]></con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResTime</con:name>
          <con:value>264</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetID</con:name>
          <con:value>API call not authorizedhttps://qa.q.uvvu.com:7001/rest/1/0/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3AA06A9AA49F6E73D7E0401F0A059915F0/Device/urn%3Adece%3Adeviceid%3Aorg%3Adece%3AA09D9C22F11CBC6DE0401F0A05996898/DECEDomainhttps://qa.q.uvvu.com:7001/rest/1/0/error/en/ErrorList.html#Security:RoleInvalid</con:value>
        </con:property>
        <con:property>
          <con:name>DomainID</con:name>
          <con:value>urn:dece:domainid:dece:DEF587A47AF1508CE0401F0A07994D03</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_30013 -  DeviceGet - PERM - SecurityRoleInvalid - Invocation with decedomainmanager" searchProperties="true" id="063cb308-79fc-4f97-9146-c49b888b2203" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="">
      <con:description>This test case will verify that the Application Tier properly responses to a DeviceGet invocation when the requesting node is a Device.

Expected Result :

It should not allow API invocation for the "DEVICE " node.</con:description>
      <con:settings/>
      <con:testStep type="groovy" name="Verify Node User SAML Asssertion" disabled="true">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.model.testsuite.TestRunner.Status


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def ValSamlAssertion = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Validate SAML Assertion");

	ValSamlAssertion.setPropertyValue("TCaseName",testCase.getName());
	ValSamlAssertion.setPropertyValue("TSuiteName",testSuite.getName());

	def runnerTc = ValSamlAssertion.run( null , false )
	assert runnerTc.status == Status.FINISHED;

	rcUUID = testCase.getPropertyValue("rcUUID");

	if (runnerTc.status != Status.FINISHED || rcUUID.toInteger()!= 1){

			
		testCase.setPropertyValue("nodetype","manufacturerportal");
		testCase.setPropertyValue("nodeid","0701");
		testCase.setPropertyValue("username","sch-drm_user1");
		testCase.setPropertyValue("password","Password1");
		testCase.setPropertyValue("accountoid",null);
		testCase.setPropertyValue("useroid",null);
		testCase.setPropertyValue("assertid",null);
		testCase.setPropertyValue("SAMLassertion",null);
		testCase.setPropertyValue("tokentype","urn:dece:type:tokentype:usernamepassword");
		testCase.setPropertyValue("loopuntil","25");
		testCase.setPropertyValue("expectErrTypeSTS","SUCCESS");
		testCase.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
			
		log.info " SAML Assertion Expired ! re-generating Assertion";
		def RunSTS = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get SAML Assertion - STS")

				RunSTS.setPropertyValue("TCaseName",testCase.getName());
				RunSTS.setPropertyValue("TSuiteName",testSuite.getName());

				def runnerSTS = RunSTS.run( null , false )

				assert runnerSTS.status == Status.FINISHED;

		}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call LicAppCreate Request with Valid Data" disabled="true">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0");
testCase.setPropertyValue("expectErrTypeLAC","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedDeviceDDReq = testProject.getTestSuiteByName("Staging DeviceGet").getTestCaseByName("LicAppCreate Request");

FeedDeviceDDReq.setPropertyValue("TCaseName",testCase.getName());
FeedDeviceDDReq.setPropertyValue("TSuiteName",testSuite.getName());


def runnerTC = FeedDeviceDDReq.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call DeviceUpdate Request for evict Cache" id="934ffe6a-8a71-455d-a4d3-d15ceea98dc5">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )
WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );


TSrunnerRTC.runTestStepByName("DeviceUpdateRequest");

assert TSrunnerRTC.status == Status.INITIALIZED;</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Feed DeviceGet Request with Valid Data">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("SAMLassertion","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");
testCase.setPropertyValue("assertionUUID","_87aa3e8d-2de2-46dd-b572-414003e22e9a");
testCase.setPropertyValue("username","firstfullusername_20130612_06223");
testCase.setPropertyValue("password","testing");
testCase.setPropertyValue("accountoid","DEF5738E543B633AE0401F0A05990CC0");
testCase.setPropertyValue("useroid","DEF5738E544A633AE0401F0A05990CC0");
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:DEF5738E543A633AE0401F0A05990CC0");
testCase.setPropertyValue("DeviceID","urn:dece:deviceid:org:dece:DEF585C6AEA11471E0401F0A07994634");
testCase.setPropertyValue("DomainID","urn:dece:domainid:dece:DEF587A47AF1508CE0401F0A07994D03");

testCase.setPropertyValue("expectErrType","API_NOT_AUTH");
testCase.setPropertyValue("ErrorDataVal","1");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedRTLReq = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request");

FeedRTLReq.setPropertyValue("TCaseName",testCase.getName());
FeedRTLReq.setPropertyValue("TSuiteName",testSuite.getName());

WsdlTestCaseRunner TSrunner = new WsdlTestCaseRunner( FeedRTLReq, null );

TSrunner.runTestStepByName("Get the DeviceGet Properties");
TSrunner.runTestStepByName("pem set");
assert TSrunner.status == Status.INITIALIZED;</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Set Node Role to DRM DM">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

// Set Role 

testCase.setPropertyValue("NodeRole","urn:dece:role:decedomainmanager");


def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get-Set Node Role")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )

WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );

TSrunnerRTC.runTestStepByName("Set Node Role for DDD");

assert TSrunnerRTC.status == Status.INITIALIZED;</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call DeviceGet Request">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )

WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );

TSrunnerRTC.runTestStepByName("DeviceGetRequest");

assert TSrunnerRTC.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract DeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Extract DeviceGet Information")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify theDeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Response Validation")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep><con:testStep type="groovy" name="Set Node Role to Retailer">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

// Set Node Role

testCase.setPropertyValue("NodeRole","urn:dece:role:retailer");


def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get-Set Node Role")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )

WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );

TSrunnerRTC.runTestStepByName("Set Node Role for DDD");

assert TSrunnerRTC.status == Status.INITIALIZED;</script></con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value>28204</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>SAMLExpDate</con:name>
          <con:value>2014-06-11 06:24:48.0</con:value>
        </con:property>
        <con:property>
          <con:name>rcUUID</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>nodetype</con:name>
          <con:value>manufacturerportal</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>0701</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>firstfullusername_20130612_06223</con:value>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>testing</con:value>
        </con:property>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value>DEF5738E543B633AE0401F0A05990CC0</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value>DEF5738E544A633AE0401F0A05990CC0</con:value>
        </con:property>
        <con:property>
          <con:name>assertid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SAMLassertion</con:name>
          <con:value>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</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>loopuntil</con:name>
          <con:value>25</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTS</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value>_87aa3e8d-2de2-46dd-b572-414003e22e9a</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value>urn:dece:userid:org:dece:A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value>A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value>urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value>A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>AccountID</con:name>
          <con:value>urn:dece:accountid:org:dece:DEF5738E543A633AE0401F0A05990CC0</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceID</con:name>
          <con:value>urn:dece:deviceid:org:dece:DEF585C6AEA11471E0401F0A07994634</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>API_NOT_AUTH</con:value>
        </con:property>
        <con:property>
          <con:name>ErrorDataVal</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>NodeRole</con:name>
          <con:value>urn:dece:role:retailer</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetReqXml</con:name>
          <con:value>User-Agent: Apache-HttpClient/4.1.1 (java 1.5)
</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResXml</con:name>
          <con:value><![CDATA[<ErrorList xmlns="http://www.decellc.org/schema/2010/10/dece" xmlns:ns2="http://www.movielabs.com/schema/md/v1.07/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Error ErrorID="urn:dece:errorid:org:dece:Security:RoleInvalid">
      <Reason Language="en">API call not authorized</Reason>
      <OriginalRequest>https://qa.q.uvvu.com:7001/rest/1/0/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3AA06A9AA49F6E73D7E0401F0A059915F0/Device/urn%3Adece%3Adeviceid%3Aorg%3Adece%3AA09D9C22F11CBC6DE0401F0A05996898/DECEDomain</OriginalRequest>
      <ErrorLink>https://qa.q.uvvu.com:7001/rest/1/0/error/en/ErrorList.html#Security:RoleInvalid</ErrorLink>
   </Error>
</ErrorList>]]></con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResTime</con:name>
          <con:value>130</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetID</con:name>
          <con:value>API call not authorizedhttps://qa.q.uvvu.com:7001/rest/1/0/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3AA06A9AA49F6E73D7E0401F0A059915F0/Device/urn%3Adece%3Adeviceid%3Aorg%3Adece%3AA09D9C22F11CBC6DE0401F0A05996898/DECEDomainhttps://qa.q.uvvu.com:7001/rest/1/0/error/en/ErrorList.html#Security:RoleInvalid</con:value>
        </con:property>
        <con:property>
          <con:name>DomainID</con:name>
          <con:value>urn:dece:domainid:dece:DEF587A47AF1508CE0401F0A07994D03</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_30014 -  DeviceGet - PERM - SecurityRoleInvalid - Invocation with Device_CS" searchProperties="true" id="adf9495c-c79c-44e6-b1be-307bd42018e1" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="">
      <con:description>This test case will verify that the Application Tier properly responses to a DeviceGet invocation when the requesting node is a Device customer support.

Expected Result :

It should not allow API invocation for the "DEVICE CUSTOMER SUPPORT" node.</con:description>
      <con:settings/>
      <con:testStep type="groovy" name="Verify Node User SAML Asssertion" disabled="true">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.model.testsuite.TestRunner.Status


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def ValSamlAssertion = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Validate SAML Assertion");

	ValSamlAssertion.setPropertyValue("TCaseName",testCase.getName());
	ValSamlAssertion.setPropertyValue("TSuiteName",testSuite.getName());

	def runnerTc = ValSamlAssertion.run( null , false )
	assert runnerTc.status == Status.FINISHED;

	rcUUID = testCase.getPropertyValue("rcUUID");

	if (runnerTc.status != Status.FINISHED || rcUUID.toInteger()!= 1){

			
		testCase.setPropertyValue("nodetype","manufacturerportal");
		testCase.setPropertyValue("nodeid","0701");
		testCase.setPropertyValue("username","sch-drm_user1");
		testCase.setPropertyValue("password","Password1");
		testCase.setPropertyValue("accountoid",null);
		testCase.setPropertyValue("useroid",null);
		testCase.setPropertyValue("assertid",null);
		testCase.setPropertyValue("SAMLassertion",null);
		testCase.setPropertyValue("tokentype","urn:dece:type:tokentype:usernamepassword");
		testCase.setPropertyValue("loopuntil","25");
		testCase.setPropertyValue("expectErrTypeSTS","SUCCESS");
		testCase.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
			
		log.info " SAML Assertion Expired ! re-generating Assertion";
		def RunSTS = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get SAML Assertion - STS")

				RunSTS.setPropertyValue("TCaseName",testCase.getName());
				RunSTS.setPropertyValue("TSuiteName",testSuite.getName());

				def runnerSTS = RunSTS.run( null , false )

				assert runnerSTS.status == Status.FINISHED;

		}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call LicAppCreate Request with Valid Data" disabled="true">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0");
testCase.setPropertyValue("expectErrTypeLAC","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedDeviceDDReq = testProject.getTestSuiteByName("Staging DeviceGet").getTestCaseByName("LicAppCreate Request");

FeedDeviceDDReq.setPropertyValue("TCaseName",testCase.getName());
FeedDeviceDDReq.setPropertyValue("TSuiteName",testSuite.getName());


def runnerTC = FeedDeviceDDReq.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call DeviceUpdate Request for evict Cache" id="42c2592e-ef41-455d-a0eb-d416f6147ece">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )
WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );


TSrunnerRTC.runTestStepByName("DeviceUpdateRequest");

assert TSrunnerRTC.status == Status.INITIALIZED;</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Feed DeviceGet Request with Valid Data">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("SAMLassertion","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");
testCase.setPropertyValue("assertionUUID","_87aa3e8d-2de2-46dd-b572-414003e22e9a");
testCase.setPropertyValue("username","firstfullusername_20130612_06223");
testCase.setPropertyValue("password","testing");
testCase.setPropertyValue("accountoid","DEF5738E543B633AE0401F0A05990CC0");
testCase.setPropertyValue("useroid","DEF5738E544A633AE0401F0A05990CC0");
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:DEF5738E543A633AE0401F0A05990CC0");
testCase.setPropertyValue("DeviceID","urn:dece:deviceid:org:dece:DEF585C6AEA11471E0401F0A07994634");
testCase.setPropertyValue("DomainID","urn:dece:domainid:dece:DEF587A47AF1508CE0401F0A07994D03");
testCase.setPropertyValue("expectErrType","API_NOT_AUTH");
testCase.setPropertyValue("ErrorDataVal","1");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedRTLReq = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request");

FeedRTLReq.setPropertyValue("TCaseName",testCase.getName());
FeedRTLReq.setPropertyValue("TSuiteName",testSuite.getName());

WsdlTestCaseRunner TSrunner = new WsdlTestCaseRunner( FeedRTLReq, null );

TSrunner.runTestStepByName("Get the DeviceGet Properties");
TSrunner.runTestStepByName("pem set");
assert TSrunner.status == Status.INITIALIZED;</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Set Node Role to Device_CS">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

// set Role
testCase.setPropertyValue("NodeRole","urn:dece:role:device:customersupport");


def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get-Set Node Role")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )

WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );

TSrunnerRTC.runTestStepByName("Set Node Role for DDD");

assert TSrunnerRTC.status == Status.INITIALIZED;</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call DeviceGet Request">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )

WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );

TSrunnerRTC.runTestStepByName("DeviceGetRequest");

assert TSrunnerRTC.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract DeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Extract DeviceGet Information")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify theDeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Response Validation")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep><con:testStep type="groovy" name="Set Node Role to Retailer">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

// Set Node Role

testCase.setPropertyValue("NodeRole","urn:dece:role:retailer");


def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get-Set Node Role")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )

WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );

TSrunnerRTC.runTestStepByName("Set Node Role for DDD");

assert TSrunnerRTC.status == Status.INITIALIZED;</script></con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value>28205</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>SAMLExpDate</con:name>
          <con:value>2012-04-14 13:34:23.0</con:value>
        </con:property>
        <con:property>
          <con:name>rcUUID</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>nodetype</con:name>
          <con:value>manufacturerportal</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>0701</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>firstfullusername_20130612_06223</con:value>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>testing</con:value>
        </con:property>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value>DEF5738E543B633AE0401F0A05990CC0</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value>DEF5738E544A633AE0401F0A05990CC0</con:value>
        </con:property>
        <con:property>
          <con:name>assertid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SAMLassertion</con:name>
          <con:value>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</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>loopuntil</con:name>
          <con:value>25</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTS</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value>_87aa3e8d-2de2-46dd-b572-414003e22e9a</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value>urn:dece:userid:org:dece:A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value>A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value>urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value>A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>AccountID</con:name>
          <con:value>urn:dece:accountid:org:dece:DEF5738E543A633AE0401F0A05990CC0</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceID</con:name>
          <con:value>urn:dece:deviceid:org:dece:DEF585C6AEA11471E0401F0A07994634</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>API_NOT_AUTH</con:value>
        </con:property>
        <con:property>
          <con:name>ErrorDataVal</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>NodeRole</con:name>
          <con:value>urn:dece:role:retailer</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetReqXml</con:name>
          <con:value>User-Agent: Apache-HttpClient/4.1.1 (java 1.5)
</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResXml</con:name>
          <con:value><![CDATA[<ErrorList xmlns="http://www.decellc.org/schema/2010/10/dece" xmlns:ns2="http://www.movielabs.com/schema/md/v1.07/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Error ErrorID="urn:dece:errorid:org:dece:Security:RoleInvalid">
      <Reason Language="en">API call not authorized</Reason>
      <OriginalRequest>https://qa.q.uvvu.com:7001/rest/1/0/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3AA06A9AA49F6E73D7E0401F0A059915F0/Device/urn%3Adece%3Adeviceid%3Aorg%3Adece%3AA09D9C22F11CBC6DE0401F0A05996898/DECEDomain</OriginalRequest>
      <ErrorLink>https://qa.q.uvvu.com:7001/rest/1/0/error/en/ErrorList.html#Security:RoleInvalid</ErrorLink>
   </Error>
</ErrorList>]]></con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResTime</con:name>
          <con:value>86</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetID</con:name>
          <con:value>API call not authorizedhttps://qa.q.uvvu.com:7001/rest/1/0/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3AA06A9AA49F6E73D7E0401F0A059915F0/Device/urn%3Adece%3Adeviceid%3Aorg%3Adece%3AA09D9C22F11CBC6DE0401F0A05996898/DECEDomainhttps://qa.q.uvvu.com:7001/rest/1/0/error/en/ErrorList.html#Security:RoleInvalid</con:value>
        </con:property>
        <con:property>
          <con:name>DomainID</con:name>
          <con:value>urn:dece:domainid:dece:DEF587A47AF1508CE0401F0A07994D03</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_30015 -  DeviceGet - PERM - SecurityRoleInvalid - Invocation with Content Publisher" searchProperties="true" id="a7fe9f1a-bfd9-4c03-b29c-32d20cab86c5" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="">
      <con:description>This test case will verify that the Application Tier properly responses to a DeviceGet invocation when the requesting node is a Content Publisher.


Expected Result :

It should not allow API invocation for the  "CONTENT PUBLISHER" node.System Should Return error Message</con:description>
      <con:settings/>
      <con:testStep type="groovy" name="Verify Node User SAML Asssertion" disabled="true">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.model.testsuite.TestRunner.Status


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def ValSamlAssertion = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Validate SAML Assertion");

	ValSamlAssertion.setPropertyValue("TCaseName",testCase.getName());
	ValSamlAssertion.setPropertyValue("TSuiteName",testSuite.getName());

	def runnerTc = ValSamlAssertion.run( null , false )
	assert runnerTc.status == Status.FINISHED;

	rcUUID = testCase.getPropertyValue("rcUUID");

	if (runnerTc.status != Status.FINISHED || rcUUID.toInteger()!= 1){

			
		testCase.setPropertyValue("nodetype","manufacturerportal");
		testCase.setPropertyValue("nodeid","0701");
		testCase.setPropertyValue("username","sch-drm_user1");
		testCase.setPropertyValue("password","Password1");
		testCase.setPropertyValue("accountoid",null);
		testCase.setPropertyValue("useroid",null);
		testCase.setPropertyValue("assertid",null);
		testCase.setPropertyValue("SAMLassertion",null);
		testCase.setPropertyValue("tokentype","urn:dece:type:tokentype:usernamepassword");
		testCase.setPropertyValue("loopuntil","25");
		testCase.setPropertyValue("expectErrTypeSTS","SUCCESS");
		testCase.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
			
		log.info " SAML Assertion Expired ! re-generating Assertion";
		def RunSTS = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get SAML Assertion - STS")

				RunSTS.setPropertyValue("TCaseName",testCase.getName());
				RunSTS.setPropertyValue("TSuiteName",testSuite.getName());

				def runnerSTS = RunSTS.run( null , false )

				assert runnerSTS.status == Status.FINISHED;

		}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call LicAppCreate Request with Valid Data" disabled="true">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0");
testCase.setPropertyValue("expectErrTypeLAC","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedDeviceDDReq = testProject.getTestSuiteByName("Staging DeviceGet").getTestCaseByName("LicAppCreate Request");

FeedDeviceDDReq.setPropertyValue("TCaseName",testCase.getName());
FeedDeviceDDReq.setPropertyValue("TSuiteName",testSuite.getName());


def runnerTC = FeedDeviceDDReq.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call DeviceUpdate Request for evict Cache" id="74b2a62e-0236-4cec-8594-b8f3507443a5">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )
WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );


TSrunnerRTC.runTestStepByName("DeviceUpdateRequest");

assert TSrunnerRTC.status == Status.INITIALIZED;</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Feed DeviceGet Request with Valid Data">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("SAMLassertion","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");
testCase.setPropertyValue("assertionUUID","_87aa3e8d-2de2-46dd-b572-414003e22e9a");
testCase.setPropertyValue("username","firstfullusername_20130612_06223");
testCase.setPropertyValue("password","testing");
testCase.setPropertyValue("accountoid","DEF5738E543B633AE0401F0A05990CC0");
testCase.setPropertyValue("useroid","DEF5738E544A633AE0401F0A05990CC0");
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:DEF5738E543A633AE0401F0A05990CC0");
testCase.setPropertyValue("DeviceID","urn:dece:deviceid:org:dece:DEF585C6AEA11471E0401F0A07994634");
testCase.setPropertyValue("DomainID","urn:dece:domainid:dece:DEF587A47AF1508CE0401F0A07994D03");
testCase.setPropertyValue("expectErrType","API_NOT_AUTH");
testCase.setPropertyValue("ErrorDataVal","1");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedRTLReq = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request");

FeedRTLReq.setPropertyValue("TCaseName",testCase.getName());
FeedRTLReq.setPropertyValue("TSuiteName",testSuite.getName());

WsdlTestCaseRunner TSrunner = new WsdlTestCaseRunner( FeedRTLReq, null );

TSrunner.runTestStepByName("Get the DeviceGet Properties");
TSrunner.runTestStepByName("pem set");
assert TSrunner.status == Status.INITIALIZED;</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Set Node Role to Content Provider">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

// set Role
testCase.setPropertyValue("NodeRole","urn:dece:role:contentprovider");

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get-Set Node Role")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )

WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );

TSrunnerRTC.runTestStepByName("Set Node Role for DDD");

assert TSrunnerRTC.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call DeviceGet Request">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )

WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );

TSrunnerRTC.runTestStepByName("DeviceGetRequest");

assert TSrunnerRTC.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract DeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Extract DeviceGet Information")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify theDeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Response Validation")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep><con:testStep type="groovy" name="Set Node Role to Retailer">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

// Set Node Role

testCase.setPropertyValue("NodeRole","urn:dece:role:retailer");


def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get-Set Node Role")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )

WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );

TSrunnerRTC.runTestStepByName("Set Node Role for DDD");

assert TSrunnerRTC.status == Status.INITIALIZED;</script></con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value>28206</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>SAMLExpDate</con:name>
          <con:value>2014-06-11 06:24:48.0</con:value>
        </con:property>
        <con:property>
          <con:name>rcUUID</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>nodetype</con:name>
          <con:value>manufacturerportal</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>0701</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>firstfullusername_20130612_06223</con:value>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>testing</con:value>
        </con:property>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value>DEF5738E543B633AE0401F0A05990CC0</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value>DEF5738E544A633AE0401F0A05990CC0</con:value>
        </con:property>
        <con:property>
          <con:name>assertid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SAMLassertion</con:name>
          <con:value>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</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>loopuntil</con:name>
          <con:value>25</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTS</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value>_87aa3e8d-2de2-46dd-b572-414003e22e9a</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value>urn:dece:userid:org:dece:A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value>A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value>urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value>A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>AccountID</con:name>
          <con:value>urn:dece:accountid:org:dece:DEF5738E543A633AE0401F0A05990CC0</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceID</con:name>
          <con:value>urn:dece:deviceid:org:dece:DEF585C6AEA11471E0401F0A07994634</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>API_NOT_AUTH</con:value>
        </con:property>
        <con:property>
          <con:name>ErrorDataVal</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>NodeRole</con:name>
          <con:value>urn:dece:role:retailer</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetReqXml</con:name>
          <con:value>User-Agent: Apache-HttpClient/4.1.1 (java 1.5)
</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResXml</con:name>
          <con:value><![CDATA[<ErrorList xmlns="http://www.decellc.org/schema/2010/10/dece" xmlns:ns2="http://www.movielabs.com/schema/md/v1.07/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Error ErrorID="urn:dece:errorid:org:dece:Security:RoleInvalid">
      <Reason Language="en">API call not authorized</Reason>
      <OriginalRequest>https://qa.q.uvvu.com:7001/rest/1/0/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3AA06A9AA49F6E73D7E0401F0A059915F0/Device/urn%3Adece%3Adeviceid%3Aorg%3Adece%3AA09D9C22F11CBC6DE0401F0A05996898/DECEDomain</OriginalRequest>
      <ErrorLink>https://qa.q.uvvu.com:7001/rest/1/0/error/en/ErrorList.html#Security:RoleInvalid</ErrorLink>
   </Error>
</ErrorList>]]></con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResTime</con:name>
          <con:value>118</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetID</con:name>
          <con:value>API call not authorizedhttps://qa.q.uvvu.com:7001/rest/1/0/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3AA06A9AA49F6E73D7E0401F0A059915F0/Device/urn%3Adece%3Adeviceid%3Aorg%3Adece%3AA09D9C22F11CBC6DE0401F0A05996898/DECEDomainhttps://qa.q.uvvu.com:7001/rest/1/0/error/en/ErrorList.html#Security:RoleInvalid</con:value>
        </con:property>
        <con:property>
          <con:name>DomainID</con:name>
          <con:value>urn:dece:domainid:dece:DEF587A47AF1508CE0401F0A07994D03</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_30016 -  DeviceGet - PERM - SecurityRoleInvalid - Invocation with Content Publisher_CS" searchProperties="true" id="7e05298a-9d67-4e62-98c6-08bd43c985d1" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="">
      <con:description>This test case will verify that the Application Tier properly responses to a DeviceGet invocation when the requesting node is a Content Publisher Customer support.

Expected Result :

It should not allow API invocation for the  "CONTENT PUBLISHER CUSTOMER SUPPORT" node.System Should Return error Message</con:description>
      <con:settings/>
      <con:testStep type="groovy" name="Verify Node User SAML Asssertion" disabled="true">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.model.testsuite.TestRunner.Status


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def ValSamlAssertion = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Validate SAML Assertion");

	ValSamlAssertion.setPropertyValue("TCaseName",testCase.getName());
	ValSamlAssertion.setPropertyValue("TSuiteName",testSuite.getName());

	def runnerTc = ValSamlAssertion.run( null , false )
	assert runnerTc.status == Status.FINISHED;

	rcUUID = testCase.getPropertyValue("rcUUID");

	if (runnerTc.status != Status.FINISHED || rcUUID.toInteger()!= 1){

			
		testCase.setPropertyValue("nodetype","manufacturerportal");
		testCase.setPropertyValue("nodeid","0701");
		testCase.setPropertyValue("username","sch-drm_user1");
		testCase.setPropertyValue("password","Password1");
		testCase.setPropertyValue("accountoid",null);
		testCase.setPropertyValue("useroid",null);
		testCase.setPropertyValue("assertid",null);
		testCase.setPropertyValue("SAMLassertion",null);
		testCase.setPropertyValue("tokentype","urn:dece:type:tokentype:usernamepassword");
		testCase.setPropertyValue("loopuntil","25");
		testCase.setPropertyValue("expectErrTypeSTS","SUCCESS");
		testCase.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
			
		log.info " SAML Assertion Expired ! re-generating Assertion";
		def RunSTS = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get SAML Assertion - STS")

				RunSTS.setPropertyValue("TCaseName",testCase.getName());
				RunSTS.setPropertyValue("TSuiteName",testSuite.getName());

				def runnerSTS = RunSTS.run( null , false )

				assert runnerSTS.status == Status.FINISHED;

		}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call LicAppCreate Request with Valid Data" disabled="true">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0");
testCase.setPropertyValue("expectErrTypeLAC","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedDeviceDDReq = testProject.getTestSuiteByName("Staging DeviceGet").getTestCaseByName("LicAppCreate Request");

FeedDeviceDDReq.setPropertyValue("TCaseName",testCase.getName());
FeedDeviceDDReq.setPropertyValue("TSuiteName",testSuite.getName());


def runnerTC = FeedDeviceDDReq.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call DeviceUpdate Request for evict Cache" id="c83260fc-ea02-46b8-a9a4-c3ae8b030a0a">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )
WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );


TSrunnerRTC.runTestStepByName("DeviceUpdateRequest");

assert TSrunnerRTC.status == Status.INITIALIZED;</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Feed DeviceGet Request with Valid Data">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("SAMLassertion","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");
testCase.setPropertyValue("assertionUUID","_87aa3e8d-2de2-46dd-b572-414003e22e9a");
testCase.setPropertyValue("username","firstfullusername_20130612_06223");
testCase.setPropertyValue("password","testing");
testCase.setPropertyValue("accountoid","DEF5738E543B633AE0401F0A05990CC0");
testCase.setPropertyValue("useroid","DEF5738E544A633AE0401F0A05990CC0");
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:DEF5738E543A633AE0401F0A05990CC0");
testCase.setPropertyValue("DeviceID","urn:dece:deviceid:org:dece:DEF585C6AEA11471E0401F0A07994634");
testCase.setPropertyValue("DomainID","urn:dece:domainid:dece:DEF587A47AF1508CE0401F0A07994D03");
testCase.setPropertyValue("expectErrType","API_NOT_AUTH");
testCase.setPropertyValue("ErrorDataVal","1");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedRTLReq = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request");

FeedRTLReq.setPropertyValue("TCaseName",testCase.getName());
FeedRTLReq.setPropertyValue("TSuiteName",testSuite.getName());

WsdlTestCaseRunner TSrunner = new WsdlTestCaseRunner( FeedRTLReq, null );

TSrunner.runTestStepByName("Get the DeviceGet Properties");
TSrunner.runTestStepByName("pem set");
assert TSrunner.status == Status.INITIALIZED;</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Set Node Role to Content Provider CS">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

// set Role
testCase.setPropertyValue("NodeRole","urn:dece:role:contentprovider:customersupport");

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get-Set Node Role")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )

WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );

TSrunnerRTC.runTestStepByName("Set Node Role for DDD");

assert TSrunnerRTC.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call DeviceGet Request">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )

WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );

TSrunnerRTC.runTestStepByName("DeviceGetRequest");

assert TSrunnerRTC.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract DeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Extract DeviceGet Information")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify theDeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Response Validation")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep><con:testStep type="groovy" name="Set Node Role to Retailer">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

// Set Node Role

testCase.setPropertyValue("NodeRole","urn:dece:role:retailer");


def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get-Set Node Role")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )

WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );

TSrunnerRTC.runTestStepByName("Set Node Role for DDD");

assert TSrunnerRTC.status == Status.INITIALIZED;</script></con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value>28207</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>SAMLExpDate</con:name>
          <con:value>2014-06-11 06:24:48.0</con:value>
        </con:property>
        <con:property>
          <con:name>rcUUID</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>nodetype</con:name>
          <con:value>manufacturerportal</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>0701</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>firstfullusername_20130612_06223</con:value>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>testing</con:value>
        </con:property>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value>DEF5738E543B633AE0401F0A05990CC0</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value>DEF5738E544A633AE0401F0A05990CC0</con:value>
        </con:property>
        <con:property>
          <con:name>assertid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SAMLassertion</con:name>
          <con:value>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</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>loopuntil</con:name>
          <con:value>25</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTS</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value>_87aa3e8d-2de2-46dd-b572-414003e22e9a</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value>urn:dece:userid:org:dece:A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value>A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value>urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value>A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>AccountID</con:name>
          <con:value>urn:dece:accountid:org:dece:DEF5738E543A633AE0401F0A05990CC0</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceID</con:name>
          <con:value>urn:dece:deviceid:org:dece:DEF585C6AEA11471E0401F0A07994634</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>API_NOT_AUTH</con:value>
        </con:property>
        <con:property>
          <con:name>ErrorDataVal</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>NodeRole</con:name>
          <con:value>urn:dece:role:retailer</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetReqXml</con:name>
          <con:value>User-Agent: Apache-HttpClient/4.1.1 (java 1.5)
</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResXml</con:name>
          <con:value><![CDATA[<ErrorList xmlns="http://www.decellc.org/schema/2010/10/dece" xmlns:ns2="http://www.movielabs.com/schema/md/v1.07/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Error ErrorID="urn:dece:errorid:org:dece:Security:RoleInvalid">
      <Reason Language="en">API call not authorized</Reason>
      <OriginalRequest>https://qa.q.uvvu.com:7001/rest/1/0/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3AA06A9AA49F6E73D7E0401F0A059915F0/Device/urn%3Adece%3Adeviceid%3Aorg%3Adece%3AA09D9C22F11CBC6DE0401F0A05996898/DECEDomain</OriginalRequest>
      <ErrorLink>https://qa.q.uvvu.com:7001/rest/1/0/error/en/ErrorList.html#Security:RoleInvalid</ErrorLink>
   </Error>
</ErrorList>]]></con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResTime</con:name>
          <con:value>83</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetID</con:name>
          <con:value>API call not authorizedhttps://qa.q.uvvu.com:7001/rest/1/0/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3AA06A9AA49F6E73D7E0401F0A059915F0/Device/urn%3Adece%3Adeviceid%3Aorg%3Adece%3AA09D9C22F11CBC6DE0401F0A05996898/DECEDomainhttps://qa.q.uvvu.com:7001/rest/1/0/error/en/ErrorList.html#Security:RoleInvalid</con:value>
        </con:property>
        <con:property>
          <con:name>DomainID</con:name>
          <con:value>urn:dece:domainid:dece:DEF587A47AF1508CE0401F0A07994D03</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_30017 -  DeviceGet - PERM - SecurityRoleValid - Invocation with Retailer" searchProperties="true" id="1a2fd9a2-aae3-4866-85cd-f3e494f78be4">
      <con:description>This test case will verify that the Application Tier properly responses to a DeviceGet invocation when the requesting node is a Retailer.

Expected Result :

It should not allow API invocation for the "RETAILER" node.</con:description>
      <con:settings/>
      <con:testStep type="groovy" name="Verify Node User SAML Asssertion" disabled="true">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.model.testsuite.TestRunner.Status


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def ValSamlAssertion = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Validate SAML Assertion");

	ValSamlAssertion.setPropertyValue("TCaseName",testCase.getName());
	ValSamlAssertion.setPropertyValue("TSuiteName",testSuite.getName());

	def runnerTc = ValSamlAssertion.run( null , false )
	assert runnerTc.status == Status.FINISHED;

	rcUUID = testCase.getPropertyValue("rcUUID");

	if (runnerTc.status != Status.FINISHED || rcUUID.toInteger()!= 1){

			
		testCase.setPropertyValue("nodetype","manufacturerportal");
		testCase.setPropertyValue("nodeid","0701");
		testCase.setPropertyValue("username","sch-drm_user1");
		testCase.setPropertyValue("password","Password1");
		testCase.setPropertyValue("accountoid",null);
		testCase.setPropertyValue("useroid",null);
		testCase.setPropertyValue("assertid",null);
		testCase.setPropertyValue("SAMLassertion",null);
		testCase.setPropertyValue("tokentype","urn:dece:type:tokentype:usernamepassword");
		testCase.setPropertyValue("loopuntil","25");
		testCase.setPropertyValue("expectErrTypeSTS","SUCCESS");
		testCase.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
			
		log.info " SAML Assertion Expired ! re-generating Assertion";
		def RunSTS = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get SAML Assertion - STS")

				RunSTS.setPropertyValue("TCaseName",testCase.getName());
				RunSTS.setPropertyValue("TSuiteName",testSuite.getName());

				def runnerSTS = RunSTS.run( null , false )

				assert runnerSTS.status == Status.FINISHED;

		}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call LicAppCreate Request with Valid Data" disabled="true">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0");
testCase.setPropertyValue("expectErrTypeLAC","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedDeviceDDReq = testProject.getTestSuiteByName("Staging DeviceGet").getTestCaseByName("LicAppCreate Request");

FeedDeviceDDReq.setPropertyValue("TCaseName",testCase.getName());
FeedDeviceDDReq.setPropertyValue("TSuiteName",testSuite.getName());


def runnerTC = FeedDeviceDDReq.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call DeviceUpdate Request for evict Cache" id="e6fe0417-6eb6-4979-a641-0920f4fbd27c">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )
WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );


TSrunnerRTC.runTestStepByName("DeviceUpdateRequest");

assert TSrunnerRTC.status == Status.INITIALIZED;</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Feed DeviceGet Request with Valid Data">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("SAMLassertion","nVdpc6pKE/7ur7A8Hy3D5oaVpGpYVFRUBBf4cgthQJRNBgT99e9gosfk5OTNvVWpitP0dD+9TM8zz8gMfLoHEIJJ6kVhVRJeav90O6bJwK7doG1IN5pt225sWx38i2qSJANpGrJmrSohlEEpRKkZpi81mqSYBtluULRG0b0W/us8teiWUauuYIKwaazyRNaqReCHqHd1+1LLkrAXmchDvdAMIOqlVk8F8qSHNXvmDVPt9fkN5dVh8rpL07hHENaTDS3o+9aTFQXEM/FB59lGPdVzQzPNEvju00Yvtfe9eZ4/5cxTlLgETZIkQbIE1rGR5/6qvVZum6EthU70tubNMAo9y/S9i1mCkmG6i+wq8N0o8dJd8BfTFEGRpekGLKyGRTXDXzXit4Mruh9a+gAyQWYD7UzqZmwBHZjA0ILV5UJ6qf36WQXf9mqJGSInSgL0af3vIMHwBP0ohnYD3SK7ofu5xS/S9foMrZ4UWn6GvBOclm0SmxZE1XkCHa+YeAg3n42q1/JXC3TrMGj9m5I8E484MWzii8wIngtR+l/q9VirNysr08/gq21mCa/b9XV97ygnlx7F2oISl1R/3ny5QnhUfgN1L/X7+nOj3vvqfdOM2pOh49gXXZ/wW2FjCqrVFYB4ljVrZguTyBLlBaHKmXiM18TUTLlwNerE9TUKDD50wvO+OwQrekAeh3wFjQb1UUtZzdqbZHieZ8SO6vDCkNWngQ62QE1jbhAoBKH2SX5jaEzfG6oTn0W6fCHcgrH7zNHY8ItseZaTysxDLe4wlFOvXU8ulA4P0svvmB5jKOMaw/M1yPL3pkWygpma9wVfTgoHH88UvsqSxNcFngeQd0EuccCVuMkFTDn3cNwdvAGbkxxQln0ggLO8ALng6sJKUcZibq9WvrGS+n1OXjTzIdCFCv4giMVKMDYj0lwbsU73SUPlOHuziLbMKLaHh3y4s6ayJudTTTrLe7GYaiK5vsrcAq8v8l6mZtqSqaz3HCsvxFzIrx4FMd9NjfUi1pdsbl1ERQbNAaCWIr+Th1qwoixmsbP24kQGh6uc28n8aiUXogbmFc6drnBsGt83Yiuw423g7x6MD7FxzR6sztuBnxkXcS/z4oBXjwNV2jKCIo7AQl9u16uDue6fKtZwCrY3j17LMzdR7hrdXFD00TgypN3JmgJF5DgF4HSRQJYGIxANOCA3gVdc+D3Xjni7nxMjGlXqrD9ob87ecYPMAembVLdL6ZN1e35sC2JYN8bZdr+Td5v+rD5W7dOSTdmLjk71U9v0KKuIHWUjDtNx4QwVtbKdC8XGGtZtd0T4F7afyJ0RSC7nnS+7i3TdnqHz1nOcNbeZNf2O48vMInZ8Jz6juhYph4Rsc5ChCf18GqcV4MocAIP9cs8pMtctk2pLuaLLnAn6YpqBy55Ox/TqOBqefEtnQFSM17P94b0wtpCLHJErIm4rsYIPkV0WYaguxf4eLDnXTThX7HOKJQBFl8a5jvO1HGLlz3nsX/PoihwQGQO02WGFWZJsOkvVZhOcQ24Z9tmdfCzWdjsgO0coTtRp3MxlNHVCYx0d5MBLlkmmLsfj6aTYatngsMezyiHV8YkxKuLpEANvOtZ2ByESzHms62lcD63ESqU4kKXiMjPQvuttA3JUb1HcnBSsDr0MtvlyYIrGOHFVajxchHOmw1ZQ5pyHQX3fzdd1TW3HHRtPBeF8JoxkRUYg6rOL1tEuaPqwW+aTdu6MwGFr0tPCZ7kzK44NzcoXynitBvVWpXWaTALyohHNaTzL1UHeFBWlzticNtRQnHh61nWLZBbatG6m7ZNBrtpe7B9YOjtozZhZuQEu1vxkxx15XlGaG8sI3E5sjYgFcQJix5lIg/P2Yl7iYGa9DdDP0+EufJsfxONk+TB6bqRDxd0KrfS2LC8gSaj28a1gpt8TmFLi2Q3nqtqLSxaEUhimtddyV0leehmmOJ7dw1fG21oQ+60O0xVbzSbbZhggkk2S6pOAbLEsyfPkjeW8ofgEkY9Cxyt9lTzu7Zb6HqAV9BAMbZg0TlFm7SCqfWOxzFdVChf4+o1CBLUI88Qmy5M0wwhsk+pwQOgIFMOKtMCSNM93WoCvVadROgtnCXBSmHzkiK0PHHEBLS/2YEkk329TlOKMHM1TlvrU08l8CmGGmWZSkr0e3ey2COQFsQ9LvIQfuV5IzGeq9hTv4ut1/tc4Pn+7hYx1bK9UQCVoDuKywS9YbfOG+I/Iml+y35t5kNleeWvj/KWJZ70h+fjpd1uU/XDvCbJD0jfMd9Ufb6X+3Ep8g4j4nIy7J/vkPfi9cXNMNzEhuVJyhIt2NJ+OT9nplF3L1CnJVoLNExRBtgkVWhlmTGctOsCQuJsgfkRW76g/eb7LP+LL0l2opvjAB7inqtflD14qKkTlS0XCZ6L46TPog0uctxQW6Vcy3scPmhLxt28eq2eVelg8x//yKLF/l+sLWw9+cJzlhPNCt1yV1PT8l66wImzWw1MuSh6Nf2XgK+cfhfck37GkuJu2WQr//qVajq+XmmlZURamklC7Ch5H6hVneo5h77fSH2au5PCd7Rfor2x/I09UPNwCs3bX9f6/csO7tosF8S7kXbG81Ar8cMXOQ/dhhL8D/HqKM+C7Kf4xktc/xH9KHnL6+Ty8/g8=");
testCase.setPropertyValue("assertionUUID","_87aa3e8d-2de2-46dd-b572-414003e22e9a");
testCase.setPropertyValue("username","firstfullusername_20130612_06223");
testCase.setPropertyValue("password","testing");
testCase.setPropertyValue("accountoid","DEF5738E543B633AE0401F0A05990CC0");
testCase.setPropertyValue("useroid","DEF5738E544A633AE0401F0A05990CC0");
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:DEF5738E543A633AE0401F0A05990CC0");
testCase.setPropertyValue("DeviceID","urn:dece:deviceid:org:dece:DEF585C6AEA11471E0401F0A07994634");
testCase.setPropertyValue("DomainID","urn:dece:domainid:dece:DEF587A47AF1508CE0401F0A07994D03");
testCase.setPropertyValue("expectErrType","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedRTLReq = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request");

FeedRTLReq.setPropertyValue("TCaseName",testCase.getName());
FeedRTLReq.setPropertyValue("TSuiteName",testSuite.getName());

WsdlTestCaseRunner TSrunner = new WsdlTestCaseRunner( FeedRTLReq, null );

TSrunner.runTestStepByName("Get the DeviceGet Properties");
TSrunner.runTestStepByName("pem set");
assert TSrunner.status == Status.INITIALIZED;</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Set Node Role to Retailer" disabled="true">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

// set Role
testCase.setPropertyValue("NodeRole","urn:dece:role:retailer");

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get-Set Node Role")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )

WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );

TSrunnerRTC.runTestStepByName("Set Node Role for DDD");

assert TSrunnerRTC.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call DeviceGet Request">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )

WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );

TSrunnerRTC.runTestStepByName("DeviceGetRequest");

assert TSrunnerRTC.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract DeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Extract DeviceGet Information")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify theDeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Response Validation")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep><con:testStep type="groovy" name="Set Node Role to Retailer 1" disabled="true">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

// Set Node Role

testCase.setPropertyValue("NodeRole","urn:dece:role:retailer");


def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get-Set Node Role")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )

WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );

TSrunnerRTC.runTestStepByName("Set Node Role for DDD");

assert TSrunnerRTC.status == Status.INITIALIZED;</script></con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value>28208</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>SAMLExpDate</con:name>
          <con:value>2014-06-11 06:24:48.0</con:value>
        </con:property>
        <con:property>
          <con:name>rcUUID</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>nodetype</con:name>
          <con:value>manufacturerportal</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>0701</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>firstfullusername_20130612_06223</con:value>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>testing</con:value>
        </con:property>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value>DEF5738E543B633AE0401F0A05990CC0</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value>DEF5738E544A633AE0401F0A05990CC0</con:value>
        </con:property>
        <con:property>
          <con:name>assertid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SAMLassertion</con:name>
          <con:value>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</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>loopuntil</con:name>
          <con:value>25</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTS</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value>_87aa3e8d-2de2-46dd-b572-414003e22e9a</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value>urn:dece:userid:org:dece:A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value>A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value>urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value>A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>AccountID</con:name>
          <con:value>urn:dece:accountid:org:dece:DEF5738E543A633AE0401F0A05990CC0</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceID</con:name>
          <con:value>urn:dece:deviceid:org:dece:DEF585C6AEA11471E0401F0A07994634</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>ErrorDataVal</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>NodeRole</con:name>
          <con:value>urn:dece:role:retailer</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetReqXml</con:name>
          <con:value>User-Agent: Apache-HttpClient/4.1.1 (java 1.5)
</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResXml</con:name>
          <con:value><![CDATA[<Device IsLegacy="false" DeviceID="urn:dece:deviceid:org:dece:A09D9C22F11CBC6DE0401F0A05996898" xmlns="http://www.decellc.org/schema/2010/10/dece" xmlns:ns2="http://www.movielabs.com/schema/md/v1.07/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <DisplayName>DeviceInfoDisplayName</DisplayName>
   <Manufacturer>Microsoft</Manufacturer>
   <Model>V344</Model>
   <Brand Language="en-US">DeviceInfoBrand</Brand>
   <SerialNo>123432442323424</SerialNo>
   <Image MimeType="MimeType3" Width="50" Height="50">http://www.oxygenxml.com/1234</Image>
   <LicAppID>urn:dece:licappid:org:dece:A09D9C22F11EBC6DE0401F0A05996898</LicAppID>
   <DRMClientID>urn:dece:drmclientid:org:dece:A0E2E4B822DB1B7CE0401F0A07994404</DRMClientID>
   <ResourceStatus>
      <Current CreatedBy="urn:dece:org:org:dece:0701" CreationDate="2011-04-11T04:02:39.637Z">
         <Value>urn:dece:type:status:pending</Value>
         <Description>Device Created</Description>
      </Current>
   </ResourceStatus>
</Device>]]></con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResTime</con:name>
          <con:value>259</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetID</con:name>
          <con:value>API call not authorizedhttps://qa.q.uvvu.com:7001/rest/1/0/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3AA06A9AA49F6E73D7E0401F0A059915F0/Device/urn%3Adece%3Adeviceid%3Aorg%3Adece%3AA09D9C22F11CBC6DE0401F0A05996898/DECEDomainhttps://qa.q.uvvu.com:7001/rest/1/0/error/en/ErrorList.html#Security:RoleInvalid</con:value>
        </con:property>
        <con:property>
          <con:name>DomainID</con:name>
          <con:value>urn:dece:domainid:dece:DEF587A47AF1508CE0401F0A07994D03</con:value>
        </con:property>
      <con:property><con:name>ETag</con:name><con:value>"E940DF1C2C93549DE0401F0A079962AF:F0246DC7"</con:value></con:property><con:property><con:name>Last-Modified</con:name><con:value>Mon, 21 Oct 2013 13:02:21 GMT</con:value></con:property></con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_30018 -  DeviceGet - PERM - SecurityRoleValid - Invocation with Retailer_CS" searchProperties="true" id="819da080-b928-43f4-95b3-e6a13787c26c" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="">
      <con:description>This test case will verify that the Application Tier properly responses to a DeviceGet invocation when the requesting node is a Retailer Customer Support.

Expected Result :

It should not allow API invocation for the "RETAILER CUSTOMER SUPPORT" node.</con:description>
      <con:settings/>
      <con:testStep type="groovy" name="Verify Node User SAML Asssertion" disabled="true">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.model.testsuite.TestRunner.Status


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def ValSamlAssertion = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Validate SAML Assertion");

	ValSamlAssertion.setPropertyValue("TCaseName",testCase.getName());
	ValSamlAssertion.setPropertyValue("TSuiteName",testSuite.getName());

	def runnerTc = ValSamlAssertion.run( null , false )
	assert runnerTc.status == Status.FINISHED;

	rcUUID = testCase.getPropertyValue("rcUUID");

	if (runnerTc.status != Status.FINISHED || rcUUID.toInteger()!= 1){

			
		testCase.setPropertyValue("nodetype","manufacturerportal");
		testCase.setPropertyValue("nodeid","0702");
		testCase.setPropertyValue("username","sch-drm_user1");
		testCase.setPropertyValue("password","Password1");
		testCase.setPropertyValue("accountoid",null);
		testCase.setPropertyValue("useroid",null);
		testCase.setPropertyValue("assertid",null);
		testCase.setPropertyValue("SAMLassertion",null);
		testCase.setPropertyValue("tokentype","urn:dece:type:tokentype:usernamepassword");
		testCase.setPropertyValue("loopuntil","25");
		testCase.setPropertyValue("expectErrTypeSTS","SUCCESS");
		testCase.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
			
		log.info " SAML Assertion Expired ! re-generating Assertion";
		def RunSTS = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get SAML Assertion - STS")

				RunSTS.setPropertyValue("TCaseName",testCase.getName());
				RunSTS.setPropertyValue("TSuiteName",testSuite.getName());

				def runnerSTS = RunSTS.run( null , false )

				assert runnerSTS.status == Status.FINISHED;

		}</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call LicAppCreate Request with Valid Data" disabled="true">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0");
testCase.setPropertyValue("expectErrTypeLAC","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedDeviceDDReq = testProject.getTestSuiteByName("Staging DeviceGet").getTestCaseByName("LicAppCreate Request");

FeedDeviceDDReq.setPropertyValue("TCaseName",testCase.getName());
FeedDeviceDDReq.setPropertyValue("TSuiteName",testSuite.getName());


def runnerTC = FeedDeviceDDReq.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Feed DeviceGet Request with Valid Data">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("SAMLassertion","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");
testCase.setPropertyValue("assertionUUID","_87aa3e8d-2de2-46dd-b572-414003e22e9a");
testCase.setPropertyValue("username","firstfullusername_20130612_06223");
testCase.setPropertyValue("password","testing");
testCase.setPropertyValue("accountoid","DEF5738E543B633AE0401F0A05990CC0");
testCase.setPropertyValue("useroid","DEF5738E544A633AE0401F0A05990CC0");
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:DEF5738E543A633AE0401F0A05990CC0");
testCase.setPropertyValue("DeviceID","urn:dece:deviceid:org:dece:DEF585C6AEA11471E0401F0A07994634");
testCase.setPropertyValue("DomainID","urn:dece:domainid:dece:DEF587A47AF1508CE0401F0A07994D03");
testCase.setPropertyValue("expectErrType","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedRTLReq = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request");

FeedRTLReq.setPropertyValue("TCaseName",testCase.getName());
FeedRTLReq.setPropertyValue("TSuiteName",testSuite.getName());

WsdlTestCaseRunner TSrunner = new WsdlTestCaseRunner( FeedRTLReq, null );

TSrunner.runTestStepByName("Get the DeviceGet Properties");
TSrunner.runTestStepByName("pem set");
assert TSrunner.status == Status.INITIALIZED;</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Set Node Role to Retailer CS">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

// set Role
testCase.setPropertyValue("NodeRole","urn:dece:role:retailer:customersupport");

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get-Set Node Role")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )

WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );

TSrunnerRTC.runTestStepByName("Set Node Role for DDD");

assert TSrunnerRTC.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call DeviceGet Request">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )

WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );

TSrunnerRTC.runTestStepByName("DeviceGetRequest");

assert TSrunnerRTC.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract DeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Extract DeviceGet Information")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify theDeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Response Validation")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call DeviceUpdate Request for evict Cache">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )
WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );


TSrunnerRTC.runTestStepByName("DeviceUpdateRequest");

assert TSrunnerRTC.status == Status.INITIALIZED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Set Node Role to Retailer" disabled="true">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

// Set Node Role

testCase.setPropertyValue("NodeRole","urn:dece:role:retailer");


def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get-Set Node Role")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )

WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );

TSrunnerRTC.runTestStepByName("Set Node Role for DDD");

assert TSrunnerRTC.status == Status.INITIALIZED;</script></con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value>28209</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>SAMLExpDate</con:name>
          <con:value>2014-06-12 12:52:58.0</con:value>
        </con:property>
        <con:property>
          <con:name>rcUUID</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>nodetype</con:name>
          <con:value>manufacturerportal</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>0702</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>firstfullusername_20130612_06223</con:value>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>testing</con:value>
        </con:property>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value>DEF5738E543B633AE0401F0A05990CC0</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value>DEF5738E544A633AE0401F0A05990CC0</con:value>
        </con:property>
        <con:property>
          <con:name>assertid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SAMLassertion</con:name>
          <con:value>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</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>loopuntil</con:name>
          <con:value>25</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTS</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value>_87aa3e8d-2de2-46dd-b572-414003e22e9a</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value>urn:dece:userid:org:dece:A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value>A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value>urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value>A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>AccountID</con:name>
          <con:value>urn:dece:accountid:org:dece:DEF5738E543A633AE0401F0A05990CC0</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceID</con:name>
          <con:value>urn:dece:deviceid:org:dece:DEF585C6AEA11471E0401F0A07994634</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>ErrorDataVal</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>NodeRole</con:name>
          <con:value>urn:dece:role:retailer:customersupport</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetReqXml</con:name>
          <con:value>User-Agent: Apache-HttpClient/4.1.1 (java 1.5)
</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResXml</con:name>
          <con:value><![CDATA[<Device IsLegacy="false" DeviceID="urn:dece:deviceid:org:dece:A09D9C22F11CBC6DE0401F0A05996898" xmlns="http://www.decellc.org/schema/2010/10/dece" xmlns:ns2="http://www.movielabs.com/schema/md/v1.07/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <DisplayName>DeviceInfoDisplayName</DisplayName>
   <Manufacturer>Microsoft</Manufacturer>
   <Model>V344</Model>
   <Brand Language="en-US">DeviceInfoBrand</Brand>
   <SerialNo>123432442323424</SerialNo>
   <Image MimeType="MimeType3" Width="50" Height="50">http://www.oxygenxml.com/1234</Image>
   <LicAppID>urn:dece:licappid:org:dece:A09D9C22F11EBC6DE0401F0A05996898</LicAppID>
   <DRMClientID>urn:dece:drmclientid:org:dece:A0E2E4B822DB1B7CE0401F0A07994404</DRMClientID>
   <ResourceStatus>
      <Current CreatedBy="urn:dece:org:org:dece:0701" CreationDate="2011-04-11T04:02:39.637Z">
         <Value>urn:dece:type:status:pending</Value>
         <Description>Device Created</Description>
      </Current>
   </ResourceStatus>
</Device>]]></con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResTime</con:name>
          <con:value>201</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetID</con:name>
          <con:value>API call not authorizedhttps://qa.q.uvvu.com:7001/rest/1/0/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3AA06A9AA49F6E73D7E0401F0A059915F0/Device/urn%3Adece%3Adeviceid%3Aorg%3Adece%3AA09D9C22F11CBC6DE0401F0A05996898/DECEDomainhttps://qa.q.uvvu.com:7001/rest/1/0/error/en/ErrorList.html#Security:RoleInvalid</con:value>
        </con:property>
        <con:property>
          <con:name>DomainID</con:name>
          <con:value>urn:dece:domainid:dece:DEF587A47AF1508CE0401F0A07994D03</con:value>
        </con:property>
      <con:property><con:name>ETag</con:name><con:value>"E940DF1C2C93549DE0401F0A079962AF:F0246DC7"</con:value></con:property><con:property><con:name>Last-Modified</con:name><con:value>Mon, 21 Oct 2013 13:02:21 GMT</con:value></con:property></con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_30019 -  DeviceGet - PERM - SecurityRoleInvalid - Invocation with MDA Agent" searchProperties="true" id="71ef4c15-70ea-46fa-a5e8-768f0c967427" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="">
      <con:description>This test case will verify that the Application Tier properly responses to a DeviceGet invocation when the requesting node is a Device Manufacturer Portal.

Expected Result :

It should not allow API invocation for the "DEVICE MANUFACTURER PORTAL" node.</con:description>
      <con:settings/>
      <con:testStep type="groovy" name="Verify Node User SAML Asssertion" disabled="true">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.model.testsuite.TestRunner.Status


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def ValSamlAssertion = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Validate SAML Assertion");

	ValSamlAssertion.setPropertyValue("TCaseName",testCase.getName());
	ValSamlAssertion.setPropertyValue("TSuiteName",testSuite.getName());

	def runnerTc = ValSamlAssertion.run( null , false )
	assert runnerTc.status == Status.FINISHED;

	rcUUID = testCase.getPropertyValue("rcUUID");

	if (runnerTc.status != Status.FINISHED || rcUUID.toInteger()!= 1){

			
		testCase.setPropertyValue("nodetype","manufacturerportal");
		testCase.setPropertyValue("nodeid","0701");
		testCase.setPropertyValue("username","sch-drm_user1");
		testCase.setPropertyValue("password","Password1");
		testCase.setPropertyValue("accountoid",null);
		testCase.setPropertyValue("useroid",null);
		testCase.setPropertyValue("assertid",null);
		testCase.setPropertyValue("SAMLassertion",null);
		testCase.setPropertyValue("tokentype","urn:dece:type:tokentype:usernamepassword");
		testCase.setPropertyValue("loopuntil","25");
		testCase.setPropertyValue("expectErrTypeSTS","SUCCESS");
		testCase.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
			
		log.info " SAML Assertion Expired ! re-generating Assertion";
		def RunSTS = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get SAML Assertion - STS")

				RunSTS.setPropertyValue("TCaseName",testCase.getName());
				RunSTS.setPropertyValue("TSuiteName",testSuite.getName());

				def runnerSTS = RunSTS.run( null , false )

				assert runnerSTS.status == Status.FINISHED;

		}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call LicAppCreate Request with Valid Data" disabled="true">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0");
testCase.setPropertyValue("expectErrTypeLAC","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedDeviceDDReq = testProject.getTestSuiteByName("Staging DeviceGet").getTestCaseByName("LicAppCreate Request");

FeedDeviceDDReq.setPropertyValue("TCaseName",testCase.getName());
FeedDeviceDDReq.setPropertyValue("TSuiteName",testSuite.getName());


def runnerTC = FeedDeviceDDReq.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call DeviceUpdate Request for evict Cache" id="afc6c695-ce5a-4e23-8c89-f36ee021bdd1">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )
WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );


TSrunnerRTC.runTestStepByName("DeviceUpdateRequest");

assert TSrunnerRTC.status == Status.INITIALIZED;</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Feed DeviceGet Request with Valid Data">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("SAMLassertion","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");
testCase.setPropertyValue("assertionUUID","_87aa3e8d-2de2-46dd-b572-414003e22e9a");
testCase.setPropertyValue("username","firstfullusername_20130612_06223");
testCase.setPropertyValue("password","testing");
testCase.setPropertyValue("accountoid","DEF5738E543B633AE0401F0A05990CC0");
testCase.setPropertyValue("useroid","DEF5738E544A633AE0401F0A05990CC0");
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:DEF5738E543A633AE0401F0A05990CC0");
testCase.setPropertyValue("DeviceID","urn:dece:deviceid:org:dece:DEF585C6AEA11471E0401F0A07994634");
testCase.setPropertyValue("DomainID","urn:dece:domainid:dece:DEF587A47AF1508CE0401F0A07994D03");
testCase.setPropertyValue("expectErrType","API_NOT_AUTH");
testCase.setPropertyValue("ErrorDataVal","1");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedRTLReq = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request");

FeedRTLReq.setPropertyValue("TCaseName",testCase.getName());
FeedRTLReq.setPropertyValue("TSuiteName",testSuite.getName());

WsdlTestCaseRunner TSrunner = new WsdlTestCaseRunner( FeedRTLReq, null );

TSrunner.runTestStepByName("Get the DeviceGet Properties");
TSrunner.runTestStepByName("pem set");
assert TSrunner.status == Status.INITIALIZED;</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Set Node Role to MDA Agent">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


// set Role
testCase.setPropertyValue("NodeRole","urn:dece:role:mdagent");

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get-Set Node Role")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )

WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );

TSrunnerRTC.runTestStepByName("Set Node Role for DDD");

assert TSrunnerRTC.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call DeviceGet Request">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )

WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );

TSrunnerRTC.runTestStepByName("DeviceGetRequest");

assert TSrunnerRTC.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract DeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Extract DeviceGet Information")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify theDeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Response Validation")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep><con:testStep type="groovy" name="Set Node Role to Retailer">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

// Set Node Role

testCase.setPropertyValue("NodeRole","urn:dece:role:retailer");


def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get-Set Node Role")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )

WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );

TSrunnerRTC.runTestStepByName("Set Node Role for DDD");

assert TSrunnerRTC.status == Status.INITIALIZED;</script></con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value>28210</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>SAMLExpDate</con:name>
          <con:value>2014-06-11 06:24:48.0</con:value>
        </con:property>
        <con:property>
          <con:name>rcUUID</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>nodetype</con:name>
          <con:value>manufacturerportal</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>0701</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>firstfullusername_20130612_06223</con:value>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>testing</con:value>
        </con:property>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value>DEF5738E543B633AE0401F0A05990CC0</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value>DEF5738E544A633AE0401F0A05990CC0</con:value>
        </con:property>
        <con:property>
          <con:name>assertid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SAMLassertion</con:name>
          <con:value>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</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>loopuntil</con:name>
          <con:value>25</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTS</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value>_87aa3e8d-2de2-46dd-b572-414003e22e9a</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value>urn:dece:userid:org:dece:A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value>A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value>urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value>A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>AccountID</con:name>
          <con:value>urn:dece:accountid:org:dece:DEF5738E543A633AE0401F0A05990CC0</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceID</con:name>
          <con:value>urn:dece:deviceid:org:dece:DEF585C6AEA11471E0401F0A07994634</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>API_NOT_AUTH</con:value>
        </con:property>
        <con:property>
          <con:name>ErrorDataVal</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>NodeRole</con:name>
          <con:value>urn:dece:role:retailer</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetReqXml</con:name>
          <con:value>User-Agent: Apache-HttpClient/4.1.1 (java 1.5)
</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResXml</con:name>
          <con:value><![CDATA[<ErrorList xmlns="http://www.decellc.org/schema/2010/10/dece" xmlns:ns2="http://www.movielabs.com/schema/md/v1.07/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Error ErrorID="urn:dece:errorid:org:dece:Security:RoleInvalid">
      <Reason Language="en">API call not authorized</Reason>
      <OriginalRequest>https://qa.q.uvvu.com:7001/rest/1/0/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3AA06A9AA49F6E73D7E0401F0A059915F0/Device/urn%3Adece%3Adeviceid%3Aorg%3Adece%3AA09D9C22F11CBC6DE0401F0A05996898/DECEDomain</OriginalRequest>
      <ErrorLink>https://qa.q.uvvu.com:7001/rest/1/0/error/en/ErrorList.html#Security:RoleInvalid</ErrorLink>
   </Error>
</ErrorList>]]></con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResTime</con:name>
          <con:value>80</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetID</con:name>
          <con:value>API call not authorizedhttps://qa.q.uvvu.com:7001/rest/1/0/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3AA06A9AA49F6E73D7E0401F0A059915F0/Device/urn%3Adece%3Adeviceid%3Aorg%3Adece%3AA09D9C22F11CBC6DE0401F0A05996898/DECEDomainhttps://qa.q.uvvu.com:7001/rest/1/0/error/en/ErrorList.html#Security:RoleInvalid</con:value>
        </con:property>
        <con:property>
          <con:name>DomainID</con:name>
          <con:value>urn:dece:domainid:dece:DEF587A47AF1508CE0401F0A07994D03</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_30020 -  DeviceGet - PERM - SecurityRoleValid - Invocation with AccessPortal" searchProperties="true" id="d1e857bc-cc98-48e4-9103-cc76cc4d817d" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="">
      <con:description>This test case will verify that the Application Tier properly responses to a DeviceGet invocation when the requesting node is a Retailer.

Expected Result :

It should not allow API invocation for the "RETAILER" node.</con:description>
      <con:settings/>
      <con:testStep type="groovy" name="Verify Node User SAML Asssertion" disabled="true">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.model.testsuite.TestRunner.Status


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def ValSamlAssertion = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Validate SAML Assertion");

	ValSamlAssertion.setPropertyValue("TCaseName",testCase.getName());
	ValSamlAssertion.setPropertyValue("TSuiteName",testSuite.getName());

	def runnerTc = ValSamlAssertion.run( null , false )
	assert runnerTc.status == Status.FINISHED;

	rcUUID = testCase.getPropertyValue("rcUUID");

	if (runnerTc.status != Status.FINISHED || rcUUID.toInteger()!= 1){

			
		testCase.setPropertyValue("nodetype","manufacturerportal");
		testCase.setPropertyValue("nodeid","0701");
		testCase.setPropertyValue("username","sch-drm_user1");
		testCase.setPropertyValue("password","Password1");
		testCase.setPropertyValue("accountoid",null);
		testCase.setPropertyValue("useroid",null);
		testCase.setPropertyValue("assertid",null);
		testCase.setPropertyValue("SAMLassertion",null);
		testCase.setPropertyValue("tokentype","urn:dece:type:tokentype:usernamepassword");
		testCase.setPropertyValue("loopuntil","25");
		testCase.setPropertyValue("expectErrTypeSTS","SUCCESS");
		testCase.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
			
		log.info " SAML Assertion Expired ! re-generating Assertion";
		def RunSTS = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get SAML Assertion - STS")

				RunSTS.setPropertyValue("TCaseName",testCase.getName());
				RunSTS.setPropertyValue("TSuiteName",testSuite.getName());

				def runnerSTS = RunSTS.run( null , false )

				assert runnerSTS.status == Status.FINISHED;

		}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call LicAppCreate Request with Valid Data" disabled="true">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0");
testCase.setPropertyValue("expectErrTypeLAC","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedDeviceDDReq = testProject.getTestSuiteByName("Staging DeviceGet").getTestCaseByName("LicAppCreate Request");

FeedDeviceDDReq.setPropertyValue("TCaseName",testCase.getName());
FeedDeviceDDReq.setPropertyValue("TSuiteName",testSuite.getName());


def runnerTC = FeedDeviceDDReq.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call DeviceUpdate Request for evict Cache">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )
WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );


TSrunnerRTC.runTestStepByName("DeviceUpdateRequest");

assert TSrunnerRTC.status == Status.INITIALIZED;</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Feed DeviceGet Request with Valid Data">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("SAMLassertion","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");
testCase.setPropertyValue("assertionUUID","_87aa3e8d-2de2-46dd-b572-414003e22e9a");
testCase.setPropertyValue("username","firstfullusername_20130612_06223");
testCase.setPropertyValue("password","testing");
testCase.setPropertyValue("accountoid","DEF5738E543B633AE0401F0A05990CC0");
testCase.setPropertyValue("useroid","DEF5738E544A633AE0401F0A05990CC0");
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:DEF5738E543A633AE0401F0A05990CC0");
testCase.setPropertyValue("DeviceID","urn:dece:deviceid:org:dece:DEF585C6AEA11471E0401F0A07994634");
testCase.setPropertyValue("DomainID","urn:dece:domainid:dece:DEF587A47AF1508CE0401F0A07994D03");
testCase.setPropertyValue("expectErrType","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedRTLReq = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request");

FeedRTLReq.setPropertyValue("TCaseName",testCase.getName());
FeedRTLReq.setPropertyValue("TSuiteName",testSuite.getName());

WsdlTestCaseRunner TSrunner = new WsdlTestCaseRunner( FeedRTLReq, null );

TSrunner.runTestStepByName("Get the DeviceGet Properties");
TSrunner.runTestStepByName("pem set");
assert TSrunner.status == Status.INITIALIZED;</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Set Node Role to AccessPortal">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

// set Role
testCase.setPropertyValue("NodeRole","urn:dece:role:accessportal");

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get-Set Node Role")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )

WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );

TSrunnerRTC.runTestStepByName("Set Node Role for DDD");

assert TSrunnerRTC.status == Status.INITIALIZED;</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call DeviceGet Request">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )

WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );

TSrunnerRTC.runTestStepByName("DeviceGetRequest");

assert TSrunnerRTC.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract DeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Extract DeviceGet Information")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify theDeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Response Validation")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep><con:testStep type="groovy" name="Set Node Role to Retailer 1">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

// Set Node Role

testCase.setPropertyValue("NodeRole","urn:dece:role:retailer");


def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get-Set Node Role")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )

WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );

TSrunnerRTC.runTestStepByName("Set Node Role for DDD");

assert TSrunnerRTC.status == Status.INITIALIZED;</script></con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value>28208</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>SAMLExpDate</con:name>
          <con:value>2014-06-11 06:24:48.0</con:value>
        </con:property>
        <con:property>
          <con:name>rcUUID</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>nodetype</con:name>
          <con:value>manufacturerportal</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>0701</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>firstfullusername_20130612_06223</con:value>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>testing</con:value>
        </con:property>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value>DEF5738E543B633AE0401F0A05990CC0</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value>DEF5738E544A633AE0401F0A05990CC0</con:value>
        </con:property>
        <con:property>
          <con:name>assertid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SAMLassertion</con:name>
          <con:value>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</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>loopuntil</con:name>
          <con:value>25</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTS</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value>_87aa3e8d-2de2-46dd-b572-414003e22e9a</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value>urn:dece:userid:org:dece:A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value>A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value>urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value>A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>AccountID</con:name>
          <con:value>urn:dece:accountid:org:dece:DEF5738E543A633AE0401F0A05990CC0</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceID</con:name>
          <con:value>urn:dece:deviceid:org:dece:DEF585C6AEA11471E0401F0A07994634</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>ErrorDataVal</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>NodeRole</con:name>
          <con:value>urn:dece:role:retailer</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetReqXml</con:name>
          <con:value>User-Agent: Apache-HttpClient/4.1.1 (java 1.5)
</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResXml</con:name>
          <con:value><![CDATA[<Device IsLegacy="false" DeviceID="urn:dece:deviceid:org:dece:A09D9C22F11CBC6DE0401F0A05996898" xmlns="http://www.decellc.org/schema/2010/10/dece" xmlns:ns2="http://www.movielabs.com/schema/md/v1.07/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <DisplayName>DeviceInfoDisplayName</DisplayName>
   <Manufacturer>Microsoft</Manufacturer>
   <Model>V344</Model>
   <Brand Language="en-US">DeviceInfoBrand</Brand>
   <SerialNo>123432442323424</SerialNo>
   <Image MimeType="MimeType3" Width="50" Height="50">http://www.oxygenxml.com/1234</Image>
   <LicAppID>urn:dece:licappid:org:dece:A09D9C22F11EBC6DE0401F0A05996898</LicAppID>
   <DRMClientID>urn:dece:drmclientid:org:dece:A0E2E4B822DB1B7CE0401F0A07994404</DRMClientID>
   <ResourceStatus>
      <Current CreatedBy="urn:dece:org:org:dece:0701" CreationDate="2011-04-11T04:02:39.637Z">
         <Value>urn:dece:type:status:pending</Value>
         <Description>Device Created</Description>
      </Current>
   </ResourceStatus>
</Device>]]></con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResTime</con:name>
          <con:value>259</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetID</con:name>
          <con:value>API call not authorizedhttps://qa.q.uvvu.com:7001/rest/1/0/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3AA06A9AA49F6E73D7E0401F0A059915F0/Device/urn%3Adece%3Adeviceid%3Aorg%3Adece%3AA09D9C22F11CBC6DE0401F0A05996898/DECEDomainhttps://qa.q.uvvu.com:7001/rest/1/0/error/en/ErrorList.html#Security:RoleInvalid</con:value>
        </con:property>
        <con:property>
          <con:name>DomainID</con:name>
          <con:value>urn:dece:domainid:dece:DEF587A47AF1508CE0401F0A07994D03</con:value>
        </con:property>
      <con:property><con:name>ETag</con:name><con:value>"E940DF1C2CD2549DE0401F0A079962AF:F0246DC7"</con:value></con:property><con:property><con:name>Last-Modified</con:name><con:value>Mon, 21 Oct 2013 13:03:06 GMT</con:value></con:property></con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_30021 -  DeviceGet - PERM - SecurityRoleValid - Invocation with AccessPortal_CS" searchProperties="true" id="f8dacd2a-0d40-4f40-a60b-88e48bbfc00a" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="">
      <con:description>This test case will verify that the Application Tier properly responses to a DeviceGet invocation when the requesting node is a Retailer.

Expected Result :

It should not allow API invocation for the "RETAILER" node.</con:description>
      <con:settings/>
      <con:testStep type="groovy" name="Verify Node User SAML Asssertion" disabled="true">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.model.testsuite.TestRunner.Status


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def ValSamlAssertion = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Validate SAML Assertion");

	ValSamlAssertion.setPropertyValue("TCaseName",testCase.getName());
	ValSamlAssertion.setPropertyValue("TSuiteName",testSuite.getName());

	def runnerTc = ValSamlAssertion.run( null , false )
	assert runnerTc.status == Status.FINISHED;

	rcUUID = testCase.getPropertyValue("rcUUID");

	if (runnerTc.status != Status.FINISHED || rcUUID.toInteger()!= 1){

			
		testCase.setPropertyValue("nodetype","manufacturerportal");
		testCase.setPropertyValue("nodeid","0701");
		testCase.setPropertyValue("username","sch-drm_user1");
		testCase.setPropertyValue("password","Password1");
		testCase.setPropertyValue("accountoid",null);
		testCase.setPropertyValue("useroid",null);
		testCase.setPropertyValue("assertid",null);
		testCase.setPropertyValue("SAMLassertion",null);
		testCase.setPropertyValue("tokentype","urn:dece:type:tokentype:usernamepassword");
		testCase.setPropertyValue("loopuntil","25");
		testCase.setPropertyValue("expectErrTypeSTS","SUCCESS");
		testCase.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
			
		log.info " SAML Assertion Expired ! re-generating Assertion";
		def RunSTS = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get SAML Assertion - STS")

				RunSTS.setPropertyValue("TCaseName",testCase.getName());
				RunSTS.setPropertyValue("TSuiteName",testSuite.getName());

				def runnerSTS = RunSTS.run( null , false )

				assert runnerSTS.status == Status.FINISHED;

		}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call LicAppCreate Request with Valid Data" disabled="true">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0");
testCase.setPropertyValue("expectErrTypeLAC","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedDeviceDDReq = testProject.getTestSuiteByName("Staging DeviceGet").getTestCaseByName("LicAppCreate Request");

FeedDeviceDDReq.setPropertyValue("TCaseName",testCase.getName());
FeedDeviceDDReq.setPropertyValue("TSuiteName",testSuite.getName());


def runnerTC = FeedDeviceDDReq.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call DeviceUpdate Request for evict Cache">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )
WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );


TSrunnerRTC.runTestStepByName("DeviceUpdateRequest");

assert TSrunnerRTC.status == Status.INITIALIZED;</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Feed DeviceGet Request with Valid Data">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("SAMLassertion","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");
testCase.setPropertyValue("assertionUUID","_87aa3e8d-2de2-46dd-b572-414003e22e9a");
testCase.setPropertyValue("username","firstfullusername_20130612_06223");
testCase.setPropertyValue("password","testing");
testCase.setPropertyValue("accountoid","DEF5738E543B633AE0401F0A05990CC0");
testCase.setPropertyValue("useroid","DEF5738E544A633AE0401F0A05990CC0");
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:DEF5738E543A633AE0401F0A05990CC0");
testCase.setPropertyValue("DeviceID","urn:dece:deviceid:org:dece:DEF585C6AEA11471E0401F0A07994634");
testCase.setPropertyValue("DomainID","urn:dece:domainid:dece:DEF587A47AF1508CE0401F0A07994D03");
testCase.setPropertyValue("expectErrType","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedRTLReq = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request");

FeedRTLReq.setPropertyValue("TCaseName",testCase.getName());
FeedRTLReq.setPropertyValue("TSuiteName",testSuite.getName());

WsdlTestCaseRunner TSrunner = new WsdlTestCaseRunner( FeedRTLReq, null );

TSrunner.runTestStepByName("Get the DeviceGet Properties");
TSrunner.runTestStepByName("pem set");
assert TSrunner.status == Status.INITIALIZED;</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Set Node Role to AccessPortal">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

// set Role
testCase.setPropertyValue("NodeRole","urn:dece:role:accessportal:customersupport");

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get-Set Node Role")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )

WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );

TSrunnerRTC.runTestStepByName("Set Node Role for DDD");

assert TSrunnerRTC.status == Status.INITIALIZED;</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call DeviceGet Request">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )

WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );

TSrunnerRTC.runTestStepByName("DeviceGetRequest");

assert TSrunnerRTC.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract DeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Extract DeviceGet Information")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify theDeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Response Validation")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep><con:testStep type="groovy" name="Set Node Role to Retailer 1">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

// Set Node Role

testCase.setPropertyValue("NodeRole","urn:dece:role:retailer");


def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get-Set Node Role")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )

WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );

TSrunnerRTC.runTestStepByName("Set Node Role for DDD");

assert TSrunnerRTC.status == Status.INITIALIZED;</script></con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value>28208</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>SAMLExpDate</con:name>
          <con:value>2014-06-11 06:24:48.0</con:value>
        </con:property>
        <con:property>
          <con:name>rcUUID</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>nodetype</con:name>
          <con:value>manufacturerportal</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>0701</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>firstfullusername_20130612_06223</con:value>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>testing</con:value>
        </con:property>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value>DEF5738E543B633AE0401F0A05990CC0</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value>DEF5738E544A633AE0401F0A05990CC0</con:value>
        </con:property>
        <con:property>
          <con:name>assertid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SAMLassertion</con:name>
          <con:value>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</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>loopuntil</con:name>
          <con:value>25</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTS</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value>_87aa3e8d-2de2-46dd-b572-414003e22e9a</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value>urn:dece:userid:org:dece:A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value>A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value>urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value>A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>AccountID</con:name>
          <con:value>urn:dece:accountid:org:dece:DEF5738E543A633AE0401F0A05990CC0</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceID</con:name>
          <con:value>urn:dece:deviceid:org:dece:DEF585C6AEA11471E0401F0A07994634</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>ErrorDataVal</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>NodeRole</con:name>
          <con:value>urn:dece:role:retailer</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetReqXml</con:name>
          <con:value>User-Agent: Apache-HttpClient/4.1.1 (java 1.5)
</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResXml</con:name>
          <con:value><![CDATA[<Device IsLegacy="false" DeviceID="urn:dece:deviceid:org:dece:A09D9C22F11CBC6DE0401F0A05996898" xmlns="http://www.decellc.org/schema/2010/10/dece" xmlns:ns2="http://www.movielabs.com/schema/md/v1.07/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <DisplayName>DeviceInfoDisplayName</DisplayName>
   <Manufacturer>Microsoft</Manufacturer>
   <Model>V344</Model>
   <Brand Language="en-US">DeviceInfoBrand</Brand>
   <SerialNo>123432442323424</SerialNo>
   <Image MimeType="MimeType3" Width="50" Height="50">http://www.oxygenxml.com/1234</Image>
   <LicAppID>urn:dece:licappid:org:dece:A09D9C22F11EBC6DE0401F0A05996898</LicAppID>
   <DRMClientID>urn:dece:drmclientid:org:dece:A0E2E4B822DB1B7CE0401F0A07994404</DRMClientID>
   <ResourceStatus>
      <Current CreatedBy="urn:dece:org:org:dece:0701" CreationDate="2011-04-11T04:02:39.637Z">
         <Value>urn:dece:type:status:pending</Value>
         <Description>Device Created</Description>
      </Current>
   </ResourceStatus>
</Device>]]></con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResTime</con:name>
          <con:value>259</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetID</con:name>
          <con:value>API call not authorizedhttps://qa.q.uvvu.com:7001/rest/1/0/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3AA06A9AA49F6E73D7E0401F0A059915F0/Device/urn%3Adece%3Adeviceid%3Aorg%3Adece%3AA09D9C22F11CBC6DE0401F0A05996898/DECEDomainhttps://qa.q.uvvu.com:7001/rest/1/0/error/en/ErrorList.html#Security:RoleInvalid</con:value>
        </con:property>
        <con:property>
          <con:name>DomainID</con:name>
          <con:value>urn:dece:domainid:dece:DEF587A47AF1508CE0401F0A07994D03</con:value>
        </con:property>
      <con:property><con:name>ETag</con:name><con:value>"E940E7DAFFD35DDDE0401F0A059957D9:F0246DC7"</con:value></con:property><con:property><con:name>Last-Modified</con:name><con:value>Mon, 21 Oct 2013 13:03:26 GMT</con:value></con:property></con:properties>
      <con:reportParameters/>
    </con:testCase>
  <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_30020 -  DeviceGet - PERM - SecurityRoleValid - Invocation with MANF_Portal_CS" searchProperties="true" id="d44abe3a-cb25-4fce-ac9a-0c56bde20c6b" disabled="true">
      <con:description>This test case will verify that the Application Tier properly responses to a DeviceGet invocation when the requesting node is a Device Manufacturer Portal Customer Support.

Expected Result :

It should not allow API invocation for the "DEVICE MANUFACTURER PORTAL CUSTOMER SUPPORT" node.</con:description>
      <con:settings/>
      <con:testStep type="groovy" name="Verify Node User SAML Asssertion">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.model.testsuite.TestRunner.Status


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def ValSamlAssertion = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Validate SAML Assertion");

	ValSamlAssertion.setPropertyValue("TCaseName",testCase.getName());
	ValSamlAssertion.setPropertyValue("TSuiteName",testSuite.getName());

	def runnerTc = ValSamlAssertion.run( null , false )
	assert runnerTc.status == Status.FINISHED;

	rcUUID = testCase.getPropertyValue("rcUUID");

	if (runnerTc.status != Status.FINISHED || rcUUID.toInteger()!= 1){

			
		testCase.setPropertyValue("nodetype","manufacturerportal");
		testCase.setPropertyValue("nodeid","0701");
		testCase.setPropertyValue("username","sch-drm_user1");
		testCase.setPropertyValue("password","Password1");
		testCase.setPropertyValue("accountoid",null);
		testCase.setPropertyValue("useroid",null);
		testCase.setPropertyValue("assertid",null);
		testCase.setPropertyValue("SAMLassertion",null);
		testCase.setPropertyValue("tokentype","urn:dece:type:tokentype:usernamepassword");
		testCase.setPropertyValue("loopuntil","25");
		testCase.setPropertyValue("expectErrTypeSTS","SUCCESS");
		testCase.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
			
		log.info " SAML Assertion Expired ! re-generating Assertion";
		def RunSTS = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get SAML Assertion - STS")

				RunSTS.setPropertyValue("TCaseName",testCase.getName());
				RunSTS.setPropertyValue("TSuiteName",testSuite.getName());

				def runnerSTS = RunSTS.run( null , false )

				assert runnerSTS.status == Status.FINISHED;

		}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call LicAppCreate Request with Valid Data" disabled="true">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0");
testCase.setPropertyValue("expectErrTypeLAC","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedDeviceDDReq = testProject.getTestSuiteByName("Staging DeviceGet").getTestCaseByName("LicAppCreate Request");

FeedDeviceDDReq.setPropertyValue("TCaseName",testCase.getName());
FeedDeviceDDReq.setPropertyValue("TSuiteName",testSuite.getName());


def runnerTC = FeedDeviceDDReq.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Feed DeviceGet Request with Valid Data">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("SAMLassertion","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");
testCase.setPropertyValue("assertionUUID","_56a21905-45ee-4544-a04c-773d352f1dad");
testCase.setPropertyValue("username","firstfullusername_20130611_115429");
testCase.setPropertyValue("password","testing");
testCase.setPropertyValue("accountoid","DEDBE6CD0330B069E0401F0A0599157C");
testCase.setPropertyValue("useroid","DEDBEF974027BE86E0401F0A07995608");
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:DEDBE6CD032FB069E0401F0A0599157C");
testCase.setPropertyValue("DeviceID","urn:dece:deviceid:org:dece:DEDBF944FECB4DE1E0401F0A05993665");
testCase.setPropertyValue("DomainID","urn:dece:domainid:dece:DEDBFAF6E65B7CE6E0401F0A07996AD6");
testCase.setPropertyValue("expectErrType","FORBIDDEN");
testCase.setPropertyValue("ErrorDataVal","1");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedRTLReq = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request");

FeedRTLReq.setPropertyValue("TCaseName",testCase.getName());
FeedRTLReq.setPropertyValue("TSuiteName",testSuite.getName());

WsdlTestCaseRunner TSrunner = new WsdlTestCaseRunner( FeedRTLReq, null );

TSrunner.runTestStepByName("Get the DeviceGet Properties");
TSrunner.runTestStepByName("pem set");
assert TSrunner.status == Status.INITIALIZED;</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Set Node Role to MANF_Portal_CS">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


// set Role
testCase.setPropertyValue("NodeRole","urn:dece:role:manufacturerportal:customersupport");

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get-Set Node Role")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )

WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );

TSrunnerRTC.runTestStepByName("Set Node Role for DDD");

assert TSrunnerRTC.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call DeviceGet Request">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )

WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );

TSrunnerRTC.runTestStepByName("DeviceGetRequest");

assert TSrunnerRTC.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract DeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Extract DeviceGet Information")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify theDeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Response Validation")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call DeviceUpdate Request for evict Cache">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )
WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );


TSrunnerRTC.runTestStepByName("DeviceUpdateRequest");

assert TSrunnerRTC.status == Status.INITIALIZED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Set Node Role to Retailer">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

// Set Node Role

testCase.setPropertyValue("NodeRole","urn:dece:role:retailer");


def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get-Set Node Role")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )

WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );

TSrunnerRTC.runTestStepByName("Set Node Role for DDD");

assert TSrunnerRTC.status == Status.INITIALIZED;</script></con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SAMLExpDate</con:name>
          <con:value>2012-04-14 13:34:23.0</con:value>
        </con:property>
        <con:property>
          <con:name>rcUUID</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>nodetype</con:name>
          <con:value>manufacturerportal</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>0701</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>firstfullusername_20130611_115429</con:value>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>testing</con:value>
        </con:property>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value>DEDBE6CD0330B069E0401F0A0599157C</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value>DEDBEF974027BE86E0401F0A07995608</con:value>
        </con:property>
        <con:property>
          <con:name>assertid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SAMLassertion</con:name>
          <con:value>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</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>loopuntil</con:name>
          <con:value>25</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTS</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value>_56a21905-45ee-4544-a04c-773d352f1dad</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value>urn:dece:userid:org:dece:A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value>A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value>urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value>A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>AccountID</con:name>
          <con:value>urn:dece:accountid:org:dece:DEDBE6CD032FB069E0401F0A0599157C</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceID</con:name>
          <con:value>urn:dece:deviceid:org:dece:DEDBF944FECB4DE1E0401F0A05993665</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>FORBIDDEN</con:value>
        </con:property>
        <con:property>
          <con:name>ErrorDataVal</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>NodeRole</con:name>
          <con:value>urn:dece:role:manufacturerportal:customersupport</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetReqXml</con:name>
          <con:value>Host: qa.q.uvvu.com:7001</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResXml</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>DeviceGetResTime</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>DeviceGetID</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>DomainID</con:name>
          <con:value>urn:dece:domainid:dece:DEDBFAF6E65B7CE6E0401F0A07996AD6</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_30021-  DeviceGet - PERM - SecurityRoleValid - Invocation with MANF_Portal" searchProperties="true" id="a73f9c0c-7726-460b-a1bb-82162b7dcad5" disabled="true">
      <con:description>This test case will verify that the Application Tier properly responses to a DeviceGet invocation when the requesting node is a Device Manufacturer Portal Customer Support.

Expected Result :

It should not allow API invocation for the "DEVICE MANUFACTURER PORTAL CUSTOMER SUPPORT" node.</con:description>
      <con:settings/>
      <con:testStep type="groovy" name="Verify Node User SAML Asssertion">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.model.testsuite.TestRunner.Status


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def ValSamlAssertion = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Validate SAML Assertion");

	ValSamlAssertion.setPropertyValue("TCaseName",testCase.getName());
	ValSamlAssertion.setPropertyValue("TSuiteName",testSuite.getName());

	def runnerTc = ValSamlAssertion.run( null , false )
	assert runnerTc.status == Status.FINISHED;

	rcUUID = testCase.getPropertyValue("rcUUID");

	if (runnerTc.status != Status.FINISHED || rcUUID.toInteger()!= 1){

			
		testCase.setPropertyValue("nodetype","manufacturerportal");
		testCase.setPropertyValue("nodeid","0701");
		testCase.setPropertyValue("username","sch-drm_user1");
		testCase.setPropertyValue("password","Password1");
		testCase.setPropertyValue("accountoid",null);
		testCase.setPropertyValue("useroid",null);
		testCase.setPropertyValue("assertid",null);
		testCase.setPropertyValue("SAMLassertion",null);
		testCase.setPropertyValue("tokentype","urn:dece:type:tokentype:usernamepassword");
		testCase.setPropertyValue("loopuntil","25");
		testCase.setPropertyValue("expectErrTypeSTS","SUCCESS");
		testCase.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
			
		log.info " SAML Assertion Expired ! re-generating Assertion";
		def RunSTS = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get SAML Assertion - STS")

				RunSTS.setPropertyValue("TCaseName",testCase.getName());
				RunSTS.setPropertyValue("TSuiteName",testSuite.getName());

				def runnerSTS = RunSTS.run( null , false )

				assert runnerSTS.status == Status.FINISHED;

		}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call LicAppCreate Request with Valid Data" disabled="true">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0");
testCase.setPropertyValue("expectErrTypeLAC","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedDeviceDDReq = testProject.getTestSuiteByName("Staging DeviceGet").getTestCaseByName("LicAppCreate Request");

FeedDeviceDDReq.setPropertyValue("TCaseName",testCase.getName());
FeedDeviceDDReq.setPropertyValue("TSuiteName",testSuite.getName());


def runnerTC = FeedDeviceDDReq.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Feed DeviceGet Request with Valid Data">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("SAMLassertion","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");
testCase.setPropertyValue("assertionUUID","_56a21905-45ee-4544-a04c-773d352f1dad");
testCase.setPropertyValue("username","firstfullusername_20130611_115429");
testCase.setPropertyValue("password","testing");
testCase.setPropertyValue("accountoid","DEDBE6CD0330B069E0401F0A0599157C");
testCase.setPropertyValue("useroid","DEDBEF974027BE86E0401F0A07995608");
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:DEDBE6CD032FB069E0401F0A0599157C");
testCase.setPropertyValue("DeviceID","urn:dece:deviceid:org:dece:DEDBF944FECB4DE1E0401F0A05993665");
testCase.setPropertyValue("DomainID","urn:dece:domainid:dece:DEDBFAF6E65B7CE6E0401F0A07996AD6");
testCase.setPropertyValue("expectErrType","FORBIDDEN");
testCase.setPropertyValue("ErrorDataVal","1");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedRTLReq = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request");

FeedRTLReq.setPropertyValue("TCaseName",testCase.getName());
FeedRTLReq.setPropertyValue("TSuiteName",testSuite.getName());

WsdlTestCaseRunner TSrunner = new WsdlTestCaseRunner( FeedRTLReq, null );

TSrunner.runTestStepByName("Get the DeviceGet Properties");
TSrunner.runTestStepByName("pem set");
assert TSrunner.status == Status.INITIALIZED;</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Set Node Role to MANF_Portal_CS">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


// set Role
testCase.setPropertyValue("NodeRole","urn:dece:role:manufacturerportal:customersupport");

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get-Set Node Role")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )

WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );

TSrunnerRTC.runTestStepByName("Set Node Role for DDD");

assert TSrunnerRTC.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call DeviceGet Request">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )

WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );

TSrunnerRTC.runTestStepByName("DeviceGetRequest");

assert TSrunnerRTC.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract DeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Extract DeviceGet Information")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify theDeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Response Validation")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call DeviceUpdate Request for evict Cache">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )
WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );


TSrunnerRTC.runTestStepByName("DeviceUpdateRequest");

assert TSrunnerRTC.status == Status.INITIALIZED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Set Node Role to Retailer">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

// Set Node Role

testCase.setPropertyValue("NodeRole","urn:dece:role:retailer");


def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get-Set Node Role")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )

WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );

TSrunnerRTC.runTestStepByName("Set Node Role for DDD");

assert TSrunnerRTC.status == Status.INITIALIZED;</script></con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SAMLExpDate</con:name>
          <con:value>2012-04-14 13:34:23.0</con:value>
        </con:property>
        <con:property>
          <con:name>rcUUID</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>nodetype</con:name>
          <con:value>manufacturerportal</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>0701</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>firstfullusername_20130611_115429</con:value>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>testing</con:value>
        </con:property>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value>DEDBE6CD0330B069E0401F0A0599157C</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value>DEDBEF974027BE86E0401F0A07995608</con:value>
        </con:property>
        <con:property>
          <con:name>assertid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SAMLassertion</con:name>
          <con:value>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</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>loopuntil</con:name>
          <con:value>25</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTS</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value>_56a21905-45ee-4544-a04c-773d352f1dad</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value>urn:dece:userid:org:dece:A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value>A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value>urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value>A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>AccountID</con:name>
          <con:value>urn:dece:accountid:org:dece:DEDBE6CD032FB069E0401F0A0599157C</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceID</con:name>
          <con:value>urn:dece:deviceid:org:dece:DEDBF944FECB4DE1E0401F0A05993665</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>FORBIDDEN</con:value>
        </con:property>
        <con:property>
          <con:name>ErrorDataVal</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>NodeRole</con:name>
          <con:value>urn:dece:role:manufacturerportal:customersupport</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetReqXml</con:name>
          <con:value>Host: qa.q.uvvu.com:7001</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResXml</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>DeviceGetResTime</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>DeviceGetID</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>DomainID</con:name>
          <con:value>urn:dece:domainid:dece:DEDBFAF6E65B7CE6E0401F0A07996AD6</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_30022 -  DeviceGet - PERM - SecurityRoleValid - Invocation with Coordinator Roles" searchProperties="true" id="a72e9014-2090-4625-af73-b08cb44b01b1" disabled="true">
      <con:description>This test case will verify that the Application Tier properly responses to a DeviceGet invocation when the requesting node is DECE.

Expected Result :

It should not allow API invocation for the "DECE" node.</con:description>
      <con:settings/>
      <con:testStep type="groovy" name="Verify Node User SAML Asssertion">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.model.testsuite.TestRunner.Status


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def ValSamlAssertion = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Validate SAML Assertion");

	ValSamlAssertion.setPropertyValue("TCaseName",testCase.getName());
	ValSamlAssertion.setPropertyValue("TSuiteName",testSuite.getName());

	def runnerTc = ValSamlAssertion.run( null , false )
	assert runnerTc.status == Status.FINISHED;

	rcUUID = testCase.getPropertyValue("rcUUID");

	if (runnerTc.status != Status.FINISHED || rcUUID.toInteger()!= 1){

			
		testCase.setPropertyValue("nodetype","manufacturerportal");
		testCase.setPropertyValue("nodeid","0701");
		testCase.setPropertyValue("username","sch-drm_user1");
		testCase.setPropertyValue("password","Password1");
		testCase.setPropertyValue("accountoid",null);
		testCase.setPropertyValue("useroid",null);
		testCase.setPropertyValue("assertid",null);
		testCase.setPropertyValue("SAMLassertion",null);
		testCase.setPropertyValue("tokentype","urn:dece:type:tokentype:usernamepassword");
		testCase.setPropertyValue("loopuntil","25");
		testCase.setPropertyValue("expectErrTypeSTS","SUCCESS");
		testCase.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
			
		log.info " SAML Assertion Expired ! re-generating Assertion";
		def RunSTS = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get SAML Assertion - STS")

				RunSTS.setPropertyValue("TCaseName",testCase.getName());
				RunSTS.setPropertyValue("TSuiteName",testSuite.getName());

				def runnerSTS = RunSTS.run( null , false )

				assert runnerSTS.status == Status.FINISHED;

		}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="datasource" name="Feed Coordinator Roles"><con:settings/><con:config xsi:type="con:DataSourceStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dataSource type="Grid"><con:configuration><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">urn:dece:role:device</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">FORBIDDEN</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">urn:dece:role:portal:customersupport</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">SUCCESS</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">urn:dece:role:dsp:customersupport</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">SUCCESS</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">urn:dece:role:retailer:customersupport</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">SUCCESS</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">urn:dece:role:coordinator</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">FORBIDDEN</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">urn:dece:role:portal</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">SUCCESS</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">urn:dece:role:dece</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">FORBIDDEN</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">urn:dece:role:lasp:dynamic:customersupport</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">SUCCESS</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">urn:dece:role:mdagent</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">FORBIDDEN</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">urn:dece:role:lasp:linked</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">SUCCESS</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">urn:dece:role:coordinator:caf</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">FORBIDDEN</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">urn:dece:role:accessportal</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">FORBIDDEN</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">urn:dece:role:deviceportal</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">FORBIDDEN</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">urn:dece:role:lasp:dynamic</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">SUCCESS</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">urn:dece:role:coordinator:customersupport</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">FORBIDDEN</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">urn:dece:role:contentprovider:customersupport</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">FORBIDDEN</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">urn:dece:role:lasp:linked:customersupport</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">SUCCESS</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">urn:dece:role:retailer</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">SUCCESS</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">urn:dece:role:dsp</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">SUCCESS</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">urn:dece:role:contentprovider</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">FORBIDDEN</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">urn:dece:role:decedomainmanager</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">FORBIDDEN</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">urn:dece:role:dece:customersupport</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">SUCCESS</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">urn:dece:role:accessportal:customersupport</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">FORBIDDEN</con:entry></xml-fragment>]]></row></con:configuration></con:dataSource><con:property>Role</con:property><con:property>expectErrType</con:property><con:restartOnRun>true</con:restartOnRun></con:config></con:testStep><con:testStep type="groovy" name="Call LicAppCreate Request with Valid Data" disabled="true">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0");
testCase.setPropertyValue("expectErrTypeLAC","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedDeviceDDReq = testProject.getTestSuiteByName("Staging DeviceGet").getTestCaseByName("LicAppCreate Request");

FeedDeviceDDReq.setPropertyValue("TCaseName",testCase.getName());
FeedDeviceDDReq.setPropertyValue("TSuiteName",testSuite.getName());


def runnerTC = FeedDeviceDDReq.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Feed DeviceGet Request with Valid Data">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

// Use Data for ROle and Expected response 

def DsNodeRole = testRunner.testCase.testSteps['Feed Coordinator Roles'];
log.info  "Role set to: " + DsNodeRole.getPropertyValue("Role");

// Node Role 
testCase.setPropertyValue("NodeRole",DsNodeRole.getPropertyValue("Role"));

//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0");
testCase.setPropertyValue("DeviceID","urn:dece:deviceid:org:dece:A09D9C22F11CBC6DE0401F0A05996898");
testCase.setPropertyValue("DomainID","urn:dece:domainid:dece:A09DA589BD63A036E0401F0A05996D9A");
testCase.setPropertyValue("expectErrType",DsNodeRole.getPropertyValue("expectErrType"));;
testCase.setPropertyValue("ErrorDataVal","1");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedRTLReq = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request");

FeedRTLReq.setPropertyValue("TCaseName",testCase.getName());
FeedRTLReq.setPropertyValue("TSuiteName",testSuite.getName());

WsdlTestCaseRunner TSrunner = new WsdlTestCaseRunner( FeedRTLReq, null );

TSrunner.runTestStepByName("Get the DeviceGet Properties");
TSrunner.runTestStepByName("pem set");
assert TSrunner.status == Status.INITIALIZED;</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Set Up Node Role">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

// Set Node Role



def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get-Set Node Role")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )

WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );

TSrunnerRTC.runTestStepByName("Set Node Role for DDD");

assert TSrunnerRTC.status == Status.INITIALIZED;</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call DeviceGet Request">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )

WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );

TSrunnerRTC.runTestStepByName("DeviceGetRequest");

assert TSrunnerRTC.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract DeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Extract DeviceGet Information")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify theDeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Response Validation")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="datasourceloop" name="Loop to Next Role"><con:settings/><con:config><dataSourceStep>Feed Coordinator Roles</dataSourceStep><targetStep>Feed DeviceGet Request with Valid Data</targetStep></con:config></con:testStep><con:testStep type="groovy" name="Call DeviceUpdate Request for evict Cache">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )
WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );


TSrunnerRTC.runTestStepByName("DeviceUpdateRequest");

assert TSrunnerRTC.status == Status.INITIALIZED;</script></con:config>
      </con:testStep><con:testStep type="groovy" name="Set Node Role to Retailer">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

// Set Node Role

testCase.setPropertyValue("NodeRole","urn:dece:role:retailer");


def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get-Set Node Role")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )

WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );

TSrunnerRTC.runTestStepByName("Set Node Role for DDD");

assert TSrunnerRTC.status == Status.INITIALIZED;</script></con:config>
      </con:testStep><con:properties>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value>28192</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>SAMLExpDate</con:name>
          <con:value>2013-06-15 03:22:10.0</con:value>
        </con:property>
        <con:property>
          <con:name>rcUUID</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>nodetype</con:name>
          <con:value>manufacturerportal</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>0701</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>sch-drm_user1</con:value>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>Password1</con:value>
        </con:property>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value>A06A9AA49F7073D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value>A06A9AA49F7973D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SAMLassertion</con:name>
          <con:value>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</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>loopuntil</con:name>
          <con:value>25</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTS</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value>_df6ea584-6723-4b5d-b2e8-d20651f6942c</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value>urn:dece:userid:org:dece:A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value>A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value>urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value>A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>NodeRole</con:name>
          <con:value>urn:dece:role:accessportal:customersupport</con:value>
        </con:property>
        <con:property>
          <con:name>AccountID</con:name>
          <con:value>urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceID</con:name>
          <con:value>urn:dece:deviceid:org:dece:A09D9C22F11CBC6DE0401F0A05996898</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>FORBIDDEN</con:value>
        </con:property>
        <con:property>
          <con:name>ErrorDataVal</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetReqXml</con:name>
          <con:value>Authorization: SAML2 assertion=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
</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResXml</con:name>
          <con:value><![CDATA[<ErrorList xmlns="http://www.decellc.org/schema/2010/10/dece" xmlns:ns2="http://www.movielabs.com/schema/md/v1.07/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Error ErrorID="urn:dece:errorid:org:dece:Security:RoleInvalid">
      <Reason Language="en">API call not authorized</Reason>
      <OriginalRequest>https://qa.q.uvvu.com:7001/rest/1/0/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3AA06A9AA49F6E73D7E0401F0A059915F0/Device/urn%3Adece%3Adeviceid%3Aorg%3Adece%3AA09D9C22F11CBC6DE0401F0A05996898/DECEDomain</OriginalRequest>
      <ErrorLink>https://qa.q.uvvu.com:7001/rest/1/0/error/en/ErrorList.html#Security:RoleInvalid</ErrorLink>
   </Error>
</ErrorList>]]></con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResTime</con:name>
          <con:value>3419</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetID</con:name>
          <con:value>API call not authorizedhttps://qa.q.uvvu.com:7001/rest/1/0/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3AA06A9AA49F6E73D7E0401F0A059915F0/Device/urn%3Adece%3Adeviceid%3Aorg%3Adece%3AA09D9C22F11CBC6DE0401F0A05996898/DECEDomainhttps://qa.q.uvvu.com:7001/rest/1/0/error/en/ErrorList.html#Security:RoleInvalid</con:value>
        </con:property>
        <con:property>
          <con:name>DomainID</con:name>
          <con:value>urn:dece:domainid:dece:A09DA589BD63A036E0401F0A05996D9A</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase></con:testSuite><con:testSuite name="DeviceGetCache_TestCases"><con:settings><con:setting id="IncludeOverview">true</con:setting><con:setting id="IncludeResults">true</con:setting><con:setting id="FlowLayout">false</con:setting><con:setting id="ErrorDetails">true</con:setting><con:setting id="IncludeCoverage">true</con:setting><con:setting id="GeneratableJUnitReport@Style">Multiple Pages</con:setting><con:setting id="GeneratableJUnitReport@Folder">C:\Users\raju.ganji\Desktop\DeviceGet_170613\4.0.11</con:setting></con:settings><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="00001_DeviceGetCacheScenario_NonCS_DeviceGet_DeviceGet_200_OK" searchProperties="true" id="56765468-b844-4d1f-9b63-718873433d54"><con:settings/><con:testStep type="groovy" name="Set Coordinator Schema to Leading version" id="2d983360-f2ce-4570-b206-c7dff2a5b519"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("versionMinor",tP.getPropertyValue("currentVersionMinor"));
tP.setPropertyValue("versionMajor",tP.getPropertyValue("currentVersionMajor"));

tP.setPropertyValue("CoordinatorSchema", tP.getPropertyValue("CoordinatorSchema_"+ tP.getPropertyValue("versionMinor")));

log.info "CoordinatorSchema set to .... :  " + tP.getPropertyValue("CoordinatorSchema")</script></con:config></con:testStep><con:testStep type="groovy" name="Call AccountCreate API"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("AccountCreateAPI")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
tP.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeidRTL"));

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call FirstUserCreateAPI"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("FirstUserCreateAPI")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call STSCreateandGetAPI"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("STSCreateandGetAPI")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("Username",tC.getPropertyValue("Username"));
myTC.setPropertyValue("audience","");


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

tC.setPropertyValue("RET_NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("RET_NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("RET_SAML",tC.getPropertyValue("SAML"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call TOUPolicyCreateAPI"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("TOUPolicyCreateAPI")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call MUCPolicyCreateAPI"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("MUCPolicyCreateAPI")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call STSCreateandGetAPI for Device"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("STSCreateandGetAPIforDevices")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("Username",tC.getPropertyValue("Username"));

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call AttestationDataCreateAPI" id="ea93a35e-2b85-4ffe-8ed4-13cadbc1d18a" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("AttestationDataCreate API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call AttestationDataGetAPI" id="8615d376-f593-447b-a426-7e4a9b5733fd" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("AttestationDataGet API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call LicAppCreateAPI"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("LicAppCreateAPI")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML"));

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call LicAppGetAPI"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("LicAppGetAPIforDevice")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("LIC_APP_ID",tC.getPropertyValue("LIC_APP_ID"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML"));

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call DeviceGetAPI"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGetAPI")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("Domain_ID",tC.getPropertyValue("Domain_ID"));
myTC.setPropertyValue("Device_ID",tC.getPropertyValue("Device_ID"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("RET_NODE_ACCOUNT_ID_FULL"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("RET_SAML"));
myTC.setPropertyValue("ExpectedReturnCodeGet","200");
myTC.setPropertyValue("ETagResponseType","UnMatch");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call again DeviceGetAPI"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGetAPI")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("Domain_ID",tC.getPropertyValue("Domain_ID"));
myTC.setPropertyValue("Device_ID",tC.getPropertyValue("Device_ID"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("RET_NODE_ACCOUNT_ID_FULL"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("RET_SAML"));
myTC.setPropertyValue("ExpectedReturnCodeGet","200");
myTC.setPropertyValue("ETagResponseType","Match");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>NODE_ID</con:name><con:value>RET</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>0E3F1071758B71C1E05305991F0A383E</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:0E3F1071758B71C1E05305991F0A383E</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>0E3F10714EB871B3E05305991F0A50E8</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:0E3F10714EB871B3E05305991F0A50E8</con:value></con:property><con:property><con:name>Username</con:name><con:value>firstfau_20150204_012240</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVbbcuI4EP0VyvOYMpaxjY0rUGUuSciSy2CSSuZlS8gyKNhyIslc5utXMuAxhGTZfaK6aZ0+Unef9iWHadLwA84xEySjtXWaUO4X3raWM+pnkBPuU5hi7gvkh8HdyG/UgQ/3R7TasN/W/m562IxQw9UtLzJ127Id3XO8SI+nsTn1UNxqtqYylPMcDykXkIq21gCmo4OGDuwJcH0H+LZZt5v2L632jBmX2DKkDrQdqTVva3Mh3n3DWK1W9ZVVz9jMaABgGi93oxDNcQq1zuX2RkUi1tnFo3qEEU4SVEdZalwaBzGXEfdDMqNQ5AzvckVf5QIGaBkyJuJk9kMrz+JoSOOsMHuQZpQgmJDfUL3PHRbzLKoFySxjRMzTLy9hAgWs4zXSkWnTH5pxSO1MoAOGjEOdz6G5wxrjGDNMEa49jYdt7cd5VSuOThikPM5Yyg/N/8YH0yVOsncc6Xx/rR218wFPvFTnEiN/SFGSc7LE96pZ3yHCfFdNjM6Hqj0yHJP1iHDZoGuu2BlVekfm9jX6ZIa5+D8FqhRnC/IMkxx3zMcP19qM3SFZuM9ef3WbjmkE+MvT/LVdEKgGF46ytFvzqCnLJtqeuMlj+GgPgmwyuxbmhK0n4qc7hwvrerRoJRA/P9xMbptj5/fD8wc2e4YIJ1H/zdo8PllX09lblzm0N4khNc3V+uIVDe69q8U4CoyLEQ8/rl82reT+/k0EouklN69xdxF7oNl9GA3s9JYEm59Za3U9yfqzX84LHGf2BUWhFzaM4ajfC/5aInsxMlo9OUHwLkTt8joV/oe+/cyH+fQNI7E3VRsM+7UrWSUovhcz5SGy64tQ/12JDxeYCq2jTint8HMpdyTyZQ23NhhYVyZwTXvQ9Vyzaw2AYwGn1TKvQOCAgbcXmS2LI4q9jMZE5VKSu22b7wmi1J9iyDDTvkHqQwFr95l4oA8siAVmBwprgqrCqrb+Euj4v31OGRMRFcBVmi6W74VPqLi1V/FjLo3Tam/s8YNoSVBZznIpSa2S3V1oOZfT9AHrUT1fLnMl5r6rppjJWTAUDwM0jBCjXM7fZpItMDVKFOMssdvf/Dh56T+kmIs5DQUUOJXdUivMM7ZbiLnabkMa4fW5q/MgpSyEwGtxytdL5GZWjL9d3shHKk66H+XPKmNRecFTWJU88p5yuQlCZ8pSQrf5MyRqOsoJQZmEJXJEM1YFPwVwKvmhs3zkkosQjExzgb/+p6Zmr61BhLKcimFfKxxVPSh4is079v8EfYIpJKf8BiH//hGik6IFEJZfLpwU+GqV+FwC0llFU3ZJT8mK63hd1+yZVVmxPGtQPsoBu84n92dP5Z2Oe7zzDw==</con:value></con:property><con:property><con:name>LicAppID</con:name><con:value>urn%3Adece%3Alicappid%3Aorg%3Adece%3AE49B021A38CC0F36E0401F0A059951E3</con:value></con:property><con:property><con:name>Policy_Class</con:name><con:value>urn:dece:type:policy:ManageAccountConsent</con:value></con:property><con:property><con:name>POLICY_ID</con:name><con:value>urn:dece:policyid:org:dece:E58E9685FAAA372CE0401F0A059937A4</con:value></con:property><con:property><con:name>LIC_APP_ID</con:name><con:value>urn:dece:licappid:org:dece:0E3F0C59113A0D44E05307991F0ACFBE</con:value></con:property><con:property><con:name>Domain_ID</con:name><con:value>urn:dece:domainid:dece:0E3F721FF3671D08E05307991F0AB2EC</con:value></con:property><con:property><con:name>RET_NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:0E3F10714E8E71B3E05305991F0A50E8</con:value></con:property><con:property><con:name>RET_NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:0E3F10714E9A71B3E05305991F0A50E8</con:value></con:property><con:property><con:name>RET_SAML</con:name><con:value>SAML2 Assertion=nVbbcto6FP0Vxn3sGMsGc/EEZgiQDG3u0KTNyxkhb4NSWwJJ5vb1lQw4mJIcznnyaHtr7bUvWtKFxEnsBR0pQSjKWWmVxEwGmbVlpYIFHEsqA4YTkIEiwbBzexN4ZRTg/RarNOi1rH+8Bo4AANme38B2tTKObIyqNbsaNSpjv1nzKs2adpUyhQGTCjPVsjzk+jbybFQdoXrgo6Dilj1UebVKzyCkxtYuZWTtSK1ky5oqNQscZ7lclpeVMhcTx0PIdX7e3gzJFBJstS+2GWWBRHvnT8ohEIhjUiY8cS6cgs9FKIMhnTCsUgG7WOFHsZCDmo72CSWdfLHyvRAOWMSzZRczzijBMd1gU59bUFMeljrxhAuqpsmHSbjIANuwIjZxq+yL5RSpnQlUYCgktuUUuzusJ4hAACNQ+vE0aFlfzutatnUkMJMRF4ksLv8bH2ALiPkMQlvu09pROx/wRKXaF0CCASNxKukC7sywzjABuesmkPOhSg8CIrq6oVIP6Eoads4hvaPltho9OgGp/k+DDpqzBXnGcQptmt5fdW6ayx94LZb8suE/bqpPMe77vX4rI3DonBny1m6XR0OZD9F2Rzhf8en9bVp/7HWqb3Szni1+bJ6T2+j10uuNxPBhU5+M/enw673fe3RrN/Lu5SWa3b1A9HN6t7yKh7Pr36/zSeqjqui6yRJ6v1C9KaN141ezO68vSRL5TP1eud8mj8/Ebfqj2sPYx+Jl7N53Gg845iEbbMLvjrP5/rX7/doZ1WP0c4xuZaV7Jb69DYbe9WDRuH5t7tI94l+07c/8MB2/AVH7pRmDQa90pbuE1ediZiw0tKPMNZgZ8ZEKmLLaZpfRjiDVckfDQPdwu0b9ypWL6m613+zU3ctKH/kV5Deb7hXq+Kjf2IvMlsURxS5nETWxjORux+ZzgiQJJLAQhL3gqVY6aX2C2MMKlwbsSR8CziSMuJZnwWtzr+ED99Zhbbbhb76XNhVeWKU7ru7ZvehECkRBkl1UkOQnIHRGwei2GWup51oqXYo5XqQqdssLXGaQamUXRmQDr9rwHUmTWQyGqJPwMI2hPJvOssI4cvv1bExkZn3qj7LD9mFax//2FdA+ITUO0uRyCbqLcOJu8faJfJxw5TDhPXwnDak5V7qcSlCyZVL89T4lZjzyEdEZ7SnnnseGAqpznFAeKFxQks95fltrEdfHvr1vxxyX5+V0sUizBtSNvAkN75gUHeQ5QyCpFqb1iP8G5uQozlm3QE78KHhuL1JM1ZQNFVaQ6IkpZcszrv0hSHPtD/Skr859UxRC6tIpWKlTtm6snyyG8aevGhIQ46fND/qz5CJ879gJrIM4Ok996yvKJmZlboD1B3NBuIalWru4OAQ/BXAqeNGYFznnovRAjVMFH/8pGVFqWZgQnjI16FmZ4VAoM55qPYPg3ekvmEyL88cZ/ffXmU2zESCgn3SSZvjmjg3MEWCTA7HdBT2tt43+Z3pbZNf+y/y35aBOxzPe/gM=</con:value></con:property><con:property><con:name>Device_ID</con:name><con:value>urn:dece:deviceid:org:dece:0E3F0C5911380D44E05307991F0ACFBE</con:value></con:property><con:property><con:name>DeviceGetETag</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">"0E3F1071758C71C1E05305991F0A383E:399897FB"</con:value></con:property><con:property><con:name>DeviceGetLastModified</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Wed, 04 Feb 2015 07:50:50 GMT</con:value></con:property><con:property><con:name>licappapplication</con:name><con:value>appid-hKqnPMNYWHC88</con:value></con:property><con:property><con:name>licappserial</con:name><con:value>ec825582-7a9d-46ce-8788-180b9ed724e9</con:value></con:property><con:property><con:name>licappserial_1</con:name><con:value>ec825582-7a9d-46ce-8788-180b9ed724e9</con:value></con:property><con:property><con:name>licappModel</con:name><con:value>model-3A65F92B71184</con:value></con:property><con:property><con:name>licappModel_1</con:name><con:value>model-3A65F92B71184</con:value></con:property><con:property><con:name>licappManufacturer</con:name><con:value>manfact-9728817886467</con:value></con:property><con:property><con:name>licappManufacturer_1</con:name><con:value>manfact-9728817886467</con:value></con:property><con:property><con:name>licappapplication_1</con:name><con:value>appid-hKqnPMNYWHC88</con:value></con:property><con:property><con:name>attestionIdFULL</con:name><con:value>urn:dece:attestation:manfact-9728817886467:model-3A65F92B71184</con:value></con:property><con:property><con:name>attestionIdFULL_1</con:name><con:value>urn:dece:attestation:manfact-9728817886467:model-3A65F92B71184</con:value></con:property><con:property><con:name>attestionId</con:name><con:value>urn:dece:attestation:manfact-9728817886467:model-3A65F92B71184</con:value></con:property><con:property><con:name>attestionId_1</con:name><con:value>urn:dece:attestation:manfact-9728817886467:model-3A65F92B71184</con:value></con:property><con:property><con:name>ORG_ID</con:name><con:value>urn:dece:org:org:dece:o:700031</con:value></con:property><con:property><con:name>DRM_ID</con:name><con:value>urn:dece:drm:adobe:3.0</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>ccdf09f0-c034-47f6-8cdf-76797af3f771</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>7eb68f58-93ef-4e73-98fe-f10cbdf6193b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>1ad7f9ca-219a-4dce-ba00-8f7d6fd3daca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>26e61b63-18ea-4c73-8766-0f86596b334c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f186da08-3084-424e-86a3-715f74852dcb</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b366a31b-3fe4-40cb-bf60-511d058b5006</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ea93a35e-2b85-4ffe-8ed4-13cadbc1d18a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>8615d376-f593-447b-a426-7e4a9b5733fd</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2d983360-f2ce-4570-b206-c7dff2a5b519</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="00002_DeviceGetCacheScenario_NonCS_DeviceGet_DeviceGet(If-None-Match)_304_Not_Modified" searchProperties="true" id="cfcdfba3-81a0-4cc0-846f-b8e25a5253bd"><con:settings/><con:testStep type="groovy" name="Set Coordinator Schema to Leading version" id="d7bf1f8b-ecdf-4ccf-8a32-8ca50b5e9dcb"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("versionMinor",tP.getPropertyValue("currentVersionMinor"));
tP.setPropertyValue("versionMajor",tP.getPropertyValue("currentVersionMajor"));

tP.setPropertyValue("CoordinatorSchema", tP.getPropertyValue("CoordinatorSchema_"+ tP.getPropertyValue("versionMinor")));

log.info "CoordinatorSchema set to .... :  " + tP.getPropertyValue("CoordinatorSchema")</script></con:config></con:testStep><con:testStep type="groovy" name="Call AccountCreate API"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("AccountCreateAPI")

tP.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeidRTL"));

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call FirstUserCreateAPI"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("FirstUserCreateAPI")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call STSCreateandGetAPI"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("STSCreateandGetAPI")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("Username",tC.getPropertyValue("Username"));
myTC.setPropertyValue("audience","");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

tC.setPropertyValue("RET_NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("RET_NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("RET_SAML",tC.getPropertyValue("SAML"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call TOUPolicyCreateAPI"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("TOUPolicyCreateAPI")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call MUCPolicyCreateAPI"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("MUCPolicyCreateAPI")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call STSCreateandGetAPI for Device"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("STSCreateandGetAPIforDevices")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("Username",tC.getPropertyValue("Username"));

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call AttestationDataCreateAPI" id="783e8178-32db-4ce1-bdac-ce4300615d03" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("AttestationDataCreate API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call AttestationDataGetAPI" id="9b5b6537-587b-473d-aa6a-899722e9c315" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("AttestationDataGet API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call LicAppCreateAPI"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("LicAppCreateAPI")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML"));

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call LicAppGetAPI"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("LicAppGetAPIforDevice")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("LIC_APP_ID",tC.getPropertyValue("LIC_APP_ID"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML"));

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call DeviceGetAPI"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGetAPI")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("Domain_ID",tC.getPropertyValue("Domain_ID"));
myTC.setPropertyValue("Device_ID",tC.getPropertyValue("Device_ID"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("RET_NODE_ACCOUNT_ID_FULL"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("RET_SAML"));
myTC.setPropertyValue("ExpectedReturnCodeGet","200");
myTC.setPropertyValue("ETagResponseType","UnMatch");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call DeviceGetAPI with If-None-Match"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGetAPIwithIf-None-Match")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("Domain_ID",tC.getPropertyValue("Domain_ID"));
myTC.setPropertyValue("Device_ID",tC.getPropertyValue("Device_ID"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("RET_NODE_ACCOUNT_ID_FULL"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("RET_SAML"));
myTC.setPropertyValue("ETag",tC.getPropertyValue("DeviceGetETag"));
myTC.setPropertyValue("ExpectedReturnCodeGet","304");
myTC.setPropertyValue("ETagResponseType","FAILURE");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>NODE_ID</con:name><con:value>0701</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>0E3F10711F7071ADE05305991F0A8F7E</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:0E3F10711F7071ADE05305991F0A8F7E</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>0E3F1073309471A5E05305991F0A7EB7</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:0E3F1073309471A5E05305991F0A7EB7</con:value></con:property><con:property><con:name>Username</con:name><con:value>firstfau_20150204_012315</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZtU+o6EP4rTP3IlKaFWtoRZlBAOYKKVY/65U5IUxptU0xSXvz1JynQUxC93PtFZ5fNs0+yu8/2jMMktrwO55gJktLKMokp93JvS8sY9VLICfcoTDD3BPL8zmjoWTXgwe0RrTLotrR/GqdW2AydiX4aNOt6A9RtfYJhXQfOBMEmtEPLbMhQzjM8oFxAKlqaBUxbB5YOGg/A8WzTM+2a6TZetcoTZlxiy5Aa0DaklrylRULMPMNYLBa1Rb2WsqlhAWAaz6OhjyKcQK19tr5Rnoi1N/GoFmCE4xjVUJoYZ8ZOzFnAPZ9MKRQZw5tcwXe5gAFcQ8YEnExPtOIsDgY0THPzAtKUEgRj8gnV+4ywiNKg0omnKSMiSr69hAkUsI6XSEdmg55oxi61I4F2GDIOdR5Bc4N1j0PMMEW48ng/aGknx1UtP/rAIOVhyhK+a/43PpjOcZzOcKDz7bU21I4HPPBS7TOMvAFFccbJHN+oZp1BhPmmmhgdD1W5YzgkyyHhskGXXLEzyvT2zPVrdMkUc/F/ClQqzhrkCcYZbnc6bsL6L2QZuc/31ZeL/vjFvhpPkpA8tnIC5eDcUZR2be41ZdFE6xMBI5fLp88AmtVxZ/menWO7d5lVnx03GzavPup36Prp3f+w3NPMTsnVA7m+BNWMDRM+NvxV9PZ79fLx2HX7T8kvHKav3ej8Nlndx81q+Gvxhv2F++nOLl4vgy6v2jfmfd9P0zEcWdGcX/ZuxARdmTFpVJHhyKDX38uhFUTx6XX6MnBHUyOyRqJqAWsyuluNm63iOiX+u77tzPvZ5A0jsTVVGwy6lb6sEhQ/i5nykEAP81BvpsSHC0yF1lanlHZ4mZQ7Eniyhmsb9Op9Ezj1OnAbjtmxe8CuA9t1zT7oOL1zZysyaxZ7FC9SGhKVS0nuum1+JogST84lw0z7AakLBazcpOKW3rJOKDDbUVgTlBVWtfW3QPu/bXPKmICoAK7SnMvSM3xAxcFWxfe5WIfV3tjid4I5QUU5i6UktUp2d67lXE7TB6wFtWw+z5SYe46aYiZnwVA8DGAZPkaZnL/VQ/qOqVGgGEeJ3fbm+8kL/y7FTETUF1DgRHZLJTeP2G4+5mq7DWiAl8euzp2UshACL8Uh30UsN7Ni/OPyRh5ScdJ9J/8tUhYUFzyEVcoj7ymXmyB0qiwldKu/Q6Kmo5gQlEpYIkc0ZWXwQwCHku86i0cuuAjByCQT+PtfKmr2WhpEKM2oGHS13FHWg5ynWM2w9zfoC0wuOcU3CPn3jxCd5C2AsPxy4STHV6vE4xKQTkuaskl6QFZMs+/Iv51uWVaafadXPMoOu/YX91dP6Z32e7z9Bw==</con:value></con:property><con:property><con:name>LicAppID</con:name><con:value>urn%3Adece%3Alicappid%3Aorg%3Adece%3AE49B021A38CC0F36E0401F0A059951E3</con:value></con:property><con:property><con:name>Policy_Class</con:name><con:value>urn:dece:type:policy:ManageAccountConsent</con:value></con:property><con:property><con:name>POLICY_ID</con:name><con:value>urn:dece:policyid:org:dece:E58EBA49E18EC21DE0401F0A079950D0</con:value></con:property><con:property><con:name>LIC_APP_ID</con:name><con:value>urn:dece:licappid:org:dece:0E3F106C563371A1E05305991F0A01A3</con:value></con:property><con:property><con:name>Domain_ID</con:name><con:value>urn:dece:domainid:dece:0E3F657130101CFCE05307991F0A14F2</con:value></con:property><con:property><con:name>RET_NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:0E3F1071759271C1E05305991F0A383E</con:value></con:property><con:property><con:name>RET_NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:0E3F1073307571A5E05305991F0A7EB7</con:value></con:property><con:property><con:name>RET_SAML</con:name><con:value>SAML2 Assertion=nVbZcuI4FP0VynnsMl6JwRWoIiw1TCdAA1malylFvgYltmws2Tj5+pYMOJgsw8yTS9dX55676EhXDIWB6XYZg4STiNbyMKDMLaxtJU2oGyFGmEtRCMzl2J13b29cs6676LBFqY36beWfFjIsu9UyVRs7jmpbl46KwPFUjC+fbN+wG4aOhCtjKYwo44jytmLqRkPVTVW3F7rjNgxXb9Qbl62lUruHhAls4VLXlT2pnLWVNeexq2nb7ba+tepRstJMXTe0x9ubOV5DiJTO1S6jIlDS2fvjugcYggDXcRRqV1rF58pj7pysKOJpAvtY3lexdE1vacLHY2R1oZR7wRtRPyqWPUQjSjAKyBuS9bkFvo68WjdYRQnh6/DLJAxdAquQYxUbNr1QtCq1M4EqDBOGVLZGxh5rBj4kQDHU7majtnJxXteKrYsEUeZHSciqy//GB2gGQRSDp7JDWntq5wN+UqnOFWB3RHGQMpLBWA5rjDCwfTcBnw9Vmybgk/yGMDGgOZPstGN6J8tdNfpkBYz/nwYdNWcHco+CFDrLePI2hLfrQRctp7MVd57moT/Lcj68bRcEjp0LQ9na3fJkKMsh2u14nEcb9rCm/lKHaXfWXGySca+5CUc/B5thn0zil8e/4uQmmF2+vbRyvEh/ha+/MSx9Ppj1st7WsJYvUctOL1fLt1fanI4nMIlwbNJx5rykzzfzCXqIl/Rh6t+Pu0N8p/+wZ+hhZAeXzm8SvPRHS60Ld/m6m/09mGytmb3l+G2Kl63Bw6+fzuP45zb+8ZwNX6e9u3aZzhH/qu1w5ufp0zNgfljKMRj1a0PRJcS/FzNpIZ7qF65uLMWHcaBc6chdUjvcVMgd8VzRw91aH1hDQ3csS3cajtFtDPSGpTdaLWOod53BtXMQmR2LE4q9iPpExpKSuxub7wni0GVAPUjULEqF0jHlG8Q+4qg2ojNxCCLKYBEJebbWpBnm5qoZ4dywIfU9ihvrJDeV2jjiEzpJuj6HpKLJhl7R5BlgEhOQwi3nmonBZlzUYoOylAdGPUN1CqmQ9kSqrGvazYbGSBgHIJlqYeSlAdTjdVxURmO7r6kizArrbLAoTtuXeZ3+O5RA+HhEOjCZyzWINsKHy0Xkckjk64St44QP8N3UI/JgiXryhOAdk+qv9zGR81HOiMjoQLn0PDVUULXThMpAXkZwOejldS1UXJz7zqEdG1Tf1NMsS4sGOFLfEgGvyRQ13dTmgFOhTK+L6AWoVqJoZ10DJfGT4KW9SjHlazrniEMoJqZWLM+49+fA5L0/EqOen/uoqIQUpeOQ889svUC8WSTjb5812MXST5in4rONEu+9Y59gHcUReYprnxO6kit5Bbx+MRc4ErBEiFeUHIN/BvBZ8KqxLHLJhYuBeko5fP2nJlWprSCMo5TyUV8pDMdKWfDkrzG4704fYAoxLl9n5N+fZyopRgCDeNMxUuDLS9aVR4CujtR2H/QTwTWcRst0jJ5xLLhW0xqURamw63wwf7Qc1el0xjt/AA==</con:value></con:property><con:property><con:name>Device_ID</con:name><con:value>urn:dece:deviceid:org:dece:0E3F106C563171A1E05305991F0A01A3</con:value></con:property><con:property><con:name>DeviceGetETag</con:name><con:value>"0E3F1073309571A5E05305991F0A7EB7:4D318C1E"</con:value></con:property><con:property><con:name>DeviceGetLastModified</con:name><con:value>Wed, 04 Feb 2015 07:51:22 GMT</con:value></con:property><con:property><con:name>ORG_ID</con:name><con:value>urn:dece:org:org:dece:o:700031</con:value></con:property><con:property><con:name>DRM_ID</con:name><con:value>urn:dece:drm:adobe:3.0</con:value></con:property><con:property><con:name>licappserial</con:name><con:value>3a7c7b6a-ffb6-4533-9568-48aa35057f5f</con:value></con:property><con:property><con:name>licappserial_1</con:name><con:value>3a7c7b6a-ffb6-4533-9568-48aa35057f5f</con:value></con:property><con:property><con:name>licappModel</con:name><con:value>model-3A65F92B71149</con:value></con:property><con:property><con:name>licappModel_1</con:name><con:value>model-3A65F92B71149</con:value></con:property><con:property><con:name>licappManufacturer</con:name><con:value>manfact-9728817886443</con:value></con:property><con:property><con:name>licappManufacturer_1</con:name><con:value>manfact-9728817886443</con:value></con:property><con:property><con:name>licappapplication</con:name><con:value>appid-hKqnPMNYWHC107</con:value></con:property><con:property><con:name>licappapplication_1</con:name><con:value>appid-hKqnPMNYWHC107</con:value></con:property><con:property><con:name>attestionIdFULL</con:name><con:value>urn:dece:attestation:manfact-9728817886443:model-3A65F92B71149</con:value></con:property><con:property><con:name>attestionIdFULL_1</con:name><con:value>urn:dece:attestation:manfact-9728817886443:model-3A65F92B71149</con:value></con:property><con:property><con:name>attestionId</con:name><con:value>urn:dece:attestation:manfact-9728817886443:model-3A65F92B71149</con:value></con:property><con:property><con:name>attestionId_1</con:name><con:value>urn:dece:attestation:manfact-9728817886443:model-3A65F92B71149</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>ccdf09f0-c034-47f6-8cdf-76797af3f771</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>7eb68f58-93ef-4e73-98fe-f10cbdf6193b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>1ad7f9ca-219a-4dce-ba00-8f7d6fd3daca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>26e61b63-18ea-4c73-8766-0f86596b334c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>783e8178-32db-4ce1-bdac-ce4300615d03</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>9b5b6537-587b-473d-aa6a-899722e9c315</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d7bf1f8b-ecdf-4ccf-8a32-8ca50b5e9dcb</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="00003_DeviceGetCacheScenario_NonCS_DeviceGet_DeviceGet(If-Modified-Since)_304_Not_Modified" searchProperties="true" id="dcafd7d7-9531-472c-8336-8aca3cf42581"><con:settings/><con:testStep type="groovy" name="Set Coordinator Schema to Leading version" id="9a0de3ef-b052-4d08-9c44-4e9f18f90a74"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("versionMinor",tP.getPropertyValue("currentVersionMinor"));
tP.setPropertyValue("versionMajor",tP.getPropertyValue("currentVersionMajor"));

tP.setPropertyValue("CoordinatorSchema", tP.getPropertyValue("CoordinatorSchema_"+ tP.getPropertyValue("versionMinor")));

log.info "CoordinatorSchema set to .... :  " + tP.getPropertyValue("CoordinatorSchema")</script></con:config></con:testStep><con:testStep type="groovy" name="Call AccountCreate API"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("AccountCreateAPI")

tP.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeidRTL"));

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call FirstUserCreateAPI"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("FirstUserCreateAPI")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call STSCreateandGetAPI"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("STSCreateandGetAPI")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("Username",tC.getPropertyValue("Username"));
myTC.setPropertyValue("audience","");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

tC.setPropertyValue("RET_NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("RET_NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("RET_SAML",tC.getPropertyValue("SAML"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call TOUPolicyCreateAPI"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("TOUPolicyCreateAPI")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call MUCPolicyCreateAPI"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("MUCPolicyCreateAPI")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call STSCreateandGetAPI for Device"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("STSCreateandGetAPIforDevices")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("Username",tC.getPropertyValue("Username"));

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call AttestationDataCreateAPI" id="62785fae-222b-4ef4-aeae-09afcc04b100" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("AttestationDataCreate API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call AttestationDataGetAPI" id="ec3233f6-6f04-4c38-92bf-99bc8027cf86" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("AttestationDataGet API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call LicAppCreateAPI"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("LicAppCreateAPI")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML"));

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call LicAppGetAPI"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("LicAppGetAPIforDevice")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("LIC_APP_ID",tC.getPropertyValue("LIC_APP_ID"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML"));

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call DeviceGetAPI"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGetAPI")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("Domain_ID",tC.getPropertyValue("Domain_ID"));
myTC.setPropertyValue("Device_ID",tC.getPropertyValue("Device_ID"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("RET_NODE_ACCOUNT_ID_FULL"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("RET_SAML"));
myTC.setPropertyValue("ExpectedReturnCodeGet","200");
myTC.setPropertyValue("ETagResponseType","UnMatch");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call DeviceGetAPI with If-Modified-Since"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGetAPIwithIf-Modified-Since")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("Domain_ID",tC.getPropertyValue("Domain_ID"));
myTC.setPropertyValue("Device_ID",tC.getPropertyValue("Device_ID"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("RET_NODE_ACCOUNT_ID_FULL"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("RET_SAML"));
myTC.setPropertyValue("Last-Modified",tC.getPropertyValue("DeviceGetLastModified"));
myTC.setPropertyValue("ETag",tC.getPropertyValue("DeviceGetETag"));
myTC.setPropertyValue("ExpectedReturnCodeGet","304");
myTC.setPropertyValue("ETagResponseType","FAILURE");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>NODE_ID</con:name><con:value>0701</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>0E3F10711F8271ADE05305991F0A8F7E</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:0E3F10711F8271ADE05305991F0A8F7E</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>0E3F106C564371A1E05305991F0A01A3</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:0E3F106C564371A1E05305991F0A01A3</con:value></con:property><con:property><con:name>Username</con:name><con:value>firstfau_20150204_012345</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVbbcuI4EP0VynmkjGWbqytQRQIEEi5JzGZm8rIl5AaU2DJIMpD5+pUMeICQLLtPVDet00fq7tO+FjgKHa8pBHBJY5bbRCETXuqtGwlnXowFFR7DEQhPEs9vDvqeU0Ae3h8xcr1W3fgbTUm5WHbKZhDY2CwCmpjVMp6aUwfVgqqNUQBYhQqRQI8JiZmsGw6ySyZyTFQco4pXsr2iW6jU3Fcj9wJcKGwVUkDGjtRG1I25lAvPstbrdWHtFmI+sxyEbOvnoO+TOUTYaFxvb5Qm4o1dPCkEQCAMSYHEkXVtHcVcB8Lz6YxhmXDY5Qq+yoUsVLNUTCDo7MrIzkLQY9M4NW8xixklOKS/sX6fAch5HOSa4SzmVM6jLy9hIw1swoaYxC6yK8M6pnYh0BFDLrAp5tjeYT3DFDgwArm/nnt14+qyqqVHxxwzMY15JI7N/8YH2ArCeAGBKfbX2lG7HPDMSzWugXg9RsJE0BUMdbMuMAGxqyaQy6FyjxymdNOnQjXoRmh21iG9E3P7Gi06AyH/T4EOirMFecFhAo18Dbcjl7ce3P696K83d4vmqHgj+k5zXU8JHAanjqy0W/OkKbMm2p54jfzlOCmV71scPU+qpeFTU6Ifzs2LHd/dVX0q291f3WFo3Ux78Xvp5tb52Vp2Z08+9MfkLXrrLObzsNtZsl+1h6hcqZSXk7vo9+L+fXQ/yM8euqXHRTuP2/03GUSLNZk44f3gPQr9/Gg27uZZtRq67sCd2evwx+vYL1VfV3aZ953lKhC2+/6Wf43C4dIpPwwlPNWz6xzwP/btZ95PJm9A5N7UbdBr5TqqSlh+L2baQwNzmoZ6Cy0+QgKTRkOf0trhJUruaOCpGm5t1HY7NirflspFt2I37TYquahUq9kd1ER2092LzJbFCcXbmE2pzqUld9s23xMkkTcBzIEb3yC1sMS5YSxHbMSbUwn8SGFtdKiwuq2/BDr9b59TxQRUBwid5gbUe8EZFXf3Kn7KxTmv9tYevxmsKMnKmS0lpVWqu1MtF2qalrgQFJLVKtFi7lX0FHM1C5bmYSHH8oEkav4+xvE7MCtDsS4Su/3NT5Nn/mOKiZwzX2IJkeqWXGpesN18EHq79VgAm0tX51FKVQgJG3nOdxuqzawZf7u8iUd0nHI/qp91zIPsguewDvKoe6rlJimbaUsL3cefIdHTkU0IiRUsVSMa80PwcwDnkh87s0fOuEjJ6SSR8PU/OT17dQMTEidM9lpG6jjUg5Sn/FiA9yfoE0wqOdk3CP33jxCTpi1AQH25CJri61XiCQXIZgeaskv6WVYqtt2pOkpWWoeyUu1U2tmjHLFrfHJ/9hy802mPN/4B</con:value></con:property><con:property><con:name>LicAppID</con:name><con:value>urn%3Adece%3Alicappid%3Aorg%3Adece%3AE49B021A38CC0F36E0401F0A059951E3</con:value></con:property><con:property><con:name>Policy_Class</con:name><con:value>urn:dece:type:policy:ManageAccountConsent</con:value></con:property><con:property><con:name>POLICY_ID</con:name><con:value>urn:dece:policyid:org:dece:E58EC322283AFE94E0401F0A07996572</con:value></con:property><con:property><con:name>LIC_APP_ID</con:name><con:value>urn:dece:licappid:org:dece:0E3F1073914C71C7E05305991F0A1E71</con:value></con:property><con:property><con:name>Domain_ID</con:name><con:value>urn:dece:domainid:dece:0E3F721FF3691D08E05307991F0AB2EC</con:value></con:property><con:property><con:name>RET_NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:0E3F107330A171A5E05305991F0A7EB7</con:value></con:property><con:property><con:name>RET_NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:0E3F10714EDC71B3E05305991F0A50E8</con:value></con:property><con:property><con:name>RET_SAML</con:name><con:value>SAML2 Assertion=nVbbcuI4EP0VyvOYMpZtzMUVqCJAEichmYGEmeRlS5HbINaWjSVzma9fyYCDGZJl98mlduv06YuOdMlxFFpul3NIBY1ZZR2FjLu5ta1lKXNjzCl3GY6Au4K44+7wwbWqyMX7LVrF67e1v1DDbplBs66bdRv0mmMRvdkwmzpg4qBmzW46rUC6cp6Bx7jATLQ1C5mOjiwd1Z5Rw3VM13aqVrPxplUmkHKJLV2qSNuRWvO2NhMicQ1jtVpVV3Y1TqeGhZBp/Bo+jMkMIqx1LrcZ5YHSzs6fVH0gEIakSuLIuDRKPpc+d8d0yrDIUtjF8j+LhQzUMqSPz+n0m1bsBd9jQZwve5jFjBIc0t9Y1WcIYhb7lW44jVMqZtGnSZhIAeuwJjoxa+ybZpSpnQlUYphyrPMZNndYIwggBUag8jLy2tq387qWb31OMeNBnEa8vPxvfIAtIYwT8HW+T2tH7XzAE5XqXAJxPUbCjNMlPKphTTABvusmkPOhKt9TCOj6gXI5oGuu2BmH9I6W22r06RS4+D8NOmjOFmSCwww6k4f+xeZm+m4Eve7cnmWpnwwMPFl7zms7J3DonBuK1m6XR0NZDNF2RzakP/hF0ht51w+vr3Mru6i/ReFr8IKm/esfnNRHk9/OK30fz2/m0+G6e1//uYj7vxz8Zmzsicez8dPtaJXO09F6Ub+1JhebJXjByqRvdZTeweaKz6KN7dzf3Flvvetsfhs6Uffu8Vdzfu/XrsZWY/wC9u3oPXB+4iF9MVmW8oeNP3xy2E/nMVwET7IxN7UbekfaRToH/Mu2/ZkfZ+9zIGK/VGPg9SvXsktYfC1mykJ9Pchd3USJDxfAhNZRu5R2uJmUO+q7sofbNRrY1yZqmLVBv9cwr+wBcmzktFrmNeo6aNDci8yWxRHFXswCqmIpyd2OzdcESeRyYD6k+jLOpNJx7QvEPha44rGRPAQx4/AcS3luLcV7OG+tW05CWrjZsDZJUI9RXas8xuKJPaXdQEBakmQTlSR5BIQmFJRuq7Hmcq65kKVY4GUmQrO6xFUGmVT2VImsa9WajsFplISgiBpR7GchVJNZkhfG4NuvpWPCc+to8Jwftk/TOv63r4D08aly4CqXK5BdhBN3i7VP5POE7cOE9/DdzKfqXMlyipSSLZPyr48pUeNRjIjMaE+58Dw2lFCN44SKQP6SkmLOi9tairg89p19Oxa4uqhmy2WWN6Ch5C2V8IZK0UCWMQaSSWHaPMd/AzMKFOOsW6AgfhS8sJcpZmLGxgILiOTEVPLlGdf+GLi69j056etz3xSlkLJ0AtbilK0XyieLYvzlq4a4RPlJ83f5WcWp/9GxE1gHcWSe8tYXlE3VSt0Am0/mgsQSlkrtitND8FMAp4KXjUWRCy5CDtR7JuDzPxUlSm0NExJnTHh9LTccCmXOU2wScD+c/oDJtbh4nNF/f53pNB8BAvJJx2mOr+5YVx0BNj0Q213QE3pr26hrNsyuc6i3jcFVoyhKiV3nD/OfloM6Hc945x8=</con:value></con:property><con:property><con:name>Device_ID</con:name><con:value>urn:dece:deviceid:org:dece:0E3F1073914A71C7E05305991F0A1E71</con:value></con:property><con:property><con:name>DeviceGetETag</con:name><con:value>"0E3F107330B871A5E05305991F0A7EB7:14152A6"</con:value></con:property><con:property><con:name>DeviceGetLastModified</con:name><con:value>Wed, 04 Feb 2015 07:51:50 GMT</con:value></con:property><con:property><con:name>ORG_ID</con:name><con:value>urn:dece:org:org:dece:o:700031</con:value></con:property><con:property><con:name>DRM_ID</con:name><con:value>urn:dece:drm:adobe:3.0</con:value></con:property><con:property><con:name>licappserial</con:name><con:value>3edbdc36-f8ee-4c24-a643-90ea08ccb3e0</con:value></con:property><con:property><con:name>licappserial_1</con:name><con:value>3edbdc36-f8ee-4c24-a643-90ea08ccb3e0</con:value></con:property><con:property><con:name>licappModel</con:name><con:value>model-3A65F92B71131</con:value></con:property><con:property><con:name>licappModel_1</con:name><con:value>model-3A65F92B71131</con:value></con:property><con:property><con:name>licappManufacturer</con:name><con:value>manfact-9728817886462</con:value></con:property><con:property><con:name>licappManufacturer_1</con:name><con:value>manfact-9728817886462</con:value></con:property><con:property><con:name>licappapplication</con:name><con:value>appid-hKqnPMNYWHC92</con:value></con:property><con:property><con:name>licappapplication_1</con:name><con:value>appid-hKqnPMNYWHC92</con:value></con:property><con:property><con:name>attestionIdFULL</con:name><con:value>urn:dece:attestation:manfact-9728817886462:model-3A65F92B71131</con:value></con:property><con:property><con:name>attestionIdFULL_1</con:name><con:value>urn:dece:attestation:manfact-9728817886462:model-3A65F92B71131</con:value></con:property><con:property><con:name>attestionId</con:name><con:value>urn:dece:attestation:manfact-9728817886462:model-3A65F92B71131</con:value></con:property><con:property><con:name>attestionId_1</con:name><con:value>urn:dece:attestation:manfact-9728817886462:model-3A65F92B71131</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>ccdf09f0-c034-47f6-8cdf-76797af3f771</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>7eb68f58-93ef-4e73-98fe-f10cbdf6193b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>1ad7f9ca-219a-4dce-ba00-8f7d6fd3daca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>26e61b63-18ea-4c73-8766-0f86596b334c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>62785fae-222b-4ef4-aeae-09afcc04b100</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ec3233f6-6f04-4c38-92bf-99bc8027cf86</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>9a0de3ef-b052-4d08-9c44-4e9f18f90a74</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="00007_DeviceGetCacheScenario_NonCS_DeviceGet_DeviceJoin_DeviceGet_200_OK" searchProperties="true" id="735f6cd2-5691-42fd-b31f-0e52ad009e72" disabled="true"><con:settings/><con:testStep type="groovy" name="Set Coordinator Schema to Leading version" id="c265627a-81e1-4b99-86b0-008eddeed4eb"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("versionMinor",tP.getPropertyValue("currentVersionMinor"));
tP.setPropertyValue("versionMajor",tP.getPropertyValue("currentVersionMajor"));

tP.setPropertyValue("CoordinatorSchema", tP.getPropertyValue("CoordinatorSchema_"+ tP.getPropertyValue("versionMinor")));

log.info "CoordinatorSchema set to .... :  " + tP.getPropertyValue("CoordinatorSchema")</script></con:config></con:testStep><con:testStep type="groovy" name="Call AccountCreate API"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("AccountCreateAPI")

tP.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeidRTL"));

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call FirstUserCreateAPI"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("FirstUserCreateAPI")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call STSCreateandGetAPI"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("STSCreateandGetAPI")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("Username",tC.getPropertyValue("Username"));
myTC.setPropertyValue("audience","");


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

tC.setPropertyValue("RET_NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("RET_NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("RET_SAML",tC.getPropertyValue("SAML"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call TOUPolicyCreateAPI"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("TOUPolicyCreateAPI")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call MUCPolicyCreateAPI"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("MUCPolicyCreateAPI")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call STSCreateandGetAPI for Device"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("STSCreateandGetAPIforDevices")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("Username",tC.getPropertyValue("Username"));

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call AttestationDataCreateAPI" id="a3e45ce9-0d50-460d-ae98-9b38c27756e6"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("AttestationDataCreate API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call AttestationDataGetAPI" id="fb426c31-6a2a-4dd0-8275-617016cfe620"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("AttestationDataGet API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call LicAppCreateAPI"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("LicAppCreateAPI")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call LicAppGetAPI"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("LicAppGetAPIforDevice")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("LIC_APP_ID",tC.getPropertyValue("LIC_APP_ID"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML"));

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call DeviceGetAPI"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGetAPI")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("Domain_ID",tC.getPropertyValue("Domain_ID"));
myTC.setPropertyValue("Device_ID",tC.getPropertyValue("Device_ID"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("RET_NODE_ACCOUNT_ID_FULL"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("RET_SAML"));
myTC.setPropertyValue("ExpectedReturnCodeGet","200");
myTC.setPropertyValue("ETagResponseType","UnMatch");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call LicAppjoinTriggerGetAPI" id="9135a8e7-c0a2-4d17-9a3e-b29674eddb72"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();



def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("LicAppjoinTriggerGetAPI")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());


if(tP.getPropertyValue("versionMinor") == tP.getPropertyValue("versionURLEncode")){
	myTC.setPropertyValue("DRM_ID",URLEncoder.encode(tC.getPropertyValue("DRM_ID"), "UTF-8"));
}else{
	myTC.setPropertyValue("DRM_ID",tC.getPropertyValue("DRM_ID"));
}


myTC.setPropertyValue("LIC_APP_ID",tC.getPropertyValue("LIC_APP_ID"));
myTC.setPropertyValue("Device_ID",tC.getPropertyValue("Device_ID"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML"));
myTC.setPropertyValue("ExpectedReturnCodeGet","200");
myTC.setPropertyValue("ETagResponseType","UnMatch");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call again DeviceGetAPI" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGetAPIwithIf-None-Match")

//DeviceGetAPIwithIf-None-Match

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("Domain_ID",tC.getPropertyValue("Domain_ID"));
myTC.setPropertyValue("Device_ID",tC.getPropertyValue("Device_ID"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("RET_NODE_ACCOUNT_ID_FULL"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("RET_SAML"));
myTC.setPropertyValue("ExpectedReturnCodeGet","200");
myTC.setPropertyValue("ETagResponseType","UnMatch");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>NODE_ID</con:name><con:value>0701</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E7CF4E5E969BCD28E0401F0A0599574F</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:E7CF4E5E969BCD28E0401F0A0599574F</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E7CF4E5E969DCD28E0401F0A0599574F</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E7CF4E5E969DCD28E0401F0A0599574F</con:value></con:property><con:property><con:name>Username</con:name><con:value>firstfau_20131003_115611</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZdc6pIEH3Pr6DIYwoZ8RNKrVKJuySauDEmli9b49DgJDAYZvDj/vo7oBg1JuvdJ6ubntNnprtP2+A4DAyrzTnEgkZMceym+q/nlcA1qxWtXsdVrVx2kVavIUOrG24dGzNUqxqmqjicJ+AwLjATTdVAxZJWRBoqPaOqZZSsYrlQr5emqvICMZfQMqSAVGUdBoxbWdqmmsTMijCn3GI4BG4JYo3ag74lIy2cc1JbjS3LLGHcmguxsHSdFFwgEASkQKJQb+hHMQ2XWyPqMyySGHY5Xd5Ud2dXq1VhVSpEsa8bCCEdmbqMcTn1r9XWVX4YXId50dbuYhYxSnBAf+GU1ADEPHKVduBHMRXz8Bvool5EKbQGa6KRYpldq/pngozdhUhHJGOONT7HxRzsCTyIgRFQxk9OU72+rILbs88xZtyL4pCf2H9GCdgSgmgBrsbzm+XsLkc881ytBhDLYSRIOF3CQ9omC0yAK8MYPLruUy6bz+VKVn5lzfMOA/InJWnohzwlbf3My9jUBy7+T70Oa7VFecFBAq1wUK0+LzbJwogezPsqW7/f2x/opXTTHTQzCofBW1L7Uu/s00bd99XuUNCZPUZGrzc2uu3isv86Nc3p6J+S0Z9Uze4mqdzYj6Eb6uhhWEeeXh5hezx3omJ450+CzmQqgd7XMF58vFZWy6t7o2247fuXxSoQb/2np47/4Zh+Yhh1Mh2I+8mL99Qv/bqB+ep9U5q9Pdt3Y/tm6E2qfNlx794WZUr8v+5878F4rV+xsD0dDhnw8Xv5485B0d9+8/NOh3c4duZyMEpmb0BEbqat4dhKT9YLi5+lJfVQV/OyUGuR6hMXwITaSk+lsmIlUnyoa8libu3bWrdXvq3cmlXT7tpG/RaVUbGH2qhimpVauZfrz5bFCcVuxDya5koVdts/PxMkoTUDHEOs/oBkY4GVh0g8sse47QmIj0XYPBThtMO/BTr9lueUMS5NA3iapgPyveCM0KNc6E+5GOcXgp7jt90lJfty7neQlDDZ5JnMczlWH7jgFpLlMkl13qqlAxzLmdCLOqrpIyCJnMLNc/QOTN9D6BcJYH7t08x7/zG/RMzZSGABoWwVJTMv2H4j4On2c5gL60tX61FKWQUBa3HO1w3kkkwZ/7hHiUXSOOkeyp9VFLv7C57DOsgj7ylXnqDMT61U7jafE5KOxn48SCRhqZzPKD4EPwdwLvmxc//Iey5CxHSWCPj+i5IOXlPFhEQJE46tZo5DMch4is0CrM+gLzCZ4Ow2yJp/u0Emg/6IzCHE6j6W/newRrN2ISBPcZpxaapr+WdIJmf+gfjsCH6jP52f9Of4Jq0v7q+egzc9nYfWbw==</con:value></con:property><con:property><con:name>LicAppID</con:name><con:value>urn%3Adece%3Alicappid%3Aorg%3Adece%3AE49B021A38CC0F36E0401F0A059951E3</con:value></con:property><con:property><con:name>Policy_Class</con:name><con:value>urn:dece:type:policy:ManageAccountConsent</con:value></con:property><con:property><con:name>POLICY_ID</con:name><con:value>urn:dece:policyid:org:dece:E58D4B895AC8F7DBE0401F0A079971A5</con:value></con:property><con:property><con:name>LIC_APP_ID</con:name><con:value>urn:dece:licappid:org:dece:E7CEF1F1DC8902CDE0401F0A0799116E</con:value></con:property><con:property><con:name>Domain_ID</con:name><con:value>urn:dece:domainid:dece:E7D13ADF29DB96EFE0401F0A059949BE</con:value></con:property><con:property><con:name>RET_NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:E7CEF1F1DC1F02CDE0401F0A0799116E</con:value></con:property><con:property><con:name>RET_NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E7CEF1F1DC3302CDE0401F0A0799116E</con:value></con:property><con:property><con:name>RET_SAML</con:name><con:value>SAML2 Assertion=nVZdc9o6EH3vr/A4jx1jmY84eIAZLoSENAQKhLZ5uSPkNVYxkmPJYPLrKxvsACG56X3yaL3aPbt7dKSGwKug7LSFgEhSzrR+t6n/a9e8uWuRuWGBi4yq7brG1aVFDA+5GINdr8Klp2t9IWLoMyExk029jKyKYSEDVabo0ilXHGSXale1J12bQSRUaOVSQrqWrAImnCxtU48j5nAsqHAYXoFwJHEm7cG9ozwdnGPSW40dyixh1PKlDB3TJCUXCAQBKRG+MhvmkU/DFc6ELhiWcQT7nK5o6vu9m82mtKmUeLQwywghE9VN5eMKurjQW1/yzeD2mcd36w5mnFGCA/qCU1ADkD53tXaw4BGV/uqd0JZpoTS0AQkxiFVlF7r5miBD98lIRyAjgQ3hYysPNgYPImAEtMdxv6lffG6Cu73TCDPh8WglTtZ/BwnYGgIegmuIvLIc3ecjnmlXqwHE6TMSxIKu4SGlSYgJCG0UgUeTeyoU+VyhZePXEpEzDMjfjKRhHuJUsM0znenSBQj5f+Z1OKtdlBkOYmjZ9EpaKLmJX+TQH6+s0UNvMijHs4cX0swgHDrvQBWj3q9PiVrwar9JzJbyV//WTy7jECGbj+GedbB/M1x0f9xUyfxbe2sO72ZXc14dP9vBaPv4vReWzVGvOvev2tXl92jwddkZLVBlfPOlJuT6rvLj62/vcva4rqLB7ePm9mFpkojNp9Nvnr1Z39anaEvZMvYTuh2EWzQky/L8Tg6jrZw+1cjz0KpfX8/95Zd1Yi9Cd/ir6/n1+yQM7tub5mtNhzUcG3M5mMTz30Bkvkyp0e9qPTUvLD+WltRCXcPLXJ0w1SchgUm9le5KZcWJlfhQ11HD3K2v7c51z+pZ3U6lgsqd7jWqIquH2siu1y3r8jrXnx2KE4gdzjya5koVdsefjwGSlSOAuRAZax4TH4T+QcQulljrs7E6GJwJmHKl4F2OEtl+9p+Wk4rxsza6YfxpHNYquvbA5ZANo7YnITpW7fqRao+B0JBCKu17fgupOvGM17EMrNIalxjESvujVH6dcvWqZgq6CgNIcZoBX1BmjoaTaSn0w+yAvYv/9F9eqvJxaeogUtD/gBoXvLlnyk4tR/xuZVb5sLI8fDt2aXqOVN9kRMkOyfGvVzqkPCi4gGxk5ZgL11PDUVjztKIik7umpGB0cQ0rFVfnPLvphOr8My49l+L1Os56bacaFqnwpmUi25wAiZUQbad8CcwsQpifugMK1CeZC/sxvlj6bCKxhJUihpYtP/EAmIBIHwB9Rejks6+Lo5SqbxISec7WCdQ7IUX84VOCOCT1U+aR+mx45L6O60ysgzyqTnXrS8oW6SpV/O07rCBchaVKonh0GPxcgHPJj41FkwssUrFpHkt4/4+Wak9Tx4TwmMl+V88Mh3qY4ZTbEJxXpzdhMs3dX6KJePcS/Tm4nyhlWmG98KX/7WzQjC4E1C5BMyxNPVHvQZWcLQ70dw/wvAQr4f1Ago8rab0xv7Uc9PT0PLT+AA==</con:value></con:property><con:property><con:name>Device_ID</con:name><con:value>urn:dece:deviceid:org:dece:E7CEF1F1DC8702CDE0401F0A0799116E</con:value></con:property><con:property><con:name>DeviceGetETag</con:name><con:value>"E7CEF1F1DC9102CDE0401F0A0799116E:48E51F26"</con:value></con:property><con:property><con:name>DeviceGetLastModified</con:name><con:value>Thu, 03 Oct 2013 06:23:54 GMT</con:value></con:property><con:property><con:name>DRM_ID</con:name><con:value>urn:dece:drm:marlin:1.2</con:value></con:property><con:property><con:name>licappserial</con:name><con:value>eeca8c5d-2bcb-48bd-b7ec-7508e4e510a0</con:value></con:property><con:property><con:name>licappserial_1</con:name><con:value>eeca8c5d-2bcb-48bd-b7ec-7508e4e510a0</con:value></con:property><con:property><con:name>licappModel</con:name><con:value>model-3A65F92B71171</con:value></con:property><con:property><con:name>licappModel_1</con:name><con:value>model-3A65F92B71171</con:value></con:property><con:property><con:name>licappManufacturer</con:name><con:value>manfact-97288178864119</con:value></con:property><con:property><con:name>licappManufacturer_1</con:name><con:value>manfact-97288178864119</con:value></con:property><con:property><con:name>licappapplication</con:name><con:value>appid-hKqnPMNYWHC52</con:value></con:property><con:property><con:name>licappapplication_1</con:name><con:value>appid-hKqnPMNYWHC52</con:value></con:property><con:property><con:name>attestionIdFULL</con:name><con:value>urn:dece:attestation:manfact-97288178864119:model-3A65F92B71171</con:value></con:property><con:property><con:name>attestionIdFULL_1</con:name><con:value>urn:dece:attestation:manfact-97288178864119:model-3A65F92B71171</con:value></con:property><con:property><con:name>attestionId</con:name><con:value>urn:dece:attestation:manfact-97288178864119:model-3A65F92B71171</con:value></con:property><con:property><con:name>attestionId_1</con:name><con:value>urn:dece:attestation:manfact-97288178864119:model-3A65F92B71171</con:value></con:property><con:property><con:name>ORG_ID</con:name><con:value>urn:dece:org:org:dece:o:700031</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>ccdf09f0-c034-47f6-8cdf-76797af3f771</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>7eb68f58-93ef-4e73-98fe-f10cbdf6193b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>1ad7f9ca-219a-4dce-ba00-8f7d6fd3daca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>26e61b63-18ea-4c73-8766-0f86596b334c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f186da08-3084-424e-86a3-715f74852dcb</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b366a31b-3fe4-40cb-bf60-511d058b5006</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>9135a8e7-c0a2-4d17-9a3e-b29674eddb72</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>a3e45ce9-0d50-460d-ae98-9b38c27756e6</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>fb426c31-6a2a-4dd0-8275-617016cfe620</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c265627a-81e1-4b99-86b0-008eddeed4eb</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="00008_DeviceGetCacheScenario_NonCS_DeviceGet_DeviceJoin_DeviceGet(If-None-Match)_200_OK" searchProperties="true" id="ea0158de-e544-4426-90de-2adca9386279" disabled="true"><con:settings/><con:testStep type="groovy" name="Set Coordinator Schema to Leading version" id="91adc75b-6bcb-4bb2-83eb-c200e612dd08"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("versionMinor",tP.getPropertyValue("currentVersionMinor"));
tP.setPropertyValue("versionMajor",tP.getPropertyValue("currentVersionMajor"));

tP.setPropertyValue("CoordinatorSchema", tP.getPropertyValue("CoordinatorSchema_"+ tP.getPropertyValue("versionMinor")));

log.info "CoordinatorSchema set to .... :  " + tP.getPropertyValue("CoordinatorSchema")</script></con:config></con:testStep><con:testStep type="groovy" name="Call AccountCreate API"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("AccountCreateAPI")

tP.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeidRTL"));

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call FirstUserCreateAPI"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("FirstUserCreateAPI")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call STSCreateandGetAPI"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("STSCreateandGetAPI")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("Username",tC.getPropertyValue("Username"));
myTC.setPropertyValue("audience","");


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

tC.setPropertyValue("RET_NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("RET_NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("RET_SAML",tC.getPropertyValue("SAML"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call TOUPolicyCreateAPI"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("TOUPolicyCreateAPI")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call MUCPolicyCreateAPI"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("MUCPolicyCreateAPI")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call STSCreateandGetAPI for Device"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("STSCreateandGetAPIforDevices")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("Username",tC.getPropertyValue("Username"));

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call AttestationDataCreateAPI" id="91fddc95-6d1c-4282-8d72-2a3c6c29a712"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("AttestationDataCreate API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call AttestationDataGetAPI" id="4ba02d8a-154a-4751-8977-07e6da5cb352"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("AttestationDataGet API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call LicAppCreateAPI"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("LicAppCreateAPI")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call LicAppGetAPI"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("LicAppGetAPIforDevice")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("LIC_APP_ID",tC.getPropertyValue("LIC_APP_ID"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML"));

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call DeviceGetAPI"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGetAPI")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("Domain_ID",tC.getPropertyValue("Domain_ID"));
myTC.setPropertyValue("Device_ID",tC.getPropertyValue("Device_ID"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("RET_NODE_ACCOUNT_ID_FULL"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("RET_SAML"));
myTC.setPropertyValue("ExpectedReturnCodeGet","200");
myTC.setPropertyValue("ETagResponseType","UnMatch");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call LicAppjoinTriggerGetAPI"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();



def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("LicAppjoinTriggerGetAPI")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());


if(tP.getPropertyValue("versionMinor") == tP.getPropertyValue("versionURLEncode")){
	myTC.setPropertyValue("DRM_ID",URLEncoder.encode(tC.getPropertyValue("DRM_ID"), "UTF-8"));
}else{
	myTC.setPropertyValue("DRM_ID",tC.getPropertyValue("DRM_ID"));
}


myTC.setPropertyValue("LIC_APP_ID",tC.getPropertyValue("LIC_APP_ID"));
myTC.setPropertyValue("Device_ID",tC.getPropertyValue("Device_ID"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML"));
myTC.setPropertyValue("ExpectedReturnCodeGet","200");
myTC.setPropertyValue("ETagResponseType","UnMatch");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call again DeviceGetAPI with If-None-Match" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGetAPIwithIf-None-Match")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("Domain_ID",tC.getPropertyValue("Domain_ID"));
myTC.setPropertyValue("Device_ID",tC.getPropertyValue("Device_ID"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("RET_NODE_ACCOUNT_ID_FULL"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("RET_SAML"));
myTC.setPropertyValue("ETag",tC.getPropertyValue("DeviceGetETag"));
myTC.setPropertyValue("ExpectedReturnCodeGet","200");
myTC.setPropertyValue("ETagResponseType","UnMatch");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>NODE_ID</con:name><con:value>0701</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E5A4E07CEF4CF17CE0401F0A07994016</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:E5A4E07CEF4CF17CE0401F0A07994016</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E5A4E07CEF4EF17CE0401F0A07994016</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E5A4E07CEF4EF17CE0401F0A07994016</con:value></con:property><con:property><con:name>Username</con:name><con:value>firstfau_20130905_081349</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=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</con:value></con:property><con:property><con:name>LicAppID</con:name><con:value>urn%3Adece%3Alicappid%3Aorg%3Adece%3AE49B021A38CC0F36E0401F0A059951E3</con:value></con:property><con:property><con:name>Policy_Class</con:name><con:value>urn:dece:type:policy:ManageAccountConsent</con:value></con:property><con:property><con:name>POLICY_ID</con:name><con:value>urn:dece:policyid:org:dece:E5621F30B02A9C45E0401F0A07995542</con:value></con:property><con:property><con:name>LIC_APP_ID</con:name><con:value>urn:dece:licappid:org:dece:E5A4E92CCEA40636E0401F0A079955ED</con:value></con:property><con:property><con:name>Domain_ID</con:name><con:value>urn:dece:domainid:dece:E5A4EB70E3735C70E0401F0A07995A15</con:value></con:property><con:property><con:name>RET_NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:E5A4E81AFA06FABBE0401F0A07994006</con:value></con:property><con:property><con:name>RET_NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E5A4E81AFA31FABBE0401F0A07994006</con:value></con:property><con:property><con:name>RET_SAML</con:name><con:value>SAML2 Assertion=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</con:value></con:property><con:property><con:name>Device_ID</con:name><con:value>urn:dece:deviceid:org:dece:E5A4E92CCEA10636E0401F0A079955ED</con:value></con:property><con:property><con:name>DeviceGetETag</con:name><con:value>"E5A4F24807AF8152E0401F0A0599647D:AEA6CA20"</con:value></con:property><con:property><con:name>DeviceGetLastModified</con:name><con:value>Thu, 05 Sep 2013 14:41:40 GMT</con:value></con:property><con:property><con:name>DRM_ID</con:name><con:value>urn:dece:drm:marlin:1.2</con:value></con:property><con:property><con:name>ORG_ID</con:name><con:value>urn:dece:org:org:dece:o:700031</con:value></con:property><con:property><con:name>licappserial</con:name><con:value>0909f378-f7d0-422b-be93-5025dc4f69d4</con:value></con:property><con:property><con:name>licappserial_1</con:name><con:value>0909f378-f7d0-422b-be93-5025dc4f69d4</con:value></con:property><con:property><con:name>licappModel</con:name><con:value>model-3A65F92B711105</con:value></con:property><con:property><con:name>licappModel_1</con:name><con:value>model-3A65F92B711105</con:value></con:property><con:property><con:name>licappManufacturer</con:name><con:value>manfact-97288178864104</con:value></con:property><con:property><con:name>licappManufacturer_1</con:name><con:value>manfact-97288178864104</con:value></con:property><con:property><con:name>licappapplication</con:name><con:value>appid-hKqnPMNYWHC89</con:value></con:property><con:property><con:name>licappapplication_1</con:name><con:value>appid-hKqnPMNYWHC89</con:value></con:property><con:property><con:name>attestionIdFULL</con:name><con:value>urn:dece:attestation:manfact-97288178864104:model-3A65F92B711105</con:value></con:property><con:property><con:name>attestionIdFULL_1</con:name><con:value>urn:dece:attestation:manfact-97288178864104:model-3A65F92B711105</con:value></con:property><con:property><con:name>attestionId</con:name><con:value>urn:dece:attestation:manfact-97288178864104:model-3A65F92B711105</con:value></con:property><con:property><con:name>attestionId_1</con:name><con:value>urn:dece:attestation:manfact-97288178864104:model-3A65F92B711105</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>ccdf09f0-c034-47f6-8cdf-76797af3f771</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>7eb68f58-93ef-4e73-98fe-f10cbdf6193b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>1ad7f9ca-219a-4dce-ba00-8f7d6fd3daca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>26e61b63-18ea-4c73-8766-0f86596b334c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f186da08-3084-424e-86a3-715f74852dcb</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b366a31b-3fe4-40cb-bf60-511d058b5006</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>9135a8e7-c0a2-4d17-9a3e-b29674eddb72</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>91fddc95-6d1c-4282-8d72-2a3c6c29a712</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>4ba02d8a-154a-4751-8977-07e6da5cb352</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>91adc75b-6bcb-4bb2-83eb-c200e612dd08</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="00009_DeviceGetCacheScenario_NonCS_DeviceGet_DeviceJoin_DeviceGet(If-Modified-Since)_200_OK" searchProperties="true" disabled="true"><con:settings/><con:testStep type="groovy" name="Set Coordinator Schema to Leading version" id="5454dc2b-ba62-4b8e-973c-6389257f3cd1"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("versionMinor",tP.getPropertyValue("currentVersionMinor"));
tP.setPropertyValue("versionMajor",tP.getPropertyValue("currentVersionMajor"));

tP.setPropertyValue("CoordinatorSchema", tP.getPropertyValue("CoordinatorSchema_"+ tP.getPropertyValue("versionMinor")));

log.info "CoordinatorSchema set to .... :  " + tP.getPropertyValue("CoordinatorSchema")</script></con:config></con:testStep><con:testStep type="groovy" name="Call AccountCreate API"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("AccountCreateAPI")

tP.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeidRTL"));

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call FirstUserCreateAPI"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("FirstUserCreateAPI")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call STSCreateandGetAPI"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("STSCreateandGetAPI")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("Username",tC.getPropertyValue("Username"));
myTC.setPropertyValue("audience","");


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

tC.setPropertyValue("RET_NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("RET_NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("RET_SAML",tC.getPropertyValue("SAML"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call TOUPolicyCreateAPI"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("TOUPolicyCreateAPI")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call MUCPolicyCreateAPI"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("MUCPolicyCreateAPI")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call STSCreateandGetAPI for Device"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("STSCreateandGetAPIforDevices")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("Username",tC.getPropertyValue("Username"));

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call LicAppCreateAPI"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("LicAppCreateAPI")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML"));

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call LicAppGetAPI"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("LicAppGetAPIforDevice")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("LIC_APP_ID",tC.getPropertyValue("LIC_APP_ID"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML"));

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call DeviceGetAPI"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGetAPI")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("Domain_ID",tC.getPropertyValue("Domain_ID"));
myTC.setPropertyValue("Device_ID",tC.getPropertyValue("Device_ID"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("RET_NODE_ACCOUNT_ID_FULL"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("RET_SAML"));
myTC.setPropertyValue("ExpectedReturnCodeGet","200");
myTC.setPropertyValue("ETagResponseType","UnMatch");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call LicAppjoinTriggerGetAPI"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();



def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("LicAppjoinTriggerGetAPI")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("DRM_ID",tC.getPropertyValue("DRM_ID"));
myTC.setPropertyValue("LIC_APP_ID",tC.getPropertyValue("LIC_APP_ID"));
myTC.setPropertyValue("Device_ID",tC.getPropertyValue("Device_ID"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML"));
myTC.setPropertyValue("ExpectedReturnCodeGet","200");
myTC.setPropertyValue("ETagResponseType","UnMatch");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call again DeviceGetAPI with If-Modified-Since"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGetAPIwithIf-Modified-Since")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
myTC.setPropertyValue("ETag",tC.getPropertyValue("DeviceGetETag"));
myTC.setPropertyValue("Last-Modified",tC.getPropertyValue("DeviceGetLastModified"));

myTC.setPropertyValue("Domain_ID",tC.getPropertyValue("Domain_ID"));
myTC.setPropertyValue("Device_ID",tC.getPropertyValue("Device_ID"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("RET_NODE_ACCOUNT_ID_FULL"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("RET_SAML"));
myTC.setPropertyValue("ExpectedReturnCodeGet","200");
myTC.setPropertyValue("ETagResponseType","UnMatch");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>NODE_ID</con:name><con:value>0701</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>E5289A29AB284E5BE0401F0A07991857</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:E5289A29AB284E5BE0401F0A07991857</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>E5289A29AB2A4E5BE0401F0A07991857</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E5289A29AB2A4E5BE0401F0A07991857</con:value></con:property><con:property><con:name>Username</con:name><con:value>firstfau_20130830_03552</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=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</con:value></con:property><con:property><con:name>LicAppID</con:name><con:value>urn%3Adece%3Alicappid%3Aorg%3Adece%3AE49B021A38CC0F36E0401F0A059951E3</con:value></con:property><con:property><con:name>Policy_Class</con:name><con:value>urn:dece:type:policy:ManageAccountConsent</con:value></con:property><con:property><con:name>POLICY_ID</con:name><con:value>urn:dece:policyid:org:dece:E5289A29AA534E5BE0401F0A07991857</con:value></con:property><con:property><con:name>LIC_APP_ID</con:name><con:value>urn:dece:licappid:org:dece:E5286D89AEC4185EE0401F0A07993B4A</con:value></con:property><con:property><con:name>Domain_ID</con:name><con:value>urn:dece:domainid:dece:E528727456D41456E0401F0A07994684</con:value></con:property><con:property><con:name>RET_NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:E5289A376A07CDACE0401F0A0799185B</con:value></con:property><con:property><con:name>RET_NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:E5289A29A8DF4E5BE0401F0A07991857</con:value></con:property><con:property><con:name>RET_SAML</con:name><con:value>SAML2 Assertion=nVdZc6pME773V1ieS8uwqYiVpGoQVFTccL95C4YBUTYZNv3132Cix+Qk58v7Vi7MND3dTy/T88wz1j2XbQOMURQ7gV9WpJfKP4xB/mhOrwlsC9bqTQRrusHwNUswaMhaBt/ijEpZwThBio9j3Y9fKizNcDW6VePoBUO3WbZdbz016MauUl6hCBPTROWJrpRzz/Vx++r2pZJEfjvQsYPbvu4h3I5hWwPqqE002/oNU+X1+Q3l1WH0uo/jsE1R8MlEELkufIKBRz1TH3SeTdzWHNvX4yRC7z5N/FJ535tl2VPGPQWRTbE0TVO0QBEdEzv2r8pr6bYZmYpvBW/rju4HvgN117noBSgVxfvALAPXDiIn3nvfmGYohi5M11AOa5Cp+78q1G8HV3Q/tPQBZIT1Gt7rzM3YHFkoQj5E5eVcean8+lkF3/YuIt3HVhB5+NP630FCforcIERmDd8iu6H7ucUv0vX6jGBb8aGbYCdF46JNQh0iXJ5GyHLykYNJ85m4fC1/Oce3DkPw35TkmXrESWBTX2RGcmyE4/9Sr8davVlZ6W6CXif0dDH3jk6TmuVrLg0YKWoNjgYwfOXlCuFR+Q3UvdTv68+Neu+r900Ro+Q5Y0owtBuZY5sXReIv46B7rLZMEyVWZzboIRcDfhKgajc7JhpGp7k+tOrhzNmxKhjGXB7jkNebl1LgNfRsLqGll7tW5k0N6bJx2dFR3oBRJ214S8sZHII53cyW/Cgw0zN10BoeJTRsxeo1+1m6mZBTvUcWEEYlRdgwk7HBnOycqeLtkHPsl98xPcZQxDVE52uQxf+bBi1IeqzfF51iUljkeMboVVWUTlXqdADq2CBTRGAr4ugCxqJ9PO2PTk/IaBHMll0ggbM6B5lkb6XVbDaUM3O1cncrpdsV1Xk964OtVCIfJDlfSbvNgNbXu3DLdumdJormZh4Y3CA0+8esv4djdaFm44VyVg9yPl7I9Poqs3OyvqgHlZksllxpfRAFdS5nUnb1KMnZfrxbz8PtUsjgRZ6poN4DzFLu7NX+wlsxkJvv4UEeqeB4lYt7tbNaqbm8ANOSaI9XJLZFp7sLoWeGhufuH4z3ifGF2VudjZ6b7C7yQe3IvY526mmKwUkzeQDm26WxXh31dTctwf4YGDePTsPRN0Fm71qZNNsOhsFO2adwDGayKM4ASRcNVKU3AEFPBGodOPmlcxCbQcfsZtSAxaWq4Paam7Nz2mC9R7s602ox29G6OT01Jdmv7oaJcdir+013Uh1qZroUYuGyxWk1beoOA/PQmm3kfjzMrf5MKxlTKd/AftW0B5R7EbqRyg9AdDnvXdWex+vmBJ8Nx7LW4mZSd3nLVbl5aLlWeMbVRTA7RnRTRBxLbc/pMC4BWxUB6B2WB3Gmiq0iqaaSzbaqqIOuHCfgcmDjIbs6DfqpC7ccCPLhenI4vhfGlDJZpLKZTNpKLrUkYBZF6GtLuXsAS9G2I9GWu+IMSmC2VYbZluRr2SfKn/PYvebRlkUgczvQFPolbkkL8STW6nVw9sWl3xX26ilfm02P5k9IHmnjsJ6peGz5u3VwVD0nWkaJthwOx6PcWCS944HMKovWhim3K8npMQTOeLjYH6VA0qfhdhuHVR9GMFZCT1Xyy2SHDy3H8OhBtcGIU1qCPLv0jGzZ0+XdMLI1Ztif+1OOF0o4sc59r3poZevqQmuGvNnxLel8pnbRig5A0BXmjZOZs+xxv8xGzcwagKOhs+PcFcSzIA93C5jNZ8O15lUbpUY6Gnn0ZUHVx+Ek03pZXZ7NqpwpLvoLHEbONmnZeTTxTXarx810R6+aTugeBTY5Luoht7I9Uqxpaoa8Oi3N6hu482w+hANqTqVA5q2R0jsbF/0SehP4NkA/T4e78G1+UI+T5cPouZEOjXQrgvFtWVxAilTukltBj/9OYAqJY9asq2o7LFgQjpEfV16LXQV5aSeE4jhmm1wZb2u5wbYEwAqgJXXrckOU6TrNdGlA84LAtBr8jeW8ofgEsRP4llP4Knjc2y31d4DQa2PkmyiqpUEC9whX/mKxyFdZ8efk+g18jBYB4YkN0OnwNABd0G10Bb7VaDRakgRkkWUB02y2KuVxEE/8SQSsGEUfOSL3gSPOEXRCBxVE8v02xTHJyElPk9hlnlL9yUcJYZpRQfbabL3VoLDjhS4q8FJuYDs+NZ1oi6dwH16v82/j+PztFjLRMZ1CARegRUTKhr5gtdwN8feRNR8ju5kHiekUtzbJXxw58A3Jx0+/26Loh3tP0DzN3DDfVT8LPpilPkd092SmDrx39p30E85IWMWVV2OS+ZP+dHpK0jS55povGFNEzFMMRfOUhmBCaM95ERyRT91NUD9inHfUnzzf5R/xJfHe12Jyaj3SGOXr8gfPDQ3h4rmhkMbOf/qW+eCS5C1GefyVrOOSV0mB+K8PF9iGhR4RT8lPFkTm73J9YevBD4mzGFOObxergl+ev+kKGBCzDhlVQfRo/CsDXzn/KLwn+Y4lJt1kJDH6/ku5mEEvFR3CIPFjRapcBY9z8YozPoeo/VvpDzNXhvdO2XP8LWXfqCONTChPr9x1nf+vXHOu7QIR2YWdK5aXSk5en8S5bz/M4XeAf45ijm+S4duRQOfTKBbvCfwQyesf4j8lDzn9fB5e/wc=</con:value></con:property><con:property><con:name>Device_ID</con:name><con:value>urn:dece:deviceid:org:dece:E5286D89AEC1185EE0401F0A07993B4A</con:value></con:property><con:property><con:name>DeviceGetETag</con:name><con:value>"E5286D89AECB185EE0401F0A07993B4A:3B9014D1"</con:value></con:property><con:property><con:name>DeviceGetLastModified</con:name><con:value>Fri, 30 Aug 2013 10:11:36 GMT</con:value></con:property><con:property><con:name>DRM_ID</con:name><con:value>urn:dece:drm:adobe:3.0</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>ccdf09f0-c034-47f6-8cdf-76797af3f771</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>7eb68f58-93ef-4e73-98fe-f10cbdf6193b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>1ad7f9ca-219a-4dce-ba00-8f7d6fd3daca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>26e61b63-18ea-4c73-8766-0f86596b334c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f186da08-3084-424e-86a3-715f74852dcb</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b366a31b-3fe4-40cb-bf60-511d058b5006</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>9135a8e7-c0a2-4d17-9a3e-b29674eddb72</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>5454dc2b-ba62-4b8e-973c-6389257f3cd1</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="00022_DeviceGetCacheScenario_NonCS_DeviceGet_LegacyDeviceCreate_DeviceGet_200_OK" searchProperties="true" id="55705130-9ff1-4226-b756-651566fc7d73"><con:settings/><con:testStep type="groovy" name="Set Coordinator Schema to Leading version" id="9d6fb129-8ab8-4db3-8dcc-7c91eee4f223"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("versionMinor",tP.getPropertyValue("currentVersionMinor"));
tP.setPropertyValue("versionMajor",tP.getPropertyValue("currentVersionMajor"));

tP.setPropertyValue("CoordinatorSchema", tP.getPropertyValue("CoordinatorSchema_"+ tP.getPropertyValue("versionMinor")));

log.info "CoordinatorSchema set to .... :  " + tP.getPropertyValue("CoordinatorSchema")</script></con:config></con:testStep><con:testStep type="groovy" name="Call AccountCreate API"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("AccountCreateAPI")

tP.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeidRTL"));

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call FirstUserCreateAPI"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("FirstUserCreateAPI")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call STSCreateandGetAPI"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("STSCreateandGetAPI")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("Username",tC.getPropertyValue("Username"));
myTC.setPropertyValue("audience","");


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

tC.setPropertyValue("RET_NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("RET_NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("RET_SAML",tC.getPropertyValue("SAML"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call TOUPolicyCreateAPI"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("TOUPolicyCreateAPI")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call MUCPolicyCreateAPI"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("MUCPolicyCreateAPI")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call STSCreateandGetAPI for Device" id="b01c9685-d267-423e-b675-ac77c87094cc"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("STSCreateandGetAPIforDevices")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("Username",tC.getPropertyValue("Username"));

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call LicAppCreateAPI" id="350e17e9-a65f-46da-8527-11fb4abc53ca"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("LicAppCreateAPI")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML"));

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call LicAppGetAPI" id="eeb8bcd3-9228-434e-b135-0dbf33ce0c3c"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("LicAppGetAPIforDevice")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("LIC_APP_ID",tC.getPropertyValue("LIC_APP_ID"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML"));

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call LegacyDeviceCreateAPI" id="fb816b02-7683-4d99-bb4b-cf125fa3929a"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("LegacyDeviceCreateAPI")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("SAML",tC.getPropertyValue("RET_SAML"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("RET_NODE_ACCOUNT_ID_FULL"));
myTC.setPropertyValue("ExpectedReturnCodeCreate","201");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call DeviceGetAPI"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGetAPI")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("Domain_ID",tC.getPropertyValue("Domain_ID"));
myTC.setPropertyValue("Device_ID",tC.getPropertyValue("Device_ID"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("RET_NODE_ACCOUNT_ID_FULL"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("RET_SAML"));
myTC.setPropertyValue("ExpectedReturnCodeGet","200");
myTC.setPropertyValue("ETagResponseType","UnMatch");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call LegacyDeviceCreateAPI 1" id="50d5ec00-9a9f-4b61-af7e-8010b47067d0"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("LegacyDeviceCreateAPI")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("SAML",tC.getPropertyValue("RET_SAML"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("RET_NODE_ACCOUNT_ID_FULL"));
myTC.setPropertyValue("ExpectedReturnCodeCreate","201");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call again DeviceGetAPI"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGetAPI")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("Domain_ID",tC.getPropertyValue("Domain_ID"));
myTC.setPropertyValue("Device_ID",tC.getPropertyValue("Device_ID"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("RET_NODE_ACCOUNT_ID_FULL"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("RET_SAML"));
myTC.setPropertyValue("ExpectedReturnCodeGet","200");
myTC.setPropertyValue("ETagResponseType","UnMatch");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>NODE_ID</con:name><con:value>0701</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>0E3F106C565571A1E05305991F0A01A3</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:0E3F106C565571A1E05305991F0A01A3</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>0E3F107330D671A5E05305991F0A7EB7</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:0E3F107330D671A5E05305991F0A7EB7</con:value></con:property><con:property><con:name>Username</con:name><con:value>firstfau_20150204_012413</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVbbcuI4EP0VynmkjGWDubgCVdySeIdANobJTF62hCyDgi0nkgwOXz+SAY8hJMvME9VN6/SRuvu0rzmMQsvpco6ZIDEtpVFIuZN521rCqBNDTrhDYYS5I5Djde9HjlUBDjwc0UruoK39BzCATb9e1XG9Eei1KpzrzRoIdL9Zq81r0K43bSRDOU+wS7mAVLQ1C5i2Diwd1Kag4diWY1oV0249a6XvmHGJLUMqQNuTSnlbWwrx6hjGZrOpbKqVmC0MCwDT+HE/8tASR1DrXO9ulCVinX08qvgY4TBEFRRHxrVxFHPtc8cjCwpFwvA+l/9ZLmCAliFjfE4WV1p+FvsuDeLM7EMaU4JgSLZQvc89FsvYL3XDRcyIWEafXsIECljHKdKRWaNXmnFM7UKgI4aMQ50vobnHesQBZpgiXJo9um3t6rKqZUenDFIexCzix+af8cF0jcP4Ffs6P1xrT+1ywDMv1bnGyHEpChNO1nismvUVIsz31cTocqjSA8MBSUeEywZNuWJnFOmdmLvXGJAF5uJvClQozg7kOwwT3PnJ/Kf19qk13ILeXRzVGu541W/a/z6b3XZGoBicOfLS7syTpsybaHfiZZGM5iNrsjb8cbqarGZl76c7uysH8+34GSSjoEZWk7vNym5Mo/uXxT9hHAJv/giaLbIhrLyZzqJ09jAtr4yV96NLhtX02wxEb82n8mQZvbi9srGdDgw+hW+jKX14Wo/54/TJHYet1bx+vyhvW564exsa5eD22+37qFevTR5u14kV1C172Z9yL0Qjl9V4L05X7fw6Bf7HvsPMe8n8BSNxMFUbuIPSjawSFF+LmfIQXw+yUOdViQ8XmAqto04p7XASKXfEd2QNdzYYVm9M0KhWwaDeMLv2ENhVYLda5g3oNoa9xkFkdixOKPZjGhCVS0nurm2+JogiZ44hw0z7AmkABSyNYzGhE9YNBGZHCmuCosKqtv4U6PS/Q04Z4xMVwFWaHpbvhc+oODio+CkX67zaGwf8rr8mKC9nvpSkVsnuzrScy2l6gxW/kqzXiRJzp6GmmMlZMBQPA1iGh1Ei5+99Gq8wNXIU4yKxO9z8NHnuP6aYiCX1BBQ4kt1SyswLtpuHudpuLvVxeunqPEopCyFwKs75+qHczIrxl8sbOUjFSfeD/NnEzM8veA6rkEfeUy43QehCWUro3n8PiZqOfEJQLGGJHNGYFcHPAZxLfuzMHznnIgQj80Tgz/8pqdlraxChOKHCHWiZo6gHGU/x/oqd30EfYDLJyb9ByP9/hOgkawGE5ZcLJxm+WiUOl4B0UdCUfdKPslLv23XblrJiFmUFmN1q/ihH7Dof3B89hXc67fHOLw==</con:value></con:property><con:property><con:name>LicAppID</con:name><con:value>urn%3Adece%3Alicappid%3Aorg%3Adece%3AE49B021A38CC0F36E0401F0A059951E3</con:value></con:property><con:property><con:name>Policy_Class</con:name><con:value>urn:dece:type:policy:ManageAccountConsent</con:value></con:property><con:property><con:name>POLICY_ID</con:name><con:value>urn%3Adece%3Apolicyid%3Aorg%3Adece%3AE58F258F22B7407AE0401F0A07994EB3</con:value></con:property><con:property><con:name>LIC_APP_ID</con:name><con:value>urn:dece:licappid:org:dece:0E3F106C565A71A1E05305991F0A01A3</con:value></con:property><con:property><con:name>Domain_ID</con:name><con:value>urn:dece:domainid:dece:0E3F657130121CFCE05307991F0A14F2</con:value></con:property><con:property><con:name>RET_NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:0E3F10714F0E71B3E05305991F0A50E8</con:value></con:property><con:property><con:name>RET_NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:0E3F1073916071C7E05305991F0A1E71</con:value></con:property><con:property><con:name>RET_SAML</con:name><con:value>SAML2 Assertion=nVZtU/I4FP0rTJ+PTmnagkBHmEFEZUVUXhz1y05Ib0u0TaFJC/rrNylQKYLL7qdObm/OPfclJ7ngOAwsp805xIJGrLQKA8adzNrUkpg5EeaUOwyHwB1BnFH7vu9YZeTg7Rat1Ltqan97iOBzmNo6adieXrER0utoaupTE3n1aR2Z07olXTlPoMe4wEw0NQuZVR1ZOqqMUc2pWg6yyxXr/E0rPUPMJbZ0KSNtQ2rFm9pMiLljGMvlsry0y1HsGxZCpvFy3x+RGYRYa12sM8oCxa2NPym7QCAISJlEoXFhFHwuXO6MqM+wSGLYxHKPxUIGahjSx+XU/6Ple8HtMS/Klh3MIkYJDugXVvW5BzGL3FI78KOYill4NAkTKWAdVkQnZoX90YwitROBCgxjjnU+w+YGawgexMAIlCbDXlP7c1rXsq3jGDPuRXHIi8v/xgdYCkE0B1fn27Q21E4HPFCp1gUQp8dIkHCawkAN6xwT4JtuAjkdqvQYg0dXfcrlgK64Ymfs0ttbrqtxRX3g4v80aKc5a5BnHCTQmtyc3d9yZq/GX7Q9gb86T/QlfHipdemymRHYdc4MeWvXy72hzIdoveMJXoIBvRniRu3stvHBJh3/aXE+6D/7j2+fVd9euKO7a8snwYxFvdlw1jhbeh/15Hl0czcmHzWBZ64V2VcVceeyare7MN465++DWhUG/U9zQl+/wrv0dtBxySS9dXH1lnw8vXYqY7PSGCyHC9Ew74zu66VvDebeO6Q2R7TXPfOTh8qLtWIv7TPXQP1Fnb++pffNPJ0d/kXb9syPkuk7ELFdqjHoXZWuZZew+F3MlIW6upe5OnMlPlwAE1pL7VLa4SRS7qjryB6u16hrX5uoZjfMc1QzO7Uuqtqo2miY16htdmvmVmTWLPYodiLmURVLSe56bH4nSEKHA3Mh1tMokUrHtV8Qr7DApR4bykMQMQ7jSMqzaS3m7+9z3/bMadVcBWH6TgLcYG6olQaReGAPcdsTEBdE2UQFUR4CoXMKSrnVYHM52VzIYixwmojALKe4zCCR2h4rmXWsSr1qcBrOA1BUjTBykwDK89k8K43B119Lx4Rn1mF3nB23o4nt/9vWQPq4VDlwlcslyD7Cj9vFdKrbRI4nbO8mvIVvJy5VJ0sWVMSUrJkUf33PiRqQfEhkRlvKuee+oYBq7CeUB3JTSvJJz+9rKePy4Le27Vjg8qKcpGmSNaCmBC6W8IZK0UCWMQKSSGn6HEcfwIwcxTjpHsiJ7wXP7UWKiZixkcACQjkxpWx5wsU/Aq4u/p6c9dWpr4pCSFk6AStxyNYJ5KNFMf71XUMcovyk+VF+llHsfnfsANZOHJmnvPcFZb5aqTvg88hckEjCUqleUbwLfgjgUPCiMS9yzkXIgZomAo7/KSlZamqYkChhonelZYZdqcx4is85ON9OP2AyNc6fZ/Tf32c6zUaAgHzUcZrhq1vWUUeA+Ttyuwl6QHHNyjWS+npp7ypuFXXreVEK7Fo/zD8tO3Xan/HWPw==</con:value></con:property><con:property><con:name>Device_ID</con:name><con:value>urn:dece:deviceid:org:dece:262097</con:value></con:property><con:property><con:name>DeviceGetETag</con:name><con:value>"0E3F106C566171A1E05305991F0A01A3:65A56C62"</con:value></con:property><con:property><con:name>DeviceGetLastModified</con:name><con:value>Wed, 04 Feb 2015 07:52:26 GMT</con:value></con:property><con:property><con:name>licappapplication</con:name><con:value>appid-hKqnPMNYWHC88</con:value></con:property><con:property><con:name>licappserial</con:name><con:value>ec825582-7a9d-46ce-8788-180b9ed724e9</con:value></con:property><con:property><con:name>licappModel</con:name><con:value>model-3A65F92B71184</con:value></con:property><con:property><con:name>licappManufacturer</con:name><con:value>manfact-9728817886467</con:value></con:property><con:property><con:name>licappapplication_1</con:name><con:value>appid-hKqnPMNYWHC88</con:value></con:property><con:property><con:name>ORG_ID</con:name><con:value>urn:dece:org:org:dece:o:700031</con:value></con:property><con:property><con:name>DRM_ID</con:name><con:value>urn:dece:drm:adobe:3.0</con:value></con:property><con:property><con:name>LegacyDeviceID</con:name><con:value>urn:dece:deviceid:org:dece:${#TestCase#RandomNumberGenerated}</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>ccdf09f0-c034-47f6-8cdf-76797af3f771</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>7eb68f58-93ef-4e73-98fe-f10cbdf6193b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>1ad7f9ca-219a-4dce-ba00-8f7d6fd3daca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>26e61b63-18ea-4c73-8766-0f86596b334c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f186da08-3084-424e-86a3-715f74852dcb</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b366a31b-3fe4-40cb-bf60-511d058b5006</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>fb816b02-7683-4d99-bb4b-cf125fa3929a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>350e17e9-a65f-46da-8527-11fb4abc53ca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>eeb8bcd3-9228-434e-b135-0dbf33ce0c3c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>50d5ec00-9a9f-4b61-af7e-8010b47067d0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b01c9685-d267-423e-b675-ac77c87094cc</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>9d6fb129-8ab8-4db3-8dcc-7c91eee4f223</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="00023_DeviceGetCacheScenario_NonCS_DeviceGet_LegacyDeviceCreate_DeviceGet(If-None-Match)_200_OK" searchProperties="true" id="200d6a89-0135-48d3-951c-fd801ed67913"><con:settings/><con:testStep type="groovy" name="Set Coordinator Schema to Leading version" id="4c0c1012-3c9a-4bc8-ac6c-650e07704ddd"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("versionMinor",tP.getPropertyValue("currentVersionMinor"));
tP.setPropertyValue("versionMajor",tP.getPropertyValue("currentVersionMajor"));

tP.setPropertyValue("CoordinatorSchema", tP.getPropertyValue("CoordinatorSchema_"+ tP.getPropertyValue("versionMinor")));

log.info "CoordinatorSchema set to .... :  " + tP.getPropertyValue("CoordinatorSchema")</script></con:config></con:testStep><con:testStep type="groovy" name="Call AccountCreate API"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("AccountCreateAPI")

tP.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeidRTL"));

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call FirstUserCreateAPI"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("FirstUserCreateAPI")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call STSCreateandGetAPI"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("STSCreateandGetAPI")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("Username",tC.getPropertyValue("Username"));
myTC.setPropertyValue("audience","");


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

tC.setPropertyValue("RET_NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("RET_NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("RET_SAML",tC.getPropertyValue("SAML"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call TOUPolicyCreateAPI"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("TOUPolicyCreateAPI")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call MUCPolicyCreateAPI"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("MUCPolicyCreateAPI")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call STSCreateandGetAPI for Device" id="00db5813-b0cf-452e-b16a-78481bd9004f"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("STSCreateandGetAPIforDevices")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("Username",tC.getPropertyValue("Username"));

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call LicAppCreateAPI" id="1cc57665-e702-49ef-944b-b5bbb02bcb18"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("LicAppCreateAPI")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML"));

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call LicAppGetAPI" id="ea543589-a57f-4c4c-af4b-69fcdf334086"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("LicAppGetAPIforDevice")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("LIC_APP_ID",tC.getPropertyValue("LIC_APP_ID"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML"));

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call LegacyDeviceCreateAPI" id="7bb27078-e7d8-4245-8c3a-90db4578753d"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("LegacyDeviceCreateAPI")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("SAML",tC.getPropertyValue("RET_SAML"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("RET_NODE_ACCOUNT_ID_FULL"));
myTC.setPropertyValue("ExpectedReturnCodeCreate","201");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call DeviceGetAPI"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGetAPI")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("Domain_ID",tC.getPropertyValue("Domain_ID"));
myTC.setPropertyValue("Device_ID",tC.getPropertyValue("Device_ID"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("RET_NODE_ACCOUNT_ID_FULL"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("RET_SAML"));
myTC.setPropertyValue("ExpectedReturnCodeGet","200");
myTC.setPropertyValue("ETagResponseType","UnMatch");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call LegacyDeviceCreateAPI 1" id="b7f2080a-1a29-485b-86e6-d93e84aabaeb"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("LegacyDeviceCreateAPI")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("SAML",tC.getPropertyValue("RET_SAML"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("RET_NODE_ACCOUNT_ID_FULL"));
myTC.setPropertyValue("ExpectedReturnCodeCreate","201");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call again DeviceGetAPI with If-None-Match"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGetAPIwithIf-None-Match")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
myTC.setPropertyValue("ETag",tC.getPropertyValue("DeviceGetETag"));

myTC.setPropertyValue("Domain_ID",tC.getPropertyValue("Domain_ID"));
myTC.setPropertyValue("Device_ID",tC.getPropertyValue("Device_ID"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("RET_NODE_ACCOUNT_ID_FULL"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("RET_SAML"));
myTC.setPropertyValue("ExpectedReturnCodeGet","200");
myTC.setPropertyValue("ETagResponseType","UnMatch");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>NODE_ID</con:name><con:value>0701</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>0E3F10714F4971B3E05305991F0A50E8</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:0E3F10714F4971B3E05305991F0A50E8</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>0E3F106C567371A1E05305991F0A01A3</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:0E3F106C567371A1E05305991F0A01A3</con:value></con:property><con:property><con:name>Username</con:name><con:value>firstfau_20150204_012446</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZtc6o6EP4rDv3YQQKIKFOdQa3nWN/aas+x/XInhqBpIVgSRPvrT4LKQWt7vfeTs+vm2SfZ3We5YTAMDMdlDMecRLS0CQPKnMzbUJKYOhFkhDkUhpg5HDkTdzhwjDJw4OGIUup1Gso/Xs2YQ99Aas3GplqBVVuFujVX55ZZsUwD1bxKXYQyluAeZRxS3lAMoFsqMFRQmQLbsQynYpZN23hRSr9wzAS2CCkDZU9qwxrKkvOVo2lpmpZTsxzFC80AQNdmw8EELXEIlebN7kZZori5j0dlDyMcBKiMolC70Y5ibjzmTMiCQp7EeJ/L+yoX0EBdEzEeI4srJT+LvR71o8xsQxpRgmBAPqB8nyHmy8grucEiiglfhl9eQgcSWMUbpCK9Qq8U7ZjahUBHDGMGVbaE+h7rEfs4xhTh0tNjr6FcXVa17Og0hpT5URyyY/O/8cF0jYNohT2VHa61p3Y54JmXat5g5PQoChJG1ngkm3UFEWb7amJ0OVTpPsY+2QwIEw26YZKdVqR3Yu5eo0MWmPH/U6BCcXYgv2CQ4OZDurJ+XKcD/uNh0J9uo7b1OxzFH+3V9K2RESgGZ468tDvzpCnzJtqdoHfXOn4dDyr9Vms2s28H6fVr0gUf85fHcb83IuHt3Rt5GNs/O33vRXu2/P5L6vfG+t3vB5bOWtpoW1uzu9F0su5eu/TxFYC3+Bkw9676o9VO+X3d65InzuNo+4EfniL3qX/d3b5OZ/5z1ViO0rT2nFaXy9k7fxn6Q/19NIzSp2BAth3Lt+5/WpOKV++mj5BNqqCRX6fA/9h3mPlJMn/FiB9M2Qa9TqkrqgT592ImPcRT/SzUWUnxYRxTrjTlKakdTiLkjniOqOHOBrdmVwfVtlW1TVt39VtgmcCq1/UucIHumgeR2bE4odiOqE9kLim5u7b5niAKnTmGMY6Vb5A6kMPSKOJjOo5dn+P4SGF1UFRY2dZfAp3+d8gpYjwiA5hM08LivfAZFTcPKn7KxTiv9toB3/XWBOXlzJeS0CrR3ZmWMzFN77DslZP1OpFi7thyimMxC5rkoQFDm2CUiPnbTqM3TLUcRbtI7A43P02e+48pJnxJJxxyHIpuKWXmBdttgpncbj3q4c2lq/MopSgExxt+ztcOxGaWjL9d3shBMk6478VPGsVefsFzWIU84p5iuXFCF9KSQrf9OyRyOvIJQZGAJWJEo7gIfg7gXPJjZ/7IORchL2SecPz1PyU5ew0FIhQllPc6SuYo6kHGk29X2Pkb9Akmk5z8G4T8+0eISrIWQFh8uTCS4ctV4jABSBcFTdkn/Swrtl7pVuq23jKLsmKB21r+KEfsmp/cnz2Fdzrt8eYf</con:value></con:property><con:property><con:name>LicAppID</con:name><con:value>urn%3Adece%3Alicappid%3Aorg%3Adece%3AE49B021A38CC0F36E0401F0A059951E3</con:value></con:property><con:property><con:name>Policy_Class</con:name><con:value>urn:dece:type:policy:ManageAccountConsent</con:value></con:property><con:property><con:name>POLICY_ID</con:name><con:value>urn:dece:policyid:org:dece:E52A8F6933017E07E0401F0A059929B1</con:value></con:property><con:property><con:name>LIC_APP_ID</con:name><con:value>urn:dece:licappid:org:dece:0E3F1071764071C1E05305991F0A383E</con:value></con:property><con:property><con:name>Domain_ID</con:name><con:value>urn:dece:domainid:dece:0E3F721FF36B1D08E05307991F0AB2EC</con:value></con:property><con:property><con:name>RET_NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:0E3F1073918C71C7E05305991F0A1E71</con:value></con:property><con:property><con:name>RET_NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:0E3F10714F2C71B3E05305991F0A50E8</con:value></con:property><con:property><con:name>RET_SAML</con:name><con:value>SAML2 Assertion=nVbbcuI4EP0VynlMGd8wNq5AFQNkxrMQCJDry5YiN6CMLYMlG5KvX8mAgwnJsvvkUrvVfbr76EhXDEWh6bUZg4STmFY2UUiZl1ubSppQL0aMMI+iCJjHsTdpD/qeWdU9tN+iVPxuU/kb1ZzA1i2sYtux1Jrj1lUUvDhqrT5za9BoGK77IlwZS8GnjCPKm4qpG7aqm6pem+qOZ5ueZVftmvusVO4hYSK2cKnqyg7UhjWVBedLT9PW63V1bVXjZK6Zum5oj4P+BC8gQkrraltRnihp7fxxNQAMYYirOI60K63kcxUwb0LmFPE0gV2u4KtcuqY3NOETMDK/UIq9EPh0FufLDqIxJRiF5B3J/gyAL+Kg0g7ncUL4IvqyCEOXgVXYiB4aNXqhaGVoZwYqIUwYUtkCGbtYY5hBAhRD5W7sN5WL86aWb50miLJZnESsvPxveIBmEMZLCFS2L2sH7fyAJzrVugLs+RSHKSMZ3EiyLhEGtpsm4PNDVUYJzMimT5gg6IZJdNohvKPlthtdMgfG/8+ADoazDXKPwhRaaRY8wOhX8Dtm+D5t/zRvwvdLNjX9+rqZAzh0zg3FaLfLI1IWJNruWGrh2L9li7uZi38B8v88u7MFQvb95N6Out16tArdP71GlzkD2t88ruq3/dGw8zQjKX22hwu3rQ2f/af6ynoaZnePi/XolpvJfeg+dOY3i/G1jue09ta7G7xdrlFoBf1grU8fHL//V2ZlA7dB74I6ouuu449q+hrN1/T1J08GXRpfN/ikyzdvl+PhKHrq/B7eNYtyDvCXbfszP0lfXgHz/VLSwO9WrsWUEP9ezKSFBOosd/WWUnwYB8qVltwltcNLhdyRwBMz3K71nnVt6I5RuzY7jvHD6um2pdvixFzrbVvvuXuR2aI4gtiJ6YzIXFJyt7T5HiCOPAY0gETN4lQoHVO+idhFHFV8OhaHIKYMprGQZ6NBrPnLzKG1d2qR18BIsvAVIydSKjcxH9Jh0p5xSEqabOglTR4DJksCUrglr5kgNuOiFyuUpTw0qhmqUkiFtCdSZT2z5toaI9EyBIlUi+IgDaG6XCzzzmhs+zVVhFluHfem+Wn7sq7jf/sWCJ+ASAcma/kBYoxw4nIx94V8XbB1WPA+fDsNiDxYop88IXiLpPzrgyaSHwVHREV7yIXnsaEUVTsuqEgUZAQXRC+ua6Hi4ty39uNYoeqqmmZZmg/AkfqWiPCaLFHTTW0COBXK9DaN/wDViijaWddAAfwoeWEvQ0z5gk444hAJxlTy5Rn3/gSYvPd9QfXNuY+KUkrROg4bfsrWCcWbRSL+9lmDPSz9hHkkPus4CT4mdiLWQR5Rp7j2OaFzuZJXwNsXvMCxCEuEeMXJYfBTAU4lLxuLJhdYuCDUS8rh6z8VqUpNBWEcp5T7XSU3HCpljpO/LcH7cPoUJhfj4nVG/v15ppKcAhjEm46RPL68ZD15BOj8QG13SU8IriWGLgS34xwKrtFzjKIpJXStT+bPloM+HXO89Q8=</con:value></con:property><con:property><con:name>Device_ID</con:name><con:value>urn:dece:deviceid:org:dece:842707</con:value></con:property><con:property><con:name>DeviceGetETag</con:name><con:value>"0E3F1071764771C1E05305991F0A383E:A40DC0EE"</con:value></con:property><con:property><con:name>DeviceGetLastModified</con:name><con:value>Wed, 04 Feb 2015 07:52:53 GMT</con:value></con:property><con:property><con:name>licappapplication</con:name><con:value>appid-hKqnPMNYWHC88</con:value></con:property><con:property><con:name>licappserial</con:name><con:value>ec825582-7a9d-46ce-8788-180b9ed724e9</con:value></con:property><con:property><con:name>licappModel</con:name><con:value>model-3A65F92B71184</con:value></con:property><con:property><con:name>licappManufacturer</con:name><con:value>manfact-9728817886467</con:value></con:property><con:property><con:name>licappapplication_1</con:name><con:value>appid-hKqnPMNYWHC88</con:value></con:property><con:property><con:name>ORG_ID</con:name><con:value>urn:dece:org:org:dece:o:700031</con:value></con:property><con:property><con:name>DRM_ID</con:name><con:value>urn:dece:drm:adobe:3.0</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>ccdf09f0-c034-47f6-8cdf-76797af3f771</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>7eb68f58-93ef-4e73-98fe-f10cbdf6193b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>1ad7f9ca-219a-4dce-ba00-8f7d6fd3daca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>26e61b63-18ea-4c73-8766-0f86596b334c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f186da08-3084-424e-86a3-715f74852dcb</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b366a31b-3fe4-40cb-bf60-511d058b5006</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>fb816b02-7683-4d99-bb4b-cf125fa3929a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>1cc57665-e702-49ef-944b-b5bbb02bcb18</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ea543589-a57f-4c4c-af4b-69fcdf334086</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b7f2080a-1a29-485b-86e6-d93e84aabaeb</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>7bb27078-e7d8-4245-8c3a-90db4578753d</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>00db5813-b0cf-452e-b16a-78481bd9004f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>4c0c1012-3c9a-4bc8-ac6c-650e07704ddd</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="00024_DeviceGetCacheScenario_NonCS_DeviceGet_LegacyDeviceCreate_DeviceGet(If-Modified-Since)_200_OK" searchProperties="true" id="7b6e9598-51d1-419b-bb3a-d46c0edd6b6a"><con:settings/><con:testStep type="groovy" name="Set Coordinator Schema to Leading version" id="41558b94-91a9-467a-bbd0-00b4ac37f5a5"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("versionMinor",tP.getPropertyValue("currentVersionMinor"));
tP.setPropertyValue("versionMajor",tP.getPropertyValue("currentVersionMajor"));

tP.setPropertyValue("CoordinatorSchema", tP.getPropertyValue("CoordinatorSchema_"+ tP.getPropertyValue("versionMinor")));

log.info "CoordinatorSchema set to .... :  " + tP.getPropertyValue("CoordinatorSchema")</script></con:config></con:testStep><con:testStep type="groovy" name="Call AccountCreate API"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("AccountCreateAPI")

tP.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeidRTL"));

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call FirstUserCreateAPI"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("FirstUserCreateAPI")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call STSCreateandGetAPI"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("STSCreateandGetAPI")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("Username",tC.getPropertyValue("Username"));
myTC.setPropertyValue("audience","");


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

tC.setPropertyValue("RET_NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("RET_NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("RET_SAML",tC.getPropertyValue("SAML"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call TOUPolicyCreateAPI"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("TOUPolicyCreateAPI")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call MUCPolicyCreateAPI"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("MUCPolicyCreateAPI")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call STSCreateandGetAPI for Device" id="f2863592-56c1-4318-876d-0d753302dd98"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("STSCreateandGetAPIforDevices")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("Username",tC.getPropertyValue("Username"));

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call LicAppCreateAPI" id="c494304a-84c9-4315-9a20-17dc3987a96c"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("LicAppCreateAPI")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML"));

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call LicAppGetAPI" id="1a59d0c7-09ee-4d62-be13-45ee5e3837d7"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("LicAppGetAPIforDevice")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("LIC_APP_ID",tC.getPropertyValue("LIC_APP_ID"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML"));

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call LegacyDeviceCreateAPI" id="ac873847-e90b-4383-ab11-0c1aaaaf9062"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("LegacyDeviceCreateAPI")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("SAML",tC.getPropertyValue("RET_SAML"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("RET_NODE_ACCOUNT_ID_FULL"));
myTC.setPropertyValue("ExpectedReturnCodeCreate","201");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call DeviceGetAPI"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGetAPI")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("Domain_ID",tC.getPropertyValue("Domain_ID"));
myTC.setPropertyValue("Device_ID",tC.getPropertyValue("Device_ID"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("RET_NODE_ACCOUNT_ID_FULL"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("RET_SAML"));
myTC.setPropertyValue("ExpectedReturnCodeGet","200");
myTC.setPropertyValue("ETagResponseType","UnMatch");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call LegacyDeviceCreateAPI 1" id="f5dd8344-0ea2-43d4-9cff-5da64a0fd9b7"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("LegacyDeviceCreateAPI")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("SAML",tC.getPropertyValue("RET_SAML"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("RET_NODE_ACCOUNT_ID_FULL"));
myTC.setPropertyValue("ExpectedReturnCodeCreate","201");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call again DeviceGetAPI with If-Modified-Since"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGetAPIwithIf-Modified-Since")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("ETag",tC.getPropertyValue("DeviceGetETag"));
myTC.setPropertyValue("Last-Modified",tC.getPropertyValue("DeviceGetLastModified"));
myTC.setPropertyValue("Domain_ID",tC.getPropertyValue("Domain_ID"));
myTC.setPropertyValue("Device_ID",tC.getPropertyValue("Device_ID"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("RET_NODE_ACCOUNT_ID_FULL"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("RET_SAML"));
myTC.setPropertyValue("ExpectedReturnCodeGet","200");
myTC.setPropertyValue("ETagResponseType","UnMatch");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>NODE_ID</con:name><con:value>0701</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>0E3F106C56B871A1E05305991F0A01A3</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:0E3F106C56B871A1E05305991F0A01A3</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>0E3F10711FDB71ADE05305991F0A8F7E</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:0E3F10711FDB71ADE05305991F0A8F7E</con:value></con:property><con:property><con:name>Username</con:name><con:value>firstfau_20150204_012516</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZdc6JKEP0rFvuYQkBElIpWoWhivlajmzK+3BqHRibCYJhBzf76nUFl1Zhc732yuu05fWa6+zTXDMVRxXEZg5SThJY2cUSZk3ubSpZSJ0GMMIeiGJjDsTNyHx+cSll30P6IUup7TeWfBhimH/g11Q4qplqtVbA6M4yGavp13zYBBVZVF6GMZdCnjCPKm0pFNyxVr6h6dazbjmU6Rq1sm9ZUKb1AygS2CCmLU1tSG9ZUQs6Xjqat1+vy2iwn6Vyr6LqhTR4fRjiEGCmt6+2N8kRpaxePyz5giCJcxkmsXWtHMdc+c0ZkThHPUtjl8r/KpWt6QxMxPiPzH0pxFvw+DZLc7CCaUIJRRH4j+T6PwMPEL7nRPEkJD+MvL2HoEliFDVaxUaU/FO2Y2oVARwxThlQWImOH9QwBpEAxlH4995vKj8uqlh8dp4iyIEljdmz+Nz5AVxAlS/BVtr/WjtrlgGdeqnUN2OlTHGWMrOBJNusSYWC7agK+HKo0SCEgmwfCRINumGSnHdI7Mbev4ZE5MP5/CnRQnC3IC4oyaL3gd39S136jaN4JnidX7ZnZnlahag3cZk7gMDh3FKXdmidNWTTR9kRs3yfd2Xq0XGQvd+kSt6MkTKZWvdd59dvvNe826Hfgzri9G3hP1qSieeB69tTtPjTCtXWXIuby6QINF9wfvnaHyxrXbq4a9w+JmK4nPljX6qFt6uMbr/o2eZl69xPNxDhb9NZxY9ofaHV9+Mu4N59rK1GnHtwanavF2B+urM4knIU3r2+DpLYYRfQexrfDZnGdA/7Hvv3Mj7LZG2C+N2Ub9L1ST1QJ8e/FTHqIrwZ5qLOU4sM4UK605CmpHU4m5I74jqjh1ta7Zs/QbcPoeW3bcL2ubpm61WgYPd2t9+zuXmS2LE4odhIaEJlLSu62bb4niGNnBiiFVPkGyUMclZ4S/pP+TN2AQ3qksIZ+qLCyrb8EOv1vn1PE+EQGMJmmDeK94IyK63sVP+VSOa/22h7f9VcEF+UslpLQKtHduZYzMU3vqOyXs9Uqk2Lu2HKKUzELmuSh6RVtBDgT8/cxThZAtQJFu0js9jc/TV74jylmPKQjjjjEoltKuXnBdhsBk9utT33YXLo6j1KKQnDY8HO+TiQ2s2T87fLGDpZxwj0QP+sk9YsLnsM6yCPuKZYbJ3QuLSl0H3+HRE5HMSE4EbBEjGiSHoKfAziX/NhZPHLBhfOUzDIOX/9TkrPXVBDGSUZ531Nyx6Ee5Dz5xxKcv0GfYHLJKb5ByL9/hKgkbwEM4suFkRxfrhKHCUA6P9CUXdLPslLrWLV2XciKcSgruuGaxaMcsWt9cn/2HLzTaY+3/gA=</con:value></con:property><con:property><con:name>LicAppID</con:name><con:value>urn%3Adece%3Alicappid%3Aorg%3Adece%3AE49B021A38CC0F36E0401F0A059951E3</con:value></con:property><con:property><con:name>Policy_Class</con:name><con:value>urn:dece:type:policy:ManageAccountConsent</con:value></con:property><con:property><con:name>POLICY_ID</con:name><con:value>urn:dece:policyid:org:dece:E528EAEF108E56B5E0401F0A0799426C</con:value></con:property><con:property><con:name>LIC_APP_ID</con:name><con:value>urn:dece:licappid:org:dece:0E3F1071766371C1E05305991F0A383E</con:value></con:property><con:property><con:name>Domain_ID</con:name><con:value>urn:dece:domainid:dece:0E3F657130141CFCE05307991F0A14F2</con:value></con:property><con:property><con:name>RET_NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:0E3F106C568F71A1E05305991F0A01A3</con:value></con:property><con:property><con:name>RET_NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:0E3F106C569B71A1E05305991F0A01A3</con:value></con:property><con:property><con:name>RET_SAML</con:name><con:value>SAML2 Assertion=nVbZcuo4EP0VynlMGW84YFegigS4ISxJgMn2MiXkBiuxZWPJQPj6kQw4mCzDzJNL7dbp04uOdMlQGJhukzFIOIloaR0GlLmZta6kCXUjxAhzKQqBuRy74+ag75pl3UX7LUqp26orfxu4ghzb0VVPN5FaubCr6rRSw2rNshzHqlWntomEK2MpdCnjiPK6YuqGreqmqlcmetW1LVevli9q+qtSeoSECWzhUtaVHak1qys+57GraavVqryyylEy10xdN7TnQX+MfQiR0rjcZpQFSho7f1z2AEMQ4DKOQu1SK/hceswdkzlFPE1gF8v7KZau6Y4mfDxG5mdKvhe8Lp1F2fIa0YgSjAKyQbI+A+B+5JWawTxKCPfDH5MwdAmswhqr2KjQM0UrUjsRqMAwYUhlPjJ2WCOYQQIUQ+mvUbeunJ3WtWzrJEGUzaIkZMXlf+MDdAlBFIOnsn1aO2qnA35TqcYlYLdLcZAysoShHNYYYWC7bgI+Hap0n8CMrPuEiQFdM8lOO6R3tNxWo0XmwPj/adBBc7YgjyhIofHktD/M26ByOxxbHK/HD71hwIPaqn/H6hmBQ+fMkLd2uzwaynyItjveO+j9ZdTDtHdlGvrdrP1cfeHxZLK52Tzc34x60+mfe9+i58vu2/AZpk9m52lWe6fmfJEurzpx62EcJOP+bTB4Yijpw2oeWo7/fj4ebB6fuX215PepMb/Rbtqbjm0Np3+uhrbT2VgPz2C8PixeZk66ebv1vc1Tr8WfLebP/epIu3ld8d7qPO5tXl4Gf2oLLR6uHtr1PJ0D/kXb/syP0+kbYL5fyjHotkod0SXEfxczaSGeOstc3ViKD+NAudKQu6R2uKmQO+K5oofbtd62OoZ+cW1fOFdVo2m0ddvSbccxOnpTN5rWXmS2LI4oXkd0RmQsKbnbsfmdIA5dBtSDRF1GqVA6pvyC2EIclbp0JA5BRBlMIiHP3ExTbx5VEzv+MGg4qy3ffHtTs2KlNIz4Hb1LmjMOSUGTDb2gySPAJCYghVvONRODzbioxQItUx4Y5SUqU0iFtCdSZV2zUrM1RsI4AMlUCyMvDaAc+3FWGY1tv6aKMMuso/YkO20/5nX8b18C4eMR6cBkLlcg2ghfLhfTtfeJ/JywdZjwHr6ZekQeLFFPnhC8ZVL89Tkmcj7yGREZ7SnnnseGAqp2nFAeyFsSnA96fl0LFRfnvrFvxwKVF+V0uUyzBlSlviUCXpMparqpjQGnQpk+JtE7UC1H0U66BnLiR8Fze5Fiyn065ohDKCamlC1PuPfHwOS93xWjvj71UVEIKUrHYc2/s10H4s0iGf/6rMEuln7CfC8+qyjxPjv2DdZBHJGnuPY5oXO5klfAxw9zgSMBS4R4Rckh+HcA3wUvGvMi51y4GKhpyuHnPyWpSnUFYRyllHdbSmY4VMqMJ/+Iwf10+gKTiXH+OiP//jxTSTYCGMSbjpEMX16yrjwCdH6gtrug3wturfOb4BbZNb6Yv1oO6nQ8441/AA==</con:value></con:property><con:property><con:name>Device_ID</con:name><con:value>urn:dece:deviceid:org:dece:235722</con:value></con:property><con:property><con:name>DeviceGetETag</con:name><con:value>"0E3F7BD8C8996D0EE05307991F0A3BB7:14A5CC22"</con:value></con:property><con:property><con:name>DeviceGetLastModified</con:name><con:value>Wed, 04 Feb 2015 07:53:27 GMT</con:value></con:property><con:property><con:name>licappapplication</con:name><con:value>appid-hKqnPMNYWHC88</con:value></con:property><con:property><con:name>licappserial</con:name><con:value>ec825582-7a9d-46ce-8788-180b9ed724e9</con:value></con:property><con:property><con:name>licappModel</con:name><con:value>model-3A65F92B71184</con:value></con:property><con:property><con:name>licappManufacturer</con:name><con:value>manfact-9728817886467</con:value></con:property><con:property><con:name>licappapplication_1</con:name><con:value>appid-hKqnPMNYWHC88</con:value></con:property><con:property><con:name>ORG_ID</con:name><con:value>urn:dece:org:org:dece:o:700031</con:value></con:property><con:property><con:name>DRM_ID</con:name><con:value>urn:dece:drm:adobe:3.0</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>ccdf09f0-c034-47f6-8cdf-76797af3f771</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>7eb68f58-93ef-4e73-98fe-f10cbdf6193b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>1ad7f9ca-219a-4dce-ba00-8f7d6fd3daca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>26e61b63-18ea-4c73-8766-0f86596b334c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f186da08-3084-424e-86a3-715f74852dcb</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b366a31b-3fe4-40cb-bf60-511d058b5006</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>fb816b02-7683-4d99-bb4b-cf125fa3929a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ac873847-e90b-4383-ab11-0c1aaaaf9062</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c494304a-84c9-4315-9a20-17dc3987a96c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>1a59d0c7-09ee-4d62-be13-45ee5e3837d7</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f5dd8344-0ea2-43d4-9cff-5da64a0fd9b7</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f2863592-56c1-4318-876d-0d753302dd98</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>41558b94-91a9-467a-bbd0-00b4ac37f5a5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="00025_DeviceGetCacheScenario_NonCS_DeviceGet_LegacyDeviceUpdateDeviceGet_200_OK" searchProperties="true" id="3e007e95-122b-418d-9948-c22474b36aa3"><con:settings/><con:testStep type="groovy" name="Set Coordinator Schema to Leading version" id="e4849d89-3a75-4189-9be5-e25cedbf0934"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("versionMinor",tP.getPropertyValue("currentVersionMinor"));
tP.setPropertyValue("versionMajor",tP.getPropertyValue("currentVersionMajor"));

tP.setPropertyValue("CoordinatorSchema", tP.getPropertyValue("CoordinatorSchema_"+ tP.getPropertyValue("versionMinor")));

log.info "CoordinatorSchema set to .... :  " + tP.getPropertyValue("CoordinatorSchema")</script></con:config></con:testStep><con:testStep type="groovy" name="Call AccountCreate API"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("AccountCreateAPI")

tP.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeidRTL"));

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call FirstUserCreateAPI"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("FirstUserCreateAPI")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call STSCreateandGetAPI"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("STSCreateandGetAPI")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("Username",tC.getPropertyValue("Username"));
myTC.setPropertyValue("audience","");


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

tC.setPropertyValue("RET_NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("RET_NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("RET_SAML",tC.getPropertyValue("SAML"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call TOUPolicyCreateAPI"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("TOUPolicyCreateAPI")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call MUCPolicyCreateAPI"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("MUCPolicyCreateAPI")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call STSCreateandGetAPI for Device" id="ac9794da-491e-4eee-b737-c82fa6c64f2e"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("STSCreateandGetAPIforDevices")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("Username",tC.getPropertyValue("Username"));

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call LicAppCreateAPI" id="37ccd7ed-a74e-410c-b370-fccdca16c6a2"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("LicAppCreateAPI")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML"));

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call LicAppGetAPI" id="3d5c8652-71b0-48e8-a3f3-e52a45c6d815"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("LicAppGetAPIforDevice")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("LIC_APP_ID",tC.getPropertyValue("LIC_APP_ID"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML"));

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call LegacyDeviceCreateAPI" id="7a4e0c6a-a45b-40c3-9765-09cf780e6762"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("LegacyDeviceCreateAPI")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("SAML",tC.getPropertyValue("RET_SAML"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("RET_NODE_ACCOUNT_ID_FULL"));
myTC.setPropertyValue("ExpectedReturnCodeCreate","201");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call DeviceGetAPI"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGetAPI")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("Domain_ID",tC.getPropertyValue("Domain_ID"));
myTC.setPropertyValue("Device_ID",tC.getPropertyValue("Device_ID"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("RET_NODE_ACCOUNT_ID_FULL"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("RET_SAML"));
myTC.setPropertyValue("ExpectedReturnCodeGet","200");
myTC.setPropertyValue("ETagResponseType","UnMatch");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call LegacyDeviceUpdateAPI" id="afc071e1-4f80-4df0-ac4f-6c2b116ed586"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("LegacyDeviceUpdateAPI")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("SAML",tC.getPropertyValue("RET_SAML"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("RET_NODE_ACCOUNT_ID_FULL"));
myTC.setPropertyValue("Device_ID",tC.getPropertyValue("Device_ID"));
myTC.setPropertyValue("ExpectedReturnCodeUpdate","200");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call again DeviceGetAPI"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGetAPI")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("Domain_ID",tC.getPropertyValue("Domain_ID"));
myTC.setPropertyValue("Device_ID",tC.getPropertyValue("Device_ID"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("RET_NODE_ACCOUNT_ID_FULL"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("RET_SAML"));
myTC.setPropertyValue("ExpectedReturnCodeGet","200");
myTC.setPropertyValue("ETagResponseType","UnMatch");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>NODE_ID</con:name><con:value>0701</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>0E3F7C15D76150BAE05305991F0A172A</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:0E3F7C15D76150BAE05305991F0A172A</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>0E3F7C3AEF305099E05305991F0AA50F</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:0E3F7C3AEF305099E05305991F0AA50F</con:value></con:property><con:property><con:name>Username</con:name><con:value>firstfau_20150204_012550</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZdb+o4EP0rKH1EIQ6B0kQFKXzdsi1wS1pK+7IyjgNug01tB2h//doBcgOlXXYlpDCT8Zljz8xxrgVcxGXPFwJzSRgtbBYxFV7qrRsJpx6DggiPwgUWnkRe4PfvvHIJeHC/xCj02nXjbxdAULUdZDohgGYFu47pYuSabmijaS1CEMCKChUiwT0qJKSybpSBXTVB2QSVB1Dzqo76lYANXozCGHOhsFVICRg7UhtRN+ZSLj3LWq/XpbVTYnxmlQGwrUn/LkBzvIBG43q7ozQRb+ziUSnECMcxKiG2sK6tg5jrUHgBmVEoE453ucLvcgELuJaKCQWZXRjZWhz2aMRSswUpowTBmHxCfT59LOcsLPjxjHEi54tvN2EDDWziDTKRXaEXhnVI7UygA4ZcQFPMob3DGuEIc0wRLjyOenXj4ryqpUsfOKQiYnwhDs3/xgfTFY7ZEoem2G9rR+18wBMn1bjGyOtRFCeCrPBAN+sSIix21cTofKjCb44jsrkjQjXoRmh2Vp7ekbk9jTaZYSH/T4FyxdmCjGGc4Ibz66kFXiOHffLwrUtG0dQZ36zmT2zwVk8J5INTR1barXnUlFkTbVeMmQzu0bBW6cvncSUo/nVfHD2P7elk2AegDa8GdAifb16nRYgm/vJzuAZPt6PH8KXZr96++k3b79rF1818JF7WV4vwfX53mTjrAIHW4NaNmr6klc8b8tkcJO1mez6XzwMQ2JP4anY/Wg17nWKn5Ux4Nx521zPSCfHkvT/qBWgGmVOOLv2Px/YvKynfUgdWxqyebSfH/9C3n/kgmb5iJPemboNeu9BVVYLyZzHTHhKaURrqLbX4CImpNBp6ldYOL1FyR0JP1XBrg47TrbUcv9N1QBW4bgdU1R/XtbvA96uguxeZLYsjii1GI6Jzacndts3PBNHCm2LIMTd+QGpDCQsDJod0yP1IYn6gsDbIK6xu62+Bjt/tc6qYkOgAodM0sTovfELFK3sVP+ZSPq321h7fD1cEZeXMLiWlVaq7Uy0XapreYSksJatVosXcq+kp5moWLM3DAmUrwChR8/fxwN4wtTIU6yyx2+/8OHnmP6SYyDkNJJR4obqlkJpn3G4BFvp269EQb869Og9SqkJIvJGnfK1Y3cya8Y+XN/KQjlPu3+qxZjzMNngKK5dH7VNdbpLQmba00H38GRI9HdmEIKZgiRpRxvPgpwBOJT90ZoeccZGSk2ki8fdvCnr26gZEiCVU9tpG6sjrQcpTfiyx9yfoC0wqOdk3CPn3jxCTpC2AsPpyESTF11eJJxQgneU0ZZf0q6zY1Xbt0q6Cpp+XFbtW9rNDOWDX+OL+6smd03GPN/4B</con:value></con:property><con:property><con:name>LicAppID</con:name><con:value>urn%3Adece%3Alicappid%3Aorg%3Adece%3AE49B021A38CC0F36E0401F0A059951E3</con:value></con:property><con:property><con:name>Policy_Class</con:name><con:value>urn:dece:type:policy:ManageAccountConsent</con:value></con:property><con:property><con:name>POLICY_ID</con:name><con:value>urn:dece:policyid:org:dece:E58FD88106DA5C3EE0401F0A07995A32</con:value></con:property><con:property><con:name>LIC_APP_ID</con:name><con:value>urn:dece:licappid:org:dece:0E3F7BD8C8A76D0EE05307991F0A3BB7</con:value></con:property><con:property><con:name>Domain_ID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:domainid:dece:0E3F721FF36D1D08E05307991F0AB2EC</con:value></con:property><con:property><con:name>RET_NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:0E3F7C124C5850B0E05305991F0A4002</con:value></con:property><con:property><con:name>RET_NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:0E3F7C32090D50A3E05305991F0A06C3</con:value></con:property><con:property><con:name>RET_SAML</con:name><con:value>SAML2 Assertion=nVZbU/I6FP0rTH10StMLajvCDBdRGBWl6Pnw5UxINxBtU2hSbr/+JAUqxcvhnKdOdnfWXvuSlVxzHIWWV+ccEkFjVlpFIeNeZq1qacK8GHPKPYYj4J4gnl9/uPesMvLwfotW6rSq2t/gWJdAnEvdRHChOzAe6Rhdubo9tjC4tn0FlitdOU+hw7jATFQ1C5kVHVk6cgbo0qvYnoPKl675ppVeIeESW7qUkbYjteJVbSrEzDOM5XJZXtrlOJkYFkKm8efh3idTiLBWu95mlAVKajt/Ug6AQBiSMokj49oo+FwH3PPphGGRJrCLFfwUCxnINaRPwOnkTMv3QtBh4zhbNjGLGSU4pBus6vMAYhoHpXo4iRMqptGPSZhIAeuwIjoxHXamGUVqJwIVGCYc63yKzR1WH8aQACNQeul3qtrZaV3Ltg4SzPg4TiJeXP43PsAWEMYzCHS+T2tH7XTAbypVuwbidRgJU04X8KiGdYYJ8F03gZwOVXpKYExX95TLAV1xxc44pHe03FajRSfAxf9p0EFztiCvOEyhFo3gzW7d9/pP70Gwed4E3Su3d+HAbDWpZgQOnTND3trt8mgo8yHa7ngd0vksfry9XbWR335oYMceGekdrD4EtdOOOI/G5xdodN5rvU8X02EPHu6Wi/sGndut7sfr+mbjG93nAXpMzLc7uiYX88eP8PmWuN3b0Rtp95+NxqLurp3wyR+dtzoUn9t+cwjuw1z4f/rOAKP5XWUYvKxtc8CGYrnpvNx0G6m7vqLTjT9+HqWD99Ga9AZ/dYfVPJ0D/kXb/sz76egdiNgv1Rh0WqW27BIWv4uZstBAH2eu3kyJDxfAhFZTu5R2eKmUOxp4sofbNbqx25dN20IualVQ3b5BFRtVXNdsozq6aNp7kdmyOKLYjNmYqlhKcrdj8ztBEnkcWACJvohTqXRc+wWxhQUudVhfHoKYcRjEUp5NF1PTnrsBCkMzDKMEu0ssPjZLrfQYix7rJfWxgKSgySYqaHIfCJ1RUMKt5prLweZC1mKOF6kIzfIClxmkUtoTpbKe5VxVDE6jWQiKqRHFQRpCeTadZZUx+PZr6ZjwzNq/GWSn7ce8jv/tSyB9AqocuMqlAbKN8M3lYu8T+Tlh+zDhPXw9Dag6WLKeIqFky6T463NM1HzkMyIz2lPOPY8NBVTjOKE8ULCgJB/0/LqWKi7PfW3fjjkuz8vpYpFmDbhU+pZIeEOlaCDL8IGkUpnWg/gDmJGjGCddAznxo+C5vUgxFVPmCywgkhNTypYn3Ps+cHXvd+Sor059VBRCytIJWInvbM1QvlkU41+fNcQjyk+an+RnGSfBZ8e+wTqII/OU176gbKJW6gpY/zAXJJawVIpXnByCfwfwXfCiMS9yzkXIgRqlAn7+U1KqVNUwIXHKRKelZYZDpcx4ivUMvE+nLzCZGOevM/rvzzOdZiNAQL7pOM3w1SXrqSPAJgdquwv6VXBNy2lWriqogQ4F10HIyotSYFf7Yv5qOajT8YzX/gE=</con:value></con:property><con:property><con:name>Device_ID</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">urn:dece:deviceid:org:dece:928400</con:value></con:property><con:property><con:name>DeviceGetETag</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">"0E3F7BFEAB5850B2E05305991F0AE1D0:FA2B4A25"</con:value></con:property><con:property><con:name>DeviceGetLastModified</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Wed, 04 Feb 2015 07:54:09 GMT</con:value></con:property><con:property><con:name>licappapplication</con:name><con:value>appid-hKqnPMNYWHC88</con:value></con:property><con:property><con:name>licappserial</con:name><con:value>ec825582-7a9d-46ce-8788-180b9ed724e9</con:value></con:property><con:property><con:name>licappModel</con:name><con:value>model-3A65F92B71184</con:value></con:property><con:property><con:name>licappManufacturer</con:name><con:value>manfact-9728817886467</con:value></con:property><con:property><con:name>licappapplication_1</con:name><con:value>appid-hKqnPMNYWHC88</con:value></con:property><con:property><con:name>ORG_ID</con:name><con:value>urn:dece:org:org:dece:o:700031</con:value></con:property><con:property><con:name>DRM_ID</con:name><con:value>urn:dece:drm:adobe:3.0</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>ccdf09f0-c034-47f6-8cdf-76797af3f771</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>7eb68f58-93ef-4e73-98fe-f10cbdf6193b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>1ad7f9ca-219a-4dce-ba00-8f7d6fd3daca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>26e61b63-18ea-4c73-8766-0f86596b334c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f186da08-3084-424e-86a3-715f74852dcb</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b366a31b-3fe4-40cb-bf60-511d058b5006</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>fb816b02-7683-4d99-bb4b-cf125fa3929a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>7a4e0c6a-a45b-40c3-9765-09cf780e6762</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>afc071e1-4f80-4df0-ac4f-6c2b116ed586</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e4849d89-3a75-4189-9be5-e25cedbf0934</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="00026_DeviceGetCacheScenario_NonCS_DeviceGet_LegacyDeviceUpdate_DeviceGet(If-None-Match)_200_OK" searchProperties="true" id="cb0f033a-b286-490d-b938-5864fc395bd4"><con:settings/><con:testStep type="groovy" name="Set Coordinator Schema to Leading version" id="3271e06a-0fda-41b6-b822-770ab04c30e5"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("versionMinor",tP.getPropertyValue("currentVersionMinor"));
tP.setPropertyValue("versionMajor",tP.getPropertyValue("currentVersionMajor"));

tP.setPropertyValue("CoordinatorSchema", tP.getPropertyValue("CoordinatorSchema_"+ tP.getPropertyValue("versionMinor")));

log.info "CoordinatorSchema set to .... :  " + tP.getPropertyValue("CoordinatorSchema")</script></con:config></con:testStep><con:testStep type="groovy" name="Call AccountCreate API"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("AccountCreateAPI")

tP.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeidRTL"));

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call FirstUserCreateAPI"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("FirstUserCreateAPI")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call STSCreateandGetAPI"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("STSCreateandGetAPI")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("Username",tC.getPropertyValue("Username"));
myTC.setPropertyValue("audience","");


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

tC.setPropertyValue("RET_NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("RET_NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("RET_SAML",tC.getPropertyValue("SAML"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call TOUPolicyCreateAPI"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("TOUPolicyCreateAPI")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call MUCPolicyCreateAPI"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("MUCPolicyCreateAPI")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call STSCreateandGetAPI for Device"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("STSCreateandGetAPIforDevices")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("Username",tC.getPropertyValue("Username"));

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call LicAppCreateAPI"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("LicAppCreateAPI")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML"));

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call LicAppGetAPI"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("LicAppGetAPIforDevice")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("LIC_APP_ID",tC.getPropertyValue("LIC_APP_ID"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML"));

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call LegacyDeviceCreateAPI"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("LegacyDeviceCreateAPI")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("SAML",tC.getPropertyValue("RET_SAML"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("RET_NODE_ACCOUNT_ID_FULL"));
myTC.setPropertyValue("ExpectedReturnCodeCreate","201");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call DeviceGetAPI"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGetAPI")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("Domain_ID",tC.getPropertyValue("Domain_ID"));
myTC.setPropertyValue("Device_ID",tC.getPropertyValue("Device_ID"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("RET_NODE_ACCOUNT_ID_FULL"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("RET_SAML"));
myTC.setPropertyValue("ExpectedReturnCodeGet","200");
myTC.setPropertyValue("ETagResponseType","UnMatch");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call LegacyDeviceUpdateAPI"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("LegacyDeviceUpdateAPI")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("SAML",tC.getPropertyValue("RET_SAML"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("RET_NODE_ACCOUNT_ID_FULL"));
myTC.setPropertyValue("Device_ID",tC.getPropertyValue("Device_ID"));
myTC.setPropertyValue("ExpectedReturnCodeUpdate","200");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call again DeviceGETAPIwithIf-None-Match"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGetAPIwithIf-None-Match")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
myTC.setPropertyValue("ETag",tC.getPropertyValue("DeviceGetETag"));

myTC.setPropertyValue("Domain_ID",tC.getPropertyValue("Domain_ID"));
myTC.setPropertyValue("Device_ID",tC.getPropertyValue("Device_ID"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("RET_NODE_ACCOUNT_ID_FULL"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("RET_SAML"));
myTC.setPropertyValue("ExpectedReturnCodeGet","200");
myTC.setPropertyValue("ETagResponseType","UnMatch");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>NODE_ID</con:name><con:value>0701</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>0E3F7BD90F3B50B8E05305991F0AC89D</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:0E3F7BD90F3B50B8E05305991F0AC89D</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>0E3F7BFD942B5095E05305991F0AC8D4</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:0E3F7BFD942B5095E05305991F0AC8D4</con:value></con:property><con:property><con:name>Username</con:name><con:value>firstfau_20150204_012628</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVbbcuI4EP0VynlMGV/AXFyBKsBhxrlB4gRm8rKlyG0ssGWwZC779SsZ8AAhWXbzkuqmdfpI3X3aNwzFkWl3GIOUk4SW1nFEmZ17W0qWUjtBjDCbohiYzbHtdR4fbLOs22h/RCm5Tkv5qx7UxJ9hqr7ZaKpVqILaALOp4mYD+1alXsOVhghlLAOXMo4obymmbliqbqp69VWv21bVNutlq269K6URpExgi5CyruxIrVlLCTmf25q2Wq3Kq0o5SSeaqeuG9uvxwcMhxEhp32xvlCdK27t4XPYBQxThMk5i7UY7irnxme2RCUU8S2GXy/8ql67pTU3E+IxMrpTiLPguDZLc7CGaUIJRRP5G8n0egYeJX+pEkyQlPIy/vIShS2AV1ljFRpVeKdoxtQuBjhimDKksRMYO6wUCSIFiKL29uC3l6rKq5UdfU0RZkKQxOzb/Gx+gS4iSOfgq219rR+1ywDMv1b4BbLsURxkjS3iSzTpHGNiumoAvhyoNUwjI+oEw0aBrJtlph/ROzO1rOGQCjP+fAh0UZwsyQlEG7Q3xxyEgL1y904gN765dc3J396PxnuFWTuAwOHcUpd2aJ01ZNNH2RFgfzsPl786ywerObXBb057TRnNANjQazcZdY7wczSGZBy/Xw0U4TyKv9vQyffaebt9iA3d7znD68aI9rTbLTK+89bq/Kr/dERnP44E2ncZ9hy/Hb8+19f17eE2onsyu72fJFC1+BOa06t4PB6Mh43e9wWa6tnqz9OHndJFB0p9Va+OfFtC5gQy8MRfT+2vPclvFdQ74H/v2M+9lH1PAfG/KNnCdUl9UCfHvxUx6iK8Geag9l+LDOFCutOUpqR12JuSO+Lao4dbWbyv9erfvNKtm19Kb1q1uVXSr2TT6eqfXcKp7kdmyOKHYS2hAZC4pudu2+Z4gju0PQCmkyjdIDuKo9JTwAR2knYBDeqSwhn6osLKtvwQ6/W2fU8T4RAYwmaYL4r3gjIobexU/5WKeV3ttj9/xlwQX5SyWktAq0d25ljMxTQtU9svZcplJMbfrcopTMQua5KHppuYBzsT8bV6TGVCtQNEuErv9zU+TF/5jihkPqccRh1h0Syk3L9huHjC53Vzqw/rS1XmUUhSCw5qf8/UisZkl42+XN7axjBPuofi3SlK/uOA5rIM84p5iuXFCJ9KSQrf5MyRyOooJwYmAJWJEk/QQ/BzAueTHzuKRCy6cp+Qj4/D1LyU5ey0FYZxklLuOkjsO9SDnyTdzsP8EfYLJJaf4BiH//hGikrwFMIgvF0ZyfLlKbCYA6eRAU3ZJP8uK09T7FSEr3caxrDSd4lGO2LU/uT97Dt7ptMfb/wA=</con:value></con:property><con:property><con:name>LicAppID</con:name><con:value>urn%3Adece%3Alicappid%3Aorg%3Adece%3AE49B021A38CC0F36E0401F0A059951E3</con:value></con:property><con:property><con:name>Policy_Class</con:name><con:value>urn:dece:type:policy:ManageAccountConsent</con:value></con:property><con:property><con:name>POLICY_ID</con:name><con:value>urn:dece:policyid:org:dece:E58FD88106DA5C3EE0401F0A07995A32</con:value></con:property><con:property><con:name>LIC_APP_ID</con:name><con:value>urn:dece:licappid:org:dece:0E3F7BD90F3F50B8E05305991F0AC89D</con:value></con:property><con:property><con:name>Domain_ID</con:name><con:value>urn:dece:domainid:dece:0E3F657130161CFCE05307991F0A14F2</con:value></con:property><con:property><con:name>RET_NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:0E3F7BCE49935093E05305991F0A470B</con:value></con:property><con:property><con:name>RET_NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:0E3F7C61BFD55097E05305991F0AB8F3</con:value></con:property><con:property><con:name>RET_SAML</con:name><con:value>SAML2 Assertion=nVbZcuo4EP0VynlMGW+YxRWoYs1AQhYgNyQvU0KWsRIjgSUbnK8fyYCDCWSYeXKp3eo+3X10pBsGFoHpNBlDIceUFDaLgDAntdaVKCQOBQwzh4AFYg6Hzrg5vHfMou6A/Ral0O/Ulb/tSgnZcFZTy3rFUkvlGVRndhWoJViqVmyvbJc8U7gyFqE+YRwQXldM3bBV3VT10kSvOHbJMapFw7DflcIfFDIRW7gUdWUHasPqis/50tG09XpdXFtFGs41U9cNbTq8H0MfLYDSuNlWlCYKGzt/WHQRREEAi5AutBst53PjMmeM5wTwKES7XO65XLqm1zTh4zI8v1KyvcjtE4+myzYglGAIAvwFZH+GiPvULTSDOQ0x9xdnizB0GVhFG6hCo0SuFC0P7cJAOYQhAyrzgbGLNUIeChGBqPAy6teVq8umlm6dhIAwj4YLll/+NzyIxCigS+SqbF/WDtrlAU90qnGDoNMnMIgYjtGDJOsSQMR200Tw8lCFpxB5eHOPmSDohkl02iG8o+W2Gx08R4z/nwEdDGcb5A8IItSIp+PpVLeaBkjC8sBYuesEtL0a/my91VMAh86pIRvtdnlEyoxE2x3JfY/z5ih5WHlfyVd3/PJ+e1c27157o2SYDAbP7915gl7hYKFVEv/6627YHa6eurP3p36HdYVfd1X5fK/i0d1t6y89eetdvzxXTVrhr7cbDQ5erLdwsLYtEFofs5VdjtrxI4cB9h+aZe533TsSe9ezp35r9eW/rNamd82X2mpsTnq1B3D9ug7bz96Uf1isx6fP9aycA/x52/7Mj6PZB4J8v5Q06HcKPTElwH8XM2nBruqlrs5Sig/jiHClIXdJ7XAiIXfYdcQMt2u9a/Uq7bLR6nVsW69Vurpt6XatZvT0Zqvas/Yis0VxBLFNiYdlLim5W9r8DhAuHIaIi0I1ppFQOqb8ErEDOCj0yUgcAkoYmlAhz9xfz+0NDSzAieHFG2jbHz5dUqYUHih/JI9h0+MozGmyoec0eYQgXmIkhVvymgliMy56sQJxxAOjGIMiQZGQ9lCqrGOWqrbG8GIZIIlUW1A3ClBx6S/Tzmhs+zVVAFlqHXUn6Wk7W9fxv30LhI+LpQOTtbSQGCM6cbno+0LOF2wdFrwP34xcLA+W6CcPMdwiyf/6ponkR8YRUdEecuZ5bMhF1Y4LyhK5MYYZ0bPrWqi4OPeN/ThWoLgqRnEcpQOoSH0LRXhNlqjppjZGMBLKlEzoJyJaFkW76BrIgB8lz+x5iBH3yZgDjhaCMYV0ecG9P0ZM3vt9QfXNpY+KXErROo42/JStHYg3i0T867MGOlD6CfOT+Kxp6H5P7ESsgzyiTnHtc0zmciWvgOQMLyAVYbEQLxoeBj8V4FTyvDFrcoaFC0LNIo7O/ylIVaorAEIaEd7vKKnhUClTnDxZIufb6UeYVIyz1xn+9+eZilMKQCTedAyn8eUl68gjQOYHartL+kNwW+1uqVazhOBah4JbquitrCk5dI0f5p+Wgz4dc7zxDw==</con:value></con:property><con:property><con:name>Device_ID</con:name><con:value>urn:dece:deviceid:org:dece:964891</con:value></con:property><con:property><con:name>DeviceGetETag</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">"0E3F7BCE49AD5093E05305991F0A470B:D2C57A94"</con:value></con:property><con:property><con:name>DeviceGetLastModified</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Wed, 04 Feb 2015 07:54:38 GMT</con:value></con:property><con:property><con:name>licappapplication</con:name><con:value>appid-hKqnPMNYWHC88</con:value></con:property><con:property><con:name>licappserial</con:name><con:value>ec825582-7a9d-46ce-8788-180b9ed724e9</con:value></con:property><con:property><con:name>licappModel</con:name><con:value>model-3A65F92B71184</con:value></con:property><con:property><con:name>licappManufacturer</con:name><con:value>manfact-9728817886467</con:value></con:property><con:property><con:name>licappapplication_1</con:name><con:value>appid-hKqnPMNYWHC88</con:value></con:property><con:property><con:name>ORG_ID</con:name><con:value>urn:dece:org:org:dece:o:700031</con:value></con:property><con:property><con:name>DRM_ID</con:name><con:value>urn:dece:drm:adobe:3.0</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>ccdf09f0-c034-47f6-8cdf-76797af3f771</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>7eb68f58-93ef-4e73-98fe-f10cbdf6193b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>1ad7f9ca-219a-4dce-ba00-8f7d6fd3daca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>26e61b63-18ea-4c73-8766-0f86596b334c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f186da08-3084-424e-86a3-715f74852dcb</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b366a31b-3fe4-40cb-bf60-511d058b5006</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>fb816b02-7683-4d99-bb4b-cf125fa3929a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>7a4e0c6a-a45b-40c3-9765-09cf780e6762</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>afc071e1-4f80-4df0-ac4f-6c2b116ed586</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>3271e06a-0fda-41b6-b822-770ab04c30e5</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="00027_DeviceGetCacheScenario_NonCS_DeviceGet_LegacyDeviceUpdate_DeviceGet(If-Modified-Since)_200_OK" searchProperties="true" id="996e114b-3a4f-4333-baac-d34d305bd206"><con:settings/><con:testStep type="groovy" name="Set Coordinator Schema to Leading version" id="5e1c38a1-c24a-498c-9cfe-d0af27e4d3d2"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("versionMinor",tP.getPropertyValue("currentVersionMinor"));
tP.setPropertyValue("versionMajor",tP.getPropertyValue("currentVersionMajor"));

tP.setPropertyValue("CoordinatorSchema", tP.getPropertyValue("CoordinatorSchema_"+ tP.getPropertyValue("versionMinor")));

log.info "CoordinatorSchema set to .... :  " + tP.getPropertyValue("CoordinatorSchema")</script></con:config></con:testStep><con:testStep type="groovy" name="Call AccountCreate API"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("AccountCreateAPI")

tP.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeidRTL"));

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call FirstUserCreateAPI"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("FirstUserCreateAPI")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call STSCreateandGetAPI"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("STSCreateandGetAPI")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("Username",tC.getPropertyValue("Username"));
myTC.setPropertyValue("audience","");


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

tC.setPropertyValue("RET_NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("RET_NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("RET_SAML",tC.getPropertyValue("SAML"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call TOUPolicyCreateAPI"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("TOUPolicyCreateAPI")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call MUCPolicyCreateAPI"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("MUCPolicyCreateAPI")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call STSCreateandGetAPI for Device"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("STSCreateandGetAPIforDevices")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("Username",tC.getPropertyValue("Username"));

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call LicAppCreateAPI"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("LicAppCreateAPI")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML"));

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call LicAppGetAPI"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("LicAppGetAPIforDevice")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("LIC_APP_ID",tC.getPropertyValue("LIC_APP_ID"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML"));

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call LegacyDeviceCreateAPI"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("LegacyDeviceCreateAPI")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("SAML",tC.getPropertyValue("RET_SAML"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("RET_NODE_ACCOUNT_ID_FULL"));
myTC.setPropertyValue("ExpectedReturnCodeCreate","201");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call DeviceGetAPI"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGetAPI")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("Domain_ID",tC.getPropertyValue("Domain_ID"));
myTC.setPropertyValue("Device_ID",tC.getPropertyValue("Device_ID"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("RET_NODE_ACCOUNT_ID_FULL"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("RET_SAML"));
myTC.setPropertyValue("ExpectedReturnCodeGet","200");
myTC.setPropertyValue("ETagResponseType","UnMatch");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call LegacyDeviceUpdateAPI"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("LegacyDeviceUpdateAPI")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("SAML",tC.getPropertyValue("RET_SAML"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("RET_NODE_ACCOUNT_ID_FULL"));
myTC.setPropertyValue("Device_ID",tC.getPropertyValue("Device_ID"));
myTC.setPropertyValue("ExpectedReturnCodeUpdate","200");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call again DeviceGETAPIwithIf-Modified-Since"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGetAPIwithIf-Modified-Since")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("ETag",tC.getPropertyValue("DeviceGetETag"));
myTC.setPropertyValue("ETag",tC.getPropertyValue("DeviceGetETag"));

myTC.setPropertyValue("Domain_ID",tC.getPropertyValue("Domain_ID"));
myTC.setPropertyValue("Device_ID",tC.getPropertyValue("Device_ID"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("RET_NODE_ACCOUNT_ID_FULL"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("RET_SAML"));
myTC.setPropertyValue("ExpectedReturnCodeGet","200");
myTC.setPropertyValue("ETagResponseType","UnMatch");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>NODE_ID</con:name><con:value>0701</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>0E3F7C61BFF45097E05305991F0AB8F3</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:0E3F7C61BFF45097E05305991F0AB8F3</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>0E3F7BD7225F509FE05305991F0AFDB1</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:0E3F7BD7225F509FE05305991F0AFDB1</con:value></con:property><con:property><con:name>Username</con:name><con:value>firstfau_20150204_01274</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZRU+o6EP4rTH10StOWCnSEmULtFVSOinLVlzshXSDYptCkAv76kxToAUQv9z4xu2y+/ZLd/baXHMeR5XqcQypowkrLOGLczb0NLUuZm2BOuctwDNwVxO17d7euVUYu3h7RSh2/of0zrNfqll0Z6o7tEL1iY0fHVRP0ENnIdnA4RENLhnKeQYdxgZloaBYyHR1ZOqo8oarrOC6yyhdW7U0rDSDlEluGlJG2IbXkDW0ixMw1jMViUV7Y5SQdGxZCpvFyd9snE4ix1rxc3yhPlDY38aQcAoEoImWSxMalsRdzGXK3T8cMiyyFTa7wu1zIQHVDxoScjs+04iyEHTZKcrONWcIowRH9xOp97kBMkrDkReMkpWISf3sJEylgHZZEJ2aFnWnGPrUTgfYYphzrfILNDdYjjCAFRqD0/NhpaGenVS0/+pRixkdJGvN987/xAfYBUTKDUOfba22onQ545KWal0DcDiNRxukH9FSzzjABvqkmkNOhSvcpjOjylnLZoEuu2Bm79A7M9Wv4dAxc/J8C7RRnDTLAUQbNv7zhuMYnL730Yvjqr/Bkuaxk8UV7Fr42cgK7wbmjKO3aPGjKoonWJx6qbeP5atC6mWVXfq93Hie9m7jbdeZXAz6Fwat3500nn3O44ZNKdTi3r1feIkFv/sz/O3h5m3rVyfgVxDSa3hnJudNvzWstMPph9/p5AM/OfXxbmc2m85r96Rvdx4Sxeq0fdLyov+Sr59AygveHkMczWa7R+9PSWKQLz7x/Q11m0/Sh1j3vXp+bZAX35g1HjeI6O/z3fduZ72fDKRCxNVUbdPxSIKuExc9ipjw01Ed5qDtT4sMFMKE11SmlHW4m5Y6Grqzh2kZXdlBt+VXLcgIH1YMr5NjIqdfNAHmB3zK3IrNmcUCxnbARVbmU5K7b5meCJHaHgFNItR+QfCxwqZeIX+xX6o0EpHsKa6JdhVVt/S3Q4X/bnDImpCqAqzQtkO8FX1S84jpbFT/kYh1Xe2OL74UflBTlLJaS1CrZ3bmWczlNc1wOy9nHR6bE3K2qKU7lLBiKh4Esow8kk/O3ekregRkFinGS2G1vfpi88O9TzMSE9QUWEMtuKeXmCdutD1xttw4LYXnq6txLKQshYCmO+dqR3MyK8Y/Lm7hExUn3vfxZJGlYXPAY1k4eeU+53ARlY2UpoVv9GRI1HcWEkETCUjmiSboLfgzgWPJ9Z/HIBRchUjrMBHz/T0nNXkPDhCQZEx1fyx27epDzFKsZuH+CvsDkklN8g9B//wjRad4CBOSXC6c5vlolLpeAbLyjKZukX2SlfWG2gqAiZaW6KyutWmAXj7LHrvnF/dWz806HPd78DQ==</con:value></con:property><con:property><con:name>LicAppID</con:name><con:value>urn%3Adece%3Alicappid%3Aorg%3Adece%3AE49B021A38CC0F36E0401F0A059951E3</con:value></con:property><con:property><con:name>Policy_Class</con:name><con:value>urn:dece:type:policy:ManageAccountConsent</con:value></con:property><con:property><con:name>POLICY_ID</con:name><con:value>urn:dece:policyid:org:dece:E58FD88106DA5C3EE0401F0A07995A32</con:value></con:property><con:property><con:name>LIC_APP_ID</con:name><con:value>urn:dece:licappid:org:dece:0E3F7BD90F5650B8E05305991F0AC89D</con:value></con:property><con:property><con:name>Domain_ID</con:name><con:value>urn:dece:domainid:dece:0E3F721FF36F1D08E05307991F0AB2EC</con:value></con:property><con:property><con:name>RET_NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:0E3F7C14521450B4E05305991F0A9DD7</con:value></con:property><con:property><con:name>RET_NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:0E3F7BFD94315095E05305991F0AC8D4</con:value></con:property><con:property><con:name>RET_SAML</con:name><con:value>SAML2 Assertion=nVZrb+o4EP0rKPdjlXfCIypIgbRdSmlZ6Gvvl5VxDLgkdoidAP31awdICX0su1Ir5Ml45szM8bEvGYgjy/MZQynHlNQ2cUSYV1jbSpYSjwKGmUdAjJjHoTfxh3eepRkeOGxRav2grfztTq2G2wKhCp2poToImmoTupbqQrfuwlndss2pcGUsQ33COCC8rViG6aqGpRrOo9HwXEf8aWaz8VupPaOUidjCRTOUPagNaysLzhNP19frtba2NZrOdcswTP11eDeBCxQDpXO5q6hIlHb2/lALEURRBDVIY/1Sr/hchsyb4DkBPEvRPlf4XS5DN1q68AkZnv9Syr0o7JMZLZY9QCjBEET4Hcj+DBFf0LDmR3OaYr6Ivy3CNGRgFW2gCk2H/FL0KrQzA1UQpgyobAHMfawxmqEUEYhqT+N+W/l13tSKrY8pIGxG05hVl/8NDyI5imiCQpUdytpDOz/gF53qXCLo9QmMMoZzdC/JmgCI2H6aCJ4fqjZK0Qxv7jATBN0wiU4/hney3HUjwHPE+P8Z0NFwdkGeQZShTnNB69nbxS2sv+dvdDvwl8H89SFC96urdgHg2LkwlKPdLU9IWZJotyO6mz4/j4hpTR/5aLnGy+Zy7K+vnQYNfr/r0yf/j5vh8mIc4M1iEF68DOfJ++3ttNcF3eGrM84iO0gjcwBm26WdbseRbTe6fG0PnmdJ9DTqW9QMlzyJ/npZ5Tf12166aMCXQUb+HGGX2pvkZbvS01Z+ZT055vC54d8QfwnZZFNnq6ecXvvT7nqcG5MoHti+3y7LOcJftR3O/CSbviHID0tJg35QuxZTAvxnMZMWHKqzwtVLpPgwjghXOnKX1A4vE3KHQ0/McLc2ruzrRvc6aDm26Rot98pwbcNttcxrw+81A+cgMjsUJxB7lMywzCUld0ebnwHC2GOIhChVc5oJpWPKDxEDwEGtT8biEFDC0CMV8kzIKqm3oE3WW+vNJbbzFjfnTeootXvKH8hD6s84SiuSbBoVSR4jiBOMpG5LWjPBa8ZFK1Ygz3hkajnQCMqEsqdSZD3Labo6w3ESIQlUj2mYRUhLFknRGJ3tfi0VQFZYx1ePxWH7tqzTb4cOCJ8QSwcma+kiMUX0xd3iHAr5vmD7uOBDeD8LsTxXop08xXCHpPrpgyWSHiVFREUHyKXnqaESVT8tqEwU5hiWPC9vayHi4th3DuNYAW2lZXmeFQNoSHlLRXhdlqgblj5BMBPCtH2kS0T0Mop+1i1QAj9JXtqrEDO+IBMOOIoFY2rF8oxrf4KYvPb7gumbc98UlZSidRxt+Fe2XiSeLBLxj68a6EHpJ8wj8bOmafgxsS9iHeURdYpbn2Mylyt5A2y/4QWkIiwW2kXT4+BfBfgqedVYNrnEwgWhphlH33+pSVFqKwBCmhHeD5TCcCyUBU6+TZD34fQpTKHF5eMM//vrTMUFBSASTzqGi/jyjvXkESDzI7HdJ/2ktz3TcS3xb3SdY71tBUGjbEoFXeeT+bPlqE+nHO/8Aw==</con:value></con:property><con:property><con:name>Device_ID</con:name><con:value>urn:dece:deviceid:org:dece:441861</con:value></con:property><con:property><con:name>DeviceGetETag</con:name><con:value>"0E3F7C3B580B509DE05305991F0A1A07:BADC14C4"</con:value></con:property><con:property><con:name>DeviceGetLastModified</con:name><con:value>Wed, 04 Feb 2015 07:55:13 GMT</con:value></con:property><con:property><con:name>licappapplication</con:name><con:value>appid-hKqnPMNYWHC88</con:value></con:property><con:property><con:name>licappserial</con:name><con:value>ec825582-7a9d-46ce-8788-180b9ed724e9</con:value></con:property><con:property><con:name>licappModel</con:name><con:value>model-3A65F92B71184</con:value></con:property><con:property><con:name>licappManufacturer</con:name><con:value>manfact-9728817886467</con:value></con:property><con:property><con:name>licappapplication_1</con:name><con:value>appid-hKqnPMNYWHC88</con:value></con:property><con:property><con:name>ORG_ID</con:name><con:value>urn:dece:org:org:dece:o:700031</con:value></con:property><con:property><con:name>DRM_ID</con:name><con:value>urn:dece:drm:adobe:3.0</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>ccdf09f0-c034-47f6-8cdf-76797af3f771</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>7eb68f58-93ef-4e73-98fe-f10cbdf6193b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>1ad7f9ca-219a-4dce-ba00-8f7d6fd3daca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>26e61b63-18ea-4c73-8766-0f86596b334c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f186da08-3084-424e-86a3-715f74852dcb</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b366a31b-3fe4-40cb-bf60-511d058b5006</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>fb816b02-7683-4d99-bb4b-cf125fa3929a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>7a4e0c6a-a45b-40c3-9765-09cf780e6762</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>afc071e1-4f80-4df0-ac4f-6c2b116ed586</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>5e1c38a1-c24a-498c-9cfe-d0af27e4d3d2</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="00028_DeviceGetCacheScenario_NonCS_DeviceGet_LegacyDeviceDelete_DeviceGet_404_NotFound" searchProperties="true" id="0e7d4696-32cc-4047-a82a-7f4e592c0c35"><con:settings/><con:testStep type="groovy" name="Set Coordinator Schema to Leading version" id="515e7f95-37a2-4526-99f6-ecf854644d8e"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("versionMinor",tP.getPropertyValue("currentVersionMinor"));
tP.setPropertyValue("versionMajor",tP.getPropertyValue("currentVersionMajor"));

tP.setPropertyValue("CoordinatorSchema", tP.getPropertyValue("CoordinatorSchema_"+ tP.getPropertyValue("versionMinor")));

log.info "CoordinatorSchema set to .... :  " + tP.getPropertyValue("CoordinatorSchema")</script></con:config></con:testStep><con:testStep type="groovy" name="Call AccountCreate API"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("AccountCreateAPI")

tP.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeidRTL"));

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call FirstUserCreateAPI"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("FirstUserCreateAPI")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call STSCreateandGetAPI"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("STSCreateandGetAPI")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("Username",tC.getPropertyValue("Username"));
myTC.setPropertyValue("audience","");


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

tC.setPropertyValue("RET_NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("RET_NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("RET_SAML",tC.getPropertyValue("SAML"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call TOUPolicyCreateAPI"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("TOUPolicyCreateAPI")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call MUCPolicyCreateAPI"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("MUCPolicyCreateAPI")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call STSCreateandGetAPI for Device"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("STSCreateandGetAPIforDevices")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("Username",tC.getPropertyValue("Username"));

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call LicAppCreateAPI"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("LicAppCreateAPI")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML"));

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call LicAppGetAPI"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("LicAppGetAPIforDevice")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("LIC_APP_ID",tC.getPropertyValue("LIC_APP_ID"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML"));

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call LegacyDeviceCreateAPI"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("LegacyDeviceCreateAPI")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("SAML",tC.getPropertyValue("RET_SAML"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("RET_NODE_ACCOUNT_ID_FULL"));
myTC.setPropertyValue("ExpectedReturnCodeCreate","201");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call DeviceGetAPI"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGetAPI")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("Domain_ID",tC.getPropertyValue("Domain_ID"));
myTC.setPropertyValue("Device_ID",tC.getPropertyValue("Device_ID"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("RET_NODE_ACCOUNT_ID_FULL"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("RET_SAML"));
myTC.setPropertyValue("ExpectedReturnCodeGet","200");
myTC.setPropertyValue("ETagResponseType","UnMatch");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call LegacyDeviceDeleteAPI"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("LegacyDeviceDeleteAPI")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("SAML",tC.getPropertyValue("RET_SAML"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("RET_NODE_ACCOUNT_ID_FULL"));
myTC.setPropertyValue("Device_ID",tC.getPropertyValue("Device_ID"));
myTC.setPropertyValue("ExpectedReturnCodeUpdate","200");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call again DeviceGetAPI"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGetAPI")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("Domain_ID",tC.getPropertyValue("Domain_ID"));
myTC.setPropertyValue("Device_ID",tC.getPropertyValue("Device_ID"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("RET_NODE_ACCOUNT_ID_FULL"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("RET_SAML"));
myTC.setPropertyValue("ExpectedReturnCodeGet","404");
myTC.setPropertyValue("ETagResponseType","FAILURE");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>NODE_ID</con:name><con:value>0701</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>0E3F7C14A17550B6E05305991F0A6C53</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:0E3F7C14A17550B6E05305991F0A6C53</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>0E3F7F2074B66D14E05307991F0AB570</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:0E3F7F2074B66D14E05307991F0AB570</con:value></con:property><con:property><con:name>Username</con:name><con:value>firstfau_20150204_012736</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZdc+I6DP0rTPrYCXFIICVTmOFzb7a0sNCW7r7cMY4CbhOHxg6k/fXXDpAFSnvZfWIk5KNjSzrKNcdRWHFbnEMiaMxKWRQy7ubehpYmzI0xp9xlOALuCuJOWrcDt1JGLt4d0Upet6H9G9g4wCap6451VdFtn9h6vTqzdMes1eqmhR07qMpQzlPwGBeYiYZWQWZVRxUd2ffIcatV17LLzlXtl1Z6hIRLbBlSRtqWVMYb2kKIpWsY6/W6vLbKcTI3KgiZxtPtYEIWEGGteb25UZ4oaW7jSdkHAmFIyiSOjGvjIOba5+6EzhkWaQLbXP5nuZCB6oaM8TmdX2jFWfA9FsS52cEsZpTgkL5j9T63IBaxX2qF8zihYhF9egkTKWAdMqIT02YXmnFI7UygA4YJxzpfYHOLNYYAEmAESg9jr6FdnFe1/Oh9ghkP4iTih+af8QG2gjBegq/z3bW21M4HPPFSzWsgrsdImHK6gjvVrEtMgG+rCeR8qNIogYBmA8plg2ZcsTP26R2Zm9fo0jlw8TcF2ivOBuQRhyk036LeBIYWvH//1e7dxzf38MzQujOLXh4aOYH94NxRlHZjHjVl0USbE7x+O41GPz2fBlYvNEbW6zduDb0MYBq8IjSIM9PLauN60r+kU/tn3IbXb+ESXy6Wj+PBYug8ox9p4NFo2m9dGb3Hy9Ga1ONO98d0AGSy7s+C3t10FdcehtxvOXdPY8uqrfE/4+B77YaQZ/td4FH04EDQ86LVeoUHFl/jm3nv8WW5aGV+pf4wDEbOcAjeU69RXGeP/6FvN/OTdPYMROxM1QZet9SXVcLiazFTHurrQR7qLpX4cAFMaE11SmmHm0q5o74ra7ixUc/qO/0Kcux2rdY17R6qWsip180+arWrDtqJzIbFEcVOzAKqcinJ3bTN1wRJ5M4AJ5BoXyB1scClu1gM2TBpBQKSA4U10b7Cqrb+FOj4v11OGeNTFcBVmjbI94ITKl7Zqfgxl8pptTd2+C1/RUlRzmIpSa2S3Z1rOZfT9IrLfjldrVIl5q6jpjiRs2AoHgaqGBMgqZy/t/v4BZhRoBhnid3u5sfJC/8hxVQs2ERgAZHsllJunrHdJsDVdvOYD9m5q/MgpSyEgEyc8nVCuZkV4y+XN3GJipPukfxZx4lfXPAU1l4eeU+53ARlc2UpoXv7PSRqOooJIbGEpXJE42Qf/BTAqeSHzuKRCy5CJHSWCvj8n5KavYaGCYlTJryuljv29SDnKd6W4P4O+gCTS07xDUL//yNEp3kLEJBfLpzm+GqVuFwCsvmepmyTfpCVjmm3TKdaRe1aLivVjazUOlWreJQDds0P7o+evXc67vHmfw==</con:value></con:property><con:property><con:name>LicAppID</con:name><con:value>urn%3Adece%3Alicappid%3Aorg%3Adece%3AE49B021A38CC0F36E0401F0A059951E3</con:value></con:property><con:property><con:name>Policy_Class</con:name><con:value>urn:dece:type:policy:ManageAccountConsent</con:value></con:property><con:property><con:name>POLICY_ID</con:name><con:value>urn:dece:policyid:org:dece:E58FD88106DA5C3EE0401F0A07995A32</con:value></con:property><con:property><con:name>LIC_APP_ID</con:name><con:value>urn:dece:licappid:org:dece:0E3F7BFEAB8C50B2E05305991F0AE1D0</con:value></con:property><con:property><con:name>Domain_ID</con:name><con:value>urn:dece:domainid:dece:0E3F657130181CFCE05307991F0A14F2</con:value></con:property><con:property><con:name>RET_NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:0E3F7BFEAB7950B2E05305991F0AE1D0</con:value></con:property><con:property><con:name>RET_NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:0E3F7BCE49C25093E05305991F0A470B</con:value></con:property><con:property><con:name>RET_SAML</con:name><con:value>SAML2 Assertion=nVZbc9o6EP4rjPtsLNs4Dp7ADNeGNuQGTdK8nBHSYtTaMliyIfn1lQy4mFwO5zx5tF7tfrv76ZMuBI4jJ+gIAalkCa9t4oiLoLC2jCzlQYIFEwHHMYhAkmDSGV8FTh0FeL/FqI36LeOfmQPYpYDN2fnZmdmYE8c89+euCecOeC6aNV2/oVyFyGDEhcRctgwH2Z6JHBM1psgPPC9wzupNx3s2ag+QChVbudSRsQO1ES1jIeUysKz1el1fu/UkDS0HIdt6Gl9NyAJibLQvthUVidL2zp/UKRCIIlInSWxdWBWfCyqCCQs5llkKu1z0o1zIQk1L+VDBwi9GuRfoiM+TYtnDPOGM4Ii9Yt2fMchFQmudKExSJhfxh0XYSAc2YUNMYjf4F8OqQjsxUAVhKrApFtjexbqHOaTACdR+3I9axpfTplZsnaaYi3mSxqK6/G94gOcQJUugptiXtYN2esB3OtW+ABKMOIkywXK41mRdYgJiN00gp4eq3aYwZ5srJhRBN0Kjsw7hHS233eizEIT8PwM6GM42yAOOMmg/LcYzQam/vAmFxVnsPl7mvdDh6fO6VQA4dC4M5Wi3yyNSliTa7nhs4t4P95IO6M/L0d3QX89+fr8LB+g5fx0MX/r5g0e/kfXT18nt/Gp07c02U9F/ccd3CUoe+t7K7S+7Z8PwIb29D6+R5Tdvbn/d8Vt0bvN40fzd8aT91bZXj51k8iOePGJ4oNP0+mrDul1/PHCi8KczYyyjYf506bPz1ezbeD326Tr++mxtrOF65aLhfHHJh99x2CrLOcBfte3P/CSb/QIi90tNg1G/NlRTwvJzMdMWRs154RostfgICVwabb1La0eQKbljNFAz3K7RwB363d6g0ew5Hmq6A6TOi9ds2kPUafiouxeZLYojiL2Ez5nOpSV3S5vPAZI4EMAppGaeZErphPFJxD6WuDbi9+oQJFzANFHybIs8z2cuI86KZGLt//odAfXhNTJq14m84TdpZy4hrWiyjSqafA+ELRlo4da8ForYQqperHCeyciu57jOIVPSnmqVDZzGuWcJFi8j0EitOKFZBPXlYll0xhLbr2NiIgrr/WBanLYP6zr+t2+B8qFMOwhdSxfUGOGdy8XeF/Jxwe5hwfvwnYwyfbBUP2XKyBZJ9ddfmmh+lBxRFe0hl57HhkpU67igMhHNGSmJXl7XSsXVuW/vx7HC9VU9y/OsGICv9S1V4S1dooUcawIkU8r0Mk1+A7fKKNZJ10AJ/Ch5aa9CzOSCTySWECvG1IrlCff+BIS+90eK6ptTHxWVlKp1EjbyPVsvUm8WjfjTZw0JiPZT5lv1WScp/Tuxd2Id5FF1qmtfMh7qlb4CXj7gBUlUWKbEK0kPg78X4L3kVWPZ5BKLVISaZRI+/lPTqtQyMCFJxuWobxSGQ6UscMqXJQR/nd6EKcS4fJ2xf3+emaygAAH1phOsiK8v2UAfAR4eqO0u6VvBHQ46Xb/poa5zKLgDu4/KplTQtd+Y31oO+nTM8fYf</con:value></con:property><con:property><con:name>Device_ID</con:name><con:value>urn:dece:deviceid:org:dece:414330</con:value></con:property><con:property><con:name>DeviceGetETag</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">"0E3F7C14FA8E6D10E05307991F0A0DAB:9622C02C"</con:value></con:property><con:property><con:name>DeviceGetLastModified</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">Wed, 04 Feb 2015 07:55:45 GMT</con:value></con:property><con:property><con:name>licappapplication</con:name><con:value>appid-hKqnPMNYWHC88</con:value></con:property><con:property><con:name>licappserial</con:name><con:value>ec825582-7a9d-46ce-8788-180b9ed724e9</con:value></con:property><con:property><con:name>licappModel</con:name><con:value>model-3A65F92B71184</con:value></con:property><con:property><con:name>licappManufacturer</con:name><con:value>manfact-9728817886467</con:value></con:property><con:property><con:name>licappapplication_1</con:name><con:value>appid-hKqnPMNYWHC88</con:value></con:property><con:property><con:name>ORG_ID</con:name><con:value>urn:dece:org:org:dece:o:700031</con:value></con:property><con:property><con:name>DRM_ID</con:name><con:value>urn:dece:drm:adobe:3.0</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>ccdf09f0-c034-47f6-8cdf-76797af3f771</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>7eb68f58-93ef-4e73-98fe-f10cbdf6193b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>1ad7f9ca-219a-4dce-ba00-8f7d6fd3daca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>26e61b63-18ea-4c73-8766-0f86596b334c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f186da08-3084-424e-86a3-715f74852dcb</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b366a31b-3fe4-40cb-bf60-511d058b5006</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>fb816b02-7683-4d99-bb4b-cf125fa3929a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>7a4e0c6a-a45b-40c3-9765-09cf780e6762</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>afc071e1-4f80-4df0-ac4f-6c2b116ed586</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>515e7f95-37a2-4526-99f6-ecf854644d8e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="00029_DeviceGetCacheScenario_NonCS_DeviceGet_LegacyDeviceDelete_DeviceGet(If-None-Match)_404_NotFound" searchProperties="true" id="28c0a3cb-8bc9-48f6-a83d-6b53cc0724c0"><con:settings/><con:testStep type="groovy" name="Set Coordinator Schema to Leading version" id="7f18832b-a7d2-4c08-8125-9bd8db8eeb3a"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("versionMinor",tP.getPropertyValue("currentVersionMinor"));
tP.setPropertyValue("versionMajor",tP.getPropertyValue("currentVersionMajor"));

tP.setPropertyValue("CoordinatorSchema", tP.getPropertyValue("CoordinatorSchema_"+ tP.getPropertyValue("versionMinor")));

log.info "CoordinatorSchema set to .... :  " + tP.getPropertyValue("CoordinatorSchema")</script></con:config></con:testStep><con:testStep type="groovy" name="Call AccountCreate API"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("AccountCreateAPI")

tP.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeidRTL"));

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call FirstUserCreateAPI"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("FirstUserCreateAPI")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call STSCreateandGetAPI"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("STSCreateandGetAPI")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("Username",tC.getPropertyValue("Username"));
myTC.setPropertyValue("audience","");


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

tC.setPropertyValue("RET_NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("RET_NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("RET_SAML",tC.getPropertyValue("SAML"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call TOUPolicyCreateAPI"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("TOUPolicyCreateAPI")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call MUCPolicyCreateAPI"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("MUCPolicyCreateAPI")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call STSCreateandGetAPI for Device"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("STSCreateandGetAPIforDevices")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("Username",tC.getPropertyValue("Username"));

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call LicAppCreateAPI"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("LicAppCreateAPI")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML"));

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call LicAppGetAPI"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("LicAppGetAPIforDevice")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("LIC_APP_ID",tC.getPropertyValue("LIC_APP_ID"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML"));

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call LegacyDeviceCreateAPI"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("LegacyDeviceCreateAPI")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("SAML",tC.getPropertyValue("RET_SAML"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("RET_NODE_ACCOUNT_ID_FULL"));
myTC.setPropertyValue("ExpectedReturnCodeCreate","201");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call DeviceGetAPI"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGetAPI")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("Domain_ID",tC.getPropertyValue("Domain_ID"));
myTC.setPropertyValue("Device_ID",tC.getPropertyValue("Device_ID"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("RET_NODE_ACCOUNT_ID_FULL"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("RET_SAML"));
myTC.setPropertyValue("ExpectedReturnCodeGet","200");
myTC.setPropertyValue("ETagResponseType","UnMatch");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call LegacyDeviceDeleteAPI"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("LegacyDeviceDeleteAPI")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("SAML",tC.getPropertyValue("RET_SAML"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("RET_NODE_ACCOUNT_ID_FULL"));
myTC.setPropertyValue("Device_ID",tC.getPropertyValue("Device_ID"));
myTC.setPropertyValue("ExpectedReturnCodeUpdate","200");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call again DeviceGETAPIwithIf-None-Match"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGetAPIwithIf-None-Match")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
myTC.setPropertyValue("ETag",tC.getPropertyValue("DeviceGetETag"));

myTC.setPropertyValue("Domain_ID",tC.getPropertyValue("Domain_ID"));
myTC.setPropertyValue("Device_ID",tC.getPropertyValue("Device_ID"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("RET_NODE_ACCOUNT_ID_FULL"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("RET_SAML"));
myTC.setPropertyValue("ExpectedReturnCodeGet","404");
myTC.setPropertyValue("ETagResponseType","FAILURE");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>NODE_ID</con:name><con:value>0701</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>0E3F7BFE3F4250A1E05305991F0A1547</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:0E3F7BFE3F4250A1E05305991F0A1547</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>0E3F7BFD94565095E05305991F0AC8D4</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:0E3F7BFD94565095E05305991F0AC8D4</con:value></con:property><con:property><con:name>Username</con:name><con:value>firstfau_20150204_012810</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVbbcuI4EP0VyvNIGcnGjoMrUMVwSbwBQsJlSF62hCzAiS2DJIOZr1/JgAcIybL7klQ3rdNH6u7TvuMoCk23zjlhIohpIY1Cyt3MW9USRt0Y8YC7FEWEuwK7g3q345ol6KLDEa3gNava35WZUS47pKz7/szSLd+60W9vnKlu2ZWpCZ2ZY9zaMpTzhHiUC0RFVTOhYevQ1KE1hI5r37jwtmRVbt60wpgwLrFlSAlqe1Ipr2oLIZYuAJvNprQpl2I2ByaEBph0OwO8IBHSane7G2WJWG0fj0s+wSQMcQnHEbgDJzF3PncHwZwikTCyz+V/lQsCWAEyxufB/IeWnyW+R2dxZjYQjWmAURj8Rup9ukQsYr9QD+cxC8Qi+vISBlTAOkmxjg2L/tDAKbUrgU4YMo50vkDGHuuFzAgjFJPC6MWraj+uq1p2dMgQ5bOYRfzU/G98CF2TMF4SX+eHa+2pXQ944aVqdwS7HsVhwoM16almXSJM+L6aBF8PVegzMgvSTsBlg6ZcsQPH9M7M3Ws0gznh4v8U6Kg4O5AxChNSs8Bf9Wje+u2vir1787X+MuqsR5vp0+o2rmYEjoMzR17anXnWlHkT7U4sG8/Un1AM3lir1X0ALPSKHat1T1bbCk8n9UZj7mwa23BTHA26z/1uJZmtzWJ/8tZudQywfRnTccd4erTGr5P1pJHydwcVN/SXw+1lH20+xjfD0IbvD7SHofWIrHdmwvEjT8HrC38M4SBo+dv2aj3sj+87qOJFH95DOtjiQer0mt6vornqgdFofA/mw+i5ml/niP+p7zDzg2T6TrA4mKoNvGahLauExPdipjyBr8+yUHepxIcLQoVWU6eUdriJlLvAd2UNdzZsldvOz3azYtk3NqzYLWiXoV2pGG1Yb9w2rYPI7FicUWzEdBaoXEpyd23zPUEcuVOCGGHaN0hNJFChF4sn+sTqM0HYicIa8FhhVVt/CXT+2yGnjPEDFcBVmp9Evhf5pOK2ax9U/JyLeVntwQG/7q8DnJczX0pSq2R3Z1rO5TStUMkvJet1osTcddQUMzkLQPEA0AQDghM5f9th/EEoyFHAVWJ3uPl58tx/SjERCzoQSJBIdkshM6/YbgPC1XbzqE/Sa1fnSUpZCEFSccnXCOVmVoy/Xd7YxSpOuvvy3yZmfn7BS1hHeeQ95XITAZ0rSwnd9s+QqOnIJwTHEjaQIxqzY/BLAJeSnzrzR865CMGCaSLI178U1OxVNYRxnFDhNbXMcawHGU+xXRL3T9AnmExy8m+Q4N8/QvQgawFM5JcLDzJ8tUpcLgHp/EhT9kkvyIr8a5k2rBvHsmLYlpM/ygm72if3Z8/RO533eO0f</con:value></con:property><con:property><con:name>LicAppID</con:name><con:value>urn%3Adece%3Alicappid%3Aorg%3Adece%3AE49B021A38CC0F36E0401F0A059951E3</con:value></con:property><con:property><con:name>Policy_Class</con:name><con:value>urn:dece:type:policy:ManageAccountConsent</con:value></con:property><con:property><con:name>POLICY_ID</con:name><con:value>urn:dece:policyid:org:dece:E58FD88106DA5C3EE0401F0A07995A32</con:value></con:property><con:property><con:name>LIC_APP_ID</con:name><con:value>urn:dece:licappid:org:dece:0E3F7C3B5811509DE05305991F0A1A07</con:value></con:property><con:property><con:name>Domain_ID</con:name><con:value>urn:dece:domainid:dece:0E3F721FF3711D08E05307991F0AB2EC</con:value></con:property><con:property><con:name>RET_NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:0E3F7C1565886D12E05307991F0A994E</con:value></con:property><con:property><con:name>RET_NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:0E3F7BD90F9550B8E05305991F0AC89D</con:value></con:property><con:property><con:name>RET_SAML</con:name><con:value>SAML2 Assertion=nVbbcuI4EP0VyvM4ZSQbbLArUEUCJOQ+gUySedkSchs0sWWwZCB8/UgGPJhclt0nl9qt06cvOtKJIHFk+x0hIJUs4ZVVHHHh59aWkaXcT4hgwuckBuFL6g87N9e+XcU+2W0xKoNuy/jHa4Z1HAa26YZNy6zXXNcce2HDdMZ1F1s4tMEJlasQGQy4kITLlmFjyzGxbeL6CDd8x/UxrtYc55dR+QmpUNjKpYqNLamVaBlTKWc+QsvlsrqsVZN0gmyMLfR8cz2kU4iJ0T7ZZJQHSttbf1oNgEIU0SpNYnSCSj4ngfCHbMKJzFLYxgo+i4UR9pDyCQSbfDOKvRAMeJjkyzPCE84oidia6PrcgJwmQaUTTZKUyWn8aRIW1sAmrKhJrTr/ZqAytSOBSgxTQUwxJdYW6wFCSIFTqDw+DFrGt+O6lm8dpYSLMEljUV7+Nz7AFxAlMwhMsUtrS+14wA8q1T4B6g84jTLBFnCrh3VGKIhtN4EeD1W5TyFkq2sm1ICuhGaH9ukdLDfV6LIJCPl/GrTXnA3ITxJl0Eaj7vDC4iH6fr5+9JYef11z73kF5/16Kyew75wbitZulgdDWQzRZkf36ZY+r15SYHP+4+rSDe+6gDD6FfYj0eiMB5PLCxo+Xr3Q817SeI2vv7svo/Xk6vdV9+LOepvMUdr74bhokDSWNg+v7/poXOv0l/hUfr+w+0PSjOfwzNB6uLxMw9rb8BVdz68Cie6cX3LcWU7tiwf37X7+9NJ8Dkfn0z57qt9cchzb9+IJzQPrJj4fook3f7zptYp09viXbbszP8zGv4HK3VKPwaBb6asuEfm1mGkLC8wwd/VnWnyEBC6Ntt6ltcPPlNyxwFc93Kxxr9ZvnHY93PccB582e9ipYcfzrD7unDW97k5kNiwOKJ4lPGQ6lpbczdh8TZDGvgAeQGoukkwpnTC+QOwSSSoD/qAOQcIFjBIlz/Vojd3XemMZNOh67toJX9ejyBNG5TaRd/wu7YQS0pIkW7gkyQ9A2YyB1m091kLNtZCqFHOyyGRkVRekyiFTyp5qkfXtetNBgsWzCDRRFCdBFkF1Np3lhUFi87VNQkVufeiN8sP2aVqH/3YVUD4B0w5C53IKqovw7m5xfGeXyOcJ1/YT3sF3soDpc6XKKVNGN0zKv/5OiR6PYkRURjvKheehoYSKDhMqAgULRos5L25rJeLq2Ld37ZiT6ryaLRZZ3oCGlrdUwSOdIsI2GgLNlDC9jZJX4KhAQUfdAgXxg+CFvUwxk1M+lERCrCamki+PuPaHIPS1P1CTvjr2TVEKqUonYSU/sp1F6smiGX/5qqE+1X7KfK8+yyQN/nbsA6y9OCpPdetLxid6pW+At0/mgiYKlintStJ98I8APgpeNhZFLrhINVDjTMLnfypalFoGoTTJuBx0jdywL5Q5T/k2A/+v0zuYXIuLxxn799eZyfIRoKCedILl+PqO9fUR4JM9sd0Gfae3Z5bjOs2m27XsXG8bG731vHqvKEqJXfud+b1lr06HM97+Aw==</con:value></con:property><con:property><con:name>Device_ID</con:name><con:value>urn:dece:deviceid:org:dece:961382</con:value></con:property><con:property><con:name>DeviceGetETag</con:name><con:value>"0E3F7BFEAB9A50B2E05305991F0AE1D0:B6777DC8"</con:value></con:property><con:property><con:name>DeviceGetLastModified</con:name><con:value>Wed, 04 Feb 2015 07:56:18 GMT</con:value></con:property><con:property><con:name>licappapplication</con:name><con:value>appid-hKqnPMNYWHC88</con:value></con:property><con:property><con:name>licappserial</con:name><con:value>ec825582-7a9d-46ce-8788-180b9ed724e9</con:value></con:property><con:property><con:name>licappModel</con:name><con:value>model-3A65F92B71184</con:value></con:property><con:property><con:name>licappManufacturer</con:name><con:value>manfact-9728817886467</con:value></con:property><con:property><con:name>licappapplication_1</con:name><con:value>appid-hKqnPMNYWHC88</con:value></con:property><con:property><con:name>ORG_ID</con:name><con:value>urn:dece:org:org:dece:o:700031</con:value></con:property><con:property><con:name>DRM_ID</con:name><con:value>urn:dece:drm:adobe:3.0</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>ccdf09f0-c034-47f6-8cdf-76797af3f771</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>7eb68f58-93ef-4e73-98fe-f10cbdf6193b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>1ad7f9ca-219a-4dce-ba00-8f7d6fd3daca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>26e61b63-18ea-4c73-8766-0f86596b334c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f186da08-3084-424e-86a3-715f74852dcb</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b366a31b-3fe4-40cb-bf60-511d058b5006</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>fb816b02-7683-4d99-bb4b-cf125fa3929a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>7a4e0c6a-a45b-40c3-9765-09cf780e6762</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>afc071e1-4f80-4df0-ac4f-6c2b116ed586</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>7f18832b-a7d2-4c08-8125-9bd8db8eeb3a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="00030_DeviceGetCacheScenario_NonCS_DeviceGet_LegacyDeviceDelete_DeviceGet(If-Modified-Since)_404_NotFound" searchProperties="true" id="d35373d1-68b4-4c7d-b3e3-2dd37e2f82f6"><con:settings/><con:testStep type="groovy" name="Set Coordinator Schema to Leading version" id="14bc4f65-4e02-4b5d-a49a-95a76c2247bf"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("versionMinor",tP.getPropertyValue("currentVersionMinor"));
tP.setPropertyValue("versionMajor",tP.getPropertyValue("currentVersionMajor"));

tP.setPropertyValue("CoordinatorSchema", tP.getPropertyValue("CoordinatorSchema_"+ tP.getPropertyValue("versionMinor")));

log.info "CoordinatorSchema set to .... :  " + tP.getPropertyValue("CoordinatorSchema")</script></con:config></con:testStep><con:testStep type="groovy" name="Call AccountCreate API"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("AccountCreateAPI")

tP.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeidRTL"));

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call FirstUserCreateAPI"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("FirstUserCreateAPI")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call STSCreateandGetAPI"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("STSCreateandGetAPI")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("Username",tC.getPropertyValue("Username"));
myTC.setPropertyValue("audience","");


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

tC.setPropertyValue("RET_NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("RET_NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("RET_SAML",tC.getPropertyValue("SAML"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call TOUPolicyCreateAPI"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("TOUPolicyCreateAPI")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call MUCPolicyCreateAPI"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("MUCPolicyCreateAPI")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call STSCreateandGetAPI for Device"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("STSCreateandGetAPIforDevices")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("Username",tC.getPropertyValue("Username"));

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call LicAppCreateAPI"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("LicAppCreateAPI")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML"));

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call LicAppGetAPI"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("LicAppGetAPIforDevice")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("LIC_APP_ID",tC.getPropertyValue("LIC_APP_ID"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML"));

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call LegacyDeviceCreateAPI"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("LegacyDeviceCreateAPI")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("SAML",tC.getPropertyValue("RET_SAML"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("RET_NODE_ACCOUNT_ID_FULL"));
myTC.setPropertyValue("ExpectedReturnCodeCreate","201");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call DeviceGetAPI"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGetAPI")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("Domain_ID",tC.getPropertyValue("Domain_ID"));
myTC.setPropertyValue("Device_ID",tC.getPropertyValue("Device_ID"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("RET_NODE_ACCOUNT_ID_FULL"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("RET_SAML"));
myTC.setPropertyValue("ExpectedReturnCodeGet","200");
myTC.setPropertyValue("ETagResponseType","UnMatch");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call LegacyDeviceDeleteAPI"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("LegacyDeviceDeleteAPI")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("SAML",tC.getPropertyValue("RET_SAML"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("RET_NODE_ACCOUNT_ID_FULL"));
myTC.setPropertyValue("Device_ID",tC.getPropertyValue("Device_ID"));
myTC.setPropertyValue("ExpectedReturnCodeUpdate","200");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call again DeviceGETAPIwithIf-Modified-Since"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGetAPIwithIf-Modified-Since")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("ETag",tC.getPropertyValue("DeviceGetETag"));
myTC.setPropertyValue("ETag",tC.getPropertyValue("DeviceGetETag"));

myTC.setPropertyValue("Domain_ID",tC.getPropertyValue("Domain_ID"));
myTC.setPropertyValue("Device_ID",tC.getPropertyValue("Device_ID"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("RET_NODE_ACCOUNT_ID_FULL"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("RET_SAML"));
myTC.setPropertyValue("ExpectedReturnCodeGet","404");
myTC.setPropertyValue("ETagResponseType","FAILURE");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>NODE_ID</con:name><con:value>0701</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>0E3F7C3AEF595099E05305991F0AA50F</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:0E3F7C3AEF595099E05305991F0AA50F</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>0E3F7C14FA986D10E05307991F0A0DAB</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:0E3F7C14FA986D10E05307991F0A0DAB</con:value></con:property><con:property><con:name>Username</con:name><con:value>firstfau_20150204_012842</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZtU+o6EP4rTP14BpoWsLQjzFReHDyAHhE945c7Id1CtE0wSRX89Tcp0AOIXs79xOyyefZJdvfZXkicJm4QSglCUc5KyzRhMsi9TSsTLOBYUhkwnIIMFAnG4XAQuBUU4O0Rq9TvNK1/qv7UqVZdKPu1ql+uNRxUbsSxU0YuRl418mvIIzpUygz6TCrMVNNykVPXAWVUu0deUD8Paqji1GtPVukBhNTYOqSCrA2ppWxac6UWgW2/v79X3qsVLma2i5Bj/x4OxmQOKbZaF+sb5YlEaxNPKhEQSBJSITy1L+y9mItIBmM6Y1hlAja5oq9yIRv5to6JJJ2dWcVZiPos5rnZxowzSnBCP7B5nyGoOY9KYTLjgqp5+uUlHGSAy7AkZeLU2Jll71M7EWiPoZC4LOfY2WDdQQwCGIHS5K7ftM5Oq1p+9F5gJmMuUrlv/h0fYG+Q8AVEZbm91oba6YBHXqp1ASToM5Jkkr7ByDTrAhOQm2oCOR2qdCsgpssBlbpBl9Kws3fpHZjr1+jQGUj1fwq0U5w1yANOMmil3EvJD0afF3dTkLzbjvDgns66jZtJMyewG5w7itKuzYOmLJpofYJPkp/X11N3/IJu5NWV9CdT3601ViuYdJOOoP509thPhm7v1UuHQ2/62OdP4YNajM6HQ5E0lnR+q2+BFxHpj69+Xd+lH68vfO49ex/O+HHEbDnwpT2ZXKXe5cjJRogNBucZj29/VVeYLWOYiTk8eq+3l5HjeR18/8NXi+nPOUsmz0p15vjp1Q07D71B3O42i+vs8N/3bWd+nE2fgaitadqg3yn1dJWw+l7MjIdG5TgPDRZGfKQCpqyWOWW0I8i03NEo0DVc26hb7Xltp9YL/cZ5x0FdVK8iz/edHgpRJ7zcisyaxQHFNmcxNbmM5K7b5nuCJA2mgAUI6xukDla4NOLqht2IMFYg9hTWQbsKa9r6S6DD/7Y5dUxETYA0aS5BvxccUfHqVsUPubjH1d7e4ofRGyVFOYulpLVKd3eu5VJP0yuuRJXs7S0zYh54ZoqFngXb8LCRa4+BZHr+Vvf8BZhdoNgnid325ofJC/8+xUzN2VhhBanullJunrDdxiDNduuzCJanrs69lLoQCpbqmK+d6M1sGH+7vElATJx23+qfdy6i4oLHsHby6Hvq5aYomxnLCN3qz5CY6SgmhHANS/WIcrELfgzgWPJ9Z/HIBRelBJ1mCr7+p2Rmr2lhQnjGVL9j5Y5dPch5qtUCgj9Bn2ByySm+Qeh/f4SUad4CBPSXi6Q5vlklgdSAbLajKZukn2WlGnZ7db+OfD+XlfpaVsI66hWPsseu9cn92bPzToc93voX</con:value></con:property><con:property><con:name>LicAppID</con:name><con:value>urn%3Adece%3Alicappid%3Aorg%3Adece%3AE49B021A38CC0F36E0401F0A059951E3</con:value></con:property><con:property><con:name>Policy_Class</con:name><con:value>urn:dece:type:policy:ManageAccountConsent</con:value></con:property><con:property><con:name>POLICY_ID</con:name><con:value>urn:dece:policyid:org:dece:E58FD88106DA5C3EE0401F0A07995A32</con:value></con:property><con:property><con:name>LIC_APP_ID</con:name><con:value>urn:dece:licappid:org:dece:0E3F7BD90FB150B8E05305991F0AC89D</con:value></con:property><con:property><con:name>Domain_ID</con:name><con:value>urn:dece:domainid:dece:0E3F6571301A1CFCE05307991F0A14F2</con:value></con:property><con:property><con:name>RET_NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:0E3F7BFE548C50A5E05305991F0A0B26</con:value></con:property><con:property><con:name>RET_NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:0E3F7C3AEF405099E05305991F0AA50F</con:value></con:property><con:property><con:name>RET_SAML</con:name><con:value>SAML2 Assertion=nVbbcuI4EP0VyvOYMhYGJ9gVqHICTEgmlwGSmcnLlpDboGBLRJLBydePZMABcll2n1xqt06fvuhIpxKniRuEUoJQlLNKniZMBoW1ZWWCBRxLKgOGU5CBIsEwvP4RuFUU4M0Wq9LvtKx/6s3jY4j9mt2M3abdqNXHNnaxbxNoojrCCPtxXbtKmUGfSYWZalkuqnk2cm3UGKGTwDsO6rWq77uPVuUBhNTY2qWKrDWpXLasqVLzwHGWy2V1Wa9yMXFchGrO7+sfQzKFFFvt01VGRSDRXvuTagQEkoRUCU+dU2fH5zSSwZBOGFaZgHWs6LNYyEG+o30iSSffrHIvRH0W82J5jhlnlOCEvmJTn2tQUx5VwmTCBVXT9NMkasgA25ATm9Qa7Jvl7FI7EGiHoZDYllNcW2MNIAYBjEDlftBvWd8O61qxdSQwkzEXqdxd/jc+wBaQ8DlEttyktaZ2OOAHlWqfAgn6jCSZpAu4McM6xwTkuptADoeq3AmIaf6DSj2guTTsnG16e8tVNTp0AlL9nwZtNWcF8oCTDNrx/c+HUP2GWoZlRGbfR+Ppq8iWOOX3rYLAtnNhKFu7Wu4NZTlEqx354OTllwiXVxfHlF9czh/O7h6foZGfTI7Ry/3PcPpnMb8ZPfUHT/x65IjJPeeXD25j1iVDfpvHV/5J47KZy86ZJ+rff8b4Ih6/Ph71bqOkf3eRdmYohOcjPOa/zvvi6KHRH4Uwvuv6Lzm7m2HmUPfo+nIGR94IN26G2etFfLO4fJp1/WdvelXP00bnYnQ7mZ09XaE/rTKdLf67ts2ZH2bjJyBqszRj0O9UerpLWH0tZsZCIzsuXIO5ER+pgCmrbXYZ7QgyLXc0CnQPV2vUrfdOzutht9dAHvL9LvLqyPP9Wg+FoYd6G5FZsdijeM5ZTE0sI7mrsfmaIEkDCSwCYS94ppVOWl8gdrDClT4b6EPAmYQR1/K8FEvuxnGaTBuUeb6iNRXHSCRW5YarW3YrwliB2JHkGtqR5AEQOqdgdNuMtdRzLZUuxTNeZCqpVRe4yiDTyi6MyAZuo+k5kqbzBAxRJ+VRlkB1Pp0XhXHk6uvamMjCOuiOisP2aVr7/zYV0D4RNQ7S5HIGuovwwd3ibhL5POH6dsIb+DCLqDlXupxKULJisvvrbUrMeJQjojPaUC499w07qM5+QmWgaEFJOeflba1FXB/79qYdz7j6XM0Wi6xowImRN6HhHZOig1xnCCTTwvQy4jNgToniHHQLlMT3gpf2XYqZmrKhwgpSPTGVYnnAtT8Eaa79vp70/NA3xU5IXToFufrIdp7oJ4th/OWrhgTE+Gnznf4suYjeOvYB1lYcnae+9RVlE7MyN8DLJ3NBuIalWru42Ab/COCj4LvGssglF6UHapwp+PxPxYhSy8KE8IypfscqDNtCWfBUL3MI3pzewRRaXD7O6L+/zmxajAAB/aSTtMA3d2xgjgCbbIntOug7vT3rdb1G89xDobett+jMPS6LssOu/c783rJVp/0Zb/8F</con:value></con:property><con:property><con:name>Device_ID</con:name><con:value>urn:dece:deviceid:org:dece:895864</con:value></con:property><con:property><con:name>DeviceGetETag</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">"0E3F7BD72287509FE05305991F0AFDB1:C02FDD95"</con:value></con:property><con:property><con:name>DeviceGetLastModified</con:name><con:value>Wed, 04 Feb 2015 07:56:51 GMT</con:value></con:property><con:property><con:name>licappapplication</con:name><con:value>appid-hKqnPMNYWHC88</con:value></con:property><con:property><con:name>licappserial</con:name><con:value>ec825582-7a9d-46ce-8788-180b9ed724e9</con:value></con:property><con:property><con:name>licappModel</con:name><con:value>model-3A65F92B71184</con:value></con:property><con:property><con:name>licappManufacturer</con:name><con:value>manfact-9728817886467</con:value></con:property><con:property><con:name>licappapplication_1</con:name><con:value>appid-hKqnPMNYWHC88</con:value></con:property><con:property><con:name>ORG_ID</con:name><con:value>urn:dece:org:org:dece:o:700031</con:value></con:property><con:property><con:name>DRM_ID</con:name><con:value>urn:dece:drm:adobe:3.0</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>ccdf09f0-c034-47f6-8cdf-76797af3f771</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>7eb68f58-93ef-4e73-98fe-f10cbdf6193b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>1ad7f9ca-219a-4dce-ba00-8f7d6fd3daca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>26e61b63-18ea-4c73-8766-0f86596b334c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f186da08-3084-424e-86a3-715f74852dcb</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b366a31b-3fe4-40cb-bf60-511d058b5006</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>fb816b02-7683-4d99-bb4b-cf125fa3929a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>7a4e0c6a-a45b-40c3-9765-09cf780e6762</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>afc071e1-4f80-4df0-ac4f-6c2b116ed586</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>14bc4f65-4e02-4b5d-a49a-95a76c2247bf</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="00034_DeviceGetCacheScenario_NonCS_DeviceGet_MAC-PolicyDelete_DeviceGet_403_Forbidden" searchProperties="true" id="502ca942-7785-472f-a239-356a071079f4"><con:settings/><con:testStep type="groovy" name="Set Coordinator Schema to Leading version" id="353dd261-9048-49d2-8ebf-0f4c43f1ccdb"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("versionMinor",tP.getPropertyValue("currentVersionMinor"));
tP.setPropertyValue("versionMajor",tP.getPropertyValue("currentVersionMajor"));

tP.setPropertyValue("CoordinatorSchema", tP.getPropertyValue("CoordinatorSchema_"+ tP.getPropertyValue("versionMinor")));

log.info "CoordinatorSchema set to .... :  " + tP.getPropertyValue("CoordinatorSchema")</script></con:config></con:testStep><con:testStep type="groovy" name="Call AccountCreate API"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("AccountCreateAPI")

tP.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeidRTL"));

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call FirstUserCreateAPI"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("FirstUserCreateAPI")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call STSCreateandGetAPI"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("STSCreateandGetAPI")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("Username",tC.getPropertyValue("Username"));
myTC.setPropertyValue("audience","");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

tC.setPropertyValue("RET_NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("RET_NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("RET_SAML",tC.getPropertyValue("SAML"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call TOUPolicyCreateAPI"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("TOUPolicyCreateAPI")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call MUCPolicyCreateAPI"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("MUCPolicyCreateAPI")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call MUCPolicyGetAPI"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("Policy_Class","urn:dece:type:policy:ManageAccountConsent");

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("AccountPolicyGetAPI")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call STSCreateandGetAPI for Device"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("STSCreateandGetAPIforDevices")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("Username",tC.getPropertyValue("Username"));

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call AttestationDataCreateAPI" id="660de135-7426-4c28-a1d1-049d555c34da" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("AttestationDataCreate API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call AttestationDataGetAPI" id="f050a1ef-6d54-4aff-9db4-991f5851c936" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("AttestationDataGet API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call LicAppCreateAPI"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("LicAppCreateAPI")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML"));

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call LicAppGetAPI"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("LicAppGetAPIforDevice")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("LIC_APP_ID",tC.getPropertyValue("LIC_APP_ID"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML"));

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call DeviceGetAPI"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGetAPI")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("Domain_ID",tC.getPropertyValue("Domain_ID"));
myTC.setPropertyValue("Device_ID",tC.getPropertyValue("Device_ID"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("RET_NODE_ACCOUNT_ID_FULL"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("RET_SAML"));
myTC.setPropertyValue("ExpectedReturnCodeGet","200");
myTC.setPropertyValue("ETagResponseType","UnMatch");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call MUCPolicyDeleteAPI"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("RET_NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("SAML",tC.getPropertyValue("RET_SAML"));

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("AccountPolicyDeleteAPI")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call DeviceGetAPI  After Policy Delete"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGetAPI")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("Domain_ID",tC.getPropertyValue("Domain_ID"));
myTC.setPropertyValue("Device_ID",tC.getPropertyValue("Device_ID"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("RET_NODE_ACCOUNT_ID_FULL"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("RET_SAML"));
myTC.setPropertyValue("ExpectedReturnCodeGet","403");
myTC.setPropertyValue("ETagResponseType","FAILURE");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>NODE_ID</con:name><con:value>0701</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>0E3F7BFE3F4D50A1E05305991F0A1547</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:0E3F7BD8C8E46D0EE05307991F0A3BB7</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>0E3F7BCE4A205093E05305991F0A470B</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:0E3F7BCE4A205093E05305991F0A470B</con:value></con:property><con:property><con:name>Username</con:name><con:value>firstfau_20150204_012916</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVbbcuI4EP0VyvO4ZSxjzMUVqOK68UxCMkBu87KlyG3QxJaJJHP7+pEMOJhclt0nl9qt7tPdR0e6EDiOKl5HCOCSJqy0jiMmvMzaMlLOvAQLKjyGYxCeJN6kc33lVcrIw4ctRsnvt4x/nonjOM1qaJKK7ZjVwA5MDCGYjQYQAnaTANSVqxAp+ExIzGTLqCDbNVHFRNUpqntu3UNuuY4qv4zSPXChYiuXMjL2oNaiZcylXHiWtVqtyiunnPCZVUHIth6vryZkDjE22he7irJEvL33J+UACEQRKZMkti6sgs9FILwJnTEsUw77XMFnuZCFmpbyCQSdfTPyvRD4LEyyZQ+zhFGCI7rFuj/XIOdJUOpEs4RTOY8/LcJGOrAJa2ISu8q+GVYR2pmBCgi5wKaYY3sfa6wmwoERKN2N/Zbx7bypZVunHDMRJjwWxeV/wwNsCVGygMAUh7L20M4P+EGn2hdAPJ+RKBV0CSNN1gUmIPbTBHJ+qNIth5Cur6hQBF0Ljc46hney3HWjT2cg5P8Z0NFwdkHucZRCe1Gz3V9hvEr95qo7G4TrkXh5DJviYdRoZQCOnTNDPtrd8oSUOYl2O372ao+/NtXv/u/HcGj37p6uFimvfYf4dnizubW7l9H6cuqzvwA7z5evP6yVbDjbVX37Uh+Mxmy0Gt+tn+wJYiFJiT+46Q+fbi9/DOL5dOC/cHkdJfcpSTrbTe3+pfbqTIXk3d7TC1TQw7VbX28HP7eXD9aW1jbX6G7z3a3+vew3keUO75yrq0Zn5U+Xo+6mGg0cu9rKyznCX7Qdzvwkff4NRB6WmgZ+vzRUU8LyazHTFhqYYebqLbT4CAlMGm29S2uHlyq5o4GnZrhbo4EzrPfsasduIBd1awPkOshtNu0h6tR6rnMQmR2KE4i9hIVU59KSu6PN1wBJ7AlgAXBzmaRK6YTxRcQ+lrjks7E6BAkTME2UPNtzlcQh0WaW4MCOo2hFXrngM2gYpVEib9gN74QSeEGUbVQQ5TEQuqCglVsTWyhmC6ma8YqXqYzs8hKXGaRK27mWWa9SbbiWoPEiAg3VipMgjaC8mC+y1lhi962YmIjMOh5Ms+P2aWGn/w49UD4B1Q5C19IFNUd4d7vUPPdQyOcFO8cFH8J30oDqk6UaKjklOyTFX2880QTJSaIqOkDOPU8NhajWaUF5omBJSc70/L5WMq4Ofvswjldcfi2ny2WaDaCuBY6r8JYu0UIVawIkVdK0mSYvwKw8inXWPZADP0me24sQUzlnE4klxIoxpWx5xsU/AaEvfl9xfX3uq6KQUrVOwlp+ZOtF6tGiEX/5riEe0X7KfKs+q4QHbxP7INZRHlWnuvclZTO90nfA5hNekESFpUq9En4c/KMAHyUvGvMm51ikItRzKuHzPyUtSy0DE5KkTPp9IzMcS2WGU24W4L05vQuTqXH+PKP//j4zaUYBAupRJ2gWX9+ynj4CbHYkt/uk7xS322/0GoNqrY8GmeLWd4rrdLtv/Cyga78zv7cc9emU4+0/</con:value></con:property><con:property><con:name>LicAppID</con:name><con:value>urn%3Adece%3Alicappid%3Aorg%3Adece%3AE49B021A38CC0F36E0401F0A059951E3</con:value></con:property><con:property><con:name>Policy_Class</con:name><con:value>urn:dece:type:policy:ManageAccountConsent</con:value></con:property><con:property><con:name>POLICY_ID</con:name><con:value>urn:dece:policyid:org:dece:0E3F7BFDC333509BE05305991F0A99B6</con:value></con:property><con:property><con:name>LIC_APP_ID</con:name><con:value>urn:dece:licappid:org:dece:0E3F7BFE3F5150A1E05305991F0A1547</con:value></con:property><con:property><con:name>Domain_ID</con:name><con:value>urn:dece:domainid:dece:0E3F721FF3731D08E05307991F0AB2EC</con:value></con:property><con:property><con:name>RET_NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:0E3F7BD8C8E46D0EE05307991F0A3BB7</con:value></con:property><con:property><con:name>RET_NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:0E3F7C14A18050B6E05305991F0A6C53</con:value></con:property><con:property><con:name>RET_SAML</con:name><con:value>SAML2 Assertion=nVbbcuI4EP0VyvO4ZSxjzMUVqOK68UxCMkBu87KlyG3QxJaJJHP7+pEMOJhclt0nl9qt7tPdR0e6EDiOKl5HCOCSJqy0jiMmvMzaMlLOvAQLKjyGYxCeJN6kc33lVcrIw4ctRsnvt4x/nonjOM1qaJKK7ZjVwA5MDCGYjQYQAnaTANSVqxAp+ExIzGTLqCDbNVHFRNUpqntu3UNuuY4qv4zSPXChYiuXMjL2oNaiZcylXHiWtVqtyiunnPCZVUHIth6vryZkDjE22he7irJEvL33J+UACEQRKZMkti6sgs9FILwJnTEsUw77XMFnuZCFmpbyCQSdfTPyvRD4LEyyZQ+zhFGCI7rFuj/XIOdJUOpEs4RTOY8/LcJGOrAJa2ISu8q+GVYR2pmBCgi5wKaYY3sfa6wmwoERKN2N/Zbx7bypZVunHDMRJjwWxeV/wwNsCVGygMAUh7L20M4P+EGn2hdAPJ+RKBV0CSNN1gUmIPbTBHJ+qNIth5Cur6hQBF0Ljc46hney3HWjT2cg5P8Z0NFwdkHucZRCe1Gz3V9hvEr95qo7G4TrkXh5DJviYdRoZQCOnTNDPtrd8oSUOYl2O372ao+/NtXv/u/HcGj37p6uFimvfYf4dnizubW7l9H6cuqzvwA7z5evP6yVbDjbVX37Uh+Mxmy0Gt+tn+wJYiFJiT+46Q+fbi9/DOL5dOC/cHkdJfcpSTrbTe3+pfbqTIXk3d7TC1TQw7VbX28HP7eXD9aW1jbX6G7z3a3+vew3keUO75yrq0Zn5U+Xo+6mGg0cu9rKyznCX7Qdzvwkff4NRB6WmgZ+vzRUU8LyazHTFhqYYebqLbT4CAlMGm29S2uHlyq5o4GnZrhbo4EzrPfsasduIBd1awPkOshtNu0h6tR6rnMQmR2KE4i9hIVU59KSu6PN1wBJ7AlgAXBzmaRK6YTxRcQ+lrjks7E6BAkTME2UPNtzlcQh0WaW4MCOo2hFXrngM2gYpVEib9gN74QSeEGUbVQQ5TEQuqCglVsTWyhmC6ma8YqXqYzs8hKXGaRK27mWWa9SbbiWoPEiAg3VipMgjaC8mC+y1lhi962YmIjMOh5Ms+P2aWGn/w49UD4B1Q5C19IFNUd4d7vUPPdQyOcFO8cFH8J30oDqk6UaKjklOyTFX2880QTJSaIqOkDOPU8NhajWaUF5omBJSc70/L5WMq4Ofvswjldcfi2ny2WaDaCuBY6r8JYu0UIVawIkVdK0mSYvwKw8inXWPZADP0me24sQUzlnE4klxIoxpWx5xsU/AaEvfl9xfX3uq6KQUrVOwlp+ZOtF6tGiEX/5riEe0X7KfKs+q4QHbxP7INZRHlWnuvclZTO90nfA5hNekESFpUq9En4c/KMAHyUvGvMm51ikItRzKuHzPyUtSy0DE5KkTPp9IzMcS2WGU24W4L05vQuTqXH+PKP//j4zaUYBAupRJ2gWX9+ynj4CbHYkt/uk7xS322/0GoNqrY8GmeLWd4rrdLtv/Cyga78zv7cc9emU4+0/</con:value></con:property><con:property><con:name>Device_ID</con:name><con:value>urn:dece:deviceid:org:dece:0E3F7BFE3F4F50A1E05305991F0A1547</con:value></con:property><con:property><con:name>DeviceGetETag</con:name><con:value>"0E3F7C61C02B5097E05305991F0AB8F3:CD40B845"</con:value></con:property><con:property><con:name>DeviceGetLastModified</con:name><con:value>Wed, 04 Feb 2015 07:57:23 GMT</con:value></con:property><con:property><con:name>ORG_ID</con:name><con:value>urn:dece:org:org:dece:o:700031</con:value></con:property><con:property><con:name>DRM_ID</con:name><con:value>urn:dece:drm:adobe:3.0</con:value></con:property><con:property><con:name>licappserial</con:name><con:value>a7b178a0-fab5-49ac-9080-d5efe72524b6</con:value></con:property><con:property><con:name>licappserial_1</con:name><con:value>a7b178a0-fab5-49ac-9080-d5efe72524b6</con:value></con:property><con:property><con:name>licappModel</con:name><con:value>model-3A65F92B71188</con:value></con:property><con:property><con:name>licappModel_1</con:name><con:value>model-3A65F92B71188</con:value></con:property><con:property><con:name>licappManufacturer</con:name><con:value>manfact-97288178864103</con:value></con:property><con:property><con:name>licappManufacturer_1</con:name><con:value>manfact-97288178864103</con:value></con:property><con:property><con:name>licappapplication</con:name><con:value>appid-hKqnPMNYWHC35</con:value></con:property><con:property><con:name>licappapplication_1</con:name><con:value>appid-hKqnPMNYWHC35</con:value></con:property><con:property><con:name>attestionIdFULL</con:name><con:value>urn:dece:attestation:manfact-97288178864103:model-3A65F92B71188</con:value></con:property><con:property><con:name>attestionIdFULL_1</con:name><con:value>urn:dece:attestation:manfact-97288178864103:model-3A65F92B71188</con:value></con:property><con:property><con:name>attestionId</con:name><con:value>urn:dece:attestation:manfact-97288178864103:model-3A65F92B71188</con:value></con:property><con:property><con:name>attestionId_1</con:name><con:value>urn:dece:attestation:manfact-97288178864103:model-3A65F92B71188</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>ccdf09f0-c034-47f6-8cdf-76797af3f771</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>7eb68f58-93ef-4e73-98fe-f10cbdf6193b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>1ad7f9ca-219a-4dce-ba00-8f7d6fd3daca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>26e61b63-18ea-4c73-8766-0f86596b334c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>660de135-7426-4c28-a1d1-049d555c34da</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f050a1ef-6d54-4aff-9db4-991f5851c936</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>353dd261-9048-49d2-8ebf-0f4c43f1ccdb</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="00035_DeviceGetCacheScenario_CS_DeviceGet_ParentNode_MAC-PolicyDelete_DeviceGet_403_Forbidden" searchProperties="true" id="ba7aba22-a294-4c5d-bec8-9b9c0f8c8912"><con:settings/><con:testStep type="groovy" name="Set Coordinator Schema to Leading version" id="2054e75a-2962-45fa-9666-0caf50c67a46"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("versionMinor",tP.getPropertyValue("currentVersionMinor"));
tP.setPropertyValue("versionMajor",tP.getPropertyValue("currentVersionMajor"));

tP.setPropertyValue("CoordinatorSchema", tP.getPropertyValue("CoordinatorSchema_"+ tP.getPropertyValue("versionMinor")));

log.info "CoordinatorSchema set to .... :  " + tP.getPropertyValue("CoordinatorSchema")</script></con:config></con:testStep><con:testStep type="groovy" name="Call AccountCreate API"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("AccountCreateAPI")

tP.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeidRTL"));

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call FirstUserCreateAPI"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("FirstUserCreateAPI")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call STSCreateandGetAPI"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("STSCreateandGetAPI")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("Username",tC.getPropertyValue("Username"));
myTC.setPropertyValue("audience","urn:dece:org:org:dece:0702");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

tC.setPropertyValue("RET_NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("RET_NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("RET_SAML",tC.getPropertyValue("SAML"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call TOUPolicyCreateAPI"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("TOUPolicyCreateAPI")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call MUCPolicyCreateAPI"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("MUCPolicyCreateAPI")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call MUCPolicyGetAPI"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("Policy_Class","urn:dece:type:policy:ManageAccountConsent");

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("AccountPolicyGetAPI")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call STSCreateandGetAPI for Device"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("STSCreateandGetAPIforDevices")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("Username",tC.getPropertyValue("Username"));

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call AttestationDataCreateAPI" id="56f1f45c-1268-4f87-9a53-c7f574c27050" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("AttestationDataCreate API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call AttestationDataGetAPI" id="9f161342-2fcc-43d6-bb41-d44e0a056be3" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("AttestationDataGet API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call LicAppCreateAPI"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("LicAppCreateAPI")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML"));

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call LicAppGetAPI"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("LicAppGetAPIforDevice")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("LIC_APP_ID",tC.getPropertyValue("LIC_APP_ID"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML"));

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call DeviceGetAPI"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGetAPI")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
myTC.setPropertyValue("NODE_ID","0702");
myTC.setPropertyValue("Domain_ID",tC.getPropertyValue("Domain_ID"));
myTC.setPropertyValue("Device_ID",tC.getPropertyValue("Device_ID"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("RET_NODE_ACCOUNT_ID_FULL"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("RET_SAML"));
myTC.setPropertyValue("ExpectedReturnCodeGet","200");
myTC.setPropertyValue("ETagResponseType","UnMatch");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call MUCPolicyDeleteAPI"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("RET_NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("SAML",tC.getPropertyValue("RET_SAML"));
tC.setPropertyValue("NODE_ID","0701");

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("AccountPolicyDeleteAPI")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call DeviceGetAPI  After Policy Delete"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGetAPI")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
myTC.setPropertyValue("NODE_ID","0702");
myTC.setPropertyValue("Domain_ID",tC.getPropertyValue("Domain_ID"));
myTC.setPropertyValue("Device_ID",tC.getPropertyValue("Device_ID"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("RET_NODE_ACCOUNT_ID_FULL"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("RET_SAML"));
myTC.setPropertyValue("ExpectedReturnCodeGet","403");
myTC.setPropertyValue("ETagResponseType","FAILURE");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>NODE_ID</con:name><con:value>0701</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>0E3F7BFE54BF50A5E05305991F0A0B26</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:0E3F7C15D78B50BAE05305991F0A172A</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>0E3F7BFD94735095E05305991F0AC8D4</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:0E3F7BFD94735095E05305991F0AC8D4</con:value></con:property><con:property><con:name>Username</con:name><con:value>firstfau_20150204_012948</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVbbcps6FP0VD33sYC6+EJjYMzhOprS5jZ0mxC9niNhgpSCwJMDJ11fCNjWuk+NznhhtttZe+6IlnbMgTUzHZQwoxxnprNOEMKe2jpSCEicLGGYOCVJgDkfO3L25dsyu7gS7LUrHm46Uf/ReaL1EwzPVCK1I7Ucvlmr3IqQODTt4MdAQQtMWrowV4BHGA8JHiqkbA1U3Vb3/oFvOwHJ6dtc8sxZK5xEoE9jCpasrW1JrNlKWnOeOplVV1a163YzGmqnrhubfXM/REtJAGZ9vMqoD0fHWH3VDQJAkqIuyVDvXWj7nIXPmOCYBLyhsY4UfxdI13daET8hw/EVp9kLokSirlxcByQhGQYLfA1mfG+DLLOy4SZxRzJfph0kYugRWYY1UZPTJF0VrUzsRqMWQskBly8DYYs0gAgoEQefnzBspX07rWr31gQaERRlNWXv53/gAKSHJcghVtktrS+10wCOVGp8DcjyCkoLhEm7lsOYBArbtJqDToTr3FCK8vsZMDOiaSXbaPr2D5aYaUxwD4/+nQXvN2YA8BkkBY/8xukEFfjDWE3ulPT17vs3ibyx71eNRTWDfuTY0rd0sD4ayGaLNjjLPr9deZTz5+XyI9Vlq9DVW+Z7fc+3H995ilmrU+/F6+bUw7szFPIq0xzCuygymKLF/3g7W96tq6JdPg8H33tfe0yye3xTUfs5Y9HUV+8/vl7DAU/PdCsu3X9Wvt34ZTs0n/xo9Xw+nPxb6j7vFykO2O7t9Xfo3K1qh73581ZtQ/5EV1WT+7fuCVv7P5Pk13aZ7wL9t2535efHyCojvlnIMvGnnSnQp4J+LmbTgUI1qVyeX4sM4EK6M5S6pHU4h5A6HjujhZq1f9q6sC6N/5brWcGrol/qgp1u2bVzprj51JzuR2bA4oHiRkQjLWFJyN2PzOUGUOgxICFQts0IoHVM+QZwGPOh4ZCYOQUYYPGRCnosh7r/yPssxAiMm0Spc2wlZVabSuc34HbmjbsSBtjTZ0FuaPAOEcwxSuOVcMzHYjItarIKy4InRLYMugUJIO5Uq65j9s4HGcJonIJlqaRYWCXTzZV5XRmObr6kGiNXW2eVDfdo+zOvw364EwifE0oHJXCYg2ghHLhdzl8jHCff2E97Bu0WI5cES9eQUow2T9q8/YyLno5kRkdGOcuN5aGihaocJNYHCEqNm0JvrWqi4OPfjXTtWQXfVLcqyqBtgSX2jAl6TKWq6qc0BFUKZ3h6yX0C0BkU76RpoiB8Eb+xtigVfkjkPOKRiYjr18oR7fw5M3vueGPX1qY+KVkhROg5rfsx2kYg3i2T86bMGOUj6CfO9+FQZDf907AjWXhyRp7j2OSaxXMkr4O2DuUCZgMVCvDK6D34M4FjwtrEpcsOFi4F6KTh8/KcjVWmkBAhlBeHeVKkN+0pZ8+RvOTh/nP6CqcW4eZ3hf3+eqbgeAQTiTcdwjS8vWUceARLvqe026BHBHUyts8lAn7i14A42gmtYptsUpcVu/Jf5b8tenQ5nfPwb</con:value></con:property><con:property><con:name>LicAppID</con:name><con:value>urn%3Adece%3Alicappid%3Aorg%3Adece%3AE49B021A38CC0F36E0401F0A059951E3</con:value></con:property><con:property><con:name>Policy_Class</con:name><con:value>urn:dece:type:policy:ManageAccountConsent</con:value></con:property><con:property><con:name>POLICY_ID</con:name><con:value>urn:dece:policyid:org:dece:0E3F7C124C8450B0E05305991F0A4002</con:value></con:property><con:property><con:name>LIC_APP_ID</con:name><con:value>urn:dece:licappid:org:dece:0E3F7BFE54C250A5E05305991F0A0B26</con:value></con:property><con:property><con:name>Domain_ID</con:name><con:value>urn:dece:domainid:dece:0E3F6571301C1CFCE05307991F0A14F2</con:value></con:property><con:property><con:name>RET_NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:0E3F7C15D78B50BAE05305991F0A172A</con:value></con:property><con:property><con:name>RET_NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:0E3F7C14FAA76D10E05307991F0A0DAB</con:value></con:property><con:property><con:name>RET_SAML</con:name><con:value>SAML2 Assertion=nVbbcps6FP0VD33sYC6+EJjYMzhOprS5jZ0mxC9niNhgpSCwJMDJ11fCNjWuk+NznhhtttZe+6IlnbMgTUzHZQwoxxnprNOEMKe2jpSCEicLGGYOCVJgDkfO3L25dsyu7gS7LUrHm46Uf/ReaL1EwzPVCK1I7Ucvlmr3IqQODTt4MdAQQtMWrowV4BHGA8JHiqkbA1U3Vb3/oFvOwHJ6dtc8sxZK5xEoE9jCpasrW1JrNlKWnOeOplVV1a163YzGmqnrhubfXM/REtJAGZ9vMqoD0fHWH3VDQJAkqIuyVDvXWj7nIXPmOCYBLyhsY4UfxdI13daET8hw/EVp9kLokSirlxcByQhGQYLfA1mfG+DLLOy4SZxRzJfph0kYugRWYY1UZPTJF0VrUzsRqMWQskBly8DYYs0gAgoEQefnzBspX07rWr31gQaERRlNWXv53/gAKSHJcghVtktrS+10wCOVGp8DcjyCkoLhEm7lsOYBArbtJqDToTr3FCK8vsZMDOiaSXbaPr2D5aYaUxwD4/+nQXvN2YA8BkkBY/8xukEFfjDWE3ulPT17vs3ibyx71eNRTWDfuTY0rd0sD4ayGaLNjjLPr9deZTz5+XyI9Vlq9DVW+Z7fc+3H995ilmrU+/F6+bUw7szFPIq0xzCuygymKLF/3g7W96tq6JdPg8H33tfe0yye3xTUfs5Y9HUV+8/vl7DAU/PdCsu3X9Wvt34ZTs0n/xo9Xw+nPxb6j7vFykO2O7t9Xfo3K1qh73581ZtQ/5EV1WT+7fuCVv7P5Pk13aZ7wL9t2535efHyCojvlnIMvGnnSnQp4J+LmbTgUI1qVyeX4sM4EK6M5S6pHU4h5A6HjujhZq1f9q6sC6N/5brWcGrol/qgp1u2bVzprj51JzuR2bA4oHiRkQjLWFJyN2PzOUGUOgxICFQts0IoHVM+QZwGPOh4ZCYOQUYYPGRCnosh7r/yPssxAiMm0Spc2wlZVabSuc34HbmjbsSBtjTZ0FuaPAOEcwxSuOVcMzHYjItarIKy4InRLYMugUJIO5Uq65j9s4HGcJonIJlqaRYWCXTzZV5XRmObr6kGiNXW2eVDfdo+zOvw364EwifE0oHJXCYg2ghHLhdzl8jHCff2E97Bu0WI5cES9eQUow2T9q8/YyLno5kRkdGOcuN5aGihaocJNYHCEqNm0JvrWqi4OPfjXTtWQXfVLcqyqBtgSX2jAl6TKWq6qc0BFUKZ3h6yX0C0BkU76RpoiB8Eb+xtigVfkjkPOKRiYjr18oR7fw5M3vueGPX1qY+KVkhROg5rfsx2kYg3i2T86bMGOUj6CfO9+FQZDf907AjWXhyRp7j2OSaxXMkr4O2DuUCZgMVCvDK6D34M4FjwtrEpcsOFi4F6KTh8/KcjVWmkBAhlBeHeVKkN+0pZ8+RvOTh/nP6CqcW4eZ3hf3+eqbgeAQTiTcdwjS8vWUceARLvqe026BHBHUyts8lAn7i14A42gmtYptsUpcVu/Jf5b8tenQ5nfPwb</con:value></con:property><con:property><con:name>Device_ID</con:name><con:value>urn:dece:deviceid:org:dece:0E3F7BFE54C050A5E05305991F0A0B26</con:value></con:property><con:property><con:name>DeviceGetETag</con:name><con:value>"0E3F7BFEABA850B2E05305991F0AE1D0:3D6FAACB"</con:value></con:property><con:property><con:name>DeviceGetLastModified</con:name><con:value>Wed, 04 Feb 2015 07:57:57 GMT</con:value></con:property><con:property><con:name>ORG_ID</con:name><con:value>urn:dece:org:org:dece:o:700031</con:value></con:property><con:property><con:name>DRM_ID</con:name><con:value>urn:dece:drm:adobe:3.0</con:value></con:property><con:property><con:name>licappserial</con:name><con:value>ae3045c8-6e84-4675-8e10-429aa2cce5ca</con:value></con:property><con:property><con:name>licappserial_1</con:name><con:value>ae3045c8-6e84-4675-8e10-429aa2cce5ca</con:value></con:property><con:property><con:name>licappModel</con:name><con:value>model-3A65F92B71196</con:value></con:property><con:property><con:name>licappModel_1</con:name><con:value>model-3A65F92B71196</con:value></con:property><con:property><con:name>licappManufacturer</con:name><con:value>manfact-9728817886483</con:value></con:property><con:property><con:name>licappManufacturer_1</con:name><con:value>manfact-9728817886483</con:value></con:property><con:property><con:name>licappapplication</con:name><con:value>appid-hKqnPMNYWHC87</con:value></con:property><con:property><con:name>licappapplication_1</con:name><con:value>appid-hKqnPMNYWHC87</con:value></con:property><con:property><con:name>attestionIdFULL</con:name><con:value>urn%3Adece%3Aattestation%3Amanfact-9728817886483%3Amodel-3A65F92B71196</con:value></con:property><con:property><con:name>attestionIdFULL_1</con:name><con:value>urn%3Adece%3Aattestation%3Amanfact-9728817886483%3Amodel-3A65F92B71196</con:value></con:property><con:property><con:name>attestionId</con:name><con:value>urn:dece:attestation:manfact-9728817886483:model-3A65F92B71196</con:value></con:property><con:property><con:name>attestionId_1</con:name><con:value>urn:dece:attestation:manfact-9728817886483:model-3A65F92B71196</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>ccdf09f0-c034-47f6-8cdf-76797af3f771</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>7eb68f58-93ef-4e73-98fe-f10cbdf6193b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>1ad7f9ca-219a-4dce-ba00-8f7d6fd3daca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>26e61b63-18ea-4c73-8766-0f86596b334c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>56f1f45c-1268-4f87-9a53-c7f574c27050</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>9f161342-2fcc-43d6-bb41-d44e0a056be3</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2054e75a-2962-45fa-9666-0caf50c67a46</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="00036_DeviceGetCacheScenario_NonCS_DeviceGet_MUC-PolicyDelete_DeviceGet_403_Forbidden" searchProperties="true" id="3cabb6fd-0938-4e83-816f-3e845d92759a"><con:settings/><con:testStep type="groovy" name="Set Coordinator Schema to Leading version" id="87a08604-cf5a-4d7e-ad39-01717ecb69f8"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("versionMinor",tP.getPropertyValue("currentVersionMinor"));
tP.setPropertyValue("versionMajor",tP.getPropertyValue("currentVersionMajor"));

tP.setPropertyValue("CoordinatorSchema", tP.getPropertyValue("CoordinatorSchema_"+ tP.getPropertyValue("versionMinor")));

log.info "CoordinatorSchema set to .... :  " + tP.getPropertyValue("CoordinatorSchema")</script></con:config></con:testStep><con:testStep type="groovy" name="Call AccountCreate API"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("AccountCreateAPI")

tP.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeidRTL"));

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call FirstUserCreateAPI"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("FirstUserCreateAPI")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call STSCreateandGetAPI"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("STSCreateandGetAPI")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("Username",tC.getPropertyValue("Username"));
myTC.setPropertyValue("audience","");
def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

tC.setPropertyValue("RET_NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("RET_NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("RET_NODE_USER_ID",tC.getPropertyValue("NODE_USER_ID"));
tC.setPropertyValue("RET_SAML",tC.getPropertyValue("SAML"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call TOUPolicyCreateAPI"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("TOUPolicyCreateAPI")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call MUCPolicyCreateAPI"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("MUCPolicyCreateAPI")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call MUCPolicyGetAPI" id="ccdf09f0-c034-47f6-8cdf-76797af3f771"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("Policy_Class","urn:dece:type:policy:ManageUserConsent");

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("UserPolicyGetAPI")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call STSCreateandGetAPI for Device" id="1ad7f9ca-219a-4dce-ba00-8f7d6fd3daca"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("STSCreateandGetAPIforDevices")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("Username",tC.getPropertyValue("Username"));

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call AttestationDataCreateAPI" id="b11821df-2904-41d6-bc00-99f9943d4592" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("AttestationDataCreate API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call AttestationDataGetAPI" id="e760e4ab-64c8-47df-a7b4-e2e2fe749865" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("AttestationDataGet API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call LicAppCreateAPI"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("LicAppCreateAPI")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML"));

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call LicAppGetAPI"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("LicAppGetAPIforDevice")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("LIC_APP_ID",tC.getPropertyValue("LIC_APP_ID"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML"));

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call DeviceGetAPI" id="26e61b63-18ea-4c73-8766-0f86596b334c"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGetAPI")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("Domain_ID",tC.getPropertyValue("Domain_ID"));
myTC.setPropertyValue("Device_ID",tC.getPropertyValue("Device_ID"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("RET_NODE_ACCOUNT_ID_FULL"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("RET_SAML"));
myTC.setPropertyValue("ExpectedReturnCodeGet","200");
myTC.setPropertyValue("ETagResponseType","UnMatch");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call MUCPolicyDeleteAPI" id="7eb68f58-93ef-4e73-98fe-f10cbdf6193b"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("RET_NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID",tC.getPropertyValue("RET_NODE_USER_ID"));
tC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("RET_NODE_USER_ID_FULL"));
tC.setPropertyValue("SAML",tC.getPropertyValue("RET_SAML"));

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("UserPolicyDeleteAPI")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call DeviceGetAPI  After Policy Delete" id="3887414e-de7d-4973-acac-1a5559c8a908"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGetAPI")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("Domain_ID",tC.getPropertyValue("Domain_ID"));
myTC.setPropertyValue("Device_ID",tC.getPropertyValue("Device_ID"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("RET_NODE_ACCOUNT_ID_FULL"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("RET_SAML"));
myTC.setPropertyValue("ExpectedReturnCodeGet","403");
myTC.setPropertyValue("ETagResponseType","FAILURE");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call MUCPolicyCreateAPI 1" id="b366a31b-3fe4-40cb-bf60-511d058b5006" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("MUCPolicyCreateAPI")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call DeviceGetAPI  After MUC Policy Create" id="f186da08-3084-424e-86a3-715f74852dcb" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGetAPI")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("Domain_ID",tC.getPropertyValue("Domain_ID"));
myTC.setPropertyValue("Device_ID",tC.getPropertyValue("Device_ID"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("RET_NODE_ACCOUNT_ID_FULL"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("RET_SAML"));
myTC.setPropertyValue("ExpectedReturnCodeGet","200");
myTC.setPropertyValue("ETagResponseType","UnMatch");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>NODE_ID</con:name><con:value>0701</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>0E3F7BFE54CF50A5E05305991F0A0B26</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:0E3F7BD722A5509FE05305991F0AFDB1</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>0E3F7C1565A36D12E05307991F0A994E</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:0E3F7C1565A36D12E05307991F0A994E</con:value></con:property><con:property><con:name>Username</con:name><con:value>firstfau_20150204_013021</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZdU/I6EP4rTL10Sls+BDrCDIIoCqiAit6cSdNtyWublCYF9Ne/SYFK8eNwzlUn283us7tPnuScozAo2W3OIRaE0cI6DCi3U2tTS2JqM8QJtykKgdsC25P2cGCXiqaNdlu0Qr/b1P6pQ9WpOB7Wy47n6RXHLOkNadCdcr1SKdfLluXVpCvnCfQpF4iKplYyraouHc3K1KzZ1bptWcX6WeVVKzxBzGVs6VI0tS2oNW9qcyEi2zBWq1VxVS6y2DdKpmkZs+FggucQIq11vqkoTRS3tv646AKGIMBFzELj3Mj5nLvcnhCfIpHEsM3l/pTLNMyGIX1cTvwTLdsLbp96LF12EGWUYBSQD6T6MwQxZ26hHfgsJmIe/liEZarAOqyxjq0KPdGMPLQjA+UQxhzpfI6sbawxeBADxVB4HPeb2slxU0u3TmNEucfikOeX/w0P0CUELAJX57uyttCOD/hNp1rngO0+xUHCyRJGiqwRwsC30wR8fKjCfQweWQ8IlwRdc4XO2Id3sNx0o0t84OL/DGhvOJsgTyhIoFV2o3KA3eFDZzSf+bPecHo7cpYPs4T1mymAfefUkI12szwgZUaizY6n2uklGziD15DSxL+e+6Y/HNx5Yn1qNU6fB8t2f+Q+Xon7+uvA/1hdXaOwg7uPvchfYPHwXL8aocCB9+fxZe1+4dMrAYFnyt+9l17Ndyqzl7nzevHRjcZvt6V7lnRuV7dr88Gvd9Hpn8Xsabpybmb969rN5OqaLNzpzdx7nvoP4YvpPJOBG8az19qN33sP6OLmrZmVs4c/b9ud+Uni/AEsdktFg3630JNTQuJ3MVMW4upe6mpHSny4ACq0ltqltMNOpNwR15Yz3KzNy3Kv1rGqZ9V2+axrlS7NatmsNRpWz2w3GpXLnchsUBxA7DDqEZVLSe6GNr8DxKHNgboQ60uWSKXj2i8Ru0igQp+O5SFglMOUSXl2P96ss8o7iuu1JKmb1fgsttw1q2uFERN39C5uewLinCRbZk6Sx4BJREDptqI1l7zmQrZigZaJCKziEhUpJFLZYyWydqlSrxqchFEACqgRMjcJoBjNo7QxBt98SzrCPLWOL6fpYfuxrMN/uw5IH5coB65quQA5RfjmbjF3hfxccHm/4F34duISda5kO0VM8AZJ/tcnSxQ9MorIinaQM89DQy6qcVhQlshdEpzxPLutpYjLY9/ajWOBiotislwm6QBqSt5iGd5QJRpmyZgATqQwvU/ZG1Aji2IcdQtkwA+SZ/Y8xETM6UQgAaFkTCFdHnHtT4Cra78vmb4+9k2RSylbJ2AtvrN1AvlkUYh/fdVgGys/ab6XnxWL3c+JfRNrL4+sU976glBfrdQN8P4DLzCTYYnULhbvB/8uwHfJ88asyRkWIQnlJAJ+/lNQotTUEMYsoaLf1VLDvlCmOMV7BPan05cwqRZnjzPy768znaQUwCCfdJyk8dUda6sjQP09sd0m/aK3F91aqdSuVs1GL9Xb6kZve90LK2tKDl3ri/mrZa9Phxxv/QU=</con:value></con:property><con:property><con:name>LicAppID</con:name><con:value>urn%3Adece%3Alicappid%3Aorg%3Adece%3AE49B021A38CC0F36E0401F0A059951E3</con:value></con:property><con:property><con:name>Policy_Class</con:name><con:value>urn:dece:type:policy:ManageUserConsent</con:value></con:property><con:property><con:name>POLICY_ID</con:name><con:value>urn:dece:policyid:org:dece:0E3F7BD8C91F6D0EE05307991F0A3BB7</con:value></con:property><con:property><con:name>LIC_APP_ID</con:name><con:value>urn:dece:licappid:org:dece:0E3F7BFE3F7B50A1E05305991F0A1547</con:value></con:property><con:property><con:name>Domain_ID</con:name><con:value>urn:dece:domainid:dece:0E3F721FF3751D08E05307991F0AB2EC</con:value></con:property><con:property><con:name>RET_NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:0E3F7BD722A5509FE05305991F0AFDB1</con:value></con:property><con:property><con:name>RET_NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:0E3F7C1565A36D12E05307991F0A994E</con:value></con:property><con:property><con:name>RET_SAML</con:name><con:value>SAML2 Assertion=nVZdU/I6EP4rTL10Sls+BDrCDIIoCqiAit6cSdNtyWublCYF9Ne/SYFK8eNwzlUn283us7tPnuScozAo2W3OIRaE0cI6DCi3U2tTS2JqM8QJtykKgdsC25P2cGCXiqaNdlu0Qr/b1P6pQ9WpOB7Wy47n6RXHLOkNadCdcr1SKdfLluXVpCvnCfQpF4iKplYyraouHc3K1KzZ1bptWcX6WeVVKzxBzGVs6VI0tS2oNW9qcyEi2zBWq1VxVS6y2DdKpmkZs+FggucQIq11vqkoTRS3tv646AKGIMBFzELj3Mj5nLvcnhCfIpHEsM3l/pTLNMyGIX1cTvwTLdsLbp96LF12EGWUYBSQD6T6MwQxZ26hHfgsJmIe/liEZarAOqyxjq0KPdGMPLQjA+UQxhzpfI6sbawxeBADxVB4HPeb2slxU0u3TmNEucfikOeX/w0P0CUELAJX57uyttCOD/hNp1rngO0+xUHCyRJGiqwRwsC30wR8fKjCfQweWQ8IlwRdc4XO2Id3sNx0o0t84OL/DGhvOJsgTyhIoFV2o3KA3eFDZzSf+bPecHo7cpYPs4T1mymAfefUkI12szwgZUaizY6n2uklGziD15DSxL+e+6Y/HNx5Yn1qNU6fB8t2f+Q+Xon7+uvA/1hdXaOwg7uPvchfYPHwXL8aocCB9+fxZe1+4dMrAYFnyt+9l17Ndyqzl7nzevHRjcZvt6V7lnRuV7dr88Gvd9Hpn8Xsabpybmb969rN5OqaLNzpzdx7nvoP4YvpPJOBG8az19qN33sP6OLmrZmVs4c/b9ud+Uni/AEsdktFg3630JNTQuJ3MVMW4upe6mpHSny4ACq0ltqltMNOpNwR15Yz3KzNy3Kv1rGqZ9V2+axrlS7NatmsNRpWz2w3GpXLnchsUBxA7DDqEZVLSe6GNr8DxKHNgboQ60uWSKXj2i8Ru0igQp+O5SFglMOUSXl2P96ss8o7iuu1JKmb1fgsttw1q2uFERN39C5uewLinCRbZk6Sx4BJREDptqI1l7zmQrZigZaJCKziEhUpJFLZYyWydqlSrxqchFEACqgRMjcJoBjNo7QxBt98SzrCPLWOL6fpYfuxrMN/uw5IH5coB65quQA5RfjmbjF3hfxccHm/4F34duISda5kO0VM8AZJ/tcnSxQ9MorIinaQM89DQy6qcVhQlshdEpzxPLutpYjLY9/ajWOBiotislwm6QBqSt5iGd5QJRpmyZgATqQwvU/ZG1Aji2IcdQtkwA+SZ/Y8xETM6UQgAaFkTCFdHnHtT4Cra78vmb4+9k2RSylbJ2AtvrN1AvlkUYh/fdVgGys/ab6XnxWL3c+JfRNrL4+sU976glBfrdQN8P4DLzCTYYnULhbvB/8uwHfJ88asyRkWIQnlJAJ+/lNQotTUEMYsoaLf1VLDvlCmOMV7BPan05cwqRZnjzPy768znaQUwCCfdJyk8dUda6sjQP09sd0m/aK3F91aqdSuVs1GL9Xb6kZve90LK2tKDl3ri/mrZa9Phxxv/QU=</con:value></con:property><con:property><con:name>Device_ID</con:name><con:value>urn:dece:deviceid:org:dece:0E3F7BFE3F7950A1E05305991F0A1547</con:value></con:property><con:property><con:name>DeviceGetETag</con:name><con:value>"0E3F7BD8C9236D0EE05307991F0A3BB7:82B259AE"</con:value></con:property><con:property><con:name>DeviceGetLastModified</con:name><con:value>Wed, 04 Feb 2015 07:58:29 GMT</con:value></con:property><con:property><con:name>RET_NODE_USER_ID</con:name><con:value>0E3F7C1565A36D12E05307991F0A994E</con:value></con:property><con:property><con:name>NODE_FULL_ID</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>ORG_ID</con:name><con:value>urn:dece:org:org:dece:o:700031</con:value></con:property><con:property><con:name>DRM_ID</con:name><con:value>urn:dece:drm:adobe:3.0</con:value></con:property><con:property><con:name>licappserial</con:name><con:value>a2eee72a-8fb1-4a7c-9ac5-3efeb787ee8d</con:value></con:property><con:property><con:name>licappserial_1</con:name><con:value>a2eee72a-8fb1-4a7c-9ac5-3efeb787ee8d</con:value></con:property><con:property><con:name>licappModel</con:name><con:value>model-3A65F92B71173</con:value></con:property><con:property><con:name>licappModel_1</con:name><con:value>model-3A65F92B71173</con:value></con:property><con:property><con:name>licappManufacturer</con:name><con:value>manfact-9728817886459</con:value></con:property><con:property><con:name>licappManufacturer_1</con:name><con:value>manfact-9728817886459</con:value></con:property><con:property><con:name>licappapplication</con:name><con:value>appid-hKqnPMNYWHC45</con:value></con:property><con:property><con:name>licappapplication_1</con:name><con:value>appid-hKqnPMNYWHC45</con:value></con:property><con:property><con:name>attestionIdFULL</con:name><con:value>urn:dece:attestation:manfact-9728817886459:model-3A65F92B71173</con:value></con:property><con:property><con:name>attestionIdFULL_1</con:name><con:value>urn:dece:attestation:manfact-9728817886459:model-3A65F92B71173</con:value></con:property><con:property><con:name>attestionId</con:name><con:value>urn:dece:attestation:manfact-9728817886459:model-3A65F92B71173</con:value></con:property><con:property><con:name>attestionId_1</con:name><con:value>urn:dece:attestation:manfact-9728817886459:model-3A65F92B71173</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>ccdf09f0-c034-47f6-8cdf-76797af3f771</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>7eb68f58-93ef-4e73-98fe-f10cbdf6193b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>1ad7f9ca-219a-4dce-ba00-8f7d6fd3daca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>26e61b63-18ea-4c73-8766-0f86596b334c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>3887414e-de7d-4973-acac-1a5559c8a908</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b11821df-2904-41d6-bc00-99f9943d4592</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>e760e4ab-64c8-47df-a7b4-e2e2fe749865</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>87a08604-cf5a-4d7e-ad39-01717ecb69f8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="00037_DeviceGetCacheScenario_CS_DeviceGet_ParentNode_MUC-PolicyDelete_DeviceGet_403_Forbidden" searchProperties="true" id="35ce48ae-a2a7-41aa-ad95-f9c2e6aecb0c"><con:settings/><con:testStep type="groovy" name="Set Coordinator Schema to Leading version" id="b0c9ac22-1797-49c0-86c0-191527820fe0"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("versionMinor",tP.getPropertyValue("currentVersionMinor"));
tP.setPropertyValue("versionMajor",tP.getPropertyValue("currentVersionMajor"));

tP.setPropertyValue("CoordinatorSchema", tP.getPropertyValue("CoordinatorSchema_"+ tP.getPropertyValue("versionMinor")));

log.info "CoordinatorSchema set to .... :  " + tP.getPropertyValue("CoordinatorSchema")</script></con:config></con:testStep><con:testStep type="groovy" name="Call AccountCreate API"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("AccountCreateAPI")

tP.setPropertyValue("NODE_ID",tP.getPropertyValue("nodeidRTL"));

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call FirstUserCreateAPI"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("FirstUserCreateAPI")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call STSCreateandGetAPI"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("STSCreateandGetAPI")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("Username",tC.getPropertyValue("Username"));
myTC.setPropertyValue("audience","urn:dece:org:org:dece:0702");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

tC.setPropertyValue("RET_NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("RET_NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("RET_SAML",tC.getPropertyValue("SAML"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call TOUPolicyCreateAPI"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("TOUPolicyCreateAPI")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call MUCPolicyCreateAPI"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("MUCPolicyCreateAPI")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call MUCPolicyGetAPI"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("Policy_Class","urn:dece:type:policy:ManageUserConsent");

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("UserPolicyGetAPI")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call STSCreateandGetAPI for Device"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("STSCreateandGetAPIforDevices")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("Username",tC.getPropertyValue("Username"));

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call AttestationDataCreateAPI" id="3f7c689f-0adf-4d7f-bc88-cbd13f863397" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("AttestationDataCreate API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call AttestationDataGetAPI" id="68184ccf-08f9-444d-a995-e2efe69b1284" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("AttestationDataGet API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call LicAppCreateAPI"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("LicAppCreateAPI")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML"));

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call LicAppGetAPI"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("LicAppGetAPIforDevice")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("LIC_APP_ID",tC.getPropertyValue("LIC_APP_ID"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML"));

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call DeviceGetAPI"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGetAPI")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
myTC.setPropertyValue("NODE_ID","0702");
myTC.setPropertyValue("Domain_ID",tC.getPropertyValue("Domain_ID"));
myTC.setPropertyValue("Device_ID",tC.getPropertyValue("Device_ID"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("RET_NODE_ACCOUNT_ID_FULL"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("RET_SAML"));
myTC.setPropertyValue("ExpectedReturnCodeGet","200");
myTC.setPropertyValue("ETagResponseType","UnMatch");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call MUCPolicyDeleteAPI"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("RET_NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("NODE_USER_ID_FULL",tC.getPropertyValue("RET_NODE_USER_ID_FULL"));
tC.setPropertyValue("SAML",tC.getPropertyValue("RET_SAML"));

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("UserPolicyDeleteAPI")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call DeviceGetAPI  After Policy Delete"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGetAPI")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
myTC.setPropertyValue("NODE_ID","0702");
myTC.setPropertyValue("Domain_ID",tC.getPropertyValue("Domain_ID"));
myTC.setPropertyValue("Device_ID",tC.getPropertyValue("Device_ID"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("RET_NODE_ACCOUNT_ID_FULL"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("RET_SAML"));
myTC.setPropertyValue("ExpectedReturnCodeGet","403");
myTC.setPropertyValue("ETagResponseType","FAILURE");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>NODE_ID</con:name><con:value>0701</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>0E3F7C14524650B4E05305991F0A9DD7</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:0E3F7BFE54D650A5E05305991F0A0B26</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>0E3F7C14FABF6D10E05307991F0A0DAB</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:0E3F7BD722BE509FE05305991F0AFDB1</con:value></con:property><con:property><con:name>Username</con:name><con:value>firstfau_20150204_013056</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVbbcuI4EP0VynmcMpbN3RWoggALk2RIgJDLy5aQ26Bgy2DJBvL1KxlwMAlZdp9cardOn77oSNcc+55lNzmHUNCA5Ta+x7idWOtaFDI7wJxym2EfuC2IPWre39lWHtn4sEXL9dt17W8XV0qFYq2qVypuRS+SclHHDjF1E01dExcKgMyadOU8gj7jAjNR1yxklnRk6ag4RhW7VLWL5bxZNN+03ARCLrGlSx5pe1IbXtfmQixtw1iv1/l1IR+EM8NCyDRe7u9GZA4+1hrXu4ySQGFj70/yDhDwPJIngW9cGxmfa4fbIzpjWEQh7GM552IhA9UM6eNwOrvS0r3g9JkbJMsbzAJGCfboB1b1uQcxD5xc05sFIRVz/2wSJlLAOmyITswiu9KMLLULgTIMQ451PsfmHmsILoTACOSehv26dnVZ15Kt4xAz7gahz7PL/8YHWAxesARH54e09tQuB/ymUo1rIHafES/iNIY/aliXmADfdxPI5VC5hxBcurmjXA7ohit2xjG9k+WuGm06Ay7+T4OOmrMDmWAvgkb7AaaTmC4MPCvGhlN+GQ+njzfVN/9pVk8IHDsnhrS1u+XJUKZDtNvhduZObfjc64uVHy8cf8Vr3d8G+qDW07Y76XTues/kGTmD3n2h4z+QkEfvzfJkHHnbp/L0Zv7XrQi78MoHL7/M5u2i51t3tNcnr+2nj60YlbubZXXLUK9kbNzV69R62bwuupWOt4VecWLd/pqve8M3dvtiubftXpVNBvfD+JGOKRu2NvS357Tul+NJbz4I78zHdT1N54h/1nY486No+g5EHJZqDPrtXFd2CYufxUxZqKO7iau9VOLDBTChNdQupR12JOWOOrbs4W6NOoVupdWuWFarU0K1bgeVCqhUq5ld1Oy2W+ZBZHYsTijeBMylKpaS3N3Y/EyQ+DYH5kCox0EklY5rPyC2scC5PhvKQxAwDuNAyrPJq7XYWrmLikf8xUcwjxfv3sdyq+X+BGLABmHTFRBmJNlEGUkeAqFLCkq31VhzOddcyFKscBwJz8zHOM8gksoeKpG1rWK1ZHDqLz1QRA0/cCIP8sv5MimMwXdfS8eEJ9ZhZ5wctrNpnf47VED6OFQ5cJVLC2QX4Zu7pXBI5HzCheOED/DNyKHqXMlyipCSHZPsr88pUeORjojM6EA59Tw1ZFCN04TSQE5MSTrn6W0tRVwe+8ahHSucX+WjOI6SBlSUvIUS3lApGsgyRkAiKUzbcbAAZqQoxkW3QEr8JHhqz1KMxJyNBBbgy4nJJcsLrv0RcHXt9+Wkby59U2RCytIJ2IjvbDeefLIoxj++aohNlJ80P8jPOgidz459g3UUR+Ypb31B2Uyt1A2wPTMXJJCwVGpXEB6DfwfwXfCsMS1yykXIgZpGAs7/ySlRqmuYkCBiot/WEsOxUCY8xXYJ9qfTF5hEi9PHGf3315lOkxEgIJ90nCb46o611RFgsyOx3Qf9qrfdTqnYLpdQs3Sst6hlldOiZNg1vpi/Wo7qdDrjjX8A</con:value></con:property><con:property><con:name>LicAppID</con:name><con:value>urn%3Adece%3Alicappid%3Aorg%3Adece%3AE49B021A38CC0F36E0401F0A059951E3</con:value></con:property><con:property><con:name>Policy_Class</con:name><con:value>urn:dece:type:policy:ManageUserConsent</con:value></con:property><con:property><con:name>POLICY_ID</con:name><con:value>urn:dece:policyid:org:dece:0E3F7BD90FE450B8E05305991F0AC89D</con:value></con:property><con:property><con:name>LIC_APP_ID</con:name><con:value>urn:dece:licappid:org:dece:0E3F7BFE3F8E50A1E05305991F0A1547</con:value></con:property><con:property><con:name>Domain_ID</con:name><con:value>urn:dece:domainid:dece:0E3F6571301E1CFCE05307991F0A14F2</con:value></con:property><con:property><con:name>RET_NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:0E3F7BFE54D650A5E05305991F0A0B26</con:value></con:property><con:property><con:name>RET_NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:0E3F7BD722BE509FE05305991F0AFDB1</con:value></con:property><con:property><con:name>RET_SAML</con:name><con:value>SAML2 Assertion=nVbbcuI4EP0VynmcMpbN3RWoggALk2RIgJDLy5aQ26Bgy2DJBvL1KxlwMAlZdp9cardOn77oSNcc+55lNzmHUNCA5Ta+x7idWOtaFDI7wJxym2EfuC2IPWre39lWHtn4sEXL9dt17W8XV0qFYq2qVypuRS+SclHHDjF1E01dExcKgMyadOU8gj7jAjNR1yxklnRk6ag4RhW7VLWL5bxZNN+03ARCLrGlSx5pe1IbXtfmQixtw1iv1/l1IR+EM8NCyDRe7u9GZA4+1hrXu4ySQGFj70/yDhDwPJIngW9cGxmfa4fbIzpjWEQh7GM552IhA9UM6eNwOrvS0r3g9JkbJMsbzAJGCfboB1b1uQcxD5xc05sFIRVz/2wSJlLAOmyITswiu9KMLLULgTIMQ451PsfmHmsILoTACOSehv26dnVZ15Kt4xAz7gahz7PL/8YHWAxesARH54e09tQuB/ymUo1rIHafES/iNIY/aliXmADfdxPI5VC5hxBcurmjXA7ohit2xjG9k+WuGm06Ay7+T4OOmrMDmWAvgkb7AaaTmC4MPCvGhlN+GQ+njzfVN/9pVk8IHDsnhrS1u+XJUKZDtNvhduZObfjc64uVHy8cf8Vr3d8G+qDW07Y76XTues/kGTmD3n2h4z+QkEfvzfJkHHnbp/L0Zv7XrQi78MoHL7/M5u2i51t3tNcnr+2nj60YlbubZXXLUK9kbNzV69R62bwuupWOt4VecWLd/pqve8M3dvtiubftXpVNBvfD+JGOKRu2NvS357Tul+NJbz4I78zHdT1N54h/1nY486No+g5EHJZqDPrtXFd2CYufxUxZqKO7iau9VOLDBTChNdQupR12JOWOOrbs4W6NOoVupdWuWFarU0K1bgeVCqhUq5ld1Oy2W+ZBZHYsTijeBMylKpaS3N3Y/EyQ+DYH5kCox0EklY5rPyC2scC5PhvKQxAwDuNAyrPJq7XYWrmLikf8xUcwjxfv3sdyq+X+BGLABmHTFRBmJNlEGUkeAqFLCkq31VhzOddcyFKscBwJz8zHOM8gksoeKpG1rWK1ZHDqLz1QRA0/cCIP8sv5MimMwXdfS8eEJ9ZhZ5wctrNpnf47VED6OFQ5cJVLC2QX4Zu7pXBI5HzCheOED/DNyKHqXMlyipCSHZPsr88pUeORjojM6EA59Tw1ZFCN04TSQE5MSTrn6W0tRVwe+8ahHSucX+WjOI6SBlSUvIUS3lApGsgyRkAiKUzbcbAAZqQoxkW3QEr8JHhqz1KMxJyNBBbgy4nJJcsLrv0RcHXt9+Wkby59U2RCytIJ2IjvbDeefLIoxj++aohNlJ80P8jPOgidz459g3UUR+Ypb31B2Uyt1A2wPTMXJJCwVGpXEB6DfwfwXfCsMS1yykXIgZpGAs7/ySlRqmuYkCBiot/WEsOxUCY8xXYJ9qfTF5hEi9PHGf3315lOkxEgIJ90nCb46o611RFgsyOx3Qf9qrfdTqnYLpdQs3Sst6hlldOiZNg1vpi/Wo7qdDrjjX8A</con:value></con:property><con:property><con:name>Device_ID</con:name><con:value>urn:dece:deviceid:org:dece:0E3F7BFE3F8C50A1E05305991F0A1547</con:value></con:property><con:property><con:name>DeviceGetETag</con:name><con:value>"0E3F7BFD94CC5095E05305991F0AC8D4:4FE9F60C"</con:value></con:property><con:property><con:name>DeviceGetLastModified</con:name><con:value>Wed, 04 Feb 2015 07:59:06 GMT</con:value></con:property><con:property><con:name>ORG_ID</con:name><con:value>urn:dece:org:org:dece:o:700031</con:value></con:property><con:property><con:name>DRM_ID</con:name><con:value>urn:dece:drm:adobe:3.0</con:value></con:property><con:property><con:name>licappserial</con:name><con:value>04adb236-5a2a-42c5-9a05-37193ae6dc90</con:value></con:property><con:property><con:name>licappserial_1</con:name><con:value>04adb236-5a2a-42c5-9a05-37193ae6dc90</con:value></con:property><con:property><con:name>licappModel</con:name><con:value>model-3A65F92B71166</con:value></con:property><con:property><con:name>licappModel_1</con:name><con:value>model-3A65F92B71166</con:value></con:property><con:property><con:name>licappManufacturer</con:name><con:value>manfact-9728817886477</con:value></con:property><con:property><con:name>licappManufacturer_1</con:name><con:value>manfact-9728817886477</con:value></con:property><con:property><con:name>licappapplication</con:name><con:value>appid-hKqnPMNYWHC78</con:value></con:property><con:property><con:name>licappapplication_1</con:name><con:value>appid-hKqnPMNYWHC78</con:value></con:property><con:property><con:name>attestionIdFULL</con:name><con:value>urn:dece:attestation:manfact-9728817886477:model-3A65F92B71166:472606</con:value></con:property><con:property><con:name>attestionIdFULL_1</con:name><con:value>urn:dece:attestation:manfact-9728817886477:model-3A65F92B71166:472606</con:value></con:property><con:property><con:name>attestionId</con:name><con:value>urn:dece:attestation:manfact-9728817886477:model-3A65F92B71166:472606</con:value></con:property><con:property><con:name>attestionId_1</con:name><con:value>urn:dece:attestation:manfact-9728817886477:model-3A65F92B71166:472606</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>ccdf09f0-c034-47f6-8cdf-76797af3f771</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>7eb68f58-93ef-4e73-98fe-f10cbdf6193b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>1ad7f9ca-219a-4dce-ba00-8f7d6fd3daca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>26e61b63-18ea-4c73-8766-0f86596b334c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>3f7c689f-0adf-4d7f-bc88-cbd13f863397</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>68184ccf-08f9-444d-a995-e2efe69b1284</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b0c9ac22-1797-49c0-86c0-191527820fe0</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="00038_DeviceGetCacheScenario_NonCS_DeviceGet_1/11_DeviceGet_2015/02_200_OK" searchProperties="true" id="3194d335-8b8b-4457-baaf-4e60a830302a"><con:settings/><con:testStep type="groovy" name="Set Coordiantor Schema to leading version" id="039f21fe-db97-4a32-bb1a-279c0a3a6166"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("versionMinor",tP.getPropertyValue("currentVersionMinor"));
tP.setPropertyValue("versionMajor",tP.getPropertyValue("currentVersionMajor"));

tP.setPropertyValue("CoordinatorSchema", tP.getPropertyValue("CoordinatorSchema_"+ tP.getPropertyValue("versionMinor")));

log.info "CoordinatorSchema set to .... :  " + tP.getPropertyValue("CoordinatorSchema")</script></con:config></con:testStep><con:testStep type="groovy" name="Call AccountCreate API"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("AccountCreateAPI")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call FirstUserCreateAPI"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("FirstUserCreateAPI")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call STSCreateandGetAPI"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("STSCreateandGetAPI")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("Username",tC.getPropertyValue("Username"));
myTC.setPropertyValue("audience","");


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

tC.setPropertyValue("RET_NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("RET_NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("RET_SAML",tC.getPropertyValue("SAML"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call TOUPolicyCreateAPI"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("TOUPolicyCreateAPI")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call MUCPolicyCreateAPI"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("MUCPolicyCreateAPI")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call STSCreateandGetAPI for Device"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("STSCreateandGetAPIforDevices")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("Username",tC.getPropertyValue("Username"));

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call AttestationDataCreateAPI" id="c4a80570-f596-48bf-be71-b2d7568257a7" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("AttestationDataCreate API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call AttestationDataGetAPI" id="2b915513-1468-467f-8c11-6d68d800c584" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("AttestationDataGet API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call LicAppCreateAPI"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("LicAppCreateAPI")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML"));

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call LicAppGetAPI"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("LicAppGetAPIforDevice")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("LIC_APP_ID",tC.getPropertyValue("LIC_APP_ID"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML"));

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Set Coordiantor Schema to Trailing version" id="d3ea0fd1-6719-40e8-b815-39fc603ccfb8"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("versionMinor",tP.getPropertyValue("trailingVersionMinor"));
tP.setPropertyValue("versionMajor",tP.getPropertyValue("trailingVersionMajor"));

tP.setPropertyValue("CoordinatorSchema", tP.getPropertyValue("CoordinatorSchema_"+ tP.getPropertyValue("versionMinor")));</script></con:config></con:testStep><con:testStep type="groovy" name="Call DeviceGetAPI in 1/06"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGetAPI")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("Domain_ID",tC.getPropertyValue("Domain_ID"));
myTC.setPropertyValue("Device_ID",tC.getPropertyValue("Device_ID"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("RET_NODE_ACCOUNT_ID_FULL"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("RET_SAML"));
myTC.setPropertyValue("ExpectedReturnCodeGet","200");
myTC.setPropertyValue("ETagResponseType","UnMatch");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>NODE_ID</con:name><con:value>0701</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>0E3F7C15D7B550BAE05305991F0A172A</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:0E3F7C15D7B550BAE05305991F0A172A</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>0E3F7C14524850B4E05305991F0A9DD7</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:0E3F7C14524850B4E05305991F0A9DD7</con:value></con:property><con:property><con:name>Username</con:name><con:value>firstfau_20150204_013134</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZdc9o6EP0rjPOYMf7AjrEnMONAE5yQQDAktC93hCxAqZGoJAPpr69kwDWE5HLvE7PL6uyRdvesrzlYpHYQco6YwJRUNouU8CD3NrSMkYACjnlAwALxQMAgDh+7gV01A7A/olWidkP7x6tDG8CpqfvIretOcgV1kEwcfeL5dg26iZ1cuTKU8wxFhAtAREOzTcvVTVs3naHpBa4f1OyqZTk/tMoLYlxiy5Cqqe1IbXhDmwuxDAxjvV5X17UqZTPDNk3LGD92YzhHC6A1r7c3yhOx5i4eVhMEUZrCKqQL49o4iLlOeBDjGQEiY2iXK/ksl2mYviFjEo5nF1pxFiURmdLcbAFCCYYgxb+Bep9HJOY0qYTpjDIs5otPL2GZClhHG6hDyyEXmnFI7UygA4aMA53PgbXDGqApYohAVBkNooZ2cV7V8qNDBgifUrbgh+Z/44PICqV0iRKd76+1o3Y+4ImXal4jGEQEphnHK/SkmnUJIOK7aiJ4PlSlz9AUb7qYywbdcMXOKNM7Mrev0cYzxMX/KVCpOFuQF5BmqHkz6M5uM4d2B8vnEfseCuBDP6l18F3UyAmUg3NHUdqtedSURRNtTzyG2KMJXI3ulg90ufw5G4KeTR/4aOR2yOPt2+uzGNbWJOX1uzT6cVkn/c7DM63j+8vfr1G8+g4H8+HYQ5O76c/eff9tMuab0VPy4IwWBmjHY9Lq+Mb9Sxq2ejGD03Q8GF9lLdbp129C8rZ+7bvuE91sDLvec7q/2P3oITIs253dxUMHwCuc4m7qX3Ze294TbxTXKfE/9O1nPs4mbwiKvanaIGpXbmWVgPhazJQHJ/o0Dw2WSny4QERoTXVKaUeQSbnDSSBruLXNb7Vbr2U5ru3UXfPG+Wa6NdP1fevWDP1229uLzJbFEcUWJVOscinJ3bbN1wThIpggwBDTvkBqAwEqT1T0SI+FU4HYgcJaZllhVVt/CnT83z6njEmwCuAqzQ2S74VOqLi9V/FjLvZptTf2+GGywrAoZ7GUpFbJ7s61nMtp+gWqSTVbrTIl5oGnppjJWTAUD8O0jRjBTM7f+5D+RMQoUIyzxG5/8+Pkhf+QYibmJBZAoIXslkpunrHdYsTVdotIgjbnrs6DlLIQAm3EKV8rlZtZMf5yecMAqjjp7sufNWVJccFTWKU88p5yuQlMZspSQvf+d0jUdBQTAqmExXJEKSuDnwI4lfzQWTxywUUIhieZQJ//U1Gz19AAhDQjImpruaOsBzlP8b5Ewd+gDzC55BTfIPjfP0J0nLcARPLLheMcX62SgEtAMitpyi7pCVlx296NK2UlLMuK5dlh8SgH7Jof3B89pXc67vHmHw==</con:value></con:property><con:property><con:name>LicAppID</con:name><con:value>urn%3Adece%3Alicappid%3Aorg%3Adece%3AE49B021A38CC0F36E0401F0A059951E3</con:value></con:property><con:property><con:name>Policy_Class</con:name><con:value>urn:dece:type:policy:ManageAccountConsent</con:value></con:property><con:property><con:name>POLICY_ID</con:name><con:value>urn%3Adece%3Apolicyid%3Aorg%3Adece%3AE58EAAD839076832E0401F0A059966DA</con:value></con:property><con:property><con:name>LIC_APP_ID</con:name><con:value>urn:dece:licappid:org:dece:0E3F7F2074EF6D14E05307991F0AB570</con:value></con:property><con:property><con:name>Domain_ID</con:name><con:value>urn:dece:domainid:dece:0E3F721FF3771D08E05307991F0AB2EC</con:value></con:property><con:property><con:name>RET_NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:0E3F7BFE3FB650A1E05305991F0A1547</con:value></con:property><con:property><con:name>RET_NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:0E3F7BFEABF550B2E05305991F0AE1D0</con:value></con:property><con:property><con:name>RET_SAML</con:name><con:value>SAML2 Assertion=nVZdb+I6EP0rKPtYhTjhOypItEDFbqEV0G63L1fGmYDbxKa2A5Rfv3aAlFDay71PkSfjM2c+fOxLiePI89tSglCUs8I6jpj0U2vTSgTzOZZU+gzHIH1F/HF7cOt7ReTj/Rar0O80rX8gdHEYYs8OqzWwywEp2Y0SAbsWltyyWwVSrza0q5QJ9JlUmKmm5SG3YiPPRuUJqvmVhu+Vi169/mwVHkFIja1disjakVrLpjVXauE7zmq1Kq5KRS5mjoeQ6zwNbsdkDjG2WpfbjNJAorXzJ8UACEQRKRIeO5dOzucykP6YzhhWiYBdrOCrWMhBDUf7BJLOfljZXgj6LOTp8hozzijBEd1gU58BqDkPCu1oxgVV8/jLJFxkgG1YE5u4ZfbDcvLUzgTKMRQS23KO3R3WCEIQwAgUHkb9pvXjvK6lWycCMxlyEcv88r/xAbaEiC8gsOU+rR218wFPVKp1CcTvMxIlki5haIZ1gQnIXTeBnA9VuBcQ0vUtlXpA19Kwcw7pHS231ejQGUj1fxp00JwtyCOOEmhx/ItgeRHRKQzL/LmcPMTwupSiN0TNlMChc2rIWrtdHg1lNkTbHY8v5PfjS700ws/ocbCE2s+HcvemE2+U6OL3GVutOsMIO9ULXlmjd/zUvXmlszGp8bvoiXfuNu7Tr58wvXlb1/+Mus/4YlmpTlabIRqg+8fS7z8ivH2q3V0/rypjuJk02vLqdbR6eboeNFit3OMlfhFftCcTNCK4e70eeMPpy+ae/X5NFpspceRmyvlto/6LiHnjoZmlc8A/b9uf+XEyfQGi9kszBv1Ooae7hNX3YmYsNLDD1NVfGPGRCpiyWmaX0Q4/0XJHA1/3cLtG3VKvdtXrtq96lQq68rqoUkKVRsPtoXbX7aC9yGxZHFG85iykJpaR3O3YfE+QxL4EFoCwlzzRSietbxA7WOFCn430IeBMwoRreXblohayarj2XuK4JPC0EVG3rOauVRhydcfuRDtUIHKa7KKcJo+A0AUFI9xmrqUebKl0Ld7wMlGRW1ziIoNES7swKqv31SuOpPEiAsPUiXmQRFBczBdpZRy5/Xo2JjK1jrqT9LR9mdfxv30JtE9AjYM0uVyBbiOcuFzcfSJfJ1w6THgP304Cag6WrqcSlGyZ5H99jImZj2xGdEZ7ypnnsSGH6hwnlAUKlpRkg55d11rF9blv7dvxhotvxWS5TNIG1Iy+CQ3vmBQd5DljIIlWpvcJfwXmZCjOWddARvwoeGbPU0zUnI0VVhDriSmkyzPu/TFIc+/39aivz31U5ELq0ilYq1O260i/WQzjb581xCfGT5vv9WfFRfDRsRNYB3F0nvraV5TNzMpcAe9fzAXhGpZq8eLiEPwUwKngeWNW5IyL0gM1TRR8/adgVKlpYUJ4wlS/Y6WGQ6VMear3BfgfTp9gUjHOXmf0359nNk1HgIB+00ma4ptL1jdHgM0O1HYX9JTglnpX1Qpqu4eC61bKtawoOXatT+bPloM6Hc946y8=</con:value></con:property><con:property><con:name>Device_ID</con:name><con:value>urn:dece:deviceid:org:dece:0E3F7F2074ED6D14E05307991F0AB570</con:value></con:property><con:property><con:name>DeviceGetETag</con:name><con:value>"0E3F7C3AEF735099E05305991F0AA50F:1448515F"</con:value></con:property><con:property><con:name>DeviceGetLastModified</con:name><con:value>Wed, 04 Feb 2015 07:59:39 GMT</con:value></con:property><con:property><con:name>ORG_ID</con:name><con:value>urn:dece:org:org:dece:o:700031</con:value></con:property><con:property><con:name>DRM_ID</con:name><con:value>urn:dece:drm:adobe:3.0</con:value></con:property><con:property><con:name>licappserial</con:name><con:value>add6f9ea-9148-4470-b882-6321a5846ded</con:value></con:property><con:property><con:name>licappserial_1</con:name><con:value>add6f9ea-9148-4470-b882-6321a5846ded</con:value></con:property><con:property><con:name>licappModel</con:name><con:value>model-3A65F92B71137</con:value></con:property><con:property><con:name>licappModel_1</con:name><con:value>model-3A65F92B71137</con:value></con:property><con:property><con:name>licappManufacturer</con:name><con:value>manfact-9728817886435</con:value></con:property><con:property><con:name>licappManufacturer_1</con:name><con:value>manfact-9728817886435</con:value></con:property><con:property><con:name>licappapplication</con:name><con:value>appid-hKqnPMNYWHC73</con:value></con:property><con:property><con:name>licappapplication_1</con:name><con:value>appid-hKqnPMNYWHC73</con:value></con:property><con:property><con:name>attestionIdFULL</con:name><con:value>urn%3Adece%3Aattestation%3Amanfact-9728817886435%3Amodel-3A65F92B71137</con:value></con:property><con:property><con:name>attestionIdFULL_1</con:name><con:value>urn%3Adece%3Aattestation%3Amanfact-9728817886435%3Amodel-3A65F92B71137</con:value></con:property><con:property><con:name>attestionId</con:name><con:value>urn:dece:attestation:manfact-9728817886435:model-3A65F92B71137</con:value></con:property><con:property><con:name>attestionId_1</con:name><con:value>urn:dece:attestation:manfact-9728817886435:model-3A65F92B71137</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>ccdf09f0-c034-47f6-8cdf-76797af3f771</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>7eb68f58-93ef-4e73-98fe-f10cbdf6193b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>1ad7f9ca-219a-4dce-ba00-8f7d6fd3daca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>26e61b63-18ea-4c73-8766-0f86596b334c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f186da08-3084-424e-86a3-715f74852dcb</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b366a31b-3fe4-40cb-bf60-511d058b5006</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c4a80570-f596-48bf-be71-b2d7568257a7</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2b915513-1468-467f-8c11-6d68d800c584</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>039f21fe-db97-4a32-bb1a-279c0a3a6166</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d3ea0fd1-6719-40e8-b815-39fc603ccfb8</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="00039_DeviceGetCacheScenario_NonCS_DeviceGet_1/11_DeviceGet(If-None-Match)_2015/02_304_Not_Modified" searchProperties="true" id="2ee68991-533c-42cc-94f6-9a92709daa91"><con:settings/><con:testStep type="groovy" name="Set Coordinator Schema to Trailing Version" id="839791d5-f73c-419c-954e-b0c8eb19cf9f"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("versionMinor",tP.getPropertyValue("trailingVersionMinor"));
tP.setPropertyValue("versionMajor",tP.getPropertyValue("trailingVersionMajor"));

tP.setPropertyValue("CoordinatorSchema", tP.getPropertyValue("CoordinatorSchema_"+ tP.getPropertyValue("versionMinor")));</script></con:config></con:testStep><con:testStep type="groovy" name="Call AccountCreate API"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("AccountCreateAPI")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call FirstUserCreateAPI"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("FirstUserCreateAPI")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call STSCreateandGetAPI"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("STSCreateandGetAPI")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("Username",tC.getPropertyValue("Username"));
myTC.setPropertyValue("audience","");


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

tC.setPropertyValue("RET_NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("RET_NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("RET_SAML",tC.getPropertyValue("SAML"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call TOUPolicyCreateAPI"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("TOUPolicyCreateAPI")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call MUCPolicyCreateAPI"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("MUCPolicyCreateAPI")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call STSCreateandGetAPI for Device"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("STSCreateandGetAPIforDevices")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("Username",tC.getPropertyValue("Username"));

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call AttestationDataCreateAPI" id="228f8a84-ce65-4fab-9235-1a3246ebeb66" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("AttestationDataCreate API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call AttestationDataGetAPI" id="1fa3f347-5db6-4251-b954-390767e455a3" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("AttestationDataGet API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call LicAppCreateAPI"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("LicAppCreateAPI")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML"));

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call LicAppGetAPI"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("LicAppGetAPIforDevice")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("LIC_APP_ID",tC.getPropertyValue("LIC_APP_ID"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML"));

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call DeviceGetAPI in 1/06"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGetAPI")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("Domain_ID",tC.getPropertyValue("Domain_ID"));
myTC.setPropertyValue("Device_ID",tC.getPropertyValue("Device_ID"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("RET_NODE_ACCOUNT_ID_FULL"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("RET_SAML"));
myTC.setPropertyValue("ExpectedReturnCodeGet","200");
myTC.setPropertyValue("ETagResponseType","UnMatch");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Set Coordinator Schema to Leading Version" id="2b5b1115-d589-4ae5-9018-2933bb3f4441"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("versionMinor",tP.getPropertyValue("currentVersionMinor"));
tP.setPropertyValue("versionMajor",tP.getPropertyValue("currentVersionMajor"));

tP.setPropertyValue("CoordinatorSchema", tP.getPropertyValue("CoordinatorSchema_"+ tP.getPropertyValue("versionMinor")));

log.info "CoordinatorSchema set to .... :  " + tP.getPropertyValue("CoordinatorSchema")</script></con:config></con:testStep><con:testStep type="groovy" name="Call DeviceGetAPI with If-None-Match in 1/07"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGetAPIwithIf-None-Match")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
myTC.setPropertyValue("ETag",tC.getPropertyValue("DeviceGetETag"));

myTC.setPropertyValue("Domain_ID",URLDecoder.decode(tC.getPropertyValue("Domain_ID"),"UTF-8"));
myTC.setPropertyValue("Device_ID",URLDecoder.decode(tC.getPropertyValue("Device_ID"),"UTF-8"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",URLDecoder.decode(tC.getPropertyValue("RET_NODE_ACCOUNT_ID_FULL"),"UTF-8"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("RET_SAML"));
myTC.setPropertyValue("ExpectedReturnCodeGet","304");
myTC.setPropertyValue("ETagResponseType","FAILURE");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>NODE_ID</con:name><con:value>0701</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>0E3F53FF6A485164E05305991F0A586E</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:0E3F53FF6A485164E05305991F0A586E</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>0E3F541C40296FEEE05307991F0A3189</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:0E3F541C40296FEEE05307991F0A3189</con:value></con:property><con:property><con:name>Username</con:name><con:value>firstfau_20150204_01320</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZdc6pIEP0rFnm8hYCCAhWt4ho13GhyI5o1edkah1bJxYHMDH7k1+8MKlFjsu4+Wd32nD4z3X2aa4YWccX1GAPKo4SU1ouYMDf3NpSMEjdBLGIuQQtgLsdu4PV7bqWsu2h/RCn5Nw3lb8BO3bYtR52YyFRNvTJR7YlpqpVwaplT7FStWihCGcvAJ4wjwhtKRTcsVa+oujnUbVfXXd0o1yrmi1J6AsoEtggp68qO1Jo1lDnnqatpq9WqvKqWEzrTKrpuaON+L8BzWCCleb29UZ6INnfxuBwChjjGZZwstGvtKOY6ZG4QzQjiGYVdrvCrXLqmO5qICVk0u1KKsxD6ZJrkZguRhEQYxdE7ku/TBz5PwpIXzxIa8fniy0sYugRWYY1VbJjkStGOqV0IdMSQMqSyOTJ2WAOYAgWCoTQa+A3l6rKq5UeHFBE2TeiCHZv/jQ+QJcRJCqHK9tfaUbsc8MxLNa8Buz7BccaiJdzLZk0RBrarJuDLoUq/KUyjdS9iokHXTLLTDumdmNvXuIlmwPj/KdBBcbYgTyjOoNl9svH618AfT+7S1VLXw9fBm9N6rm/SpJETOAzOHUVpt+ZJUxZNtD0RbJZdGM3M+mjyCF73mc7v07/SWyOgT9nybvi4GYAzGvSzcBhV/e7dn7u3NOavj92+9fg8vLd48KsS82Warryx9ez4MJ/3kveH98cfth2g7jgjdldr35L6XbVntMd9e7UcYw8WY+3lfgLGnwymldHM+1m1em/eiGbV29mabxbmtPraefthm4Pn+PXFmrS82xe/UVzngP+xbz/zQTZ5Bcz3pmwD/6bUEVVC/Hsxk54oVKd5qJtK8WEcCFea8pTUDjcTcheFrqjh1tbb1Y5lGi0xM06t0263dauq1x3H6Ohe1bCdvchsWZxQbCVkGslcUnK3bfM9QbxwJ4AoUOUbpBvEUek+4Q/kgXpTDvRIYQ3jUGFlW38JdPrfPqeICSMZwGSanyDeC45VvO5ajmvtVfyUS+W82mt7fC9cRrgoZ7GUhFaJ7s61nIlpekPlsJwtl5kUc7cup5iKWdDEMBtaADgTw7cZJn+AaAWEdpHS7a99mrnwH/PL+JwEHHFYiFYp5eYFqy0AJlebT0JYX7o3j1KKKnBY83O+VizWsmT87ebGLpZxwv1b/KwS+nHxc1gHecQ9xWbjEZlJS6rc5mNC5GgU44ETARuJ+UzoIfg5gHPJj53FIxdcOKfRJOPw9T8lOXgNBWGcZIT7N0ruOBSDnCffpOB+BH2CyfWm+ACJ/v0LRI3yFsAgPltYlOPLPeIyAUhmB4KyS/pJU6qdTs0zbcuombmmWFtNsexau3iUI3bNT+7PnoN3Ou3x5j8=</con:value></con:property><con:property><con:name>LicAppID</con:name><con:value>urn%3Adece%3Alicappid%3Aorg%3Adece%3AE49B021A38CC0F36E0401F0A059951E3</con:value></con:property><con:property><con:name>Policy_Class</con:name><con:value>urn:dece:type:policy:ManageAccountConsent</con:value></con:property><con:property><con:name>POLICY_ID</con:name><con:value>urn%3Adece%3Apolicyid%3Aorg%3Adece%3AE58ED51F1956FAD9E0401F0A05995FA0</con:value></con:property><con:property><con:name>LIC_APP_ID</con:name><con:value>urn:dece:licappid:org:dece:0E3F5474D47F5162E05305991F0A053E</con:value></con:property><con:property><con:name>Domain_ID</con:name><con:value>urn:dece:domainid:dece:0E3F657130201CFCE05307991F0A14F2</con:value></con:property><con:property><con:name>RET_NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:0E3F53781C237004E05307991F0A7A2A</con:value></con:property><con:property><con:name>RET_NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:0E3F53F7D2D56FE6E05307991F0A1D55</con:value></con:property><con:property><con:name>RET_SAML</con:name><con:value>SAML2 Assertion=nVbbcuI4EP0VyvO4ZXzBhtgVqPKGMCEThgQIm8nLlpDboMSWHUk2JF+/kgEPJpdl98mldqv7dPfRkc45SmLbDzgHJkhKG5skptwvrV0tZ9RPESfcpygB7gvsT4PRjW83TR/tt2iNYb+r/R11LNPqRKBjx0S6E7UcfYEWLR2Z7RCdhQjAXUhXznMYUi4QFV3NNi1XN23ddGZmx3c937WaruM9ao05MC5jS5emqe1AbXhXWwmR+YaxXq+b61YzZUvDNk3LeBjdTPEKEqT1zrcVlYlYb+ePmyFgiGPcxGlinBs1n/OQ+1OypEjkDHa5ws9ymYbpGdIn5GT5Tav2QjikUVouLxBNKcEoJm9I9WcEYpWGjSBepoyIVfJpEZapAuuwwTq2HPpNM+rQTgxUQ8g40vkKWbtYE4iAAcXQuJ8Mu9q306ZWbp0xRHmUsoTXl/8ND9AC4jSDUOf7snbQTg/4Qad654D9IcVxzkkBPxVZM4SB76YJ+PRQjVsGEdncEC4JuuEKnXEI72i57UafLIGL/zOgg+Fsg8xRnENv46HBm/c2ng+LGF2NTcuOAnb514BN7rolgEPn0lCNdrs8ImVFou2O+aO7Hl3jF3vitmfgPsDVLBhg78G5ykdLLzAf+zwY31uP3BkOWkXOnCQbFe3Jau493VNxM2LR013Bpo+xt5wn7Rl6+SMD67mwf53Nf3WMJ56Q52nUKZ6KcfSaXFud7+PbDfbmi2H22rofBGc/nu9mm7dbsmHJr9vsOrvy+sZrfB98H90sivGSPIpLFF7b3x/a625VzgH+um1/5qf54gmw2C8VDYb9xkBOCYmvxUxZSKhHpaufKfHhAqjQemqX0g4/l3JHQl/OcLs2L1sDtzXo9O2+2x5cti9Nt2V2PM8amIHVd929yGxRHEG8SGlEVC4luVvafA0QJz4HGgLTizSXSse1LyL2kUCNIZ3IQ5BSDrNUyrPlLJ01WmZrE2Fs2ST3aJSkmC/bWuNnKsZ0zIJIAKuJsmXWRHkCmGQElHIrYnPJbC5kM15QkYvYahaoSSGX2s6UzPq2c+YanCRZDAqqkaRhHkMzW2Vlawy+/do6wry0Ti5n5XH7tLDjf/seSJ+QKAeuavkT5Bzhg9vF2RfyecGtw4L34YM8JOpkyYYKRvAWSf3Xb54oglQkkRXtIVeex4ZaVOO4oCpRWBBcMb26r6WMy4Pf24/jBTVfmnlR5OUAOkrgmAxvSJ2zjCngXOrS6yx9BmpUIYyTLoEK9VHmyl7Hl4sVnQokIJF0aZTLE279KXB16w8l0TenPilqKWXfBGzER7aLWL5YFOIvHzXYx8pPmm/lZ52y8Pe4Poh1kEfWKS99QehSrdQF8PoJKXAqwxIpXSk7DP5RgI+S141VkyssQrJpkQv4/E9DaVJXk0KQ5lQM+1ppONTJEqd4zcD/7fQuTCnF1duM/PvjTCclBTDIFx0nZXx1xfqK/3R5oLW7pO/ltnNmXdgtyWvnUG47gR1UTamh670zv7cc9OmY471/AA==</con:value></con:property><con:property><con:name>Device_ID</con:name><con:value>urn:dece:deviceid:org:dece:0E3F5474D47D5162E05305991F0A053E</con:value></con:property><con:property><con:name>DeviceGetETag</con:name><con:value>"0E3F53FF161F6FB9E05307991F0ADB59:F1AEDD5A"</con:value></con:property><con:property><con:name>DeviceGetLastModified</con:name><con:value>Wed, 04 Feb 2015 08:00:12 GMT</con:value></con:property><con:property><con:name>ORG_ID</con:name><con:value>urn:dece:org:org:dece:o:700031</con:value></con:property><con:property><con:name>DRM_ID</con:name><con:value>urn:dece:drm:adobe:3.0</con:value></con:property><con:property><con:name>licappserial</con:name><con:value>dbc0abe1-61b3-420d-94bd-2c97684fc2c3</con:value></con:property><con:property><con:name>licappserial_1</con:name><con:value>dbc0abe1-61b3-420d-94bd-2c97684fc2c3</con:value></con:property><con:property><con:name>licappModel</con:name><con:value>model-3A65F92B711108</con:value></con:property><con:property><con:name>licappModel_1</con:name><con:value>model-3A65F92B711108</con:value></con:property><con:property><con:name>licappManufacturer</con:name><con:value>manfact-97288178864108</con:value></con:property><con:property><con:name>licappManufacturer_1</con:name><con:value>manfact-97288178864108</con:value></con:property><con:property><con:name>licappapplication</con:name><con:value>appid-hKqnPMNYWHC80</con:value></con:property><con:property><con:name>licappapplication_1</con:name><con:value>appid-hKqnPMNYWHC80</con:value></con:property><con:property><con:name>attestionIdFULL</con:name><con:value>urn%3Adece%3Aattestation%3Amanfact-97288178864108%3Amodel-3A65F92B711108</con:value></con:property><con:property><con:name>attestionIdFULL_1</con:name><con:value>urn%3Adece%3Aattestation%3Amanfact-97288178864108%3Amodel-3A65F92B711108</con:value></con:property><con:property><con:name>attestionId</con:name><con:value>urn:dece:attestation:manfact-97288178864108:model-3A65F92B711108</con:value></con:property><con:property><con:name>attestionId_1</con:name><con:value>urn:dece:attestation:manfact-97288178864108:model-3A65F92B711108</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>ccdf09f0-c034-47f6-8cdf-76797af3f771</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>7eb68f58-93ef-4e73-98fe-f10cbdf6193b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>1ad7f9ca-219a-4dce-ba00-8f7d6fd3daca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>26e61b63-18ea-4c73-8766-0f86596b334c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f186da08-3084-424e-86a3-715f74852dcb</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b366a31b-3fe4-40cb-bf60-511d058b5006</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>228f8a84-ce65-4fab-9235-1a3246ebeb66</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>1fa3f347-5db6-4251-b954-390767e455a3</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>839791d5-f73c-419c-954e-b0c8eb19cf9f</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2b5b1115-d589-4ae5-9018-2933bb3f4441</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="00040_DeviceGetCacheScenario_NonCS_DeviceGet_1/11_DeviceGet(If-Modified-Since)_2015/02_304_Not_Modified" searchProperties="true" id="3adb0a02-e81f-4125-a052-b3d9eabb012c"><con:settings/><con:testStep type="groovy" name="Set Coordiantor Schema to Trailing Version" id="bad51064-8cca-4752-8376-00706480dd12"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("versionMinor",tP.getPropertyValue("trailingVersionMinor"));
tP.setPropertyValue("versionMajor",tP.getPropertyValue("trailingVersionMajor"));

tP.setPropertyValue("CoordinatorSchema", tP.getPropertyValue("CoordinatorSchema_"+ tP.getPropertyValue("versionMinor")));

log.info "CoordinatorSchema set to .... :  " + tP.getPropertyValue("CoordinatorSchema")</script></con:config></con:testStep><con:testStep type="groovy" name="Call AccountCreate API"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("AccountCreateAPI")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call FirstUserCreateAPI"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("FirstUserCreateAPI")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call STSCreateandGetAPI"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("STSCreateandGetAPI")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("Username",tC.getPropertyValue("Username"));
myTC.setPropertyValue("audience","");


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

tC.setPropertyValue("RET_NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("RET_NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("RET_SAML",tC.getPropertyValue("SAML"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call TOUPolicyCreateAPI"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("TOUPolicyCreateAPI")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call MUCPolicyCreateAPI"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("MUCPolicyCreateAPI")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call STSCreateandGetAPI for Device"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("STSCreateandGetAPIforDevices")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("Username",tC.getPropertyValue("Username"));

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call AttestationDataCreateAPI" id="d38eb13b-a1cf-43e0-a959-1fc796a1d69a" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("AttestationDataCreate API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call AttestationDataGetAPI" id="dca038a3-05a7-4f3a-97c0-acb7af303c59" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("AttestationDataGet API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call LicAppCreateAPI"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("LicAppCreateAPI")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML"));

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call LicAppGetAPI"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("LicAppGetAPIforDevice")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("LIC_APP_ID",tC.getPropertyValue("LIC_APP_ID"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML"));

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call DeviceGetAPI in 1/11"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGetAPI")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("Domain_ID",tC.getPropertyValue("Domain_ID"));
myTC.setPropertyValue("Device_ID",tC.getPropertyValue("Device_ID"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("RET_NODE_ACCOUNT_ID_FULL"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("RET_SAML"));
myTC.setPropertyValue("ExpectedReturnCodeGet","200");
myTC.setPropertyValue("ETagResponseType","UnMatch");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Set Coordiantor Schema to Leading Version" id="163af534-3d32-4a34-91b2-4ee8e69f37d7"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("versionMinor",tP.getPropertyValue("currentVersionMinor"));
tP.setPropertyValue("versionMajor",tP.getPropertyValue("currentVersionMajor"));

tP.setPropertyValue("CoordinatorSchema", tP.getPropertyValue("CoordinatorSchema_"+ tP.getPropertyValue("versionMinor")));

log.info "CoordinatorSchema set to .... :  " + tP.getPropertyValue("CoordinatorSchema")</script></con:config></con:testStep><con:testStep type="groovy" name="Call DeviceGetAPI with If-Modified-Since in 2015/02"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGetAPIwithIf-Modified-Since")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("ETag",tC.getPropertyValue("DeviceGetETag"));
myTC.setPropertyValue("Last-Modified",tC.getPropertyValue("DeviceGetLastModified"));
myTC.setPropertyValue("Domain_ID",URLDecoder.decode(tC.getPropertyValue("Domain_ID"),"UTF-8"));
myTC.setPropertyValue("Device_ID",URLDecoder.decode(tC.getPropertyValue("Device_ID"),"UTF-8"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",URLDecoder.decode(tC.getPropertyValue("RET_NODE_ACCOUNT_ID_FULL"),"UTF-8"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("RET_SAML"));
myTC.setPropertyValue("ExpectedReturnCodeGet","304");
myTC.setPropertyValue("ETagResponseType","FAILURE");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>NODE_ID</con:name><con:value>0701</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>0E3F53F6DFDB6FDFE05307991F0AD161</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:0E3F53F6DFDB6FDFE05307991F0AD161</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>0E3F547E25B2513DE05305991F0AE319</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:0E3F547E25B2513DE05305991F0AE319</con:value></con:property><con:property><con:name>Username</con:name><con:value>firstfau_20150204_013235</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZdc+I6DP0rTPq4E+KEhI9MYSZtmpYt0BZYttuXO8ZRwNvg0Njho79+7QBZoLSXe58YCfno2JKOcsnxLLZcj3NIBU1YaTWLGXdzb1PLUuYmmFPuMjwD7griDrxux7XKyMW7I1qp7Te1f8IoqtQbUNXHY+ToNgKij4mDdLsa1QgittNwIhnKeQZtxgVmoqlZyHR0ZOnIHqK6i5Br2+Wqg1600ghSLrFlSBlpW1Ir3tSmQsxdw1gul+VlpZykE8NCyDSeu50BmcIMa63LzY3yRGlrG0/KIRCIY1Imycy4NA5iLkPuDuiEYZGlsM0VfpYLGahhyJiQ08mFVpyFsM2iJDevMUsYJTim71i9TxfENAlLXjxJUiqms08vYSIFrMOK6MS02YVmHFI7E+iAYcqxzqfY3GL1IYIUGIHSj367qV2cV7X86DDFjEdJOuOH5n/jA2wBcTKHUOe7a22pnQ944qVal0DcNiNxxukCeqpZ55gA31YTyPlQpccUIrrqUC4bdMUVO2Of3pG5eQ2fToCL/1OgveJsQEY4zqD1Qh5E43tQD4aWNb5Fcx+3xz1xg4fPSTMnsB+cO4rSbsyjpiyaaHPi3rn7Ha8DaIxwx270s9nUp78ep7dDr+44y5e7LvuFJ/B+f/WT2dXg1RqtkV2fV71vr5n53P2+7kaL4d27bXW9CQoc47reiZ/7t17P4t78m3OLfl49VkglJVZ1mPQZvPerT7FXHTy+1gR6WQ3FfPHjdTE2DbHu/fY7oxdzXbsfCDzyklV6NxrAW299bTSent7CbrO4zh7/Q99u5gfZ+DcQsTNVG7T9UiCrhMXXYqY8NNSjPNSdK/HhApjQWuqU0g43k3JHQ1fWcGOjm0rg2LUby7myHLPi3yCngpxGwwyQd1MxGzuR2bA4onidsIiqXEpyN23zNUEyc8eAU0i1L5B8LHCpl4gH9pB6kYD0QGFNc19hVVt/CnT83y6njAmpCuAqzRXI94ITKl7ZqfgxF+u02hs7fC9cUFKUs1hKUqtkd+dazuU0veFyWM4Wi0yJuVtTU5zKWTDkMJvGAEgmh289TF6BGQWEcZbS7a59nLnwH/LLxJTJrhUwk61Sys0zVtsAuFptbRbC6ty9eZBSVkHASpzyXcdyLSvGX25u4hIVJ92P8meZpGFxwVNYe3nkPeVmE5RNlKVUbv13QtRoFONBEglL5Xwm6T74KYBTyQ+dxSMXXIRI6TgT8Pk/JTV4TQ0TkmRMtH0td+yLQc5TrOfg/g36AJPrTfEBQv/9C0SneQsQkJ8tnOb4ao+4XAKyyZ6gbJN+0JRKUPUD/6oa+EGuKbWNpvhm1Swe5YBd64P7o2fvnY57vPUH</con:value></con:property><con:property><con:name>LicAppID</con:name><con:value>urn%3Adece%3Alicappid%3Aorg%3Adece%3AE49B021A38CC0F36E0401F0A059951E3</con:value></con:property><con:property><con:name>Policy_Class</con:name><con:value>urn:dece:type:policy:ManageAccountConsent</con:value></con:property><con:property><con:name>POLICY_ID</con:name><con:value>urn%3Adece%3Apolicyid%3Aorg%3Adece%3AE58EB146F409266BE0401F0A05997D9C</con:value></con:property><con:property><con:name>LIC_APP_ID</con:name><con:value>urn:dece:licappid:org:dece:0E3F53F93FCB6FFAE05307991F0A8EDA</con:value></con:property><con:property><con:name>Domain_ID</con:name><con:value>urn:dece:domainid:dece:0E3F721FF3791D08E05307991F0AB2EC</con:value></con:property><con:property><con:name>RET_NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:0E3F551DD6E86FF8E05307991F0AE47E</con:value></con:property><con:property><con:name>RET_NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:0E3F53F29B916FC9E05307991F0A1396</con:value></con:property><con:property><con:name>RET_SAML</con:name><con:value>SAML2 Assertion=nVZtc6o6EP4rDv3YQQiiAlOdsVXP8fb1qO1t++VODIvGAwFJUOuvPwkqFftyvfcTk2Wz++zukye54DgKLa/DOaSCxqyyjkLGvdza0rKUeTHmlHsMR8A9QbxR5/bGs6qmh/dbtMqg29L+wWhiIdfydWSbSLcdB+m4jl296fgNPAlIw3Zt6cp5BgPGBWaipVkmquumpZv22HQ80/RqdrVRc1+1yhOkXMaWLlVT24Fa85Y2EyLxDGO1WlVXtWqcTg3LNJHxfHszIjOIsNa+2FaUJ0rbO39S9YFAGJIqiSPjwij5XPjcG9EpwyJLYZfL/yqXaZiuIX18TqdnWrEX/AEL4nx5hVnMKMEh3WDVn1sQs9ivdMJpnFIxi74sApkqsA5rohNkszPNKEM7MVAJYcqxzmcY7WINIYAUGIHK43DQ0s5Om1q+dZxixoM4jXh5+d/wAFtCGCfg63xf1g7a6QE/6VT7Aog3YCTMOF3CnSJrggnw3TSBnB6q8pBCQNc3lEuCrrlCZxzCO1puu9GlU+Di/wzoYDjbIE84zKB9nsyvnxOTTu55TG4H9mhzjbKHy2D22mvlAA6dc0Mx2u3yiJQFibY7hr+Chyyc2+ini56caJPSX+yNdRod89pv9por13+iZudpkE1v6+f+S2g9TK/HzuLuZSNegnk4R48/Z/er18h5jdzVTYx/rFlEb1NzVXt06/FDh45nV9z4mcz+huXg/Km+jEJM135n8yM08VXYG07eFg6ubYaLv3pr10G9Gt8kK9d2LB9P2bj+XDdn9uVwMkmmraKcA/xl2/7Mj7LJHIjYLxUNBt1KX04Ji+/FTFmorwe5q5co8eECmNDaapfSDi+Tckd9T85wuzZ7tX691rfcSxc1+lduz6zXzKbror7ZQTW3sReZLYojiFcxC6jKpSR3S5vvAZLI48B8SPVlnEml49o3EbtY4MqADeUhiBmHcSzlGaH5fNKMolXmWoFIftvNZAlzBoFWuYvFPbtPO4GAtKTJCJU0eQiEJhSUcCtec0lsLmQvFniZiRBVl7jKIJPSniqV9SzbqRucRkkICqkRxX4WQjWZJXlnDL79WjomPLcOe+P8tH1Z1/G/fQukj0+VA1e1XIIcI3xyuVj7Qr4u2D4seB++k/lUHSzZT5FSskVS/vVOE8WPgiOyoj3kwvPYUIpqHBdUJPKXlBREL65rqeLy3Lf341jg6qKaLZdZPoCm0rdUhjekzCFjBCSTsvQ2jn8DM4oQxkl3QIH6KHNhL+PLxIyNBBYQSbpU8uUJl/4IuLr0B5Ln61NfFKWUsm8C1uIz21UoHywK8bdvGuIR5SfND/KzilP/fVyfxDrII+uUd76gbKpWSv/fviAFiWVYKpUrTg+Dfxbgs+RlY9HkAouQbJpkAr7+U1GS1NIwIXHGxKCr5YZDmcxxircEvHenD2FyJS6eZvTf32Y6zSlAQD7oOM3jqxvWU/xn0wOp3SX9oLZ11O02ek6j33cO1bZnN3tFU0ro2h/MHy0HfTrmePsP</con:value></con:property><con:property><con:name>Device_ID</con:name><con:value>urn:dece:deviceid:org:dece:0E3F53F93FC96FFAE05307991F0A8EDA</con:value></con:property><con:property><con:name>DeviceGetETag</con:name><con:value>"0E3F53FF6A635164E05305991F0A586E:B61D2CFC"</con:value></con:property><con:property><con:name>DeviceGetLastModified</con:name><con:value>Wed, 04 Feb 2015 08:00:52 GMT</con:value></con:property><con:property><con:name>ORG_ID</con:name><con:value>urn:dece:org:org:dece:o:700031</con:value></con:property><con:property><con:name>DRM_ID</con:name><con:value>urn:dece:drm:adobe:3.0</con:value></con:property><con:property><con:name>licappserial</con:name><con:value>0232b494-eb0c-486b-a55b-cc927aeef5ba</con:value></con:property><con:property><con:name>licappserial_1</con:name><con:value>0232b494-eb0c-486b-a55b-cc927aeef5ba</con:value></con:property><con:property><con:name>licappModel</con:name><con:value>model-3A65F92B71137</con:value></con:property><con:property><con:name>licappModel_1</con:name><con:value>model-3A65F92B71137</con:value></con:property><con:property><con:name>licappManufacturer</con:name><con:value>manfact-9728817886475</con:value></con:property><con:property><con:name>licappManufacturer_1</con:name><con:value>manfact-9728817886475</con:value></con:property><con:property><con:name>licappapplication</con:name><con:value>appid-hKqnPMNYWHC112</con:value></con:property><con:property><con:name>licappapplication_1</con:name><con:value>appid-hKqnPMNYWHC112</con:value></con:property><con:property><con:name>attestionIdFULL</con:name><con:value>urn%3Adece%3Aattestation%3Amanfact-9728817886475%3Amodel-3A65F92B71137</con:value></con:property><con:property><con:name>attestionIdFULL_1</con:name><con:value>urn%3Adece%3Aattestation%3Amanfact-9728817886475%3Amodel-3A65F92B71137</con:value></con:property><con:property><con:name>attestionId</con:name><con:value>urn:dece:attestation:manfact-9728817886475:model-3A65F92B71137</con:value></con:property><con:property><con:name>attestionId_1</con:name><con:value>urn:dece:attestation:manfact-9728817886475:model-3A65F92B71137</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>ccdf09f0-c034-47f6-8cdf-76797af3f771</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>7eb68f58-93ef-4e73-98fe-f10cbdf6193b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>1ad7f9ca-219a-4dce-ba00-8f7d6fd3daca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>26e61b63-18ea-4c73-8766-0f86596b334c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f186da08-3084-424e-86a3-715f74852dcb</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b366a31b-3fe4-40cb-bf60-511d058b5006</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d38eb13b-a1cf-43e0-a959-1fc796a1d69a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>dca038a3-05a7-4f3a-97c0-acb7af303c59</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>bad51064-8cca-4752-8376-00706480dd12</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>163af534-3d32-4a34-91b2-4ee8e69f37d7</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="00041_DeviceGetCacheScenario_NonCS_DeviceGet_1/07_DeviceGet_1/06_200_OK" searchProperties="true" id="9120328e-7910-4f48-9698-963046a5336d"><con:settings/><con:testStep type="groovy" name="Set Coordinator Schema to Leading version" id="0f2739b6-1d01-4bea-acac-a649cf75c95c"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("versionMinor",tP.getPropertyValue("trailingVersionMinor"));
tP.setPropertyValue("versionMajor",tP.getPropertyValue("trailingVersionMajor"));

tP.setPropertyValue("CoordinatorSchema", tP.getPropertyValue("CoordinatorSchema_"+ tP.getPropertyValue("versionMinor")));

log.info "CoordinatorSchema set to .... :  " + tP.getPropertyValue("CoordinatorSchema")</script></con:config></con:testStep><con:testStep type="groovy" name="Call AccountCreate API"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("AccountCreateAPI")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call FirstUserCreateAPI"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("FirstUserCreateAPI")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call STSCreateandGetAPI"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("STSCreateandGetAPI")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("Username",tC.getPropertyValue("Username"));
myTC.setPropertyValue("audience","");


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

tC.setPropertyValue("RET_NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("RET_NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("RET_SAML",tC.getPropertyValue("SAML"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call TOUPolicyCreateAPI"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("TOUPolicyCreateAPI")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call MUCPolicyCreateAPI"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("MUCPolicyCreateAPI")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call STSCreateandGetAPI for Device"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("STSCreateandGetAPIforDevices")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("Username",tC.getPropertyValue("Username"));

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call AttestationDataCreateAPI" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("AttestationDataCreate API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call AttestationDataGetAPI" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("AttestationDataGet API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call LicAppCreateAPI"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("LicAppCreateAPI")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML"));

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call LicAppGetAPI"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("LicAppGetAPIforDevice")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("LIC_APP_ID",tC.getPropertyValue("LIC_APP_ID"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML"));

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call DeviceGetAPI in 2015/02"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGetAPI")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("Domain_ID",tC.getPropertyValue("Domain_ID"));
myTC.setPropertyValue("Device_ID",tC.getPropertyValue("Device_ID"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("RET_NODE_ACCOUNT_ID_FULL"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("RET_SAML"));
myTC.setPropertyValue("ExpectedReturnCodeGet","200");
myTC.setPropertyValue("ETagResponseType","UnMatch");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Set Coordinator Schema to Trailing version" id="1fab1831-cc83-4cf2-a6cd-1526dd405686"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("versionMinor",tP.getPropertyValue("trailingVersionMinor"));
tP.setPropertyValue("versionMajor",tP.getPropertyValue("trailingVersionMajor"));

tP.setPropertyValue("CoordinatorSchema", tP.getPropertyValue("CoordinatorSchema_"+ tP.getPropertyValue("versionMinor")));

log.info "CoordinatorSchema set to .... :  " + tP.getPropertyValue("CoordinatorSchema")</script></con:config></con:testStep><con:testStep type="groovy" name="Call again DeviceGetAPI in 1/06"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGetAPI")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("Domain_ID",URLEncoder.encode(tC.getPropertyValue("Domain_ID"),"UTF-8"));
myTC.setPropertyValue("Device_ID",URLEncoder.encode(tC.getPropertyValue("Device_ID"),"UTF-8"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",URLEncoder.encode(tC.getPropertyValue("RET_NODE_ACCOUNT_ID_FULL"),"UTF-8"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("RET_SAML"));
myTC.setPropertyValue("ExpectedReturnCodeGet","200");
myTC.setPropertyValue("ETagResponseType","Match");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>NODE_ID</con:name><con:value>0701</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>0E3F551DD80B6FF8E05307991F0AE47E</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:0E3F551DD80B6FF8E05307991F0AE47E</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>0E3F53F29BAD6FC9E05307991F0A1396</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:0E3F53F29BAD6FC9E05307991F0A1396</con:value></con:property><con:property><con:name>Username</con:name><con:value>firstfau_20150204_013315</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVbRbuo4EP0VlD6iEIdAgagghQYquoXSC4V2X1bGccAl2GA7EPr11w6QC5R22X1CM4zPHHtmzuROwEVUdD0hMJeE0VyyiKhwU2/diDl1GRREuBQusHAlcgde98ktFoALD0eMXMevG/9UbkHoTFDRLAM4MUulamjC6iQ0S6gKqqEDArsCVKgQMe5QISGVdaMI7LIJiiYoDUHVBbZrlwuOU/nbyI0wFwpbhRTUqR2pRNSNmZRL17I2m01h4xQYn1pFAGzrrfs0QDO8gEbjbnejNBFv7ONRIcAIRxEqILaw7qyTmLtAuAMypVDGHO9zBd/lAhaoWSomEGR6Y2RncdChIUvNe0gZJQhG5BPq9+liOWNBzoumjBM5W3x7CRtoYBMnyER2id4Y1im1K4FOGHIBTTGD9h7rFw4xxxTh3OuvTt24ua5q6dEhh1SEjC/Eqfnf+GC6xhFb4sAUh2vtqV0PeOGlGncYuR2KoliQNe7pZl1ChMW+mhhdD5XrcxyS5IkI1aCJ0OysY3pn5u41fDLFQv6fAh0VZwcyglGMG6Xuy/OH/56sZC1fdPKUdf9iH/nWYtyd11MCx8GpIyvtzjxryqyJdif6/Q7YVDmx/c3WHoerbSRf8mBOaW9WqowDgefJuiXE8LEFxmG4befxpzXvfU7iCnrML3sl0AtLy9eR3IJ23Hv7eFv25qNbRux3DpvJ3HNmo4coYYmNy6+k6zkf7/dwWxwHy/Hzgw9fHtv95MHbDp99rz95qqxq/CVZsuaQj+aL1bQ567HJ+7g2LfYfXoetenadI/6nvsPMD+LJB0byYOo26Pi5tqoSlD+LmfaQwAzTUHepxUdITKXR0Ke0drixkjsSuKqGOxu0nHbZaRdrTc+/bd/XWqDsgEqtZreBZzu124PI7FicUbxnNCQ6l5bcXdv8TBAt3AmGHHPjByQfSpjrMflMn7kXSsxPFNa2jxVWt/W3QOf/HXKqmIDoAKHTNLF6L3xBxcFBxc+5FC+rvXXA94I1QVk5s6WktEp1d6rlQk3TChaCQrxex1rM3YqeYq5mwVLDbFsDjGI1fNshm2NqZRDWVUp3uPZ55sx/yi+WMzqQUOKFapVcal6x2gZY6NXWoQFOrt2bJylVFSRO5CXffaTWsmb84+ZGLtJxyt1XPxvGg+yCl7CO8qh7qs0mCZ1qS6vc9s+E6NHIxgMxBUvUfDJ+DH4J4FLyU2f2yBkXKTmZxBJ//09OD17dgAixmMqOb6SOYzFIecrtErt/gr7ApHqTfYCQf/8CMUnaAgirzxZBUny9R1yhAOn0SFD2Sb9oStn2/Spo3rbb1WNNaZUqrexRTtg1vri/eo7e6bzHG78B</con:value></con:property><con:property><con:name>LicAppID</con:name><con:value>urn%3Adece%3Alicappid%3Aorg%3Adece%3AE49B021A38CC0F36E0401F0A059951E3</con:value></con:property><con:property><con:name>Policy_Class</con:name><con:value>urn:dece:type:policy:ManageAccountConsent</con:value></con:property><con:property><con:name>POLICY_ID</con:name><con:value>urn:dece:policyid:org:dece:E58F1EF5C76AEADCE0401F0A079939B8</con:value></con:property><con:property><con:name>LIC_APP_ID</con:name><con:value>urn:dece:licappid:org:dece:0E3F5475F72F5174E05305991F0A2DD5</con:value></con:property><con:property><con:name>Domain_ID</con:name><con:value>urn:dece:domainid:dece:0E3F657130221CFCE05307991F0A14F2</con:value></con:property><con:property><con:name>RET_NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:0E3F5475A851516AE05305991F0A670D</con:value></con:property><con:property><con:name>RET_NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:0E3F53740EB76FFEE05307991F0A6826</con:value></con:property><con:property><con:name>RET_SAML</con:name><con:value>SAML2 Assertion=nVZdc9o6EP0rjPvYMf4EjCcw4wZo3ISEAiXNfbkj5DVWY2SQZAL99Vcy4GLycbn3yaP1avfs7tGRrjhaprYfcA5MkIzWtsuUcr+wdrScUT9DnHCfoiVwX2B/EgzvfLtu+ui4RauFvY72N1jNZtPCsd5uum3dtSNPn7csS587rgceIAQmlq6c5xBSLhAVHc02rYZu2rrpTk3PNy3fbNQ90/xLq82AcRlbutRN7QBqyztaIsTKN4yXl5f6i1PP2MKwTdMyfg7vJjiBJdK6V/uKikSse/DH9QgwpCmu42xpXBkVn6uI+xOyoEjkDA65ovdymYbZNqRPxMnik1buhSikcVYsrxHNKMEoJb+R6s8QRJJFtSBdZIyIZPluEZapAuuwxTq2XPpJM6rQLgxUQcg40nmCrEOsMcTAgGKo/RiHHe3TZVMrtk4ZojzO2JJXl/8ND9ANpNkKIp0fyzpAuzzgG53qXgH2Q4rTnJMN3CuyrhAGfpgm4MtD1UYMYrK9I1wSdMsVOuMU3tly340eWQAX/2dAJ8PZB5mhNIeu5w6mbNeio8ms99Wh8cZ6THfB/MHpDTsFgFPnwlCOdr88I2VJov0OdH0zHJNB3J45+ZMxvHE/r9x88di/XQ/49PYpGTsL59cjt3PxNBjB8/cWBCFiX+1ePppc37eDIHzeuPns2uNP6c8RG9NgBcbPH7eJ+e1h4j3P2/cRm9Del88t72ZEv3nWZGCl4XyWDu11uN5ipzlt5333JtpGv+9ng7jZHibfF7fJziLh4+M3lM5ttv714GzbPzplOSf4q7bjmZ/k81+AxXGpaBD2agM5JSQ+FjNlIZEeF67+SokPF0CF1lW7lHb4uZQ7Evlyhvu12XcGDaflmv0vreZg0O+bDcdstdvWwAyant08iswexRnE64zGROVSkrunzccA8dLnQCNg+ibLpdJx7YOIPSRQLaRjeQgyymGaSXm2WkmUrNtbe+451noRx1ZruUB8J7TafSYe6AMLYgGsosmWVdHkMWCyIqCEW/GaS2JzIXuxRptcpFZ9g+oUcintTKmsb7tew+BkuUpBITWWWZSnUF8lq6IzBt9/bR1hXljH/Wlx2t6t6/zfsQXSJyLKgatavoAcI7y6XEy/cSzk/YLd04KP4YM8IupgyX4KRvAeSfXXH5oofpQckRUdIZee54ZKVOO8oDJRtCG4JHp5XUsVl+e+exzHGtXX9XyzyYsBtJS+MRnekDJnGRPAuZSl3TR7BmqUIYyL7oAS9Vnm0l7Fl4uETgQSsJR0qRXLCy79CXB16YeS59tLXxSVlLJvArbiLdt1Kh8sCvGHbxrsY+UnzSP5eclY9Gdcb8Q6ySPrlHe+IHShVkr/d++QAmcyLJHKlbHT4G8FeCt51Vg2ucQiJJvmuYD3/9SUJHU0hHGWUxH2tMJwKpMFTrFbgf/H6VWYQonLpxn597eZTgoKYJAPOk6K+OqG9RX/6eJEag9JX6mt22oEXsNqWM2gUNvGQW1bZq9sSgVd95X5teWkT+cc7/4D</con:value></con:property><con:property><con:name>Device_ID</con:name><con:value>urn:dece:deviceid:org:dece:0E3F5475F72D5174E05305991F0A2DD5</con:value></con:property><con:property><con:name>DeviceGetETag</con:name><con:value>"0E3F559F171A516CE05305991F0AE745:5214A3AE"</con:value></con:property><con:property><con:name>DeviceGetLastModified</con:name><con:value>Wed, 04 Feb 2015 08:01:22 GMT</con:value></con:property><con:property><con:name>ORG_ID</con:name><con:value>urn:dece:org:org:dece:o:700031</con:value></con:property><con:property><con:name>DRM_ID</con:name><con:value>urn:dece:drm:adobe:3.0</con:value></con:property><con:property><con:name>licappserial</con:name><con:value>add6f9ea-9148-4470-b882-6321a5846ded</con:value></con:property><con:property><con:name>licappserial_1</con:name><con:value>add6f9ea-9148-4470-b882-6321a5846ded</con:value></con:property><con:property><con:name>licappModel</con:name><con:value>model-3A65F92B71137</con:value></con:property><con:property><con:name>licappModel_1</con:name><con:value>model-3A65F92B71137</con:value></con:property><con:property><con:name>licappManufacturer</con:name><con:value>manfact-9728817886435</con:value></con:property><con:property><con:name>licappManufacturer_1</con:name><con:value>manfact-9728817886435</con:value></con:property><con:property><con:name>licappapplication</con:name><con:value>appid-hKqnPMNYWHC73</con:value></con:property><con:property><con:name>licappapplication_1</con:name><con:value>appid-hKqnPMNYWHC73</con:value></con:property><con:property><con:name>attestionIdFULL</con:name><con:value>urn%3Adece%3Aattestation%3Amanfact-9728817886435%3Amodel-3A65F92B71137</con:value></con:property><con:property><con:name>attestionIdFULL_1</con:name><con:value>urn%3Adece%3Aattestation%3Amanfact-9728817886435%3Amodel-3A65F92B71137</con:value></con:property><con:property><con:name>attestionId</con:name><con:value>urn:dece:attestation:manfact-9728817886435:model-3A65F92B71137</con:value></con:property><con:property><con:name>attestionId_1</con:name><con:value>urn:dece:attestation:manfact-9728817886435:model-3A65F92B71137</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>ccdf09f0-c034-47f6-8cdf-76797af3f771</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>7eb68f58-93ef-4e73-98fe-f10cbdf6193b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>1ad7f9ca-219a-4dce-ba00-8f7d6fd3daca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>26e61b63-18ea-4c73-8766-0f86596b334c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f186da08-3084-424e-86a3-715f74852dcb</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b366a31b-3fe4-40cb-bf60-511d058b5006</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c4a80570-f596-48bf-be71-b2d7568257a7</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2b915513-1468-467f-8c11-6d68d800c584</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0f2739b6-1d01-4bea-acac-a649cf75c95c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>1fab1831-cc83-4cf2-a6cd-1526dd405686</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="00042_DeviceGetCacheScenario_NonCS_DeviceGet_1/07_DeviceGet(If-Non-Match)_1/06__304_Not_Modified" searchProperties="true" id="fe169816-624b-4902-b8c6-31122c3013e0"><con:settings/><con:testStep type="groovy" name="Set Coordinator Schema to Leading version" id="64453582-1e06-4f4b-a672-1cc33a3ad238"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("versionMinor",tP.getPropertyValue("currentVersionMinor"));
tP.setPropertyValue("versionMajor",tP.getPropertyValue("currentVersionMajor"));

tP.setPropertyValue("CoordinatorSchema", tP.getPropertyValue("CoordinatorSchema_"+ tP.getPropertyValue("versionMinor")));

log.info "CoordinatorSchema set to .... :  " + tP.getPropertyValue("CoordinatorSchema")</script></con:config></con:testStep><con:testStep type="groovy" name="Call AccountCreate API"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("AccountCreateAPI")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call FirstUserCreateAPI"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("FirstUserCreateAPI")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call STSCreateandGetAPI"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("STSCreateandGetAPI")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("Username",tC.getPropertyValue("Username"));
myTC.setPropertyValue("audience","");


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

tC.setPropertyValue("RET_NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("RET_NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("RET_SAML",tC.getPropertyValue("SAML"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call TOUPolicyCreateAPI"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("TOUPolicyCreateAPI")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call MUCPolicyCreateAPI"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("MUCPolicyCreateAPI")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call STSCreateandGetAPI for Device"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("STSCreateandGetAPIforDevices")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("Username",tC.getPropertyValue("Username"));

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call AttestationDataCreateAPI" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("AttestationDataCreate API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call AttestationDataGetAPI" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("AttestationDataGet API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call LicAppCreateAPI"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("LicAppCreateAPI")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML"));

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call LicAppGetAPI"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("LicAppGetAPIforDevice")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("LIC_APP_ID",tC.getPropertyValue("LIC_APP_ID"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML"));

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call DeviceGetAPI in 1/07"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGetAPI")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("Domain_ID",tC.getPropertyValue("Domain_ID"));
myTC.setPropertyValue("Device_ID",tC.getPropertyValue("Device_ID"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("RET_NODE_ACCOUNT_ID_FULL"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("RET_SAML"));
myTC.setPropertyValue("ExpectedReturnCodeGet","200");
myTC.setPropertyValue("ETagResponseType","UnMatch");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Set Coordinator Schema to Trailing version" id="3f30bac3-d652-4dbe-8b2a-f92c56b2f2ed"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("versionMinor",tP.getPropertyValue("currentVersionMinor"));
tP.setPropertyValue("versionMajor",tP.getPropertyValue("currentVersionMajor"));

tP.setPropertyValue("CoordinatorSchema", tP.getPropertyValue("CoordinatorSchema_"+ tP.getPropertyValue("versionMinor")));

log.info "CoordinatorSchema set to .... :  " + tP.getPropertyValue("CoordinatorSchema")</script></con:config></con:testStep><con:testStep type="groovy" name="Call again DeviceGetAPI in 1/06"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGetAPIwithIf-None-Match")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());
myTC.setPropertyValue("ETag",tC.getPropertyValue("DeviceGetETag"));

myTC.setPropertyValue("Domain_ID",URLEncoder.encode(tC.getPropertyValue("Domain_ID"),"UTF-8"));
myTC.setPropertyValue("Device_ID",URLEncoder.encode(tC.getPropertyValue("Device_ID"),"UTF-8"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",URLEncoder.encode(tC.getPropertyValue("RET_NODE_ACCOUNT_ID_FULL"),"UTF-8"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("RET_SAML"));
myTC.setPropertyValue("ExpectedReturnCodeGet","304");
myTC.setPropertyValue("ETagResponseType","FAILURE");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:properties><con:property><con:name>NODE_ID</con:name><con:value>0701</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>0E3F7C15D7C350BAE05305991F0A172A</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:0E3F7C15D7C350BAE05305991F0A172A</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>0E3F7C1565BC6D12E05307991F0A994E</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:0E3F7C1565BC6D12E05307991F0A994E</con:value></con:property><con:property><con:name>Username</con:name><con:value>firstfau_20150204_013346</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVZbc/I4DP0rTPrYCbkQCskUZlICnXSBXtLybfuyYxwB7iY2jR0u/fVrB8gHlHbZfWIk5KNjSzrKNUdpYns+55AJwmhllSaUe4W3peUZ9RjihHsUpcA9gb3IH/Q9u2p6aHdEq4RBS/srdgA17SbW3Svs6A5yr3SETFeP8VXDtRsmxPWGDOU8h5BygahoabZp1XXT1k3n2Wx6puU5jWrTdd60yggyLrFlSNXUtqRWvKXNhJh7hrFcLqvLWpVlU8M2Tcv4c9CP8AxSpLWvNzcqEmXtbTyuxoAhSXAVs9S4Ng5irmPuRWRKkcgz2OaKv8tlGqZryJiYk+mFVp6FOKQTVpgdRBklGCXkE6n3GYCYsbjiJ1OWETFLv72EZSpgHVZYx5ZDLzTjkNqZQAcMM450PkPWFusJJpABxVB5eQpb2sV5VSuOPmeI8gnLUn5o/jc+QBeQsDnEOt9da0vtfMATL9W+BuyFFCc5JwsYqmadIwx8W03A50NVHjKYkFWfcNmgK67YGfv0jszNawRkClz8nwLtFWcDMkJJDu3PeS80Vs9+v7m8JE+fb87KXdwHi2nk8FZBYD+4cJSl3ZhHTVk20eZENh6Z7Ol1wKapGzVn0cOQ/rp9/RCJDd1R8Pr4wTtu3X6d1OxH3+0NAzYZzOvN0Oo+vVHS7aJbWLCReElH9z576A8Zn7sD8o7HiX0Zr9I/+u+f2eXk/XPA73Lxa3Zr3fWeJ821T2bLEQrjh/ePCK9nIUZ29/EF4VlvGTjDt7x7R/C0T5z+HeXd1/F0HXSQ0yqvs8f/0Leb+SgfvwMWO1O1QRhUerJKSPwsZspDYn1ShHpzJT5cABVaW51S2uHlUu5I7MkabmyzW+s1Olb9qn7TuQosu2vWa2bDda2e6buu092JzIbFEcUOoxOicinJ3bTNzwRx6o0BZZBpPyAFSKDKkIl7ep/5EwHZgcJa1r7Cqrb+Fuj4v11OGRMTFcBVmhuQ7wUnVLy2U/FjLvZptTd2+H68ILgsZ7mUpFbJ7i60nMtp+kDVuJovFrkSc6+hpjiTs2AoHoZpGxHgXM7f+pn9DdQoUYyzxG538+Pkpf+QYi5mNBJIQCq7pVKYZ2y3CLjabiGNYXXu6jxIKQshYCVO+TqJ3MyK8Y/LG3tYxUn3g/xZsiwuL3gKay+PvKdcboLQqbKU0K1/D4majnJCMJOwRI4oy/bBTwGcSn7oLB+55CJERsa5gO//qajZa2kIY5ZTEQZa4djXg4KnWM/B+x30BaaQnPIbhPz7R4hOihbAIL9cOCnw1SrxuASk0z1N2SY9JStBo1Ormzd+ISv1jaxYDdsvH+WAXfuL+6tn752Oe7z9Dw==</con:value></con:property><con:property><con:name>LicAppID</con:name><con:value>urn%3Adece%3Alicappid%3Aorg%3Adece%3AE49B021A38CC0F36E0401F0A059951E3</con:value></con:property><con:property><con:name>Policy_Class</con:name><con:value>urn:dece:type:policy:ManageAccountConsent</con:value></con:property><con:property><con:name>POLICY_ID</con:name><con:value>urn:dece:policyid:org:dece:E58F1C96AB11496DE0401F0A079939A4</con:value></con:property><con:property><con:name>LIC_APP_ID</con:name><con:value>urn:dece:licappid:org:dece:0E3F7BD72327509FE05305991F0AFDB1</con:value></con:property><con:property><con:name>Domain_ID</con:name><con:value>urn:dece:domainid:dece:0E3F721FF37B1D08E05307991F0AB2EC</con:value></con:property><con:property><con:name>RET_NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:0E3F7C14524E50B4E05305991F0A9DD7</con:value></con:property><con:property><con:name>RET_NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:0E3F7C14525A50B4E05305991F0A9DD7</con:value></con:property><con:property><con:name>RET_SAML</con:name><con:value>SAML2 Assertion=nVbbcuI4EP0VyvM4ZSyDzcUVqCKBzDCBXIBksvOypchtUGLLRpLN5etXMsGDGZJl98mlduv06YuOdCFwFNa8nhDAJY1ZZR2FTHi5tWOknHkxFlR4DEcgPEm8aW888mpV5OH9FqMy7HeMvwH5jbpDHLOO62A6tVbbxLbTNhvNhhs0G04LGki5CpHCkAmJmewYNWS7JqqZyJmhlodsr96stpz2L6PyBFwobOVSVbt2pNaiYyykTDzLWq1W1VW9GvO5VUPItp7HoylZQISN7sUuozwQ7777k6oPBMKQVEkcWRdWyefCF96UzhmWKYf3WP5HsZCF2pby8QWdfzGKveAPWRDnyyvMYkYJDukW6/qMQS5iv9IL5zGnchF9mISNNLAJa2IS22FfDKtM7UygEkMusCkW2H7HmkAAHBiByuNk2DG+nNe1fOuMYyaCmEeivPxvfIBlEMYJ+KbYp/VO7XzAE5XqXgDxhoyEqaAZ3OphTTAB8d5NIOdDVe45BHQ9okIN6FpodtYhvaPlrhp9Ogch/0+DDpqzA3nCYQpde+S4T6uvvttADE1+3tBWkCAUzAh+6+QEDp1zQ9Ha3fJoKIsh2u1g6KHx1+THdrn6uu0v1pG13Gzbg59X8WL0fI2bBJY/NtnDQMzwt6u74W09+D6YjcPHxcNX7D5cD+b3j8NgXb9f9durxds3NHtuiehmMho/P/Sd3ni5bq6d2bT34kpsjYP5a9+NWr54oZsG8vng10tj27gZL2uT6Dt+AjK+sfAo217arW88myeSzZqPy2HGkuRy1oo7RToH/Mu2/Zmfpi+vQOR+qcdg2K9cqy5h+bmYaQv1zSB39RItPkICk0ZX79La4aVK7qjvqR7u1mhQv25e2Y5bc3suunQGyK0jt922r1Gv3e839yKzY3FE8SpmAdWxtOTuxuZzgiTyBDAfuJnFqVI6YXyC2McSV4Zsog5BzATMYiXP2Tpx5hy9bnirueAxe63zDBLyZlRuY3nH7ngvkMBLkmzbJUmeAKEJBa3beqyFmmshVSmWOEtlaFczXGWQKmXnWmS9mtNyLUGjJARN1IpiPw2hmiySvDCW2H1rJiYit04Gs/ywfZjW8b99BZSPT7WD0LlcguoinLhbavtEPk7YOUx4D99LfarPlSqn5JTsmJR//Z4SPR7FiKiM9pQLz2NDCdU6TqgI5GeUFHNe3NZKxNWx7+7bscTVZTXNsjRvQFPLG1fwlk7RQjVrCiRVwrSZxW/ArALFOusWKIgfBS/sZYqpXLCpxBIiNTGVfHnGtT8Foa/9oZr09blvilJIVToJa3nKdhWqJ4tm/OmrhnhE+ynzvfqsYu7/7tgJrIM4Kk9160vK5nqlb4DNB3NBYgVLlXbF/BD8FMCp4GVjUeSCi1QD9ZJK+PhPRYtSx8CExCmTw76RGw6FMucpNwl4v53+gMm1uHic0X9/nZk0HwEC6kknaI6v71hPHwE2PxDb96Cn9dYZfKa3ZXbdP8x/Wg7qdDzj3X8A</con:value></con:property><con:property><con:name>Device_ID</con:name><con:value>urn:dece:deviceid:org:dece:0E3F7BD72325509FE05305991F0AFDB1</con:value></con:property><con:property><con:name>DeviceGetETag</con:name><con:value>"0E3F7BCE4AA45093E05305991F0A470B:DD96AB08"</con:value></con:property><con:property><con:name>DeviceGetLastModified</con:name><con:value>Wed, 04 Feb 2015 08:01:56 GMT</con:value></con:property><con:property><con:name>ORG_ID</con:name><con:value>urn:dece:org:org:dece:o:700031</con:value></con:property><con:property><con:name>DRM_ID</con:name><con:value>urn:dece:drm:adobe:3.0</con:value></con:property><con:property><con:name>licappserial</con:name><con:value>add6f9ea-9148-4470-b882-6321a5846ded</con:value></con:property><con:property><con:name>licappserial_1</con:name><con:value>add6f9ea-9148-4470-b882-6321a5846ded</con:value></con:property><con:property><con:name>licappModel</con:name><con:value>model-3A65F92B71137</con:value></con:property><con:property><con:name>licappModel_1</con:name><con:value>model-3A65F92B71137</con:value></con:property><con:property><con:name>licappManufacturer</con:name><con:value>manfact-9728817886435</con:value></con:property><con:property><con:name>licappManufacturer_1</con:name><con:value>manfact-9728817886435</con:value></con:property><con:property><con:name>licappapplication</con:name><con:value>appid-hKqnPMNYWHC73</con:value></con:property><con:property><con:name>licappapplication_1</con:name><con:value>appid-hKqnPMNYWHC73</con:value></con:property><con:property><con:name>attestionIdFULL</con:name><con:value>urn%3Adece%3Aattestation%3Amanfact-9728817886435%3Amodel-3A65F92B71137</con:value></con:property><con:property><con:name>attestionIdFULL_1</con:name><con:value>urn%3Adece%3Aattestation%3Amanfact-9728817886435%3Amodel-3A65F92B71137</con:value></con:property><con:property><con:name>attestionId</con:name><con:value>urn:dece:attestation:manfact-9728817886435:model-3A65F92B71137</con:value></con:property><con:property><con:name>attestionId_1</con:name><con:value>urn:dece:attestation:manfact-9728817886435:model-3A65F92B71137</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>ccdf09f0-c034-47f6-8cdf-76797af3f771</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>7eb68f58-93ef-4e73-98fe-f10cbdf6193b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>1ad7f9ca-219a-4dce-ba00-8f7d6fd3daca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>26e61b63-18ea-4c73-8766-0f86596b334c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f186da08-3084-424e-86a3-715f74852dcb</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b366a31b-3fe4-40cb-bf60-511d058b5006</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>c4a80570-f596-48bf-be71-b2d7568257a7</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>2b915513-1468-467f-8c11-6d68d800c584</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>3f30bac3-d652-4dbe-8b2a-f92c56b2f2ed</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>64453582-1e06-4f4b-a672-1cc33a3ad238</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="00043_DeviceGetCacheScenario_NonCS_DeviceGet_1/07_DeviceGet(If-Modified-Since)_1/06_304_Not_Modified" searchProperties="true" id="0a4df966-af97-48e6-acb2-cb2bd04695ad"><con:settings/><con:testStep type="groovy" name="Set Coordinator Schema to Leading version" id="af2dfbf4-cb83-4344-ad6d-2d32021714fb"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("versionMinor",tP.getPropertyValue("currentVersionMinor"));
tP.setPropertyValue("versionMajor",tP.getPropertyValue("currentVersionMajor"));

tP.setPropertyValue("CoordinatorSchema", tP.getPropertyValue("CoordinatorSchema_"+ tP.getPropertyValue("versionMinor")));

log.info "CoordinatorSchema set to .... :  " + tP.getPropertyValue("CoordinatorSchema")</script></con:config></con:testStep><con:testStep type="groovy" name="Call AccountCreate API"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("AccountCreateAPI")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call FirstUserCreateAPI"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("FirstUserCreateAPI")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call STSCreateandGetAPI"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("STSCreateandGetAPI")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("Username",tC.getPropertyValue("Username"));
myTC.setPropertyValue("audience","");


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

tC.setPropertyValue("RET_NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
tC.setPropertyValue("RET_NODE_USER_ID_FULL",tC.getPropertyValue("NODE_USER_ID_FULL"));
tC.setPropertyValue("RET_SAML",tC.getPropertyValue("SAML"));

</script></con:config></con:testStep><con:testStep type="groovy" name="Call TOUPolicyCreateAPI"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("TOUPolicyCreateAPI")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call MUCPolicyCreateAPI"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("MUCPolicyCreateAPI")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call STSCreateandGetAPI for Device"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("STSCreateandGetAPIforDevices")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("Username",tC.getPropertyValue("Username"));

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call AttestationDataCreateAPI" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("AttestationDataCreate API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call AttestationDataGetAPI" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("AttestationDataGet API")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());


def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call LicAppCreateAPI"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("LicAppCreateAPI")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML"));

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call LicAppGetAPI"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("LicAppGetAPIforDevice")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("LIC_APP_ID",tC.getPropertyValue("LIC_APP_ID"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("NODE_ACCOUNT_ID_FULL"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("SAML"));

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Call DeviceGetAPI in 1/07"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();


def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGetAPI")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("Domain_ID",tC.getPropertyValue("Domain_ID"));
myTC.setPropertyValue("Device_ID",tC.getPropertyValue("Device_ID"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",tC.getPropertyValue("RET_NODE_ACCOUNT_ID_FULL"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("RET_SAML"));
myTC.setPropertyValue("ExpectedReturnCodeGet","200");
myTC.setPropertyValue("ETagResponseType","UnMatch");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;</script></con:config></con:testStep><con:testStep type="groovy" name="Set Coordinator Schema to Trailing version" id="0db18b2f-5e9d-48b3-8a29-cd998ea121ab"><con:settings/><con:config><script>def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

tP.setPropertyValue("versionMinor",tP.getPropertyValue("trailingVersionMinor"));
tP.setPropertyValue("versionMajor",tP.getPropertyValue("trailingVersionMajor"));

tP.setPropertyValue("CoordinatorSchema", tP.getPropertyValue("CoordinatorSchema_"+ tP.getPropertyValue("versionMinor")));

log.info "CoordinatorSchema set to .... :  " + tP.getPropertyValue("CoordinatorSchema")</script></con:config></con:testStep><con:testStep type="groovy" name="Call DeviceGetAPI with If-Modified-Since in 1/06"><con:settings/><con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def tC = testRunner.getTestCase();
def tS = tC.getTestSuite();
def tP = tS.getProject();

def myTC = tP.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGetAPIwithIf-Modified-Since")

myTC.setPropertyValue("tName",tC.getName());
myTC.setPropertyValue("sName",tS.getName());

myTC.setPropertyValue("ETag",tC.getPropertyValue("DeviceGetETag"));
myTC.setPropertyValue("Last-Modified",tC.getPropertyValue("DeviceGetLastModified"));
myTC.setPropertyValue("Domain_ID",URLEncoder.encode(tC.getPropertyValue("Domain_ID"),"UTF-8"));
myTC.setPropertyValue("Device_ID",URLEncoder.encode(tC.getPropertyValue("Device_ID"),"UTF-8"));
myTC.setPropertyValue("NODE_ACCOUNT_ID_FULL",URLEncoder.encode(tC.getPropertyValue("RET_NODE_ACCOUNT_ID_FULL"),"UTF-8"));
myTC.setPropertyValue("SAML",tC.getPropertyValue("RET_SAML"));
myTC.setPropertyValue("ExpectedReturnCodeGet","304");
myTC.setPropertyValue("ETagResponseType","FAILURE");

def runnerTC = myTC.run( null , false );

assert runnerTC.status == Status.FINISHED;

tP.setPropertyValue("versionMinor","07");</script></con:config></con:testStep><con:properties><con:property><con:name>NODE_ID</con:name><con:value>0701</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID</con:name><con:value>0E3F7C1565C16D12E05307991F0A994E</con:value></con:property><con:property><con:name>NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:0E3F7C1565C16D12E05307991F0A994E</con:value></con:property><con:property><con:name>NODE_USER_ID</con:name><con:value>0E3F7F20750D6D14E05307991F0AB570</con:value></con:property><con:property><con:name>NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:0E3F7F20750D6D14E05307991F0AB570</con:value></con:property><con:property><con:name>Username</con:name><con:value>firstfau_20150204_013418</con:value></con:property><con:property><con:name>SAML</con:name><con:value>SAML2 Assertion=nVbbcuI4EP0VynncMpZvEFyBKi4hIYGEACFhXraELBtlbJmRZCD5+pUMeAwhGWafqG5ap4/U3ad9xWEcWV6Tc8wESWhpE0eUe5m3rqWMegnkhHsUxph7Annj5qDvWWXgwf0RrdTr1LV/gQkBnIOqbmMX6k7VCvRatVbT7Sqy5n5gg9ocyVDOU9yjXEAq6poFTFcHlg6cCbj0gOWZ1bLt2j+00hQzLrFlSBloO1IbXtcWQiw9w1iv1+W1XU5YaFgAmMbroD9GCxxDrXG1vVGWiDV28ajsY4SjCJVREhtXxkHMlc+9MQkpFCnDu1z+V7mAAWqGjPE5CS+0/Cz2ezRIMrMNaUIJghH5gOp9BlgsEr/UjMKEEbGIv7yECRSwjjdIR6ZDLzTjkNqZQAcMGYc6X0BzhzXCAWaYIlx6HvXq2sV5VcuOThikPEhYzA/Nv+OD6QpHyRL7Ot9fa0ftfMATL9W4wsjrURSlnKzwg2rWJUSY76qJ0flQpSHDAdn0CZcNuuGKnVGkd2RuX6NDQszF/ylQoThbkCmMUtx4m85mIEk/2j8rLzW2niz4iN5PXkbG+rKeESgGZ468tFvzqCnzJtqeGLSC4bDde2p2Q7PvOE9vs/avOKX0sT14E6POkgz7s6eFm67e19Pp5cT/MV6hBzZYk5e7m4fRxr/s3gQrO6T9+9fZsHUXjCPcur6tTB1/OIjtYQDuF4b7NHtdOve31e59WAmoG72z5wl/uSUtf0GQeU3CxWPvreo4/s3d4Pmf6c0khh8Qm+mmQu3BkLipxSbOoJ5fp8D/0Lef+XE6f8NI7E3VBr1OqSurBMX3YqY8xNeDLNRbKvHhAlOhNdQppR1eKuWO+J6s4dYG13a32rVA1QWdSsd0roFrAzk6Zhc0W24V7EVmy+KIYjuhAVG5lORu2+Z7gij25hgyzLRvkDpQwNJDIh7pI2sGArMDhTXNosKqtv4S6Pi/fU4Z4xMVwFWaFpbvhU+oONir+DEX67TaG3v8pr8iKC9nvpSkVsnuzrScy2n6Bct+OV2tUiXmXlVNMZOzYCgeBrCMMUapnL/3SfITUyNHMc4Su/3Nj5Pn/kOKqVjQsYACx7JbSpl5xnYbY662W4/6eHPu6jxIKQsh8Eac8rUjuZkV42+XN/KQipPuofxZJ8zPL3gKq5BH3lMuN0FoqCwldO+/h0RNRz4hKJGwRI5oworgpwBOJT905o+ccxGCkXkq8Nf/lNTs1TWIUJJS0etomaOoBxlP8b7E3u+gTzCZ5OTfIOTPHyE6yVoAYfnlwkmGr1aJxyUgDQuaskv6SVbapltx26aUFasoK7Wac50/ygG7xif3Z0/hnY57vPEf</con:value></con:property><con:property><con:name>LicAppID</con:name><con:value>urn%3Adece%3Alicappid%3Aorg%3Adece%3AE49B021A38CC0F36E0401F0A059951E3</con:value></con:property><con:property><con:name>Policy_Class</con:name><con:value>urn:dece:type:policy:ManageAccountConsent</con:value></con:property><con:property><con:name>POLICY_ID</con:name><con:value>urn:dece:policyid:org:dece:E58F0AB7648D1AFCE0401F0A0799118B</con:value></con:property><con:property><con:name>LIC_APP_ID</con:name><con:value>urn:dece:licappid:org:dece:0E3F7BCE4AB65093E05305991F0A470B</con:value></con:property><con:property><con:name>Domain_ID</con:name><con:value>urn:dece:domainid:dece:0E3F657130241CFCE05307991F0A14F2</con:value></con:property><con:property><con:name>RET_NODE_ACCOUNT_ID_FULL</con:name><con:value>urn:dece:accountid:org:dece:0E3F7BFDC3D7509BE05305991F0A99B6</con:value></con:property><con:property><con:name>RET_NODE_USER_ID_FULL</con:name><con:value>urn:dece:userid:org:dece:0E3F7C15D7C950BAE05305991F0A172A</con:value></con:property><con:property><con:name>RET_SAML</con:name><con:value>SAML2 Assertion=nVbZcuI6EP0VynmcMpbBZnEFqgxkYULClmWSl1uK3IASIzuSzJKvH8mAg8lyuffJpXbr9OlFRzoVeB6WPF8I4JJGrLCah0x4qbVhJJx5ERZUeAzPQXiSeGP/uueVisjDuy1GodtpGP/UXKfkuEFgBiggpmPXHbMGE2RiF1WdSQ1XiFNTrkIk0GVCYiYbRgnZrolKJnJuUc1DJQ/VivVy5cko3AMXClu5FJGxJbUSDWMmZexZ1nK5LC7LxYhPrRJCtvXnujcmM5hjo3m6ySgNxJtbf1IMgEAYkiKJ5taplfM5DYQ3plOGZcJhGyv4LhayUN1SPoGg0xMj2wtBl02idNnGLGKU4JC+Y12fa5CzKCj44TTiVM7m3yZhIw1swoqYxHbYiWHlqR0JlGPIBTbFDNtbrBFMgAMjULgbdRvGyXFdS7fecszEJOJzkV/+Nz7AFhBGMQSm2KW1pXY84BeVap4C8bqMhImgC7jRwxpjAmLbTSDHQxUGHCZ01aNCDehKaHbWPr2D5aYaHToFIf9Pg/aaswG5x2ECzeBtcNe/uBzht+loSPyr19+/V9XFpfxVeW2kBPadU0PW2s3yYCizIdrsuHAfa+0XFAc+4Y/k6p2/j7sIovGQDPu805vx69WQSF/eBF17acFLb7pgL3b58uoi6bvroXtxN1m849Z4eFNLSOTUzy6urOp7x50+XdqVs8GvO2tw67faZyP6Z3Szvn8c8DUbPvBe5c13Lmw6eJg9turTdpXXftP+E+mBDEP7Bfz+fbWPKnH54dq1nadWH+6XjSydPf552+7Mj5PnFyByt9Rj0O0UzlWXsPxZzLSFBuYkdfViLT5CApNGU+/S2uElSu5o4KkebtborHxebdtup9quu6jlnyG3jNx63T5Hvl0t+TuR2bA4oNiO2ITqWFpyN2PzM0Ey9wSwALi5iBKldML4AbGDJS502UgdgogJuI2UPNvV9WvFWcYl/Mwi+zmuOeK16jyvIyWvN5Hssz73JxJ4TpRtOyfKIyA0pqCVWw+2UJMtpCrGG14kMrSLC1xkkCht51pmvZJTcy1B53EImqo1j4IkhGI8i9PSWGLzLZmYiNQ6OrtNj9u3iR3+29VA+QRUOwidSwtUH+HT7WJ77i6R7xN29hPewftJQPXJUgWVnJINk/yvjznRA5INicpoRznzPDTkUK3DhLJAwYKSbNKz+1rJuDr4zV073nDxrZgsFknagKoWOK7gLZ2ihUrWGEiipGl9G70CszIU66h7ICN+EDyz5ykmcsbGEkuYq4kppMsjLv4xCH3xd9Wsr459VeRCqtJJWMmvbO1QPVo04x/fNcQj2k+ZB+qzjHjw0bEvsPbiqDzVvS8pm+qVvgPW38wFiRQsVeoV8X3wrwC+Cp43ZkXOuEg1UM+JhO//FLQsNQxMSJQw2e0YqWFfKlOech2D9+H0CSZV4+x5Rv/9fWbSdAQIqEedoCm+vmU9fQTYdE9ut0E/KW7rvNMud6ouqrf2Fbdeb1WyouTYNT+ZP1v26nQ4482/</con:value></con:property><con:property><con:name>Device_ID</con:name><con:value>urn:dece:deviceid:org:dece:0E3F7BCE4AB45093E05305991F0A470B</con:value></con:property><con:property><con:name>DeviceGetETag</con:name><con:value>"0E3F7BD8C9CC6D0EE05307991F0A3BB7:E1A98F5E"</con:value></con:property><con:property><con:name>DeviceGetLastModified</con:name><con:value>Wed, 04 Feb 2015 08:02:25 GMT</con:value></con:property><con:property><con:name>ORG_ID</con:name><con:value>urn:dece:org:org:dece:o:700031</con:value></con:property><con:property><con:name>DRM_ID</con:name><con:value>urn:dece:drm:adobe:3.0</con:value></con:property><con:property><con:name>licappserial</con:name><con:value>0232b494-eb0c-486b-a55b-cc927aeef5ba</con:value></con:property><con:property><con:name>licappserial_1</con:name><con:value>0232b494-eb0c-486b-a55b-cc927aeef5ba</con:value></con:property><con:property><con:name>licappModel</con:name><con:value>model-3A65F92B71137</con:value></con:property><con:property><con:name>licappModel_1</con:name><con:value>model-3A65F92B71137</con:value></con:property><con:property><con:name>licappManufacturer</con:name><con:value>manfact-9728817886475</con:value></con:property><con:property><con:name>licappManufacturer_1</con:name><con:value>manfact-9728817886475</con:value></con:property><con:property><con:name>licappapplication</con:name><con:value>appid-hKqnPMNYWHC112</con:value></con:property><con:property><con:name>licappapplication_1</con:name><con:value>appid-hKqnPMNYWHC112</con:value></con:property><con:property><con:name>attestionIdFULL</con:name><con:value>urn%3Adece%3Aattestation%3Amanfact-9728817886475%3Amodel-3A65F92B71137</con:value></con:property><con:property><con:name>attestionIdFULL_1</con:name><con:value>urn%3Adece%3Aattestation%3Amanfact-9728817886475%3Amodel-3A65F92B71137</con:value></con:property><con:property><con:name>attestionId</con:name><con:value>urn:dece:attestation:manfact-9728817886475:model-3A65F92B71137</con:value></con:property><con:property><con:name>attestionId_1</con:name><con:value>urn:dece:attestation:manfact-9728817886475:model-3A65F92B71137</con:value></con:property></con:properties><con:reportParameters/><con:breakPoints><con:testStepId>ccdf09f0-c034-47f6-8cdf-76797af3f771</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>7eb68f58-93ef-4e73-98fe-f10cbdf6193b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>1ad7f9ca-219a-4dce-ba00-8f7d6fd3daca</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>26e61b63-18ea-4c73-8766-0f86596b334c</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>f186da08-3084-424e-86a3-715f74852dcb</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>b366a31b-3fe4-40cb-bf60-511d058b5006</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>d38eb13b-a1cf-43e0-a959-1fc796a1d69a</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>dca038a3-05a7-4f3a-97c0-acb7af303c59</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>ac9794da-491e-4eee-b737-c82fa6c64f2e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>37ccd7ed-a74e-410c-b370-fccdca16c6a2</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>3d5c8652-71b0-48e8-a3f3-e52a45c6d815</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>af2dfbf4-cb83-4344-ad6d-2d32021714fb</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>0db18b2f-5e9d-48b3-8a29-cd998ea121ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:properties/><con:reportParameters/></con:testSuite><con:testSuite name="DeviceGet  Retailer Test Cases Old" disabled="true">
    <con:description/>
    <con:settings/>
    <con:runType>SEQUENTIAL</con:runType>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00001_DeviceGet_Retailer_FUNC_with_ValidData" searchProperties="true">
      <con:description>This test case will verify that Application Tier properly handles a DeviceGet request when invoked with the GET method and valid header request .

Expected Result:

System should return successful message.</con:description>
      <con:settings/>
      <con:testStep type="groovy" name="Verify Node User SAML Asssertion">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def ValSamlAssertion = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Validate SAML Assertion");

	ValSamlAssertion.setPropertyValue("TCaseName",testCase.getName());
	ValSamlAssertion.setPropertyValue("TSuiteName",testSuite.getName());

	def runnerTc = ValSamlAssertion.run( null , false )
	assert runnerTc.status == Status.FINISHED;

	rcUUID = testCase.getPropertyValue("rcUUID");

	if (runnerTc.status != Status.FINISHED || rcUUID.toInteger()!= 1){

			
		testCase.setPropertyValue("nodetype","retailer");
		testCase.setPropertyValue("nodeid","0701");
		testCase.setPropertyValue("username","sch-drm_user1");
		testCase.setPropertyValue("password","Password1");
		testCase.setPropertyValue("accountoid",null);
		testCase.setPropertyValue("useroid",null);
		testCase.setPropertyValue("assertid",null);
		testCase.setPropertyValue("SAMLassertion",null);
		testCase.setPropertyValue("tokentype","urn:dece:type:tokentype:usernamepassword");
		testCase.setPropertyValue("loopuntil","25");
		testCase.setPropertyValue("expectErrTypeSTS","SUCCESS");
		testCase.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
			
		log.info " SAML Assertion Expired ! re-generating Assertion";
		
		def RunSTS = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get SAML Assertion - STS")

				RunSTS.setPropertyValue("TCaseName",testCase.getName());
				RunSTS.setPropertyValue("TSuiteName",testSuite.getName());

				def runnerSTS = RunSTS.run( null , false )

				assert runnerSTS.status == Status.FINISHED;

		}</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call LicAppCreate Request with Valid Data" disabled="true">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0");
testCase.setPropertyValue("expectErrTypeLAC","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedDeviceDDReq = testProject.getTestSuiteByName("Staging DeviceGet").getTestCaseByName("LicAppCreate Request");

FeedDeviceDDReq.setPropertyValue("TCaseName",testCase.getName());
FeedDeviceDDReq.setPropertyValue("TSuiteName",testSuite.getName());


def runnerTC = FeedDeviceDDReq.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Feed DeviceGet Request with Valid Data">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0");
testCase.setPropertyValue("DeviceID","urn:dece:deviceid:org:dece:A09D9C22F11CBC6DE0401F0A05996898");
testCase.setPropertyValue("DomainID","urn:dece:domainid:dece:A09DA589BD63A036E0401F0A05996D9A");
testCase.setPropertyValue("expectErrType","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedRTLReq = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request");

FeedRTLReq.setPropertyValue("TCaseName",testCase.getName());
FeedRTLReq.setPropertyValue("TSuiteName",testSuite.getName());

WsdlTestCaseRunner TSrunner = new WsdlTestCaseRunner( FeedRTLReq, null );

TSrunner.runTestStepByName("Get the DeviceGet Properties");
TSrunner.runTestStepByName("pem set");
assert TSrunner.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call DeviceGet Request">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )

WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );

TSrunnerRTC.runTestStepByName("DeviceGetRequest");

assert TSrunnerRTC.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract DeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Extract DeviceGet Information")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify theDeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Response Validation")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify the DeviceGet Response against DB Result">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGdataVal = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Data Validation");

RTGdataVal.setPropertyValue("TCaseName",testCase.getName());
RTGdataVal.setPropertyValue("TSuiteName",testSuite.getName());


def runnerRTC = RTGdataVal.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SAMLExpDate</con:name>
          <con:value>2013-06-15 03:22:10.0</con:value>
        </con:property>
        <con:property>
          <con:name>rcUUID</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>nodetype</con:name>
          <con:value>retailer</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>0701</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>sch-drm_user1</con:value>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>Password1</con:value>
        </con:property>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">A06A9AA49F7073D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">A06A9AA49F7973D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SAMLassertion</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">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</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>loopuntil</con:name>
          <con:value>25</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTS</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value>_e11ac976-cbd0-4cb6-9058-7713bde415af</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value>urn:dece:userid:org:dece:A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value>A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value>urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value>A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>AccountID</con:name>
          <con:value>urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>ErrorDataVal</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetReqXml</con:name>
          <con:value>Authorization: SAML2 assertion=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
</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResXml</con:name>
          <con:value><![CDATA[<Device IsLegacy="false" DeviceID="urn:dece:deviceid:org:dece:A09D9C22F11CBC6DE0401F0A05996898" xmlns="http://www.decellc.org/schema/2010/10/dece" xmlns:ns2="http://www.movielabs.com/schema/md/v1.07/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <DisplayName>DeviceInfoDisplayName</DisplayName>
   <Manufacturer>Microsoft</Manufacturer>
   <Model>V344</Model>
   <Brand Language="en-US">DeviceInfoBrand</Brand>
   <SerialNo>123432442323424</SerialNo>
   <Image MimeType="MimeType3" Width="50" Height="50">http://www.oxygenxml.com/1234</Image>
   <LicAppID>urn:dece:licappid:org:dece:A09D9C22F11EBC6DE0401F0A05996898</LicAppID>
   <DRMClientID>urn:dece:drmclientid:org:dece:A0E2E4B822DB1B7CE0401F0A07994404</DRMClientID>
   <ResourceStatus>
      <Current CreatedBy="urn:dece:org:org:dece:0701" CreationDate="2011-04-11T04:02:39.637Z">
         <Value>urn:dece:type:status:pending</Value>
         <Description>Device Created</Description>
      </Current>
   </ResourceStatus>
</Device>]]></con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResTime</con:name>
          <con:value>190</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceID</con:name>
          <con:value>urn:dece:deviceid:org:dece:A09D9C22F11CBC6DE0401F0A05996898</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeDVGGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>SqlStr</con:name>
          <con:value>select Status from USER_STATUS_REF where Status !='active'</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeLAC</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>DomainID</con:name>
          <con:value>urn:dece:domainid:dece:A09DA589BD63A036E0401F0A05996D9A</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00002_DeviceGet_Retailer_FUNC_with_Invalid AccountID" searchProperties="true">
      <con:description>This test case will verify that Application Tier properly handles a DeviceGet request when invoked with the GET method and Invalid Account ID in request .

Expected Result:

System should return an Error message.</con:description>
      <con:settings/>
      <con:testStep type="groovy" name="Verify Node User SAML Asssertion">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.model.testsuite.TestRunner.Status


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def ValSamlAssertion = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Validate SAML Assertion");

	ValSamlAssertion.setPropertyValue("TCaseName",testCase.getName());
	ValSamlAssertion.setPropertyValue("TSuiteName",testSuite.getName());

	def runnerTc = ValSamlAssertion.run( null , false )
	assert runnerTc.status == Status.FINISHED;

	rcUUID = testCase.getPropertyValue("rcUUID");

	if (runnerTc.status != Status.FINISHED || rcUUID.toInteger()!= 1){

			
		testCase.setPropertyValue("nodetype","retailer");
		testCase.setPropertyValue("nodeid","0701");
		testCase.setPropertyValue("username","sch-drm_user1");
		testCase.setPropertyValue("password","Password1");
		testCase.setPropertyValue("accountoid",null);
		testCase.setPropertyValue("useroid",null);
		testCase.setPropertyValue("assertid",null);
		testCase.setPropertyValue("SAMLassertion",null);
		testCase.setPropertyValue("tokentype","urn:dece:type:tokentype:usernamepassword");
		testCase.setPropertyValue("loopuntil","25");
		testCase.setPropertyValue("expectErrTypeSTS","SUCCESS");
		testCase.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
			
		log.info " SAML Assertion Expired ! re-generating Assertion";
		def RunSTS = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get SAML Assertion - STS")

				RunSTS.setPropertyValue("TCaseName",testCase.getName());
				RunSTS.setPropertyValue("TSuiteName",testSuite.getName());

				def runnerSTS = RunSTS.run( null , false )

				assert runnerSTS.status == Status.FINISHED;

		}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call LicAppCreate Request with Valid Data" disabled="true">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0");
testCase.setPropertyValue("expectErrTypeLAC","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedDeviceDDReq = testProject.getTestSuiteByName("Staging DeviceGet").getTestCaseByName("LicAppCreate Request");

FeedDeviceDDReq.setPropertyValue("TCaseName",testCase.getName());
FeedDeviceDDReq.setPropertyValue("TSuiteName",testSuite.getName());


def runnerTC = FeedDeviceDDReq.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Feed DeviceGet Request with Invalid AccountID">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:org:org:dece:A06A9AA49F6E73D7E0401F0A059915F0");
testCase.setPropertyValue("DeviceID","urn:dece:deviceid:org:dece:A09D9C22F11CBC6DE0401F0A05996898");
testCase.setPropertyValue("DomainID","urn:dece:domainid:dece:A09DA589BD63A036E0401F0A05996D9A");
testCase.setPropertyValue("expectErrType","ACCOUNTID NOT MATCH");
testCase.setPropertyValue("ErrorDataVal","1");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedRTLReq = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request");

FeedRTLReq.setPropertyValue("TCaseName",testCase.getName());
FeedRTLReq.setPropertyValue("TSuiteName",testSuite.getName());

WsdlTestCaseRunner TSrunner = new WsdlTestCaseRunner( FeedRTLReq, null );

TSrunner.runTestStepByName("Get the DeviceGet Properties");
TSrunner.runTestStepByName("pem set");
assert TSrunner.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call DeviceGet Request">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )

WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );

TSrunnerRTC.runTestStepByName("DeviceGetRequest");

assert TSrunnerRTC.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract DeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Extract DeviceGet Information")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify theDeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Response Validation")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SAMLExpDate</con:name>
          <con:value>2013-06-14 18:31:45.0</con:value>
        </con:property>
        <con:property>
          <con:name>rcUUID</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>nodetype</con:name>
          <con:value>retailer</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>0701</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>sch-drm_user1</con:value>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>Password1</con:value>
        </con:property>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">A06A9AA49F7073D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">A06A9AA49F7973D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SAMLassertion</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">nVdrc6JKE/7ur7DcjynDTbzVJlXDNaigIF6/vIUwAspFGRD0158BozHZ7J49b1VSMk13z9PdzzQ9P5EVBnQfIAST1I+juiK8NP7XgTTVaW2dpsW2rWZr4+CnHttqso6zgZ3uFm5pplFXEMqgEqHUitKXBk1SdJNsN6mWSXX7DIP/npk2vW7U5zBB2DVWeSYb9SIMItSvtn1pZEnUjy3ko35khRD1U7s/BeqojzX71g1T4/XnFWW1YfLqpemhTxD2swNtGAT2sx2HxE/ik85PB/WnvhtZaZbA9z0d9NJ4t83z/DlnnuPEJWiSJAmyR2AdB/nuj8Zr7WYMHSXaxtc1b0Vx5NtW4F+sEpQKUy926iBw48RPvfA3rimCIkvXTVjYTZtqRT8axMcGFbq/9PQJZIKsJvIs6ubMgFuYwMiG9ZmhvDR+/F0Fr7ZmYkVoGych+rL+b5BgdIJBfIBOE90iu6H7e4/fpOv1J7T7SmQHGfJPUCtpcrBsiOqTBG79YuQjTD4H1avy1wt0Yxi0/0tJfhKPODFs4pvMCL4LUfr/1OuxVlcvcyvI4Ks+iJVLZzOLVvJR5823ngzNbDpBmU6+VBAela+g7qV+X38l6p1X70aDcSxow3i7J8cKs0i8gStpM2Ic5tqWUSC3U6UFdVEm+8F5tw6tsd6btbtBWzX8/eygI32xPbc7tNnW2hPqUnN2yzfG1Ra94TimR4668E+KzWj73VyiwlQDPupMd14Oeu5pOYYDZ8v6hMuOtaO+IsQhqRFz3VlFu5YysMe1zeDIz90oOK68ztT1HEh3Xz5ieoyhjGsIz1WQ5fOSJXuClVr3BV92ii0+nil8VRVFyC48D85TF+QKB1z8vwMa5+6P3t6XeznJAV2XgMBzwU4cqWAvA2omcp7Kz+dqwV/AgHO1OTY0ayBYc6oh5kK+Eua6/ibmnunI8/NGDrL1RdRUgCpj3lNFQ5wLhimqKoivskIVNnKxU6dqrugroYYdCGJxuDhyL4Vy4du0wqpTll5N2Wy9nGO5dB6F2mljioHKqzI/PcpTZcMIujgAxmph01KGbS+j8BDXVjPuwWhwgDsApZzEe4KLau5z1ZzRmmBYlcz8LFMVeaDqKOf1Kiq5JuaD+ezykQueU3knFAvRBJNrLmyTlzRyvRwga8FGqgFywa2Mh2LujG9AVJ3Ma/w1VyMxN0RjpkmqoeQiqGSCmAdoQ2veRvZONqMXAxPsHgvD6+JCivD7yDjZZ/ZYs2QJbMI5ZTOGZ/usby3j3F13c0FfDYbxWsFuNKCLHKcDDIgEZWg4/xwYcXN2fPB7tA9HWykOoZfUVCoe7k+Xguz6zNidaAtW2O47E9mfMJbjEUpg0ztmDxQFOkPK0y3HWBGGEPmX9ng4W0I/WV1SjdWptt9la8Yimy2FOOg4b8vVbPhUrGzdHE+ms8XkUhTacde9BOnbmHtLpgNVcMcahBNkPxGkJXFmV2D51dsO82lrkJCtAVflAJB3riv6mMDc2+5KwjdDFTF5gcrnMr/g5SmQ5SdR4QRd30oeNbHleTajNFURnQCn6bxaGkFtzXMCrhRpLdaHFS2RaxM4lTO9JUquPmOfBku41rXAnKcgP8y3EUWR8kF/26q5a6slAxwln3L4FHG1TAEza3wYkMVw3iapo+4Eg2kPzJhiSu+Lseeuz3t3vcdFWT0cnZUJgrn5wDEFU2xR003RUEH3et4KVZkxRmCHxWET2oVg4ppVxrHJiYakk7NCEMDwKkMmoAu0uog7lRcr+xooVAvT4rRZemgVaf7YFDNM2uyBLrsNTf4rx0qK1T5z7MgDHXzlmHjlmAi2xyelK1CIbfMHtMhdThaPemc+GvQOpL4c7Wvck0S4qR+0xlE3N4dPC+qcd7ydvlj0FMHjn6LtymM2KUdaF1uHg31H9o29ELVbwVkdqTo784ngTO7gMUejmqZQkcikF4noJdkTF6798HJhWvQsnEyzkzKzhog6e5vjopfvJm9tgkjkM3vprE+6tIzt1fU78rVJ3oXXNko8NthPHfg2e02zzQ7a6W1ZfocVoS7hj6OV/nmOKyW+09xWqv1DOQyiFEZp47W0Kme4foYnPd/p4y/ndQ3INugB0OpJnU6HEToi2SIpiQQk2+tRrETehr0rii8Q+Tja+uVe5Th7/Vj/GaAd9jfQSmDS+IOnMk91JTLw9BFHCJrxS6NHk1KrIwKak6QuoESqxTMk2RJoutdjRabTqGtxOo7GCdimMHmYkNmvE7IBbf/gw3KMfp8lUIoTcbROWRrQzyfrOYIZnrOTctTtd0iSJpAfHgJYwiXC2MkC+HzwDlVaCHT9pZuWjSop2SGpasb5bXRf390SgXUcv1RAZSwcxEWE34z69C2QXwJmvr0S3NyDzPHLUQZnNU18+4rk86sPkpTsuDOkDOmG+a76VfDJLfE1ovtOzsm37zy/34TwII1HreqygXBBjtbz8Tk7nbKPEiTYPUER+GkK7QzPgmcz3sOIuLsg/moMv6P+svNd/hlflnrRNMVnOMR8qVfLf7+DfbLGKUhhkX4n4wN86yo3/+PFzO7bpR4WT/BPHifOR+a/8fWwD4Zc9h8/cstVOT+ff1NgO8ZufdyD4uTR+XcOvtv8s/CerzuWFBNjk6Xw92/qZXN5aVi2HWdRqgiNSvDY8Cqc6fkA+x9Kv7ipJtj3K0mBfnslWaqjqe3B0Grcdf1/V276VeVtiK2QX2F5aRT4do03j9yHBvsO8Pse2xb/1GM/R/L6i/hXyUNOv1L79R8=</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>loopuntil</con:name>
          <con:value>25</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTS</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value>_7e2174fd-a56a-4bdd-a954-5ddbe78fef23</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value>urn:dece:userid:org:dece:A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value>A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value>urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value>A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>AccountID</con:name>
          <con:value>urn:dece:accountid:org:org:org:dece:A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>ErrorDataVal</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>ACCOUNTID NOT MATCH</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetReqXml</con:name>
          <con:value>Authorization: SAML2 assertion=nVdrc6JKE/7ur7DcjynDTbzVJlXDNaigIF6/vIUwAspFGRD0158BozHZ7J49b1VSMk13z9PdzzQ9P5EVBnQfIAST1I+juiK8NP7XgTTVaW2dpsW2rWZr4+CnHttqso6zgZ3uFm5pplFXEMqgEqHUitKXBk1SdJNsN6mWSXX7DIP/npk2vW7U5zBB2DVWeSYb9SIMItSvtn1pZEnUjy3ko35khRD1U7s/BeqojzX71g1T4/XnFWW1YfLqpemhTxD2swNtGAT2sx2HxE/ik85PB/WnvhtZaZbA9z0d9NJ4t83z/DlnnuPEJWiSJAmyR2AdB/nuj8Zr7WYMHSXaxtc1b0Vx5NtW4F+sEpQKUy926iBw48RPvfA3rimCIkvXTVjYTZtqRT8axMcGFbq/9PQJZIKsJvIs6ubMgFuYwMiG9ZmhvDR+/F0Fr7ZmYkVoGych+rL+b5BgdIJBfIBOE90iu6H7e4/fpOv1J7T7SmQHGfJPUCtpcrBsiOqTBG79YuQjTD4H1avy1wt0Yxi0/0tJfhKPODFs4pvMCL4LUfr/1OuxVlcvcyvI4Ks+iJVLZzOLVvJR5823ngzNbDpBmU6+VBAela+g7qV+X38l6p1X70aDcSxow3i7J8cKs0i8gStpM2Ic5tqWUSC3U6UFdVEm+8F5tw6tsd6btbtBWzX8/eygI32xPbc7tNnW2hPqUnN2yzfG1Ra94TimR4668E+KzWj73VyiwlQDPupMd14Oeu5pOYYDZ8v6hMuOtaO+IsQhqRFz3VlFu5YysMe1zeDIz90oOK68ztT1HEh3Xz5ieoyhjGsIz1WQ5fOSJXuClVr3BV92ii0+nil8VRVFyC48D85TF+QKB1z8vwMa5+6P3t6XeznJAV2XgMBzwU4cqWAvA2omcp7Kz+dqwV/AgHO1OTY0ayBYc6oh5kK+Eua6/ibmnunI8/NGDrL1RdRUgCpj3lNFQ5wLhimqKoivskIVNnKxU6dqrugroYYdCGJxuDhyL4Vy4du0wqpTll5N2Wy9nGO5dB6F2mljioHKqzI/PcpTZcMIujgAxmph01KGbS+j8BDXVjPuwWhwgDsApZzEe4KLau5z1ZzRmmBYlcz8LFMVeaDqKOf1Kiq5JuaD+ezykQueU3knFAvRBJNrLmyTlzRyvRwga8FGqgFywa2Mh2LujG9AVJ3Ma/w1VyMxN0RjpkmqoeQiqGSCmAdoQ2veRvZONqMXAxPsHgvD6+JCivD7yDjZZ/ZYs2QJbMI5ZTOGZ/usby3j3F13c0FfDYbxWsFuNKCLHKcDDIgEZWg4/xwYcXN2fPB7tA9HWykOoZfUVCoe7k+Xguz6zNidaAtW2O47E9mfMJbjEUpg0ztmDxQFOkPK0y3HWBGGEPmX9ng4W0I/WV1SjdWptt9la8Yimy2FOOg4b8vVbPhUrGzdHE+ms8XkUhTacde9BOnbmHtLpgNVcMcahBNkPxGkJXFmV2D51dsO82lrkJCtAVflAJB3riv6mMDc2+5KwjdDFTF5gcrnMr/g5SmQ5SdR4QRd30oeNbHleTajNFURnQCn6bxaGkFtzXMCrhRpLdaHFS2RaxM4lTO9JUquPmOfBku41rXAnKcgP8y3EUWR8kF/26q5a6slAxwln3L4FHG1TAEza3wYkMVw3iapo+4Eg2kPzJhiSu+Lseeuz3t3vcdFWT0cnZUJgrn5wDEFU2xR003RUEH3et4KVZkxRmCHxWET2oVg4ppVxrHJiYakk7NCEMDwKkMmoAu0uog7lRcr+xooVAvT4rRZemgVaf7YFDNM2uyBLrsNTf4rx0qK1T5z7MgDHXzlmHjlmAi2xyelK1CIbfMHtMhdThaPemc+GvQOpL4c7Wvck0S4qR+0xlE3N4dPC+qcd7ydvlj0FMHjn6LtymM2KUdaF1uHg31H9o29ELVbwVkdqTo784ngTO7gMUejmqZQkcikF4noJdkTF6798HJhWvQsnEyzkzKzhog6e5vjopfvJm9tgkjkM3vprE+6tIzt1fU78rVJ3oXXNko8NthPHfg2e02zzQ7a6W1ZfocVoS7hj6OV/nmOKyW+09xWqv1DOQyiFEZp47W0Kme4foYnPd/p4y/ndQ3INugB0OpJnU6HEToi2SIpiQQk2+tRrETehr0rii8Q+Tja+uVe5Th7/Vj/GaAd9jfQSmDS+IOnMk91JTLw9BFHCJrxS6NHk1KrIwKak6QuoESqxTMk2RJoutdjRabTqGtxOo7GCdimMHmYkNmvE7IBbf/gw3KMfp8lUIoTcbROWRrQzyfrOYIZnrOTctTtd0iSJpAfHgJYwiXC2MkC+HzwDlVaCHT9pZuWjSop2SGpasb5bXRf390SgXUcv1RAZSwcxEWE34z69C2QXwJmvr0S3NyDzPHLUQZnNU18+4rk86sPkpTsuDOkDOmG+a76VfDJLfE1ovtOzsm37zy/34TwII1HreqygXBBjtbz8Tk7nbKPEiTYPUER+GkK7QzPgmcz3sOIuLsg/moMv6P+svNd/hlflnrRNMVnOMR8qVfLf7+DfbLGKUhhkX4n4wN86yo3/+PFzO7bpR4WT/BPHifOR+a/8fWwD4Zc9h8/cstVOT+ff1NgO8ZufdyD4uTR+XcOvtv8s/CerzuWFBNjk6Xw92/qZXN5aVi2HWdRqgiNSvDY8Cqc6fkA+x9Kv7ipJtj3K0mBfnslWaqjqe3B0Grcdf1/V276VeVtiK2QX2F5aRT4do03j9yHBvsO8Pse2xb/1GM/R/L6i/hXyUNOv1L79R8=
</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResXml</con:name>
          <con:value><![CDATA[<ErrorList xmlns="http://www.decellc.org/schema/2010/10/dece" xmlns:ns2="http://www.movielabs.com/schema/md/v1.07/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Error ErrorID="urn:dece:errorid:org:dece:AccountIdUnmatched">
      <Reason Language="en">Request Account ID not match</Reason>
      <OriginalRequest>https://qa.q.uvvu.com:7002/rest/1/0/Account/urn%3Adece%3Aaccountid%3Aorg%3Aorg%3Aorg%3Adece%3AA06A9AA49F6E73D7E0401F0A059915F0/Domain/urn%3Adece%3Adomainid%3Adece%3AA09DA589BD63A036E0401F0A05996D9A/Device/urn%3Adece%3Adeviceid%3Aorg%3Adece%3AA09D9C22F11CBC6DE0401F0A05996898</OriginalRequest>
      <ErrorLink>https://qa.q.uvvu.com:7002/rest/1/0/error/en/ErrorList.html#AccountIdUnmatched</ErrorLink>
   </Error>
</ErrorList>]]></con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResTime</con:name>
          <con:value>204</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetID</con:name>
          <con:value>Request Account ID not matchhttps://qa.q.uvvu.com:7002/rest/1/0/Account/urn%3Adece%3Aaccountid%3Aorg%3Aorg%3Aorg%3Adece%3AA06A9AA49F6E73D7E0401F0A059915F0/Device/urn%3Adece%3Adeviceid%3Aorg%3Adece%3AA09D9C22F11CBC6DE0401F0A05996898/DECEDomainhttps://qa.q.uvvu.com:7002/rest/1/0/error/en/ErrorList.html#AccountIdUnmatched</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceID</con:name>
          <con:value>urn:dece:deviceid:org:dece:A09D9C22F11CBC6DE0401F0A05996898</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeDVGGet</con:name>
          <con:value>ACCOUNTID NOT MATCH</con:value>
        </con:property>
        <con:property>
          <con:name>DomainID</con:name>
          <con:value>urn:dece:domainid:dece:A09DA589BD63A036E0401F0A05996D9A</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00003_DeviceGet_Retailer_FUNC_with_Non_Existing_ AccountID" searchProperties="true">
      <con:settings/>
      <con:testStep type="groovy" name="Verify Node User SAML Asssertion">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.model.testsuite.TestRunner.Status


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def ValSamlAssertion = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Validate SAML Assertion");

	ValSamlAssertion.setPropertyValue("TCaseName",testCase.getName());
	ValSamlAssertion.setPropertyValue("TSuiteName",testSuite.getName());

	def runnerTc = ValSamlAssertion.run( null , false )
	assert runnerTc.status == Status.FINISHED;

	rcUUID = testCase.getPropertyValue("rcUUID");

	if (runnerTc.status != Status.FINISHED || rcUUID.toInteger()!= 1){

			
		testCase.setPropertyValue("nodetype","device");
		testCase.setPropertyValue("nodeid","0701");
		testCase.setPropertyValue("username","sch-drm_user1");
		testCase.setPropertyValue("password","Password1");
		testCase.setPropertyValue("accountoid",null);
		testCase.setPropertyValue("useroid",null);
		testCase.setPropertyValue("assertid",null);
		testCase.setPropertyValue("SAMLassertion",null);
		testCase.setPropertyValue("tokentype","urn:dece:type:tokentype:usernamepassword");
		testCase.setPropertyValue("loopuntil","25");
		testCase.setPropertyValue("expectErrTypeSTS","SUCCESS");
		testCase.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
			
		log.info " SAML Assertion Expired ! re-generating Assertion";
		def RunSTS = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get SAML Assertion - STS")

				RunSTS.setPropertyValue("TCaseName",testCase.getName());
				RunSTS.setPropertyValue("TSuiteName",testSuite.getName());

				def runnerSTS = RunSTS.run( null , false )

				assert runnerSTS.status == Status.FINISHED;

		}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call LicAppCreate Request with Valid Data" disabled="true">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0");
testCase.setPropertyValue("expectErrTypeLAC","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedDeviceDDReq = testProject.getTestSuiteByName("Staging DeviceGet").getTestCaseByName("LicAppCreate Request");

FeedDeviceDDReq.setPropertyValue("TCaseName",testCase.getName());
FeedDeviceDDReq.setPropertyValue("TSuiteName",testSuite.getName());


def runnerTC = FeedDeviceDDReq.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Feed DeviceGet Request with Non-Existing AccountID">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0STSTTTSTTSTSTTSST");
testCase.setPropertyValue("DeviceID","urn:dece:deviceid:org:dece:A09D9C22F11CBC6DE0401F0A05996898");
testCase.setPropertyValue("DomainID","urn:dece:domainid:dece:A09DA589BD63A036E0401F0A05996D9A");
testCase.setPropertyValue("expectErrType","ACCOUNTID NOT MATCH");
testCase.setPropertyValue("ErrorDataVal","1");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedRTLReq = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request");

FeedRTLReq.setPropertyValue("TCaseName",testCase.getName());
FeedRTLReq.setPropertyValue("TSuiteName",testSuite.getName());

WsdlTestCaseRunner TSrunner = new WsdlTestCaseRunner( FeedRTLReq, null );

TSrunner.runTestStepByName("Get the DeviceGet Properties");
TSrunner.runTestStepByName("pem set");
assert TSrunner.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call DeviceGet Request">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )

WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );

TSrunnerRTC.runTestStepByName("DeviceGetRequest");

assert TSrunnerRTC.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract DeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Extract DeviceGet Information")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify theDeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Response Validation")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>SAMLExpDate</con:name>
          <con:value>2013-06-14 18:31:45.0</con:value>
        </con:property>
        <con:property>
          <con:name>rcUUID</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>nodetype</con:name>
          <con:value>device</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>0701</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>sch-drm_user1</con:value>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>Password1</con:value>
        </con:property>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value>A06A9AA49F7073D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value>A06A9AA49F7973D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SAMLassertion</con:name>
          <con:value>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</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>loopuntil</con:name>
          <con:value>25</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTS</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value>_38dcdc36-8170-4f54-9ea3-f26da43307ef</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value>urn:dece:userid:org:dece:A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value>A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value>urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value>A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>AccountID</con:name>
          <con:value>urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0STSTTTSTTSTSTTSST</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceID</con:name>
          <con:value>urn:dece:deviceid:org:dece:A09D9C22F11CBC6DE0401F0A05996898</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>ACCOUNTID NOT MATCH</con:value>
        </con:property>
        <con:property>
          <con:name>ErrorDataVal</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetReqXml</con:name>
          <con:value>Authorization: SAML2 assertion=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
</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResXml</con:name>
          <con:value><![CDATA[<ErrorList xmlns="http://www.decellc.org/schema/2010/10/dece" xmlns:ns2="http://www.movielabs.com/schema/md/v1.07/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Error ErrorID="urn:dece:errorid:org:dece:AccountIdUnmatched">
      <Reason Language="en">Request Account ID not match</Reason>
      <OriginalRequest>https://qa.q.uvvu.com:7002/rest/1/0/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3AA06A9AA49F6E73D7E0401F0A059915F0STSTTTSTTSTSTTSST/Domain/urn%3Adece%3Adomainid%3Adece%3AA09DA589BD63A036E0401F0A05996D9A/Device/urn%3Adece%3Adeviceid%3Aorg%3Adece%3AA09D9C22F11CBC6DE0401F0A05996898</OriginalRequest>
      <ErrorLink>https://qa.q.uvvu.com:7002/rest/1/0/error/en/ErrorList.html#AccountIdUnmatched</ErrorLink>
   </Error>
</ErrorList>]]></con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResTime</con:name>
          <con:value>160</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetID</con:name>
          <con:value>Request Account ID not matchhttps://qa.q.uvvu.com:7002/rest/1/0/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3AA06A9AA49F6E73D7E0401F0A059915F0STSTTTSTTSTSTTSST/Device/urn%3Adece%3Adeviceid%3Aorg%3Adece%3AA09D9C22F11CBC6DE0401F0A05996898/DECEDomainhttps://qa.q.uvvu.com:7002/rest/1/0/error/en/ErrorList.html#AccountIdUnmatched</con:value>
        </con:property>
        <con:property>
          <con:name>DomainID</con:name>
          <con:value>urn:dece:domainid:dece:A09DA589BD63A036E0401F0A05996D9A</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00004_DeviceGet_Retailer_FUNC_with_Nonexistent_NodeID" searchProperties="true" disabled="true">
      <con:description>This test case will verify that Application Tier properly handles a RightsLockerDataGet  request when the nodeID supplied doesn't exist.

Expected Result:

System should return error message.</con:description>
      <con:settings/>
      <con:testStep type="groovy" name="Verify Node User SAML Asssertion">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.model.testsuite.TestRunner.Status


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def ValSamlAssertion = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Validate SAML Assertion");

	ValSamlAssertion.setPropertyValue("TCaseName",testCase.getName());
	ValSamlAssertion.setPropertyValue("TSuiteName",testSuite.getName());

	def runnerTc = ValSamlAssertion.run( null , false )
	assert runnerTc.status == Status.FINISHED;

	rcUUID = testCase.getPropertyValue("rcUUID");

	if (runnerTc.status != Status.FINISHED || rcUUID.toInteger()!= 1){

			
		testCase.setPropertyValue("nodetype","device");
		testCase.setPropertyValue("nodeid","0701");
		testCase.setPropertyValue("username","sch-drm_user1");
		testCase.setPropertyValue("password","Password1");
		testCase.setPropertyValue("accountoid",null);
		testCase.setPropertyValue("useroid",null);
		testCase.setPropertyValue("assertid",null);
		testCase.setPropertyValue("SAMLassertion",null);
		testCase.setPropertyValue("tokentype","urn:dece:type:tokentype:usernamepassword");
		testCase.setPropertyValue("loopuntil","25");
		testCase.setPropertyValue("expectErrTypeSTS","SUCCESS");
		testCase.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
			
		log.info " SAML Assertion Expired ! re-generating Assertion";
		def RunSTS = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get SAML Assertion - STS")

				RunSTS.setPropertyValue("TCaseName",testCase.getName());
				RunSTS.setPropertyValue("TSuiteName",testSuite.getName());

				def runnerSTS = RunSTS.run( null , false )

				assert runnerSTS.status == Status.FINISHED;

		}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call LicAppCreate Request with Valid Data" disabled="true">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0");
testCase.setPropertyValue("expectErrTypeLAC","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedDeviceDDReq = testProject.getTestSuiteByName("Staging DeviceGet").getTestCaseByName("LicAppCreate Request");

FeedDeviceDDReq.setPropertyValue("TCaseName",testCase.getName());
FeedDeviceDDReq.setPropertyValue("TSuiteName",testSuite.getName());


def runnerTC = FeedDeviceDDReq.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Feed DeviceGet Request with Non-Existing NodeID">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0");
testCase.setPropertyValue("DeviceID","urn:dece:deviceid:org:dece:A09D9C22F11CBC6DE0401F0A05996898");
testCase.setPropertyValue("DomainID","urn:dece:domainid:dece:A09DA589BD63A036E0401F0A05996D9A");
testCase.setPropertyValue("expectErrType","FORBIDDEN");
testCase.setPropertyValue("ErrorDataVal","1");

// setup Non-Existing Nodeid with the account
testCase.setPropertyValue("NodeID","700030");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedRTLReq = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request");

FeedRTLReq.setPropertyValue("TCaseName",testCase.getName());
FeedRTLReq.setPropertyValue("TSuiteName",testSuite.getName());

WsdlTestCaseRunner TSrunner = new WsdlTestCaseRunner( FeedRTLReq, null );

TSrunner.runTestStepByName("Get the DeviceGet Properties");
TSrunner.runTestStepByName("pem set");
assert TSrunner.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call DeviceGet Request">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )

WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );

TSrunnerRTC.runTestStepByName("DeviceGetRequest");

assert TSrunnerRTC.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract DeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Extract DeviceGet Information")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify theDeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Response Validation")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Re-Set Node id">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("NodeID","0701");</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value>30570</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>SAMLExpDate</con:name>
          <con:value>2012-04-18 16:10:01.0</con:value>
        </con:property>
        <con:property>
          <con:name>rcUUID</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>nodetype</con:name>
          <con:value>device</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>700030</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>sch-drm_user1</con:value>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>Password1</con:value>
        </con:property>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value>A06A9AA49F7073D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value>A06A9AA49F7973D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SAMLassertion</con:name>
          <con:value>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</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>loopuntil</con:name>
          <con:value>25</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTS</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value>17478c99-a1eb-4499-be1d-cca4ae630020</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value>urn:dece:userid:org:dece:A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value>A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value>urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value>A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>AccountID</con:name>
          <con:value>urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeRTLGet</con:name>
          <con:value>FORBIDDEN</con:value>
        </con:property>
        <con:property>
          <con:name>ErrorDataVal</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>RightsResXml</con:name>
          <con:value><![CDATA[<ErrorList xmlns="http://www.decellc.org/schema/2010/10/dece" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Error ErrorID="token_rejected">
      <Reason>CN specified and Audience in Affiliation are disjoint</Reason>
      <OriginalRequest/>
      <ErrorLink/>
   </Error>
</ErrorList>]]></con:value>
        </con:property>
        <con:property>
          <con:name>RightsResTime</con:name>
          <con:value>373</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceID</con:name>
          <con:value>urn:dece:deviceid:org:dece:A09D9C22F11CBC6DE0401F0A05996898</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>FORBIDDEN</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetReqXml</con:name>
          <con:value>Host: qa.q.uvvu.com:7002</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResXml</con:name>
          <con:value><![CDATA[<ErrorList xmlns="http://www.decellc.org/schema/2010/10/dece" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Error ErrorID="token_rejected">
      <Reason>CN specified and Audience in Affiliation are disjoint</Reason>
      <OriginalRequest/>
      <ErrorLink/>
   </Error>
</ErrorList>]]></con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResTime</con:name>
          <con:value>420</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetID</con:name>
          <con:value>CN specified and Audience in Affiliation are disjoint</con:value>
        </con:property>
        <con:property>
          <con:name>DomainID</con:name>
          <con:value>urn:dece:domainid:dece:A09DA589BD63A036E0401F0A05996D9A</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00008_DeviceGet_Retailer_FUNC_HouseholdAccount_User_Status_Inactive" searchProperties="true" disabled="true">
      <con:description>This test case will verify that Application Tier properly handles a DeviceGet request when invoked with the GET method and Invalid Account ID in request .

Expected Result:

System should return an Error message.</con:description>
      <con:settings/>
      <con:testStep type="groovy" name="Verify Node User SAML Asssertion">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.model.testsuite.TestRunner.Status


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def ValSamlAssertion = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Validate SAML Assertion");

	ValSamlAssertion.setPropertyValue("TCaseName",testCase.getName());
	ValSamlAssertion.setPropertyValue("TSuiteName",testSuite.getName());

	def runnerTc = ValSamlAssertion.run( null , false )
	assert runnerTc.status == Status.FINISHED;

	rcUUID = testCase.getPropertyValue("rcUUID");

	if (runnerTc.status != Status.FINISHED || rcUUID.toInteger()!= 1){

			
		testCase.setPropertyValue("nodetype","device");
		testCase.setPropertyValue("nodeid","0701");
		testCase.setPropertyValue("username","sch-drm_user1");
		testCase.setPropertyValue("password","Password1");
		testCase.setPropertyValue("accountoid",null);
		testCase.setPropertyValue("useroid",null);
		testCase.setPropertyValue("assertid",null);
		testCase.setPropertyValue("SAMLassertion",null);
		testCase.setPropertyValue("tokentype","urn:dece:type:tokentype:usernamepassword");
		testCase.setPropertyValue("loopuntil","25");
		testCase.setPropertyValue("expectErrTypeSTS","SUCCESS");
		testCase.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
			
		log.info " SAML Assertion Expired ! re-generating Assertion";
		def RunSTS = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get SAML Assertion - STS")

				RunSTS.setPropertyValue("TCaseName",testCase.getName());
				RunSTS.setPropertyValue("TSuiteName",testSuite.getName());

				def runnerSTS = RunSTS.run( null , false )

				assert runnerSTS.status == Status.FINISHED;

		}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call LicAppCreate Request with Valid Data" disabled="true">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0");
testCase.setPropertyValue("expectErrTypeLAC","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedDeviceDDReq = testProject.getTestSuiteByName("Staging DeviceGet").getTestCaseByName("LicAppCreate Request");

FeedDeviceDDReq.setPropertyValue("TCaseName",testCase.getName());
FeedDeviceDDReq.setPropertyValue("TSuiteName",testSuite.getName());


def runnerTC = FeedDeviceDDReq.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Get User Inactive Statuses">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def GetUserStatus = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get-Set User Status");

// Get ALL inactive Status from USER_STATUS_REF Except = 'Pending'

SqlStr = "select Status from USER_STATUS_REF where Status !='active'";

testCase.setPropertyValue("SqlStr",SqlStr);

GetUserStatus.setPropertyValue("TCaseName",testCase.getName());
GetUserStatus.setPropertyValue("TSuiteName",testSuite.getName());

WsdlTestCaseRunner TSrunner = new WsdlTestCaseRunner( GetUserStatus, null );

TSrunner.runTestStepByName("Get User Status for DVG");

assert TSrunner.status == Status.INITIALIZED;

 log.info " Current User Status: " + testCase.getPropertyValue("UserStatus");

testCase.getPropertyValue("UserStatusXML");</script>
        </con:config>
      </con:testStep>
      <con:testStep type="datasource" name="Feed DataSource for Inactive User Statuses">
        <con:settings/>
        <con:config xsi:type="con:DataSourceStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dataSource type="XML">
            <con:configuration><sourceStep>Get User Inactive Statuses</sourceStep><sourceProperty>result</sourceProperty><rowPath>//Results[1]/ResultSet[1]/Row</rowPath><columnPath>STATUS</columnPath></con:configuration>
          </con:dataSource>
          <con:property>UserStatus</con:property>
          <con:restartOnRun>true</con:restartOnRun>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Feed DeviceGet Request with Inactive User">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0");
testCase.setPropertyValue("DeviceID","urn:dece:deviceid:org:dece:A09D9C22F11CBC6DE0401F0A05996898");
testCase.setPropertyValue("DomainID","urn:dece:domainid:dece:A09DA589BD63A036E0401F0A05996D9A");
testCase.setPropertyValue("expectErrType","USER_NOT_ACTIVE");
testCase.setPropertyValue("ErrorDataVal","1");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedRTLReq = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request");

FeedRTLReq.setPropertyValue("TCaseName",testCase.getName());
FeedRTLReq.setPropertyValue("TSuiteName",testSuite.getName());

WsdlTestCaseRunner TSrunner = new WsdlTestCaseRunner( FeedRTLReq, null );

TSrunner.runTestStepByName("Get the DeviceGet Properties");
TSrunner.runTestStepByName("pem set");
assert TSrunner.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="SetUp User Inactive Status for DVG">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

// SetUp the Node Status from the Data Source

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

// Get NodeStatus Values from Data Source

def DsUserStatus = testRunner.testCase.testSteps['Feed DataSource for Inactive User Statuses'];
log.info  "User Status is to set to: " + DsUserStatus.getPropertyValue("UserStatus");

testCase.setPropertyValue("UserStatus",DsUserStatus.getPropertyValue("UserStatus"));

def SetUserStatus = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get-Set User Status");

SetUserStatus.setPropertyValue("TCaseName",testCase.getName());
SetUserStatus.setPropertyValue("TSuiteName",testSuite.getName());

WsdlTestCaseRunner TSrunner = new WsdlTestCaseRunner( SetUserStatus, null );

TSrunner.runTestStepByName("Set User Status for DVG")

assert TSrunner.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call DeviceGet Request">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )

WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );

TSrunnerRTC.runTestStepByName("DeviceGetRequest");

assert TSrunnerRTC.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract DeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Extract DeviceGet Information")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify theDeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Response Validation")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="datasourceloop" name="DataSource Loop">
        <con:settings/>
        <con:config>
          <dataSourceStep>Feed DataSource for Inactive User Statuses</dataSourceStep>
          <targetStep>SetUp User Inactive Status for DVG</targetStep>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Re-Set User Status to Active">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

// SetUp the Node Status from the Data Source

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

// Re - Set NodeStatus Value to Active


def SetUserStatus = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get-Set User Status");

SetUserStatus.setPropertyValue("TCaseName",testCase.getName());
SetUserStatus.setPropertyValue("TSuiteName",testSuite.getName());

testCase.setPropertyValue("UserStatus", "active");
log.info " Re-Set User Status to : " + testCase.getPropertyValue("UserStatus");

WsdlTestCaseRunner TSrunner = new WsdlTestCaseRunner( SetUserStatus, null );

TSrunner.runTestStepByName("Set User Status for DVG")

assert TSrunner.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SAMLExpDate</con:name>
          <con:value>2012-04-18 16:10:01.0</con:value>
        </con:property>
        <con:property>
          <con:name>rcUUID</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>nodetype</con:name>
          <con:value>device</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>0701</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>sch-drm_user1</con:value>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>Password1</con:value>
        </con:property>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">A06A9AA49F7073D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">A06A9AA49F7973D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SAMLassertion</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">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</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>loopuntil</con:name>
          <con:value>25</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTS</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value>b4ef90ff-31db-4ccf-88cf-dca18a1014ed</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value>urn:dece:userid:org:dece:A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value>A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value>urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value>A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>AccountID</con:name>
          <con:value>urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>ErrorDataVal</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>USER_NOT_ACTIVE</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetReqXml</con:name>
          <con:value>Host: qa.q.uvvu.com:7002</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResXml</con:name>
          <con:value><![CDATA[<ErrorList xmlns="http://www.decellc.org/schema/2010/10/dece" xmlns:ns2="http://www.movielabs.com/schema/md/v1.07/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Error ErrorID="urn:dece:errorid:org:dece:RequestorNotActive">
      <Reason Language="en">The requestor is not active.</Reason>
      <OriginalRequest>https://qa.q.uvvu.com:7002/rest/1/0/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3AA06A9AA49F6E73D7E0401F0A059915F0/Domain/urn%3Adece%3Adomainid%3Adece%3AA09DA589BD63A036E0401F0A05996D9A/Device/urn%3Adece%3Adeviceid%3Aorg%3Adece%3AA09D9C22F11CBC6DE0401F0A05996898</OriginalRequest>
      <ErrorLink>https://qa.q.uvvu.com:7002/rest/1/0/error/en/ErrorList.html#RequestorNotActive</ErrorLink>
   </Error>
</ErrorList>]]></con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResTime</con:name>
          <con:value>144</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetID</con:name>
          <con:value>The identified user is not active.https://qa.q.uvvu.com:7002/rest/1/0/Account/urn%3Adece%3Aaccountid%3Aorg%3Aorg%3Aorg%3Adece%3AA06A9AA49F6E73D7E0401F0A059915F0/Device/urn%3Adece%3Adeviceid%3Aorg%3Adece%3AA09D9C22F11CBC6DE0401F0A05996898/DECEDomainhttps://qa.q.uvvu.com:7002/rest/1/0/error/en/ErrorList.html#UserNotActive</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceID</con:name>
          <con:value/>
        </con:property>
        <con:property>
          <con:name>expectErrTypeDVGGet</con:name>
          <con:value>ACCOUNTID NOT MATCH</con:value>
        </con:property>
        <con:property>
          <con:name>SqlStr</con:name>
          <con:value>select Status from USER_STATUS_REF where Status !='active'</con:value>
        </con:property>
        <con:property>
          <con:name>UserStatusXML</con:name>
          <con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <STATUS>archived</STATUS>
    </Row>
    <Row rowNumber='2'>
      <STATUS>blocked</STATUS>
    </Row>
    <Row rowNumber='3'>
      <STATUS>blocked:clg</STATUS>
    </Row>
    <Row rowNumber='4'>
      <STATUS>blocked:tou</STATUS>
    </Row>
    <Row rowNumber='5'>
      <STATUS>deleted</STATUS>
    </Row>
    <Row rowNumber='6'>
      <STATUS>forceddelete</STATUS>
    </Row>
    <Row rowNumber='7'>
      <STATUS>other</STATUS>
    </Row>
    <Row rowNumber='8'>
      <STATUS>pending</STATUS>
    </Row>
    <Row rowNumber='9'>
      <STATUS>suspended</STATUS>
    </Row>
  </ResultSet>
</Results>]]></con:value>
        </con:property>
        <con:property>
          <con:name>UserStatus</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceStatusXML</con:name>
          <con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <STATUS>archived</STATUS>
    </Row>
    <Row rowNumber='2'>
      <STATUS>blocked</STATUS>
    </Row>
    <Row rowNumber='3'>
      <STATUS>blocked:clg</STATUS>
    </Row>
    <Row rowNumber='4'>
      <STATUS>blocked:tou</STATUS>
    </Row>
    <Row rowNumber='5'>
      <STATUS>deleted</STATUS>
    </Row>
    <Row rowNumber='6'>
      <STATUS>forceddelete</STATUS>
    </Row>
    <Row rowNumber='7'>
      <STATUS>other</STATUS>
    </Row>
    <Row rowNumber='8'>
      <STATUS>pending</STATUS>
    </Row>
    <Row rowNumber='9'>
      <STATUS>suspended</STATUS>
    </Row>
  </ResultSet>
</Results>]]></con:value>
        </con:property>
        <con:property>
          <con:name>DomainID</con:name>
          <con:value>urn:dece:domainid:dece:A09DA589BD63A036E0401F0A05996D9A</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00005_DeviceGet_Retailer_FUNC_with_Invalid_NodeID" searchProperties="true" disabled="true">
      <con:description>This test case will verify that Application Tier properly handles a RightsLockerDataGet  request when the nodeID supplied doesn't exist.

Expected Result:

System should return error message.</con:description>
      <con:settings/>
      <con:testStep type="groovy" name="Verify Node User SAML Asssertion">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.model.testsuite.TestRunner.Status


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def ValSamlAssertion = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Validate SAML Assertion");

	ValSamlAssertion.setPropertyValue("TCaseName",testCase.getName());
	ValSamlAssertion.setPropertyValue("TSuiteName",testSuite.getName());

	def runnerTc = ValSamlAssertion.run( null , false )
	assert runnerTc.status == Status.FINISHED;

	rcUUID = testCase.getPropertyValue("rcUUID");

	if (runnerTc.status != Status.FINISHED || rcUUID.toInteger()!= 1){

			
		testCase.setPropertyValue("nodetype","device");
		testCase.setPropertyValue("nodeid","0701");
		testCase.setPropertyValue("username","sch-drm_user1");
		testCase.setPropertyValue("password","Password1");
		testCase.setPropertyValue("accountoid",null);
		testCase.setPropertyValue("useroid",null);
		testCase.setPropertyValue("assertid",null);
		testCase.setPropertyValue("SAMLassertion",null);
		testCase.setPropertyValue("tokentype","urn:dece:type:tokentype:usernamepassword");
		testCase.setPropertyValue("loopuntil","25");
		testCase.setPropertyValue("expectErrTypeSTS","SUCCESS");
		testCase.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
			
		log.info " SAML Assertion Expired ! re-generating Assertion";
		def RunSTS = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get SAML Assertion - STS")

				RunSTS.setPropertyValue("TCaseName",testCase.getName());
				RunSTS.setPropertyValue("TSuiteName",testSuite.getName());

				def runnerSTS = RunSTS.run( null , false )

				assert runnerSTS.status == Status.FINISHED;

		}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call LicAppCreate Request with Valid Data" disabled="true">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0");
testCase.setPropertyValue("expectErrTypeLAC","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedDeviceDDReq = testProject.getTestSuiteByName("Staging DeviceGet").getTestCaseByName("LicAppCreate Request");

FeedDeviceDDReq.setPropertyValue("TCaseName",testCase.getName());
FeedDeviceDDReq.setPropertyValue("TSuiteName",testSuite.getName());


def runnerTC = FeedDeviceDDReq.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Feed DeviceGet Request with Invalid NodeID">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0");
testCase.setPropertyValue("DeviceID","urn:dece:deviceid:org:dece:A09D9C22F11CBC6DE0401F0A05996898");
testCase.setPropertyValue("DomainID","urn:dece:domainid:dece:A09DA589BD63A036E0401F0A05996D9A");
testCase.setPropertyValue("expectErrType","FORBIDDEN");
testCase.setPropertyValue("ErrorDataVal","1");

// setup Non-Existing Nodeid with the account
testCase.setPropertyValue("NodeID","700030");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedRTLReq = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request");

FeedRTLReq.setPropertyValue("TCaseName",testCase.getName());
FeedRTLReq.setPropertyValue("TSuiteName",testSuite.getName());

WsdlTestCaseRunner TSrunner = new WsdlTestCaseRunner( FeedRTLReq, null );

TSrunner.runTestStepByName("Get the DeviceGet Properties");
TSrunner.runTestStepByName("pem set");
assert TSrunner.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call DeviceGet Request">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )

WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );

TSrunnerRTC.runTestStepByName("DeviceGetRequest");

assert TSrunnerRTC.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract DeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Extract DeviceGet Information")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify theDeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Response Validation")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Re-Set Node id">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("NodeID","0701");</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value>30570</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>SAMLExpDate</con:name>
          <con:value>2012-04-18 16:10:01.0</con:value>
        </con:property>
        <con:property>
          <con:name>rcUUID</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>nodetype</con:name>
          <con:value>device</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>700030</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>sch-drm_user1</con:value>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>Password1</con:value>
        </con:property>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value>A06A9AA49F7073D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value>A06A9AA49F7973D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SAMLassertion</con:name>
          <con:value>nVdZc6pME773V1ieS8uwKCpWkqphkaCisrjeIYwwyqIsgv76b8BoTE5Oznm/i5SZppdnup/p6XmOTd+jeyCOYZSgMKjKwkutBalWk2aZRqfbZRotxuw2uhTbbFAmZO1Wm212O2ytKsdxCuUgTswgeanRJEU1yFaD6hpUu9ekejT71GSoda06h1GMPWOVJ7JWzX0viHtl1JdaGgW90IxR3AtMH8a9xOrpQBn1sGbPvEGqvT5fQZYBo1c3SQ49grCebGhBz7OerNAnnolPOs923NORE5hJGsH3mHb8Unu3zbLsKWs+hZFD0CRJEiRLYB07Rs6v2mvlZgxtOdiG1zVvBmGALNNDF7MApcDEDe0q8JwwQonr/8E1RVBk4boBc6thUa3gV434CFCi+0dPn0BGsdmIXZO6OdPgFkYwsGB1pskvtV//VMCrqRGZQbwNIz/+sv5viGBwgl54gHYjvm3sBu7fPX6TrddnaPXkwPLSGJ3guGDJwbRgXJ1GcIvyEYox9+y4Wla/msc3gkHrv1TkmXjEiWET32RGQA6Mk/+nXI+lunqZm14KXxdDzdjpahZr0y47GdkDJ9qPNvoqG4svJYRH5Suoe6Xf1195eqfVu5FU3/PeqJ5SsrhctXR2sacZV1qv55OZjFyW5ufzepIs36Yo1zd1sY86XXenTc5BrGw2F7RIXDoHjjkcbS/1ylmwZGbgUy4ZpOl53+X34Ti9uEuZXxy4fFbvNIGfEqG8tufIM/YZw5G7jr6xwObgagZD1jVfWfBL33sb7ypMm9po0NUZkTuPA+rikcrLx54e91DsawjP5SaL/5cMyQpmYt4XfNEotvh0JvBVkWUhvfA8OOsOyGQOOPhvB8acsz+6eySxGckBVe0Dgee8nThSwF4C1EzkXAXnQsn5CxhwzniODY0K8NacoomZkK2Euaq+iZlr2NL8vJG8dH0RxwqIS2PeVURNnAuaISoKCK+yXBE2Ur5TdCWT1ZVQwQ4EMT9cbIlNoJQji5YZRWfolc6k6+Ucy/vnkT8+bQzRU3hF4vWjpMubpqCKA6CtFhbdT7HtZeQfwspqxj0YDQ5wB2A/I3FMcFFw6hVjRo8FzSxlxmeZIksDRY0zXi13JVXEbDCfXT5ywXMKb/tiLhpges2FZfD9MbleDmJzwQSKBjLBKY2HYmZPbkAUlcwq/DVXIzHTRG027iuanImglAli5sUbeuxuJPdkNdV8YIDdY2F4VVz0A/w90E7WmTlWTKkPNv6cspqaayEGmcswc9bdTFBXg2G4lrGbMVBFjlMBBkSCYms4/xwYcXNmckAsjeBo2w996EYVhQqH+9MlJ7uoOXGm4wUjbPedqYSmTdN2Cdmz6F1zD2QZ2kPKVU1bWxGaEKBLezKcLSGKVpdkzKhUG3WZirZIZ0sh9Dr223I1G9bzlaUak6k+W0wveT4+7roXL3mbcG+RPlAEZzKGcBpbdYI0+5zRFRh+9bbDfNpqJGQqwFE4AKSd44gIE5h7211J+KYpIiYvUPhM4he8pANJqosyJ6jqtu9SU0uapzNqrMii7eE0nVdLzauseU7AlSLNxfqwovvk2gB26UxtiX1HnTH1wRKu1bFnzBOQHebbgKJI6aC+bZXMsZSCAbac6Rw+RVwllcHMnBwGZD6ct0nqqNreQGfBrJnr9D6fuM76vHfWe1yU1cPRWRnAmxsPHJMxxRYV1RA1BXSv5y1X5FlT8yw/P2x8KxcMXLPSODQ4Ueur5CwXBDC8ymID0Hm8uog7hRdL+wrIFRPT4rRZuvEqGKOJIaaYtOkDXXYbmvwrxwqKVT5z7MgDFXzlmHjlmAi2x7rcFaiYafOHeJE5nCQe1c58NGAPpLoc7StcvU84CfJak6CbGcP6gjpnHXenLhasLLh8Pdiu3OYm4UjzYqlwsO9ISNsLQbvlnZWRojIzRHhncgePWTyqjGUqEJvJpU+wUVrn/DXyL5dmi575Uz09yTNzGFNnd3NcsNlu+tYmiEg6M5fO+qT2l6G1ut4jX5vkXXhto8Rjg/3UgW+jl55udtBKbsviHpaFah9fjmby8xhXSJDd2JaqvUMxC8YJDJLaa2FVjHC9FA96yO7hm/O6BmQbsAC02H6n02kKHZFskVSfBCTDshTTJ2+z3hXFF4h8GGxREasYZq+X9c8ALb+3gWYEo9oPnoo8VeVAw9NHGMTQCF9qfJcUGabDtvtNIPIkaLLdFsOxtAg6QrfFNmvVcZhMgkkEtgmMHgZk9uuArEELHRAspuj3WSJOcCKO5ilNPOrpZD4FMMVjdlRMuj261WXKBBB26h8s/AF3t+gQxsnTwT2Uw8wft/H1223HWMdGhUJcgOYgrhb8ZqSnboh/2xn97eh/cw9SGxUzC05fEiHriuTzpw82FDS4U4HskNQN8131n03p302JHxARX5Nxj2Sf0EPc28MEz9p4HCvfIzEu2tF8Oj6lp1NalqlDkjQRYfcERZCEDq0Uj4tnI9zDgLh7IP5lUL9j/hL3Lv+MLk3cQE/wKfcxo6rl8u+PtE/WOAEJzJPvZLyHn2VF8B9fblbPKvSweIp/sjCyP/L+ja+HOBhy0aFQ4BSrYsI+fy7v+0noWSH2inCTCqNH39/Zfxf7s/CerjuUBLNikybwz1+qRfd5qZmWFaZBIgu1UvDYEUvMyfkAex9Kv7kpR9z3N0se//HNslRGuuVC36zdddHflRuoLLwFsVWMSiwvtRy/vnHwwHnowO8Av2/CbfGnJvx5J6+/iX+XPOT0K7Nf/wc=</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>loopuntil</con:name>
          <con:value>25</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTS</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value>4e143295-7885-45a8-8193-1ae9d4693879</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value>urn:dece:userid:org:dece:A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value>A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value>urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value>A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>AccountID</con:name>
          <con:value>urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeRTLGet</con:name>
          <con:value>FORBIDDEN</con:value>
        </con:property>
        <con:property>
          <con:name>ErrorDataVal</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>RightsResXml</con:name>
          <con:value><![CDATA[<ErrorList xmlns="http://www.decellc.org/schema/2010/10/dece" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Error ErrorID="token_rejected">
      <Reason>CN specified and Audience in Affiliation are disjoint</Reason>
      <OriginalRequest/>
      <ErrorLink/>
   </Error>
</ErrorList>]]></con:value>
        </con:property>
        <con:property>
          <con:name>RightsResTime</con:name>
          <con:value>373</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceID</con:name>
          <con:value>urn:dece:deviceid:org:dece:A09D9C22F11CBC6DE0401F0A05996898</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>FORBIDDEN</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetReqXml</con:name>
          <con:value>Host: qa.q.uvvu.com:7002</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResXml</con:name>
          <con:value><![CDATA[<ErrorList xmlns="http://www.decellc.org/schema/2010/10/dece" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Error ErrorID="token_rejected">
      <Reason>CN specified and Audience in Affiliation are disjoint</Reason>
      <OriginalRequest/>
      <ErrorLink/>
   </Error>
</ErrorList>]]></con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResTime</con:name>
          <con:value>442</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetID</con:name>
          <con:value>CN specified and Audience in Affiliation are disjoint</con:value>
        </con:property>
        <con:property>
          <con:name>DomainID</con:name>
          <con:value>urn:dece:domainid:dece:A09DA589BD63A036E0401F0A05996D9A</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00006_DeviceGet_Retailer_FUNC_with_Inactive NodeID" searchProperties="true" disabled="true">
      <con:description>This test case will verify that Application Tier properly handles a DeviceGet request when invoked with the GET method and Inactive NodeID in request .

Expected Result:

System should return Error message.</con:description>
      <con:settings/>
      <con:testStep type="groovy" name="Verify Node User SAML Asssertion">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.model.testsuite.TestRunner.Status


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def ValSamlAssertion = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Validate SAML Assertion");

	ValSamlAssertion.setPropertyValue("TCaseName",testCase.getName());
	ValSamlAssertion.setPropertyValue("TSuiteName",testSuite.getName());

	def runnerTc = ValSamlAssertion.run( null , false )
	assert runnerTc.status == Status.FINISHED;

	rcUUID = testCase.getPropertyValue("rcUUID");

	if (runnerTc.status != Status.FINISHED || rcUUID.toInteger()!= 1){

			
		testCase.setPropertyValue("nodetype","device");
		testCase.setPropertyValue("nodeid","0701");
		testCase.setPropertyValue("username","sch-drm_user1");
		testCase.setPropertyValue("password","Password1");
		testCase.setPropertyValue("accountoid",null);
		testCase.setPropertyValue("useroid",null);
		testCase.setPropertyValue("assertid",null);
		testCase.setPropertyValue("SAMLassertion",null);
		testCase.setPropertyValue("tokentype","urn:dece:type:tokentype:usernamepassword");
		testCase.setPropertyValue("loopuntil","25");
		testCase.setPropertyValue("expectErrTypeSTS","SUCCESS");
		testCase.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
			
		log.info " SAML Assertion Expired ! re-generating Assertion";
		def RunSTS = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get SAML Assertion - STS")

				RunSTS.setPropertyValue("TCaseName",testCase.getName());
				RunSTS.setPropertyValue("TSuiteName",testSuite.getName());

				def runnerSTS = RunSTS.run( null , false )

				assert runnerSTS.status == Status.FINISHED;

		}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call LicAppCreate Request with Valid Data" disabled="true">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0");
testCase.setPropertyValue("expectErrTypeLAC","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedDeviceDDReq = testProject.getTestSuiteByName("Staging DeviceGet").getTestCaseByName("LicAppCreate Request");

FeedDeviceDDReq.setPropertyValue("TCaseName",testCase.getName());
FeedDeviceDDReq.setPropertyValue("TSuiteName",testSuite.getName());


def runnerTC = FeedDeviceDDReq.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Get Node Inactive Statuses">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def GetNodeStatus = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get-Set Node Statuses");

GetNodeStatus.setPropertyValue("TCaseName",testCase.getName());
GetNodeStatus.setPropertyValue("TSuiteName",testSuite.getName());

WsdlTestCaseRunner TSrunner = new WsdlTestCaseRunner( GetNodeStatus, null );

TSrunner.runTestStepByName("Get Node Statuses for DVG");

assert TSrunner.status == Status.INITIALIZED;

testCase.getPropertyValue("NodeStatusXML");</script>
        </con:config>
      </con:testStep>
      <con:testStep type="datasource" name="Feed DataSource for Inactive Node Statuses">
        <con:settings/>
        <con:config xsi:type="con:DataSourceStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dataSource type="XML">
            <con:configuration><sourceStep>Get Node Inactive Statuses</sourceStep><sourceProperty>result</sourceProperty><rowPath>//Results[1]/ResultSet[1]/Row</rowPath><columnPath>STATUS</columnPath></con:configuration>
          </con:dataSource>
          <con:property>NodeStatus</con:property>
          <con:restartOnRun>true</con:restartOnRun>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="SetUp Node Inactive Status for DVG">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

// SetUp the Node Status from the Data Source

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

// Get NodeStatus Values from Data Source

def DsNodeStatus = testRunner.testCase.testSteps['Feed DataSource for Inactive Node Statuses'];
log.info  "Node Status is to set to: " + DsNodeStatus.getPropertyValue("NodeStatus");

testCase.setPropertyValue("NodeStatus",DsNodeStatus.getPropertyValue("NodeStatus"));

def SetNodeStatus = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get-Set Node Statuses");

SetNodeStatus.setPropertyValue("TCaseName",testCase.getName());
SetNodeStatus.setPropertyValue("TSuiteName",testSuite.getName());

WsdlTestCaseRunner TSrunner = new WsdlTestCaseRunner( SetNodeStatus, null );

TSrunner.runTestStepByName("Set Node Statuses for DVG")

assert TSrunner.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Feed DeviceGet Request with Inactive NodeID">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0");
testCase.setPropertyValue("DeviceID","urn:dece:deviceid:org:dece:A09D9C22F11CBC6DE0401F0A05996898");
testCase.setPropertyValue("DomainID","urn:dece:domainid:dece:A09DA589BD63A036E0401F0A05996D9A");
testCase.setPropertyValue("expectErrType","Node_status_inactive");
testCase.setPropertyValue("ErrorDataVal","1");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedRTLReq = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request");

FeedRTLReq.setPropertyValue("TCaseName",testCase.getName());
FeedRTLReq.setPropertyValue("TSuiteName",testSuite.getName());

WsdlTestCaseRunner TSrunner = new WsdlTestCaseRunner( FeedRTLReq, null );

TSrunner.runTestStepByName("Get the DeviceGet Properties");
TSrunner.runTestStepByName("pem set");
assert TSrunner.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call DeviceGet Request">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )

WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );

TSrunnerRTC.runTestStepByName("DeviceGetRequest");

assert TSrunnerRTC.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract DeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Extract DeviceGet Information")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify theDeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Response Validation")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="datasourceloop" name="DataSource Loop">
        <con:settings/>
        <con:config>
          <dataSourceStep>Feed DataSource for Inactive Node Statuses</dataSourceStep>
          <targetStep>SetUp Node Inactive Status for DVG</targetStep>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Re-Set Node Status to Active">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

// SetUp the Node Status from the Data Source

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

// Re - Set NodeStatus Value to Active


def SetNodeStatus = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get-Set Node Statuses");

SetNodeStatus.setPropertyValue("TCaseName",testCase.getName());
SetNodeStatus.setPropertyValue("TSuiteName",testSuite.getName());

testCase.setPropertyValue("NodeStatus","active");

WsdlTestCaseRunner TSrunner = new WsdlTestCaseRunner( SetNodeStatus, null );

TSrunner.runTestStepByName("Set Node Statuses for DVG")

assert TSrunner.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SAMLExpDate</con:name>
          <con:value>2012-04-19 16:24:23.0</con:value>
        </con:property>
        <con:property>
          <con:name>rcUUID</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>nodetype</con:name>
          <con:value>device</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>0701</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>sch-drm_user1</con:value>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>Password1</con:value>
        </con:property>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">A06A9AA49F7073D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">A06A9AA49F7973D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SAMLassertion</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">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</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>loopuntil</con:name>
          <con:value>25</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTS</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value>54f1cd01-3f21-4589-88d6-2d92f4e10aa3</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value>urn:dece:userid:org:dece:A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value>A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value>urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value>A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>AccountID</con:name>
          <con:value>urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>ErrorDataVal</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>Node_status_inactive</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetReqXml</con:name>
          <con:value>Host: qa.q.uvvu.com:7002</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResXml</con:name>
          <con:value><![CDATA[<ErrorList xmlns="http://www.decellc.org/schema/2010/10/dece" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Error ErrorID="Bad_Request">
      <Reason>Node_status_inactive</Reason>
      <OriginalRequest/>
      <ErrorLink/>
   </Error>
</ErrorList>]]></con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResTime</con:name>
          <con:value>454</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetID</con:name>
          <con:value>Node_status_inactive</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceID</con:name>
          <con:value>urn:dece:deviceid:org:dece:A09D9C22F11CBC6DE0401F0A05996898</con:value>
        </con:property>
        <con:property>
          <con:name>NodeStatusXML</con:name>
          <con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <STATUS>deleted</STATUS>
    </Row>
    <Row rowNumber='2'>
      <STATUS>pending</STATUS>
    </Row>
    <Row rowNumber='3'>
      <STATUS>suspended</STATUS>
    </Row>
  </ResultSet>
</Results>]]></con:value>
        </con:property>
        <con:property>
          <con:name>NodeStatus</con:name>
          <con:value>active</con:value>
        </con:property>
        <con:property>
          <con:name>DomainID</con:name>
          <con:value>urn:dece:domainid:dece:A09DA589BD63A036E0401F0A05996D9A</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00007_DeviceGet_Retailer_FUNC_with_InActive AccountID" searchProperties="true">
      <con:description>This test case will verify that Application Tier properly handles a DeviceGet request when invoked with the GET method and Invalid Account ID in request .

Expected Result:

System should return an Error message.</con:description>
      <con:settings/>
      <con:testStep type="groovy" name="Verify Node User SAML Asssertion">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.model.testsuite.TestRunner.Status


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def ValSamlAssertion = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Validate SAML Assertion");

	ValSamlAssertion.setPropertyValue("TCaseName",testCase.getName());
	ValSamlAssertion.setPropertyValue("TSuiteName",testSuite.getName());

	def runnerTc = ValSamlAssertion.run( null , false )
	assert runnerTc.status == Status.FINISHED;

	rcUUID = testCase.getPropertyValue("rcUUID");

	if (runnerTc.status != Status.FINISHED || rcUUID.toInteger()!= 1){

			
		testCase.setPropertyValue("nodetype","device");
		testCase.setPropertyValue("nodeid","0701");
		testCase.setPropertyValue("username","sch-drm_user1");
		testCase.setPropertyValue("password","Password1");
		testCase.setPropertyValue("accountoid",null);
		testCase.setPropertyValue("useroid",null);
		testCase.setPropertyValue("assertid",null);
		testCase.setPropertyValue("SAMLassertion",null);
		testCase.setPropertyValue("tokentype","urn:dece:type:tokentype:usernamepassword");
		testCase.setPropertyValue("loopuntil","25");
		testCase.setPropertyValue("expectErrTypeSTS","SUCCESS");
		testCase.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
			
		log.info " SAML Assertion Expired ! re-generating Assertion";
		def RunSTS = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get SAML Assertion - STS")

				RunSTS.setPropertyValue("TCaseName",testCase.getName());
				RunSTS.setPropertyValue("TSuiteName",testSuite.getName());

				def runnerSTS = RunSTS.run( null , false )

				assert runnerSTS.status == Status.FINISHED;

		}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call LicAppCreate Request with Valid Data" disabled="true">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0");
testCase.setPropertyValue("expectErrTypeLAC","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedDeviceDDReq = testProject.getTestSuiteByName("Staging DeviceGet").getTestCaseByName("LicAppCreate Request");

FeedDeviceDDReq.setPropertyValue("TCaseName",testCase.getName());
FeedDeviceDDReq.setPropertyValue("TSuiteName",testSuite.getName());


def runnerTC = FeedDeviceDDReq.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Get Account Inactive Statuses">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def GetAccountStatus = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get-Set Account Status");

// Get ALL inactive Status from ACCOUNT_STATUS_REF Except = 'Pending'

SqlStr = "select Status from ACCOUNT_STATUS_REF where Status !='active'";

testCase.setPropertyValue("SqlStr",SqlStr);

GetAccountStatus.setPropertyValue("TCaseName",testCase.getName());
GetAccountStatus.setPropertyValue("TSuiteName",testSuite.getName());

WsdlTestCaseRunner TSrunner = new WsdlTestCaseRunner( GetAccountStatus, null );

TSrunner.runTestStepByName("Get Account Status for DVG");

assert TSrunner.status == Status.INITIALIZED;

 log.info " Current Account Status: " + testCase.getPropertyValue("AccountStatus");

testCase.getPropertyValue("AccountStatusXML");</script>
        </con:config>
      </con:testStep>
      <con:testStep type="datasource" name="Feed DataSource for Inactive Account Statuses">
        <con:settings/>
        <con:config xsi:type="con:DataSourceStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dataSource type="XML">
            <con:configuration><sourceStep>Get Account Inactive Statuses</sourceStep><sourceProperty>result</sourceProperty><rowPath>//Results[1]/ResultSet[1]/Row</rowPath><columnPath>STATUS</columnPath></con:configuration>
          </con:dataSource>
          <con:property>AccountStatus</con:property>
          <con:restartOnRun>true</con:restartOnRun>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Feed DeviceGet Request with Inactive AccountID">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0");
testCase.setPropertyValue("DeviceID","urn:dece:deviceid:org:dece:A09D9C22F11CBC6DE0401F0A05996898");
testCase.setPropertyValue("DomainID","urn:dece:domainid:dece:A09DA589BD63A036E0401F0A05996D9A");
testCase.setPropertyValue("expectErrType","ACCOUNT_NOT_ACTIVE");
testCase.setPropertyValue("ErrorDataVal","1");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedRTLReq = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request");

FeedRTLReq.setPropertyValue("TCaseName",testCase.getName());
FeedRTLReq.setPropertyValue("TSuiteName",testSuite.getName());

WsdlTestCaseRunner TSrunner = new WsdlTestCaseRunner( FeedRTLReq, null );

TSrunner.runTestStepByName("Get the DeviceGet Properties");
TSrunner.runTestStepByName("pem set");
assert TSrunner.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="SetUp inactive Account Status for DVG">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

// SetUp the Node Status from the Data Source

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

// Get AccountStatus Values from Data Source

def DsAccountStatus = testRunner.testCase.testSteps['Feed DataSource for Inactive Account Statuses'];
log.info  "Account Status is to set to: " + DsAccountStatus.getPropertyValue("AccountStatus");

testCase.setPropertyValue("AccountStatus",DsAccountStatus.getPropertyValue("AccountStatus"));

def SetAccountStatus = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get-Set Account Status");

SetAccountStatus.setPropertyValue("TCaseName",testCase.getName());
SetAccountStatus.setPropertyValue("TSuiteName",testSuite.getName());

WsdlTestCaseRunner TSrunner = new WsdlTestCaseRunner( SetAccountStatus, null );

TSrunner.runTestStepByName("Set Account Status for DVG")

assert TSrunner.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call DeviceGet Request">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )

WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );

TSrunnerRTC.runTestStepByName("DeviceGetRequest");

assert TSrunnerRTC.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract DeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Extract DeviceGet Information")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify theDeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Response Validation")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="datasourceloop" name="DataSource Loop">
        <con:settings/>
        <con:config>
          <dataSourceStep>Feed DataSource for Inactive Account Statuses</dataSourceStep>
          <targetStep>SetUp inactive Account Status for DVG</targetStep>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Re-Setactive Account Status">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

// SetUp the Node Status from the Data Source

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

// Re-set AccountStatus Values  = 'active'

testCase.setPropertyValue("AccountStatus","active");

def SetAccountStatus = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get-Set Account Status");

SetAccountStatus.setPropertyValue("TCaseName",testCase.getName());
SetAccountStatus.setPropertyValue("TSuiteName",testSuite.getName());

WsdlTestCaseRunner TSrunner = new WsdlTestCaseRunner( SetAccountStatus, null );

TSrunner.runTestStepByName("Set Account Status for DVG")

assert TSrunner.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SAMLExpDate</con:name>
          <con:value>2013-06-14 18:31:45.0</con:value>
        </con:property>
        <con:property>
          <con:name>rcUUID</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>nodetype</con:name>
          <con:value>device</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>0701</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>sch-drm_user1</con:value>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>Password1</con:value>
        </con:property>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">A06A9AA49F7073D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">A06A9AA49F7973D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SAMLassertion</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">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</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>loopuntil</con:name>
          <con:value>25</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTS</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value>_cd0333f9-e78f-4f5c-9bfb-cb41d4e50281</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value>urn:dece:userid:org:dece:A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value>A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value>urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value>A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>AccountID</con:name>
          <con:value>urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>ErrorDataVal</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>ACCOUNT_NOT_ACTIVE</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetReqXml</con:name>
          <con:value>Authorization: SAML2 assertion=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
</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResXml</con:name>
          <con:value><![CDATA[<ErrorList xmlns="http://www.decellc.org/schema/2010/10/dece" xmlns:ns2="http://www.movielabs.com/schema/md/v1.07/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Error ErrorID="urn:dece:errorid:org:dece:AccountNotActive">
      <Reason Language="en">The identified account is not active.</Reason>
      <OriginalRequest>https://qa.q.uvvu.com:7002/rest/1/0/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3AA06A9AA49F6E73D7E0401F0A059915F0/Domain/urn%3Adece%3Adomainid%3Adece%3AA09DA589BD63A036E0401F0A05996D9A/Device/urn%3Adece%3Adeviceid%3Aorg%3Adece%3AA09D9C22F11CBC6DE0401F0A05996898</OriginalRequest>
      <ErrorLink>https://qa.q.uvvu.com:7002/rest/1/0/error/en/ErrorList.html#AccountNotActive</ErrorLink>
   </Error>
</ErrorList>]]></con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResTime</con:name>
          <con:value>938</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetID</con:name>
          <con:value>The supplied AccountID is invalid.https://qa.q.uvvu.com:7002/rest/1/0/Account/urn%3Adece%3Aaccountid%3Aorg%3Aorg%3Aorg%3Adece%3AA06A9AA49F6E73D7E0401F0A059915F0/Device/urn%3Adece%3Adeviceid%3Aorg%3Adece%3AA09D9C22F11CBC6DE0401F0A05996898/DECEDomainhttps://qa.q.uvvu.com:7002/rest/1/0/error/en/ErrorList.html#AccountIdNotValid</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceID</con:name>
          <con:value>urn:dece:deviceid:org:dece:A09D9C22F11CBC6DE0401F0A05996898</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeDVGGet</con:name>
          <con:value>ACCOUNTID NOT MATCH</con:value>
        </con:property>
        <con:property>
          <con:name>SqlStr</con:name>
          <con:value>select Status from ACCOUNT_STATUS_REF where Status !='active'</con:value>
        </con:property>
        <con:property>
          <con:name>AccountStatusXML</con:name>
          <con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <STATUS>archived</STATUS>
    </Row>
    <Row rowNumber='2'>
      <STATUS>blocked</STATUS>
    </Row>
    <Row rowNumber='3'>
      <STATUS>blocked:tou</STATUS>
    </Row>
    <Row rowNumber='4'>
      <STATUS>deleted</STATUS>
    </Row>
    <Row rowNumber='5'>
      <STATUS>forceddelete</STATUS>
    </Row>
    <Row rowNumber='6'>
      <STATUS>other</STATUS>
    </Row>
    <Row rowNumber='7'>
      <STATUS>pending</STATUS>
    </Row>
    <Row rowNumber='8'>
      <STATUS>suspended</STATUS>
    </Row>
  </ResultSet>
</Results>]]></con:value>
        </con:property>
        <con:property>
          <con:name>AccountStatus</con:name>
          <con:value>active</con:value>
        </con:property>
        <con:property>
          <con:name>DomainID</con:name>
          <con:value>urn:dece:domainid:dece:A09DA589BD63A036E0401F0A05996D9A</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00009_DeviceGet_Retailer_FUNC_with_Invalid DeviceID" searchProperties="true">
      <con:description>This test case will verify that Application Tier properly handles a DeviceGet request when invoked with the GET method and Invalid Account ID in request .

Expected Result:

System should return an Error message.</con:description>
      <con:settings/>
      <con:testStep type="groovy" name="Verify Node User SAML Asssertion">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.model.testsuite.TestRunner.Status


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def ValSamlAssertion = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Validate SAML Assertion");

	ValSamlAssertion.setPropertyValue("TCaseName",testCase.getName());
	ValSamlAssertion.setPropertyValue("TSuiteName",testSuite.getName());

	def runnerTc = ValSamlAssertion.run( null , false )
	assert runnerTc.status == Status.FINISHED;

	rcUUID = testCase.getPropertyValue("rcUUID");

	if (runnerTc.status != Status.FINISHED || rcUUID.toInteger()!= 1){

			
		testCase.setPropertyValue("nodetype","device");
		testCase.setPropertyValue("nodeid","0701");
		testCase.setPropertyValue("username","sch-drm_user1");
		testCase.setPropertyValue("password","Password1");
		testCase.setPropertyValue("accountoid",null);
		testCase.setPropertyValue("useroid",null);
		testCase.setPropertyValue("assertid",null);
		testCase.setPropertyValue("SAMLassertion",null);
		testCase.setPropertyValue("tokentype","urn:dece:type:tokentype:usernamepassword");
		testCase.setPropertyValue("loopuntil","25");
		testCase.setPropertyValue("expectErrTypeSTS","SUCCESS");
		testCase.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
			
		log.info " SAML Assertion Expired ! re-generating Assertion";
		def RunSTS = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get SAML Assertion - STS")

				RunSTS.setPropertyValue("TCaseName",testCase.getName());
				RunSTS.setPropertyValue("TSuiteName",testSuite.getName());

				def runnerSTS = RunSTS.run( null , false )

				assert runnerSTS.status == Status.FINISHED;

		}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call LicAppCreate Request with Valid Data" disabled="true">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0");
testCase.setPropertyValue("expectErrTypeLAC","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedDeviceDDReq = testProject.getTestSuiteByName("Staging DeviceGet").getTestCaseByName("LicAppCreate Request");

FeedDeviceDDReq.setPropertyValue("TCaseName",testCase.getName());
FeedDeviceDDReq.setPropertyValue("TSuiteName",testSuite.getName());


def runnerTC = FeedDeviceDDReq.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Feed DeviceGet Request with Invalid DeviceID">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0");
testCase.setPropertyValue("DeviceID","urn:dece:deviceid:org:tree:dece:A09D9C22F11CBC6DE0401F0A05996898");
testCase.setPropertyValue("DomainID","urn:dece:domainid:dece:A09DA589BD63A036E0401F0A05996D9A");
testCase.setPropertyValue("expectErrType","DEVICEID_NOT_FOUND");
testCase.setPropertyValue("ErrorDataVal","1");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedRTLReq = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request");

FeedRTLReq.setPropertyValue("TCaseName",testCase.getName());
FeedRTLReq.setPropertyValue("TSuiteName",testSuite.getName());

WsdlTestCaseRunner TSrunner = new WsdlTestCaseRunner( FeedRTLReq, null );

TSrunner.runTestStepByName("Get the DeviceGet Properties");
TSrunner.runTestStepByName("pem set");
assert TSrunner.status == Status.INITIALIZED;</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call DeviceGet Request">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )

WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );

TSrunnerRTC.runTestStepByName("DeviceGetRequest");

assert TSrunnerRTC.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract DeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Extract DeviceGet Information")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify theDeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Response Validation")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SAMLExpDate</con:name>
          <con:value>2013-06-14 18:31:45.0</con:value>
        </con:property>
        <con:property>
          <con:name>rcUUID</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>nodetype</con:name>
          <con:value>device</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>0701</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>sch-drm_user1</con:value>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>Password1</con:value>
        </con:property>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">A06A9AA49F7073D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">A06A9AA49F7973D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SAMLassertion</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">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</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>loopuntil</con:name>
          <con:value>25</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTS</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value>_3fe6ae11-2e59-4896-88f2-ec550f321d70</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value>urn:dece:userid:org:dece:A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value>A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value>urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value>A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>AccountID</con:name>
          <con:value>urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>ErrorDataVal</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>DEVICEID_NOT_FOUND</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetReqXml</con:name>
          <con:value>Authorization: SAML2 assertion=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
</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResXml</con:name>
          <con:value><![CDATA[<ErrorList xmlns="http://www.decellc.org/schema/2010/10/dece" xmlns:ns2="http://www.movielabs.com/schema/md/v1.07/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Error ErrorID="urn:dece:errorid:org:dece:DeviceIdInvalid">
      <Reason Language="en">Device ID Invalid.</Reason>
      <OriginalRequest>https://qa.q.uvvu.com:7002/rest/1/0/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3AA06A9AA49F6E73D7E0401F0A059915F0/Domain/urn%3Adece%3Adomainid%3Adece%3AA09DA589BD63A036E0401F0A05996D9A/Device/urn%3Adece%3Adeviceid%3Aorg%3Atree%3Adece%3AA09D9C22F11CBC6DE0401F0A05996898</OriginalRequest>
      <ErrorLink>https://qa.q.uvvu.com:7002/rest/1/0/error/en/ErrorList.html#DeviceIdInvalid</ErrorLink>
   </Error>
</ErrorList>]]></con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResTime</con:name>
          <con:value>156</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetID</con:name>
          <con:value>Device ID Invalid.https://qa.q.uvvu.com:7002/rest/1/0/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3AA06A9AA49F6E73D7E0401F0A059915F0/Device/urn%3Adece%3Adeviceid%3Aorg%3Atree%3Adece%3AA09D9C22F11CBC6DE0401F0A05996898/DECEDomainhttps://qa.q.uvvu.com:7002/rest/1/0/error/en/ErrorList.html#DeviceIdInvalid</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceID</con:name>
          <con:value>urn:dece:deviceid:org:tree:dece:A09D9C22F11CBC6DE0401F0A05996898</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeDVGGet</con:name>
          <con:value>ACCOUNTID NOT MATCH</con:value>
        </con:property>
        <con:property>
          <con:name>DomainID</con:name>
          <con:value>urn:dece:domainid:dece:A09DA589BD63A036E0401F0A05996D9A</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00010_DeviceGet_Retailer_FUNC_with_Non_Existing_ DeviceID" searchProperties="true" disabled="true">
      <con:description>This test case will verify that Application Tier properly handles a DeviceGet request when invoked with the GET method and Invalid Account ID in request .

Expected Result:

System should return an Error message.</con:description>
      <con:settings/>
      <con:testStep type="groovy" name="Verify Node User SAML Asssertion">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.model.testsuite.TestRunner.Status


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def ValSamlAssertion = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Validate SAML Assertion");

	ValSamlAssertion.setPropertyValue("TCaseName",testCase.getName());
	ValSamlAssertion.setPropertyValue("TSuiteName",testSuite.getName());

	def runnerTc = ValSamlAssertion.run( null , false )
	assert runnerTc.status == Status.FINISHED;

	rcUUID = testCase.getPropertyValue("rcUUID");

	if (runnerTc.status != Status.FINISHED || rcUUID.toInteger()!= 1){

			
		testCase.setPropertyValue("nodetype","device");
		testCase.setPropertyValue("nodeid","0701");
		testCase.setPropertyValue("username","sch-drm_user1");
		testCase.setPropertyValue("password","Password1");
		testCase.setPropertyValue("accountoid",null);
		testCase.setPropertyValue("useroid",null);
		testCase.setPropertyValue("assertid",null);
		testCase.setPropertyValue("SAMLassertion",null);
		testCase.setPropertyValue("tokentype","urn:dece:type:tokentype:usernamepassword");
		testCase.setPropertyValue("loopuntil","25");
		testCase.setPropertyValue("expectErrTypeSTS","SUCCESS");
		testCase.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
			
		log.info " SAML Assertion Expired ! re-generating Assertion";
		def RunSTS = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get SAML Assertion - STS")

				RunSTS.setPropertyValue("TCaseName",testCase.getName());
				RunSTS.setPropertyValue("TSuiteName",testSuite.getName());

				def runnerSTS = RunSTS.run( null , false )

				assert runnerSTS.status == Status.FINISHED;

		}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call LicAppCreate Request with Valid Data" disabled="true">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0");
testCase.setPropertyValue("expectErrTypeLAC","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedDeviceDDReq = testProject.getTestSuiteByName("Staging DeviceGet").getTestCaseByName("LicAppCreate Request");

FeedDeviceDDReq.setPropertyValue("TCaseName",testCase.getName());
FeedDeviceDDReq.setPropertyValue("TSuiteName",testSuite.getName());


def runnerTC = FeedDeviceDDReq.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Feed DeviceGet Request with Non-Existing DeviceID">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0");
testCase.setPropertyValue("DeviceID","urn:dece:deviceid:org:dece:A09D9C22F11CBC6DE0401F0A05996898" + "9233");
testCase.setPropertyValue("DomainID","urn:dece:domainid:dece:A09DA589BD63A036E0401F0A05996D9A");
testCase.setPropertyValue("expectErrType","DEVICEID_NOT_FOUND");
testCase.setPropertyValue("ErrorDataVal","1");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedRTLReq = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request");

FeedRTLReq.setPropertyValue("TCaseName",testCase.getName());
FeedRTLReq.setPropertyValue("TSuiteName",testSuite.getName());

WsdlTestCaseRunner TSrunner = new WsdlTestCaseRunner( FeedRTLReq, null );

TSrunner.runTestStepByName("Get the DeviceGet Properties");
TSrunner.runTestStepByName("pem set");
assert TSrunner.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call DeviceGet Request">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )

WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );

TSrunnerRTC.runTestStepByName("DeviceGetRequest");

assert TSrunnerRTC.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract DeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Extract DeviceGet Information")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify theDeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Response Validation")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SAMLExpDate</con:name>
          <con:value>2012-04-18 16:10:01.0</con:value>
        </con:property>
        <con:property>
          <con:name>rcUUID</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>nodetype</con:name>
          <con:value>device</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>0701</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>sch-drm_user1</con:value>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>Password1</con:value>
        </con:property>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">A06A9AA49F7073D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">A06A9AA49F7973D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SAMLassertion</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">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</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>loopuntil</con:name>
          <con:value>25</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTS</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value>291da5df-6cbe-4f2c-b15e-0939741d3df8</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value>urn:dece:userid:org:dece:A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value>A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value>urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value>A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>AccountID</con:name>
          <con:value>urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>ErrorDataVal</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>DEVICEID_NOT_FOUND</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetReqXml</con:name>
          <con:value>Host: qa.q.uvvu.com:7002</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResXml</con:name>
          <con:value><![CDATA[<ErrorList xmlns="http://www.decellc.org/schema/2010/10/dece" xmlns:ns2="http://www.movielabs.com/schema/md/v1.07/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Error ErrorID="urn:dece:errorid:org:dece:DeviceIdInvalid">
      <Reason Language="en">Device ID Invalid.</Reason>
      <OriginalRequest>https://qa.q.uvvu.com:7002/rest/1/0/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3AA06A9AA49F6E73D7E0401F0A059915F0/Domain/urn%3Adece%3Adomainid%3Adece%3AA09DA589BD63A036E0401F0A05996D9A/Device/urn%3Adece%3Adeviceid%3Aorg%3Adece%3AA09D9C22F11CBC6DE0401F0A059968989233</OriginalRequest>
      <ErrorLink>https://qa.q.uvvu.com:7002/rest/1/0/error/en/ErrorList.html#DeviceIdInvalid</ErrorLink>
   </Error>
</ErrorList>]]></con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResTime</con:name>
          <con:value>249</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetID</con:name>
          <con:value>Device ID Invalid.https://qa.q.uvvu.com:7002/rest/1/0/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3AA06A9AA49F6E73D7E0401F0A059915F0/Device/urn%3Adece%3Adeviceid%3Aorg%3Adece%3AA09D9C22F11CBC6DE0401F0A059968989238487847849821942174/DECEDomainhttps://qa.q.uvvu.com:7002/rest/1/0/error/en/ErrorList.html#DeviceIdInvalid</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceID</con:name>
          <con:value/>
        </con:property>
        <con:property>
          <con:name>expectErrTypeDVGGet</con:name>
          <con:value>ACCOUNTID NOT MATCH</con:value>
        </con:property>
        <con:property>
          <con:name>DomainID</con:name>
          <con:value>urn:dece:domainid:dece:A09DA589BD63A036E0401F0A05996D9A</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00011_DeviceGet_Retailer_FUNC_with_Inactive_ DeviceID" searchProperties="true">
      <con:description>This test case will verify that Application Tier properly handles a DeviceGet request when invoked with the GET method and Invalid Account ID in request .

Expected Result:

System should return an Error message.</con:description>
      <con:settings/>
      <con:testStep type="groovy" name="Verify Node User SAML Asssertion">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.model.testsuite.TestRunner.Status


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def ValSamlAssertion = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Validate SAML Assertion");

	ValSamlAssertion.setPropertyValue("TCaseName",testCase.getName());
	ValSamlAssertion.setPropertyValue("TSuiteName",testSuite.getName());

	def runnerTc = ValSamlAssertion.run( null , false )
	assert runnerTc.status == Status.FINISHED;

	rcUUID = testCase.getPropertyValue("rcUUID");

	if (runnerTc.status != Status.FINISHED || rcUUID.toInteger()!= 1){

			
		testCase.setPropertyValue("nodetype","device");
		testCase.setPropertyValue("nodeid","0701");
		testCase.setPropertyValue("username","sch-drm_user1");
		testCase.setPropertyValue("password","Password1");
		testCase.setPropertyValue("accountoid",null);
		testCase.setPropertyValue("useroid",null);
		testCase.setPropertyValue("assertid",null);
		testCase.setPropertyValue("SAMLassertion",null);
		testCase.setPropertyValue("tokentype","urn:dece:type:tokentype:usernamepassword");
		testCase.setPropertyValue("loopuntil","25");
		testCase.setPropertyValue("expectErrTypeSTS","SUCCESS");
		testCase.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
			
		log.info " SAML Assertion Expired ! re-generating Assertion";
		def RunSTS = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get SAML Assertion - STS")

				RunSTS.setPropertyValue("TCaseName",testCase.getName());
				RunSTS.setPropertyValue("TSuiteName",testSuite.getName());

				def runnerSTS = RunSTS.run( null , false )

				assert runnerSTS.status == Status.FINISHED;

		}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call LicAppCreate Request with Valid Data" disabled="true">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0");
testCase.setPropertyValue("expectErrTypeLAC","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedDeviceDDReq = testProject.getTestSuiteByName("Staging DeviceGet").getTestCaseByName("LicAppCreate Request");

FeedDeviceDDReq.setPropertyValue("TCaseName",testCase.getName());
FeedDeviceDDReq.setPropertyValue("TSuiteName",testSuite.getName());


def runnerTC = FeedDeviceDDReq.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Get Device Inactive Statuses">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def GetDeviceStatus = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get-Set Device Status");

// Get ALL inactive Status from DEVICE_STATUS_REF Except = 'Pending'

SqlStr = "select Status from DEVICE_STATUS_REF where Status !='active' AND Status !='pending'";

testCase.setPropertyValue("SqlStr",SqlStr);

GetDeviceStatus.setPropertyValue("TCaseName",testCase.getName());
GetDeviceStatus.setPropertyValue("TSuiteName",testSuite.getName());

WsdlTestCaseRunner TSrunner = new WsdlTestCaseRunner( GetDeviceStatus, null );

TSrunner.runTestStepByName("Get Device Status for DVG");

assert TSrunner.status == Status.INITIALIZED;

 log.info " Current Device Status: " + testCase.getPropertyValue("DeviceStatus");

testCase.getPropertyValue("DeviceStatusXML");</script>
        </con:config>
      </con:testStep>
      <con:testStep type="datasource" name="Feed DataSource for Inactive Device Statuses">
        <con:settings/>
        <con:config xsi:type="con:DataSourceStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dataSource type="XML">
            <con:configuration><sourceStep>Get Device Inactive Statuses</sourceStep><sourceProperty>result</sourceProperty><rowPath>//Results[1]/ResultSet[1]/Row</rowPath><columnPath>STATUS</columnPath></con:configuration>
          </con:dataSource>
          <con:property>DeviceStatus</con:property>
          <con:restartOnRun>true</con:restartOnRun>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Feed DeviceGet Request with Inactive DeviceID">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0");
testCase.setPropertyValue("DeviceID","urn:dece:deviceid:org:dece:A09D9C22F11CBC6DE0401F0A05996898");
testCase.setPropertyValue("DomainID","urn:dece:domainid:dece:A09DA589BD63A036E0401F0A05996D9A");
testCase.setPropertyValue("expectErrType","DEVICEID_NOT_FOUND");
testCase.setPropertyValue("ErrorDataVal","1");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedRTLReq = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request");

FeedRTLReq.setPropertyValue("TCaseName",testCase.getName());
FeedRTLReq.setPropertyValue("TSuiteName",testSuite.getName());

WsdlTestCaseRunner TSrunner = new WsdlTestCaseRunner( FeedRTLReq, null );

TSrunner.runTestStepByName("Get the DeviceGet Properties");
TSrunner.runTestStepByName("pem set");
assert TSrunner.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="SetUp Device Inactive Status for DVG">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

// SetUp the Node Status from the Data Source

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

// Get NodeStatus Values from Data Source

def DsDeviceStatus = testRunner.testCase.testSteps['Feed DataSource for Inactive Device Statuses'];
log.info  "Device Status is to set to: " + DsDeviceStatus.getPropertyValue("DeviceStatus");

testCase.setPropertyValue("DeviceStatus",DsDeviceStatus.getPropertyValue("DeviceStatus"));

def SetDeviceStatus = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get-Set Device Status");

SetDeviceStatus.setPropertyValue("TCaseName",testCase.getName());
SetDeviceStatus.setPropertyValue("TSuiteName",testSuite.getName());
SetDeviceStatus.setPropertyValue("DeviceID",testCase.getPropertyValue("DeviceID"));

WsdlTestCaseRunner TSrunner = new WsdlTestCaseRunner( SetDeviceStatus, null );

TSrunner.runTestStepByName("Set Device Status for DVG")

assert TSrunner.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call DeviceGet Request">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )

WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );

TSrunnerRTC.runTestStepByName("DeviceGetRequest");

assert TSrunnerRTC.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify theDeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Response Validation")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="datasourceloop" name="DataSource Loop">
        <con:settings/>
        <con:config>
          <dataSourceStep>Feed DataSource for Inactive Device Statuses</dataSourceStep>
          <targetStep>Feed DeviceGet Request with Inactive DeviceID</targetStep>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Re-Set Device Status to Active">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

// SetUp the Node Status from the Data Source

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

// Get NodeStatus Values from Data Source

testCase.setPropertyValue("DeviceStatus","pending");

def SetDeviceStatus = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get-Set Device Status");

SetDeviceStatus.setPropertyValue("TCaseName",testCase.getName());
SetDeviceStatus.setPropertyValue("TSuiteName",testSuite.getName());

WsdlTestCaseRunner TSrunner = new WsdlTestCaseRunner( SetDeviceStatus, null );

TSrunner.runTestStepByName("Set Device Status for DVG")

assert TSrunner.status == Status.INITIALIZED;

TSrunner.runTestStepByName("Get Device Status for DVG")

assert TSrunner.status == Status.INITIALIZED;

log.info " Current Device Status: " + testCase.getPropertyValue("DeviceStatus");</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SAMLExpDate</con:name>
          <con:value>2013-06-14 18:31:45.0</con:value>
        </con:property>
        <con:property>
          <con:name>rcUUID</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>nodetype</con:name>
          <con:value>device</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>0701</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>sch-drm_user1</con:value>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>Password1</con:value>
        </con:property>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">A06A9AA49F7073D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">A06A9AA49F7973D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SAMLassertion</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">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</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>loopuntil</con:name>
          <con:value>25</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTS</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value>_00968d0e-c79d-4c07-9c87-82e66292c5ae</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value>urn:dece:userid:org:dece:A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value>A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value>urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value>A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>AccountID</con:name>
          <con:value>urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>ErrorDataVal</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>DEVICEID_NOT_FOUND</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetReqXml</con:name>
          <con:value>Host: qa.q.uvvu.com:7002</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResXml</con:name>
          <con:value><![CDATA[<ErrorList xmlns="http://www.decellc.org/schema/2010/10/dece" xmlns:ns2="http://www.movielabs.com/schema/md/v1.07/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Error ErrorID="urn:dece:errorid:org:dece:DeviceNotFound">
      <Reason Language="en">The device cannot be found</Reason>
      <OriginalRequest>https://qa.q.uvvu.com:7002/rest/1/0/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3AA06A9AA49F6E73D7E0401F0A059915F0/Domain/urn%3Adece%3Adomainid%3Adece%3AA09DA589BD63A036E0401F0A05996D9A/Device/urn%3Adece%3Adeviceid%3Aorg%3Adece%3AA09D9C22F11CBC6DE0401F0A05996898</OriginalRequest>
      <ErrorLink>https://qa.q.uvvu.com:7002/rest/1/0/error/en/ErrorList.html#DeviceNotFound</ErrorLink>
   </Error>
</ErrorList>]]></con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResTime</con:name>
          <con:value>935</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetID</con:name>
          <con:value>The device cannot be foundhttps://qa.q.uvvu.com:7002/rest/1/0/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3AA06A9AA49F6E73D7E0401F0A059915F0/Device/urn%3Adece%3Adeviceid%3Aorg%3Adece%3AA09D9C22F11CBC6DE0401F0A05996898/DECEDomainhttps://qa.q.uvvu.com:7002/rest/1/0/error/en/ErrorList.html#DeviceNotFound</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceID</con:name>
          <con:value>urn:dece:deviceid:org:dece:A09D9C22F11CBC6DE0401F0A05996898</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeDVGGet</con:name>
          <con:value>ACCOUNTID NOT MATCH</con:value>
        </con:property>
        <con:property>
          <con:name>SqlStr</con:name>
          <con:value>select Status from DEVICE_STATUS_REF where Status !='active' AND Status !='pending'</con:value>
        </con:property>
        <con:property>
          <con:name>UserStatusXML</con:name>
          <con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <STATUS>deleted</STATUS>
    </Row>
    <Row rowNumber='2'>
      <STATUS>forceddelete</STATUS>
    </Row>
  </ResultSet>
</Results>]]></con:value>
        </con:property>
        <con:property>
          <con:name>UserStatus</con:name>
          <con:value>active</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceStatusXML</con:name>
          <con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <STATUS>deleted</STATUS>
    </Row>
    <Row rowNumber='2'>
      <STATUS>forceddelete</STATUS>
    </Row>
  </ResultSet>
</Results>]]></con:value>
        </con:property>
        <con:property>
          <con:name>DeviceStatus</con:name>
          <con:value>pending</con:value>
        </con:property>
        <con:property>
          <con:name>rcDeviceStatus</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>DomainID</con:name>
          <con:value>urn:dece:domainid:dece:A09DA589BD63A036E0401F0A05996D9A</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00012_DeviceGet_Retailer_FUNC_Verify_DECE_DomainID_with_DEVICE_DomainID" searchProperties="true">
      <con:description>This test case will verify that Application Tier properly handles a DeviceGet request when invoked with the GET method and valid header request .

Expected Result:

System should return successful message.</con:description>
      <con:settings/>
      <con:testStep type="groovy" name="Verify Node User SAML Asssertion">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.model.testsuite.TestRunner.Status


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def ValSamlAssertion = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Validate SAML Assertion");

	ValSamlAssertion.setPropertyValue("TCaseName",testCase.getName());
	ValSamlAssertion.setPropertyValue("TSuiteName",testSuite.getName());

	def runnerTc = ValSamlAssertion.run( null , false )
	assert runnerTc.status == Status.FINISHED;

	rcUUID = testCase.getPropertyValue("rcUUID");

	if (runnerTc.status != Status.FINISHED || rcUUID.toInteger()!= 1){

			
		testCase.setPropertyValue("nodetype","device");
		testCase.setPropertyValue("nodeid","0701");
		testCase.setPropertyValue("username","sch-drm_user1");
		testCase.setPropertyValue("password","Password1");
		testCase.setPropertyValue("accountoid",null);
		testCase.setPropertyValue("useroid",null);
		testCase.setPropertyValue("assertid",null);
		testCase.setPropertyValue("SAMLassertion",null);
		testCase.setPropertyValue("tokentype","urn:dece:type:tokentype:usernamepassword");
		testCase.setPropertyValue("loopuntil","25");
		testCase.setPropertyValue("expectErrTypeSTS","SUCCESS");
		testCase.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
			
		log.info " SAML Assertion Expired ! re-generating Assertion";
		def RunSTS = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get SAML Assertion - STS")

				RunSTS.setPropertyValue("TCaseName",testCase.getName());
				RunSTS.setPropertyValue("TSuiteName",testSuite.getName());

				def runnerSTS = RunSTS.run( null , false )

				assert runnerSTS.status == Status.FINISHED;

		}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call LicAppCreate Request with Valid Data" disabled="true">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0");
testCase.setPropertyValue("expectErrTypeLAC","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedDeviceDDReq = testProject.getTestSuiteByName("Staging DeviceGet").getTestCaseByName("LicAppCreate Request");

FeedDeviceDDReq.setPropertyValue("TCaseName",testCase.getName());
FeedDeviceDDReq.setPropertyValue("TSuiteName",testSuite.getName());


def runnerTC = FeedDeviceDDReq.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Feed DeviceGet Request with Valid Data">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0");
testCase.setPropertyValue("DeviceID","urn:dece:deviceid:org:dece:A09D9C22F11CBC6DE0401F0A05996898");
testCase.setPropertyValue("DomainID","urn:dece:domainid:dece:A09DA589BD63A036E0401F0A05996D9A");
testCase.setPropertyValue("expectErrType","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedRTLReq = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request");

FeedRTLReq.setPropertyValue("TCaseName",testCase.getName());
FeedRTLReq.setPropertyValue("TSuiteName",testSuite.getName());

WsdlTestCaseRunner TSrunner = new WsdlTestCaseRunner( FeedRTLReq, null );

TSrunner.runTestStepByName("Get the DeviceGet Properties");
TSrunner.runTestStepByName("pem set");
assert TSrunner.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call DeviceGet Request">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )

WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );

TSrunnerRTC.runTestStepByName("DeviceGetRequest");

assert TSrunnerRTC.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract DeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Extract DeviceGet Information")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify theDeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Response Validation")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify the DeviceGet Response against DB Result">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGdataVal = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Data Validation");

RTGdataVal.setPropertyValue("TCaseName",testCase.getName());
RTGdataVal.setPropertyValue("TSuiteName",testSuite.getName());


def runnerRTC = RTGdataVal.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SAMLExpDate</con:name>
          <con:value>2013-06-14 18:31:45.0</con:value>
        </con:property>
        <con:property>
          <con:name>rcUUID</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>nodetype</con:name>
          <con:value>device</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>0701</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>sch-drm_user1</con:value>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>Password1</con:value>
        </con:property>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">A06A9AA49F7073D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">A06A9AA49F7973D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SAMLassertion</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">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</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>loopuntil</con:name>
          <con:value>25</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTS</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value>_7e52daf8-8c23-4045-8bae-6a06755f51c2</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value>urn:dece:userid:org:dece:A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value>A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value>urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value>A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>AccountID</con:name>
          <con:value>urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>ErrorDataVal</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetReqXml</con:name>
          <con:value>Authorization: SAML2 assertion=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
</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResXml</con:name>
          <con:value><![CDATA[<Device IsLegacy="false" DeviceID="urn:dece:deviceid:org:dece:A09D9C22F11CBC6DE0401F0A05996898" xmlns="http://www.decellc.org/schema/2010/10/dece" xmlns:ns2="http://www.movielabs.com/schema/md/v1.07/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <DisplayName>DeviceInfoDisplayName</DisplayName>
   <Manufacturer>Microsoft</Manufacturer>
   <Model>V344</Model>
   <Brand Language="en-US">DeviceInfoBrand</Brand>
   <SerialNo>123432442323424</SerialNo>
   <Image MimeType="MimeType3" Width="50" Height="50">http://www.oxygenxml.com/1234</Image>
   <LicAppID>urn:dece:licappid:org:dece:A09D9C22F11EBC6DE0401F0A05996898</LicAppID>
   <DRMClientID>urn:dece:drmclientid:org:dece:A0E2E4B822DB1B7CE0401F0A07994404</DRMClientID>
   <ResourceStatus>
      <Current CreatedBy="urn:dece:org:org:dece:0701" CreationDate="2011-04-11T04:02:39.637Z">
         <Value>urn:dece:type:status:pending</Value>
         <Description>Device Created</Description>
      </Current>
   </ResourceStatus>
</Device>]]></con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResTime</con:name>
          <con:value>188</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetID</con:name>
          <con:value>A09DA589BD63A036E0401F0A05996D9A</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceID</con:name>
          <con:value>urn:dece:deviceid:org:dece:A09D9C22F11CBC6DE0401F0A05996898</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeDVGGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>SqlStr</con:name>
          <con:value>select Status from USER_STATUS_REF where Status !='active'</con:value>
        </con:property>
        <con:property>
          <con:name>DomainID</con:name>
          <con:value>urn:dece:domainid:dece:A09DA589BD63A036E0401F0A05996D9A</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00013_DeviceGet_Retailer_FUNC_with_NULL AccountID" searchProperties="true">
      <con:description>This test case will verify that Application Tier properly handles a DeviceGet request when invoked with the GET method and Invalid Account ID in request .

Expected Result:

System should return an Error message.</con:description>
      <con:settings/>
      <con:testStep type="groovy" name="Verify Node User SAML Asssertion">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.model.testsuite.TestRunner.Status


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def ValSamlAssertion = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Validate SAML Assertion");

	ValSamlAssertion.setPropertyValue("TCaseName",testCase.getName());
	ValSamlAssertion.setPropertyValue("TSuiteName",testSuite.getName());

	def runnerTc = ValSamlAssertion.run( null , false )
	assert runnerTc.status == Status.FINISHED;

	rcUUID = testCase.getPropertyValue("rcUUID");

	if (runnerTc.status != Status.FINISHED || rcUUID.toInteger()!= 1){

			
		testCase.setPropertyValue("nodetype","device");
		testCase.setPropertyValue("nodeid","0701");
		testCase.setPropertyValue("username","sch-drm_user1");
		testCase.setPropertyValue("password","Password1");
		testCase.setPropertyValue("accountoid",null);
		testCase.setPropertyValue("useroid",null);
		testCase.setPropertyValue("assertid",null);
		testCase.setPropertyValue("SAMLassertion",null);
		testCase.setPropertyValue("tokentype","urn:dece:type:tokentype:usernamepassword");
		testCase.setPropertyValue("loopuntil","25");
		testCase.setPropertyValue("expectErrTypeSTS","SUCCESS");
		testCase.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
			
		log.info " SAML Assertion Expired ! re-generating Assertion";
		def RunSTS = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get SAML Assertion - STS")

				RunSTS.setPropertyValue("TCaseName",testCase.getName());
				RunSTS.setPropertyValue("TSuiteName",testSuite.getName());

				def runnerSTS = RunSTS.run( null , false )

				assert runnerSTS.status == Status.FINISHED;

		}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call LicAppCreate Request with Valid Data" disabled="true">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0");
testCase.setPropertyValue("expectErrTypeLAC","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedDeviceDDReq = testProject.getTestSuiteByName("Staging DeviceGet").getTestCaseByName("LicAppCreate Request");

FeedDeviceDDReq.setPropertyValue("TCaseName",testCase.getName());
FeedDeviceDDReq.setPropertyValue("TSuiteName",testSuite.getName());


def runnerTC = FeedDeviceDDReq.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Feed DeviceGet Request with Invalid AccountID">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:");
testCase.setPropertyValue("DeviceID","urn:dece:deviceid:org:dece:A09D9C22F11CBC6DE0401F0A05996898");
testCase.setPropertyValue("DomainID","urn:dece:domainid:dece:A09DA589BD63A036E0401F0A05996D9A");
testCase.setPropertyValue("expectErrType","ACCOUNTID NOT MATCH");
testCase.setPropertyValue("ErrorDataVal","1");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedRTLReq = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request");

FeedRTLReq.setPropertyValue("TCaseName",testCase.getName());
FeedRTLReq.setPropertyValue("TSuiteName",testSuite.getName());

WsdlTestCaseRunner TSrunner = new WsdlTestCaseRunner( FeedRTLReq, null );

TSrunner.runTestStepByName("Get the DeviceGet Properties");
TSrunner.runTestStepByName("pem set");
assert TSrunner.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call DeviceGet Request">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )

WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );

TSrunnerRTC.runTestStepByName("DeviceGetRequest");

assert TSrunnerRTC.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract DeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Extract DeviceGet Information")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify theDeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Response Validation")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SAMLExpDate</con:name>
          <con:value>2013-06-14 18:31:45.0</con:value>
        </con:property>
        <con:property>
          <con:name>rcUUID</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>nodetype</con:name>
          <con:value>device</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>0701</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>sch-drm_user1</con:value>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>Password1</con:value>
        </con:property>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">A06A9AA49F7073D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">A06A9AA49F7973D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SAMLassertion</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">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</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>loopuntil</con:name>
          <con:value>25</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTS</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value>_19dd1b31-ee72-46bd-af2e-a36caa870882</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value>urn:dece:userid:org:dece:A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value>A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value>urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value>A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>AccountID</con:name>
          <con:value>urn:dece:accountid:org:dece:</con:value>
        </con:property>
        <con:property>
          <con:name>ErrorDataVal</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>ACCOUNTID NOT MATCH</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetReqXml</con:name>
          <con:value>Authorization: SAML2 assertion=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
</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResXml</con:name>
          <con:value><![CDATA[<ErrorList xmlns="http://www.decellc.org/schema/2010/10/dece" xmlns:ns2="http://www.movielabs.com/schema/md/v1.07/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Error ErrorID="urn:dece:errorid:org:dece:AccountIdUnmatched">
      <Reason Language="en">Request Account ID not match</Reason>
      <OriginalRequest>https://qa.q.uvvu.com:7002/rest/1/0/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3A/Domain/urn%3Adece%3Adomainid%3Adece%3AA09DA589BD63A036E0401F0A05996D9A/Device/urn%3Adece%3Adeviceid%3Aorg%3Adece%3AA09D9C22F11CBC6DE0401F0A05996898</OriginalRequest>
      <ErrorLink>https://qa.q.uvvu.com:7002/rest/1/0/error/en/ErrorList.html#AccountIdUnmatched</ErrorLink>
   </Error>
</ErrorList>]]></con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResTime</con:name>
          <con:value>204</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetID</con:name>
          <con:value>Request Account ID not matchhttps://qa.q.uvvu.com:7002/rest/1/0/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3A/Device/urn%3Adece%3Adeviceid%3Aorg%3Adece%3AA09D9C22F11CBC6DE0401F0A05996898/DECEDomainhttps://qa.q.uvvu.com:7002/rest/1/0/error/en/ErrorList.html#AccountIdUnmatched</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceID</con:name>
          <con:value>urn:dece:deviceid:org:dece:A09D9C22F11CBC6DE0401F0A05996898</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeDVGGet</con:name>
          <con:value>ACCOUNTID NOT MATCH</con:value>
        </con:property>
        <con:property>
          <con:name>DomainID</con:name>
          <con:value>urn:dece:domainid:dece:A09DA589BD63A036E0401F0A05996D9A</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00014_DeviceGet_Retailer_FUNC_with_NULL_ DeviceID" searchProperties="true">
      <con:description>This test case will verify that Application Tier properly handles a DeviceGet request when invoked with the GET method and Invalid Account ID in request .

Expected Result:

System should return an Error message.</con:description>
      <con:settings/>
      <con:testStep type="groovy" name="Verify Node User SAML Asssertion">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.model.testsuite.TestRunner.Status


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def ValSamlAssertion = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Validate SAML Assertion");

	ValSamlAssertion.setPropertyValue("TCaseName",testCase.getName());
	ValSamlAssertion.setPropertyValue("TSuiteName",testSuite.getName());

	def runnerTc = ValSamlAssertion.run( null , false )
	assert runnerTc.status == Status.FINISHED;

	rcUUID = testCase.getPropertyValue("rcUUID");

	if (runnerTc.status != Status.FINISHED || rcUUID.toInteger()!= 1){

			
		testCase.setPropertyValue("nodetype","device");
		testCase.setPropertyValue("nodeid","0701");
		testCase.setPropertyValue("username","sch-drm_user1");
		testCase.setPropertyValue("password","Password1");
		testCase.setPropertyValue("accountoid",null);
		testCase.setPropertyValue("useroid",null);
		testCase.setPropertyValue("assertid",null);
		testCase.setPropertyValue("SAMLassertion",null);
		testCase.setPropertyValue("tokentype","urn:dece:type:tokentype:usernamepassword");
		testCase.setPropertyValue("loopuntil","25");
		testCase.setPropertyValue("expectErrTypeSTS","SUCCESS");
		testCase.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
			
		log.info " SAML Assertion Expired ! re-generating Assertion";
		def RunSTS = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get SAML Assertion - STS")

				RunSTS.setPropertyValue("TCaseName",testCase.getName());
				RunSTS.setPropertyValue("TSuiteName",testSuite.getName());

				def runnerSTS = RunSTS.run( null , false )

				assert runnerSTS.status == Status.FINISHED;

		}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call LicAppCreate Request with Valid Data" disabled="true">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0");
testCase.setPropertyValue("expectErrTypeLAC","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedDeviceDDReq = testProject.getTestSuiteByName("Staging DeviceGet").getTestCaseByName("LicAppCreate Request");

FeedDeviceDDReq.setPropertyValue("TCaseName",testCase.getName());
FeedDeviceDDReq.setPropertyValue("TSuiteName",testSuite.getName());


def runnerTC = FeedDeviceDDReq.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Feed DeviceGet Request with Invalid DeviceID">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0");
testCase.setPropertyValue("DeviceID","urn:dece:deviceid:org:dece:");
testCase.setPropertyValue("DomainID","urn:dece:domainid:dece:A09DA589BD63A036E0401F0A05996D9A");
testCase.setPropertyValue("expectErrType","DEVICEID_NOT_FOUND");
testCase.setPropertyValue("ErrorDataVal","1");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedRTLReq = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request");

FeedRTLReq.setPropertyValue("TCaseName",testCase.getName());
FeedRTLReq.setPropertyValue("TSuiteName",testSuite.getName());

WsdlTestCaseRunner TSrunner = new WsdlTestCaseRunner( FeedRTLReq, null );

TSrunner.runTestStepByName("Get the DeviceGet Properties");
TSrunner.runTestStepByName("pem set");
assert TSrunner.status == Status.INITIALIZED;</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call DeviceGet Request">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )

WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );

TSrunnerRTC.runTestStepByName("DeviceGetRequest");

assert TSrunnerRTC.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract DeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Extract DeviceGet Information")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify theDeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Response Validation")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SAMLExpDate</con:name>
          <con:value>2013-06-14 18:31:45.0</con:value>
        </con:property>
        <con:property>
          <con:name>rcUUID</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>nodetype</con:name>
          <con:value>device</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>0701</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>sch-drm_user1</con:value>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>Password1</con:value>
        </con:property>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">A06A9AA49F7073D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">A06A9AA49F7973D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SAMLassertion</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">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</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>loopuntil</con:name>
          <con:value>25</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTS</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value>_602bd4f6-e11f-43f7-8b41-8bb06fae1f60</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value>urn:dece:userid:org:dece:A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value>A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value>urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value>A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>AccountID</con:name>
          <con:value>urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>ErrorDataVal</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>DEVICEID_NOT_FOUND</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetReqXml</con:name>
          <con:value>Authorization: SAML2 assertion=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
</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResXml</con:name>
          <con:value><![CDATA[<ErrorList xmlns="http://www.decellc.org/schema/2010/10/dece" xmlns:ns2="http://www.movielabs.com/schema/md/v1.07/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Error ErrorID="urn:dece:errorid:org:dece:DeviceIdInvalid">
      <Reason Language="en">Device ID Invalid.</Reason>
      <OriginalRequest>https://qa.q.uvvu.com:7002/rest/1/0/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3AA06A9AA49F6E73D7E0401F0A059915F0/Domain/urn%3Adece%3Adomainid%3Adece%3AA09DA589BD63A036E0401F0A05996D9A/Device/urn%3Adece%3Adeviceid%3Aorg%3Adece%3A</OriginalRequest>
      <ErrorLink>https://qa.q.uvvu.com:7002/rest/1/0/error/en/ErrorList.html#DeviceIdInvalid</ErrorLink>
   </Error>
</ErrorList>]]></con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResTime</con:name>
          <con:value>233</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetID</con:name>
          <con:value>Device ID Invalid.https://qa.q.uvvu.com:7002/rest/1/0/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3AA06A9AA49F6E73D7E0401F0A059915F0/Device/urn%3Adece%3Adeviceid%3Aorg%3Adece%3A/DECEDomainhttps://qa.q.uvvu.com:7002/rest/1/0/error/en/ErrorList.html#DeviceIdInvalid</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceID</con:name>
          <con:value>urn:dece:deviceid:org:dece:</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeDVGGet</con:name>
          <con:value>ACCOUNTID NOT MATCH</con:value>
        </con:property>
        <con:property>
          <con:name>DomainID</con:name>
          <con:value>urn:dece:domainid:dece:A09DA589BD63A036E0401F0A05996D9A</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00015_DeviceGet_Retailer_FUNC_Verify_DECE_DomainID_associated to Account" searchProperties="true">
      <con:description>This test case will verify that Application Tier properly handles a DeviceGet request when invoked with the GET method and valid header request .

Expected Result:

System should return successful message.</con:description>
      <con:settings/>
      <con:testStep type="groovy" name="Verify Node User SAML Asssertion">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.model.testsuite.TestRunner.Status


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def ValSamlAssertion = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Validate SAML Assertion");

	ValSamlAssertion.setPropertyValue("TCaseName",testCase.getName());
	ValSamlAssertion.setPropertyValue("TSuiteName",testSuite.getName());

	def runnerTc = ValSamlAssertion.run( null , false )
	assert runnerTc.status == Status.FINISHED;

	rcUUID = testCase.getPropertyValue("rcUUID");

	if (runnerTc.status != Status.FINISHED || rcUUID.toInteger()!= 1){

			
		testCase.setPropertyValue("nodetype","device");
		testCase.setPropertyValue("nodeid","0701");
		testCase.setPropertyValue("username","sch-drm_user1");
		testCase.setPropertyValue("password","Password1");
		testCase.setPropertyValue("accountoid",null);
		testCase.setPropertyValue("useroid",null);
		testCase.setPropertyValue("assertid",null);
		testCase.setPropertyValue("SAMLassertion",null);
		testCase.setPropertyValue("tokentype","urn:dece:type:tokentype:usernamepassword");
		testCase.setPropertyValue("loopuntil","25");
		testCase.setPropertyValue("expectErrTypeSTS","SUCCESS");
		testCase.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
			
		log.info " SAML Assertion Expired ! re-generating Assertion";
		def RunSTS = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get SAML Assertion - STS")

				RunSTS.setPropertyValue("TCaseName",testCase.getName());
				RunSTS.setPropertyValue("TSuiteName",testSuite.getName());

				def runnerSTS = RunSTS.run( null , false )

				assert runnerSTS.status == Status.FINISHED;

		}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call LicAppCreate Request with Valid Data" disabled="true">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0");
testCase.setPropertyValue("expectErrTypeLAC","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedDeviceDDReq = testProject.getTestSuiteByName("Staging DeviceGet").getTestCaseByName("LicAppCreate Request");

FeedDeviceDDReq.setPropertyValue("TCaseName",testCase.getName());
FeedDeviceDDReq.setPropertyValue("TSuiteName",testSuite.getName());


def runnerTC = FeedDeviceDDReq.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Feed DeviceGet Request with Valid Data">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0");
testCase.setPropertyValue("DeviceID","urn:dece:deviceid:org:dece:A09D9C22F11CBC6DE0401F0A05996898");
testCase.setPropertyValue("DomainID","urn:dece:domainid:dece:A09DA589BD63A036E0401F0A05996D9A");
testCase.setPropertyValue("expectErrType","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedRTLReq = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request");

FeedRTLReq.setPropertyValue("TCaseName",testCase.getName());
FeedRTLReq.setPropertyValue("TSuiteName",testSuite.getName());

WsdlTestCaseRunner TSrunner = new WsdlTestCaseRunner( FeedRTLReq, null );

TSrunner.runTestStepByName("Get the DeviceGet Properties");
TSrunner.runTestStepByName("pem set");
assert TSrunner.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call DeviceGet Request">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )

WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );

TSrunnerRTC.runTestStepByName("DeviceGetRequest");

assert TSrunnerRTC.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract DeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Extract DeviceGet Information")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify theDeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Response Validation")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify the DeviceGet Response against DB Result">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGdataVal = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Data Validation");

RTGdataVal.setPropertyValue("TCaseName",testCase.getName());
RTGdataVal.setPropertyValue("TSuiteName",testSuite.getName());


def runnerRTC = RTGdataVal.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SAMLExpDate</con:name>
          <con:value>2013-06-14 18:31:45.0</con:value>
        </con:property>
        <con:property>
          <con:name>rcUUID</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>nodetype</con:name>
          <con:value>device</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>0701</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>sch-drm_user1</con:value>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>Password1</con:value>
        </con:property>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">A06A9AA49F7073D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">A06A9AA49F7973D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SAMLassertion</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">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</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>loopuntil</con:name>
          <con:value>25</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTS</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value>_1fdcb6c2-192f-4902-a299-876513cbcfc9</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value>urn:dece:userid:org:dece:A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value>A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value>urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value>A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>AccountID</con:name>
          <con:value>urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>ErrorDataVal</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetReqXml</con:name>
          <con:value>Authorization: SAML2 assertion=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
</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResXml</con:name>
          <con:value><![CDATA[<Device IsLegacy="false" DeviceID="urn:dece:deviceid:org:dece:A09D9C22F11CBC6DE0401F0A05996898" xmlns="http://www.decellc.org/schema/2010/10/dece" xmlns:ns2="http://www.movielabs.com/schema/md/v1.07/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <DisplayName>DeviceInfoDisplayName</DisplayName>
   <Manufacturer>Microsoft</Manufacturer>
   <Model>V344</Model>
   <Brand Language="en-US">DeviceInfoBrand</Brand>
   <SerialNo>123432442323424</SerialNo>
   <Image MimeType="MimeType3" Width="50" Height="50">http://www.oxygenxml.com/1234</Image>
   <LicAppID>urn:dece:licappid:org:dece:A09D9C22F11EBC6DE0401F0A05996898</LicAppID>
   <DRMClientID>urn:dece:drmclientid:org:dece:A0E2E4B822DB1B7CE0401F0A07994404</DRMClientID>
   <ResourceStatus>
      <Current CreatedBy="urn:dece:org:org:dece:0701" CreationDate="2011-04-11T04:02:39.637Z">
         <Value>urn:dece:type:status:pending</Value>
         <Description>Device Created</Description>
      </Current>
   </ResourceStatus>
</Device>]]></con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResTime</con:name>
          <con:value>158</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetID</con:name>
          <con:value>A09DA589BD63A036E0401F0A05996D9A</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceID</con:name>
          <con:value>urn:dece:deviceid:org:dece:A09D9C22F11CBC6DE0401F0A05996898</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeDVGGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>SqlStr</con:name>
          <con:value>select Status from USER_STATUS_REF where Status !='active'</con:value>
        </con:property>
        <con:property>
          <con:name>DomainID</con:name>
          <con:value>urn:dece:domainid:dece:A09DA589BD63A036E0401F0A05996D9A</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00016_DeviceGet_Retailer_FUNC_Verify_DeviceID_Belongs_to_Account" searchProperties="true" disabled="true">
      <con:description>This test case will verify that Application Tier properly handles a DeviceGet request when invoked with the GET method and Invalid Account ID in request .

Expected Result:

System should return an Error message.</con:description>
      <con:settings/>
      <con:testStep type="groovy" name="Verify Node User SAML Asssertion">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.model.testsuite.TestRunner.Status


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def ValSamlAssertion = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Validate SAML Assertion");

	ValSamlAssertion.setPropertyValue("TCaseName",testCase.getName());
	ValSamlAssertion.setPropertyValue("TSuiteName",testSuite.getName());

	def runnerTc = ValSamlAssertion.run( null , false )
	assert runnerTc.status == Status.FINISHED;

	rcUUID = testCase.getPropertyValue("rcUUID");

	if (runnerTc.status != Status.FINISHED || rcUUID.toInteger()!= 1){

			
		testCase.setPropertyValue("nodetype","device");
		testCase.setPropertyValue("nodeid","0701");
		testCase.setPropertyValue("username","sch-drm_user1");
		testCase.setPropertyValue("password","Password1");
		testCase.setPropertyValue("accountoid",null);
		testCase.setPropertyValue("useroid",null);
		testCase.setPropertyValue("assertid",null);
		testCase.setPropertyValue("SAMLassertion",null);
		testCase.setPropertyValue("tokentype","urn:dece:type:tokentype:usernamepassword");
		testCase.setPropertyValue("loopuntil","25");
		testCase.setPropertyValue("expectErrTypeSTS","SUCCESS");
		testCase.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
			
		log.info " SAML Assertion Expired ! re-generating Assertion";
		def RunSTS = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get SAML Assertion - STS")

				RunSTS.setPropertyValue("TCaseName",testCase.getName());
				RunSTS.setPropertyValue("TSuiteName",testSuite.getName());

				def runnerSTS = RunSTS.run( null , false )

				assert runnerSTS.status == Status.FINISHED;

		}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call LicAppCreate Request with Valid Data" disabled="true">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0");
testCase.setPropertyValue("expectErrTypeLAC","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedDeviceDDReq = testProject.getTestSuiteByName("Staging DeviceGet").getTestCaseByName("LicAppCreate Request");

FeedDeviceDDReq.setPropertyValue("TCaseName",testCase.getName());
FeedDeviceDDReq.setPropertyValue("TSuiteName",testSuite.getName());


def runnerTC = FeedDeviceDDReq.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Feed DeviceGet Request with Invalid DeviceID">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0");
testCase.setPropertyValue("DeviceID","urn:dece:deviceid:org:dece:A04559CE239D84F3E0401F0A07993907");
testCase.setPropertyValue("DomainID","urn:dece:domainid:dece:A09DA589BD63A036E0401F0A05996D9A");
testCase.setPropertyValue("expectErrType","DEVICEID_NOT_FOUND");
testCase.setPropertyValue("ErrorDataVal","1");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedRTLReq = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request");

FeedRTLReq.setPropertyValue("TCaseName",testCase.getName());
FeedRTLReq.setPropertyValue("TSuiteName",testSuite.getName());

WsdlTestCaseRunner TSrunner = new WsdlTestCaseRunner( FeedRTLReq, null );

TSrunner.runTestStepByName("Get the DeviceGet Properties");
TSrunner.runTestStepByName("pem set");
assert TSrunner.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call DeviceGet Request">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )

WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );

TSrunnerRTC.runTestStepByName("DeviceGetRequest");

assert TSrunnerRTC.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract DeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Extract DeviceGet Information")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify theDeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Response Validation")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SAMLExpDate</con:name>
          <con:value>2012-04-18 16:10:01.0</con:value>
        </con:property>
        <con:property>
          <con:name>rcUUID</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>nodetype</con:name>
          <con:value>device</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>0701</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>sch-drm_user1</con:value>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>Password1</con:value>
        </con:property>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">A06A9AA49F7073D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">A06A9AA49F7973D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SAMLassertion</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">nVdbc6JME773V1jupZUAKipWkqrhKCoqCJ7uEIaDIiAHQX79N2A0JpvN7vtdpMw0fXim+5menpdYP3qtAYhjGCVu4NdF9rUBKbxjET39STfx7lOng/efdl2SeMIpq99vtXu6hRONuhjHKRT9ONH95LXRwgmk0Hki+irRHZD4gOw9U2R726gvYRQjz0jlGW/U86Pnx4Mq6msjjfxBoMduPPD1I4wHiTFYAGkyQJoD/Qap8fZyBVkFjN6cJAkHGGY8m9CAnmc8G8ERe8E+6byY8WDh2r6epBF8j2nGr4132yzLnrP2cxDZWAvHcQynMKRjxq79q/FWuxlDU/St4LpmdD/wXUP33EIvQUkwcQKzDjw7iNzEOf7BNYEReOn6CebGk0F0/F8N7CNAhe4fPX0CGcX6U+zoxM2ZAi0YQd+AdU0RXxu//qmAV1M10v3YCqJj/GX93xBB/wy9IITmU3zb2A3cv3v8JltvL9AYiL7hpbF7htOSJaFuwLg+j6Dl5hM3Rtwz43pV/Xoe3wgGjf9SkRfsESeCjX2TGda1YZz8P+V6LNXVy1L3UvhGndRZJhVdVnDkbh6kmtddWLSgFdvOawXhUfkK6l7p9/VXnt5p9W7Eb0Ir2M+bpqJTkZsFtpNqSdY2ThSeWoQtELa8YlbD3DqJaTvECWkzJHrxkumdJxutRZBLu7soFqfmyZvPa/ZuqHbwVYYL1lwtvG6npaepB8dkYvd2nDh3SB+E3OiwDPKzQ7EF1j8nTLZIugHRYYaAZZtrzjQ4T3O8Zc1S1N2M2tLjTBeOGWhaE/H1Y0+Peyj3NYaXapPl/2sSp1g90e8LpmwUFjqdCXyTRJFNC4YBl4UNMpEGNvrbgyltH07OwRWoDKeBLPOAZWhvz00kcBAAoXG0IzHLpZQzBRjR9nSJDNUa8La0pHAZm23YpSwPucxRTWF52Qleui24qQTiyphxJE7hlqyicpIEgqssl9idkO+lhZSJ8oatIQcsl4eFKVAJFHLXaImktCBbmwWZbtdLJOcvk+P0vFM5T2IkgVmchIW4a7MyNwLKZmW0+BTZFpNjGNQ2Gv1gNArhHkA+w1FMUEjqIZNUrTVlFb2SqZ9lkiiMJDnOGLnalVDjstFSKz5ywdASYx65nFPB/JoLQ2X4Kb5dj2J9RfqSAjLWrozHXGbObkAkGc9qzDVXEy5TOEWb8pIiZhyoZCyXefGuNXV2gnM22nI+UsH+sTCMzK14H333lbNxIU81XeDB7rgkjLbiGC7p6usgs7f9jJU3o3GwFZGbKZA5mpYBAoSDcmso/zSY0EtyFrpUy4UTiw+O0IlqEhGMD+cix/tue2bPpyuStQ69ueDO27rpYKJntPbtAxBFaI4JR9ZNZYMprO8W3dlYW0M32hTJlJSJrtsna8oq1dZs4PXM4XqjjZv5xpDV2XyhreZFnk9P+37hJcMZPYwWI4m1Z1MI57HRxHCdp9U+SzKb4R7xyVJwSNaALdEACHvb5lxEYHq4v5JwqEgcIi+QmExgVoywAILQ5ESalWWLd4i5ISxTjZhKImd6KE2XzVrxaluGZlGlcH21DTctHt+qwKycyR2Ot2WNbI7WcCtPPXWZgCxcWj5B4EIoDy0psw2pZIApZgsanSK6lopA02fhCM/Hyy5OnGTTGy0ooLXzReuQzxx7eznY2wMqyubh6GxU4C3VB46JiGKrmqxyigT61/OWS6LWVjzjmIe7o5GzKqpZZRyoNKfwMq7lLAvGV1msglYebwpuLzFcZV8DuaQjWpx3ayfe+FN3pnIpIm36QJf9roX/lWMlxWqfOXZigAy+coy7cowD1qkp9lkiJrtMGK8ymxa4k9xbTkZUiMvryaFGN3nMTlyvM/P7mTpurohL1nP28mpFiazDNH1r47R3CY3rhSHD0aEnuMqB9bsd7yJNJJnUXMy74Ht4yuJJbSoSPtdOCh6jorRJH7fusSjanZZ2nC/Ss6jp45i4OLvTisr282EXwyLhQha97Vnm14Gxud4jX5vkXXhto9hjg/3UgW+j1yLd7aGR3JblPSyydR5djnry8xhXSlzzyapUB2E5C8YJ9JPGW2lVjnCDFA16rjlAN+d1DfAuoADoUHyv12uzPQ7v4ASPA5ykKILk8dusd0XxBSIT+JZbxiqH2etl/TNA4zjYQT2CUeMHT2We6qKvoOkj8GOoBq8NDrSoHkGAHoMQ9mi+3+YAw/A9vku06TbHN+rTIJn5swhYCYweBmTq64CsQMMNXVhO0e+zRJygRJz0c5p4xPNZf/ZhisbsqJx0B61On6wSgJnpMTTQB9TdojCIk+fQCath5o/b+PrttmOkY7qlQlyCpiGqFvxmpO/cEP+2s9a3o//NPUhNt5xZUPqSyDWuSD5/+mBDSYM7FfAeTtww31X/2bT1uyn2AyLsazLukcyz+xD39jBBszYax6r3SIyKdtKfT8/p+ZxWZerheAuLkHuMwHBsAY0UjYsXNThAH7t7wP5lUL9j/hL3Lv+MLk0cf5GgU35EjKpXy78/0j5ZowQkME++kzEeepaVwX98uRkDo9RD4jn6yYLI/Mj7N74e4iDIZYdyfbtclRP25XN530/CwAiQVxc1qSB69P2d/XexPwvv6bpDSRArdmkC//ylXnaf14ZuGEHqJyLbqASPHbHCnFxCOPhQ+s1NNeK+v1ny+I9vlrU0WRgOPOqNu677d+Untyq8AZFV7FZYXhs5en2j4L790IHfAX7fhLvcT034807efhP/LnnI6Vdmv/0P</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>loopuntil</con:name>
          <con:value>25</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTS</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value>e904f17a-ad06-4408-b651-09f88237af01</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value>urn:dece:userid:org:dece:A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value>A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value>urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value>A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>AccountID</con:name>
          <con:value>urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>ErrorDataVal</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>DEVICEID_NOT_FOUND</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetReqXml</con:name>
          <con:value>Host: qa.q.uvvu.com:7002</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResXml</con:name>
          <con:value><![CDATA[<Device IsLegacy="false" DeviceID="urn:dece:deviceid:org:dece:A04559CE239D84F3E0401F0A07993907" xmlns="http://www.decellc.org/schema/2010/10/dece" xmlns:ns2="http://www.movielabs.com/schema/md/v1.07/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <DisplayName>DeviceInfoDisplayName</DisplayName>
   <Manufacturer>DeviceInfoManufacturer</Manufacturer>
   <Model>DeviceInfoModel</Model>
   <Brand Language="en-US">DeviceInfoBrand</Brand>
   <SerialNo>DeviceInfoSerialNo</SerialNo>
   <Image MimeType="MimeType3" Width="50" Height="50">http://www.oxygenxml.com/</Image>
   <LicAppID>urn:dece:licappid:org:dece:A04559CE239F84F3E0401F0A07993907</LicAppID>
   <ResourceStatus>
      <Current CreatedBy="urn:dece:org:org:dece:1397" CreationDate="2011-04-06T19:02:37.674Z">
         <Value>urn:dece:type:status:pending</Value>
         <Description>Device Created</Description>
      </Current>
   </ResourceStatus>
</Device>]]></con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResTime</con:name>
          <con:value>183</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetID</con:name>
          <con:value>Device ID Invalid.https://qa.q.uvvu.com:7002/rest/1/0/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3AA06A9AA49F6E73D7E0401F0A059915F0/Device/urn%3Adece%3Adeviceid%3Aorg%3Adece%3A/DECEDomainhttps://qa.q.uvvu.com:7002/rest/1/0/error/en/ErrorList.html#DeviceIdInvalid</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceID</con:name>
          <con:value>urn:dece:deviceid:org:dece:A04559CE239D84F3E0401F0A07993907</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeDVGGet</con:name>
          <con:value>ACCOUNTID NOT MATCH</con:value>
        </con:property>
        <con:property>
          <con:name>DomainID</con:name>
          <con:value>urn:dece:domainid:dece:A09DA589BD63A036E0401F0A05996D9A</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00017_DeviceGet_Retailer_FUNC_with_Verify_Device_Info" searchProperties="true">
      <con:description>This test case will verify that Application Tier properly handles a DeviceGet request when invoked with the GET method and valid header request .

Expected Result:

System should return successful message.</con:description>
      <con:settings/>
      <con:testStep type="groovy" name="Verify Node User SAML Asssertion">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.model.testsuite.TestRunner.Status


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def ValSamlAssertion = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Validate SAML Assertion");

	ValSamlAssertion.setPropertyValue("TCaseName",testCase.getName());
	ValSamlAssertion.setPropertyValue("TSuiteName",testSuite.getName());

	def runnerTc = ValSamlAssertion.run( null , false )
	assert runnerTc.status == Status.FINISHED;

	rcUUID = testCase.getPropertyValue("rcUUID");

	if (runnerTc.status != Status.FINISHED || rcUUID.toInteger()!= 1){

			
		testCase.setPropertyValue("nodetype","retailer");
		testCase.setPropertyValue("nodeid","0701");
		testCase.setPropertyValue("username","sch-drm_user1");
		testCase.setPropertyValue("password","Password1");
		testCase.setPropertyValue("accountoid",null);
		testCase.setPropertyValue("useroid",null);
		testCase.setPropertyValue("assertid",null);
		testCase.setPropertyValue("SAMLassertion",null);
		testCase.setPropertyValue("tokentype","urn:dece:type:tokentype:usernamepassword");
		testCase.setPropertyValue("loopuntil","25");
		testCase.setPropertyValue("expectErrTypeSTS","SUCCESS");
		testCase.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
			
		log.info " SAML Assertion Expired ! re-generating Assertion";
		def RunSTS = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get SAML Assertion - STS")

				RunSTS.setPropertyValue("TCaseName",testCase.getName());
				RunSTS.setPropertyValue("TSuiteName",testSuite.getName());

				def runnerSTS = RunSTS.run( null , false )

				assert runnerSTS.status == Status.FINISHED;

		}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call LicAppCreate Request with Valid Data" disabled="true">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0");
testCase.setPropertyValue("expectErrTypeLAC","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedDeviceDDReq = testProject.getTestSuiteByName("Staging DeviceGet").getTestCaseByName("LicAppCreate Request");

FeedDeviceDDReq.setPropertyValue("TCaseName",testCase.getName());
FeedDeviceDDReq.setPropertyValue("TSuiteName",testSuite.getName());


def runnerTC = FeedDeviceDDReq.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Feed DeviceGet Request with Valid Data">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0");
testCase.setPropertyValue("DeviceID","urn:dece:deviceid:org:dece:A09D9C22F11CBC6DE0401F0A05996898");
testCase.setPropertyValue("DomainID","urn:dece:domainid:dece:A09DA589BD63A036E0401F0A05996D9A");
testCase.setPropertyValue("expectErrType","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedRTLReq = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request");

FeedRTLReq.setPropertyValue("TCaseName",testCase.getName());
FeedRTLReq.setPropertyValue("TSuiteName",testSuite.getName());

WsdlTestCaseRunner TSrunner = new WsdlTestCaseRunner( FeedRTLReq, null );

TSrunner.runTestStepByName("Get the DeviceGet Properties");
TSrunner.runTestStepByName("pem set");
assert TSrunner.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call DeviceGet Request">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )

WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );

TSrunnerRTC.runTestStepByName("DeviceGetRequest");

assert TSrunnerRTC.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract DeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Extract DeviceGet Information")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify theDeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Response Validation")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify the DeviceGet Response against DB Result">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGdataVal = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Data Validation");

RTGdataVal.setPropertyValue("TCaseName",testCase.getName());
RTGdataVal.setPropertyValue("TSuiteName",testSuite.getName());


def runnerRTC = RTGdataVal.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SAMLExpDate</con:name>
          <con:value>2013-06-14 18:31:45.0</con:value>
        </con:property>
        <con:property>
          <con:name>rcUUID</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>nodetype</con:name>
          <con:value>retailer</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>0701</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>sch-drm_user1</con:value>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>Password1</con:value>
        </con:property>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">A06A9AA49F7073D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">A06A9AA49F7973D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SAMLassertion</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">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</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>loopuntil</con:name>
          <con:value>25</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTS</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value>_7ba2bacc-904c-41d3-ade8-d29055bda786</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value>urn:dece:userid:org:dece:A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value>A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value>urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value>A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>AccountID</con:name>
          <con:value>urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>ErrorDataVal</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetReqXml</con:name>
          <con:value>Authorization: SAML2 assertion=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
</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResXml</con:name>
          <con:value><![CDATA[<Device IsLegacy="false" DeviceID="urn:dece:deviceid:org:dece:A09D9C22F11CBC6DE0401F0A05996898" xmlns="http://www.decellc.org/schema/2010/10/dece" xmlns:ns2="http://www.movielabs.com/schema/md/v1.07/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <DisplayName>DeviceInfoDisplayName</DisplayName>
   <Manufacturer>Microsoft</Manufacturer>
   <Model>V344</Model>
   <Brand Language="en-US">DeviceInfoBrand</Brand>
   <SerialNo>123432442323424</SerialNo>
   <Image MimeType="MimeType3" Width="50" Height="50">http://www.oxygenxml.com/1234</Image>
   <LicAppID>urn:dece:licappid:org:dece:A09D9C22F11EBC6DE0401F0A05996898</LicAppID>
   <DRMClientID>urn:dece:drmclientid:org:dece:A0E2E4B822DB1B7CE0401F0A07994404</DRMClientID>
   <ResourceStatus>
      <Current CreatedBy="urn:dece:org:org:dece:0701" CreationDate="2011-04-11T04:02:39.637Z">
         <Value>urn:dece:type:status:pending</Value>
         <Description>Device Created</Description>
      </Current>
   </ResourceStatus>
</Device>]]></con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResTime</con:name>
          <con:value>314</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceID</con:name>
          <con:value>urn:dece:deviceid:org:dece:A09D9C22F11CBC6DE0401F0A05996898</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeDVGGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>SqlStr</con:name>
          <con:value>select Status from USER_STATUS_REF where Status !='active'</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeLAC</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>DomainID</con:name>
          <con:value>urn:dece:domainid:dece:A09DA589BD63A036E0401F0A05996D9A</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00018_DeviceGet_Retailer_FUNC_with_Verify_LICAPP_ID" searchProperties="true">
      <con:description>This test case will verify that Application Tier properly handles a DeviceGet request when invoked with the GET method and valid header request .

Expected Result:

System should return successful message.</con:description>
      <con:settings/>
      <con:testStep type="groovy" name="Verify Node User SAML Asssertion">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.model.testsuite.TestRunner.Status


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def ValSamlAssertion = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Validate SAML Assertion");

	ValSamlAssertion.setPropertyValue("TCaseName",testCase.getName());
	ValSamlAssertion.setPropertyValue("TSuiteName",testSuite.getName());

	def runnerTc = ValSamlAssertion.run( null , false )
	assert runnerTc.status == Status.FINISHED;

	rcUUID = testCase.getPropertyValue("rcUUID");

	if (runnerTc.status != Status.FINISHED || rcUUID.toInteger()!= 1){

			
		testCase.setPropertyValue("nodetype","retailer");
		testCase.setPropertyValue("nodeid","0701");
		testCase.setPropertyValue("username","sch-drm_user1");
		testCase.setPropertyValue("password","Password1");
		testCase.setPropertyValue("accountoid",null);
		testCase.setPropertyValue("useroid",null);
		testCase.setPropertyValue("assertid",null);
		testCase.setPropertyValue("SAMLassertion",null);
		testCase.setPropertyValue("tokentype","urn:dece:type:tokentype:usernamepassword");
		testCase.setPropertyValue("loopuntil","25");
		testCase.setPropertyValue("expectErrTypeSTS","SUCCESS");
		testCase.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
			
		log.info " SAML Assertion Expired ! re-generating Assertion";
		def RunSTS = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get SAML Assertion - STS")

				RunSTS.setPropertyValue("TCaseName",testCase.getName());
				RunSTS.setPropertyValue("TSuiteName",testSuite.getName());

				def runnerSTS = RunSTS.run( null , false )

				assert runnerSTS.status == Status.FINISHED;

		}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call LicAppCreate Request with Valid Data" disabled="true">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0");
testCase.setPropertyValue("expectErrTypeLAC","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedDeviceDDReq = testProject.getTestSuiteByName("Staging DeviceGet").getTestCaseByName("LicAppCreate Request");

FeedDeviceDDReq.setPropertyValue("TCaseName",testCase.getName());
FeedDeviceDDReq.setPropertyValue("TSuiteName",testSuite.getName());


def runnerTC = FeedDeviceDDReq.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Feed DeviceGet Request with Valid Data">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0");
testCase.setPropertyValue("DeviceID","urn:dece:deviceid:org:dece:A09D9C22F11CBC6DE0401F0A05996898");
testCase.setPropertyValue("DomainID","urn:dece:domainid:dece:A09DA589BD63A036E0401F0A05996D9A");
testCase.setPropertyValue("expectErrType","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedRTLReq = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request");

FeedRTLReq.setPropertyValue("TCaseName",testCase.getName());
FeedRTLReq.setPropertyValue("TSuiteName",testSuite.getName());

WsdlTestCaseRunner TSrunner = new WsdlTestCaseRunner( FeedRTLReq, null );

TSrunner.runTestStepByName("Get the DeviceGet Properties");
TSrunner.runTestStepByName("pem set");
assert TSrunner.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call DeviceGet Request">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )

WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );

TSrunnerRTC.runTestStepByName("DeviceGetRequest");

assert TSrunnerRTC.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract DeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Extract DeviceGet Information")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify theDeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Response Validation")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify the DeviceGet Response against DB Result">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGdataVal = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Data Validation");

RTGdataVal.setPropertyValue("TCaseName",testCase.getName());
RTGdataVal.setPropertyValue("TSuiteName",testSuite.getName());


def runnerRTC = RTGdataVal.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SAMLExpDate</con:name>
          <con:value>2013-06-14 18:31:45.0</con:value>
        </con:property>
        <con:property>
          <con:name>rcUUID</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>nodetype</con:name>
          <con:value>retailer</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>0701</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>sch-drm_user1</con:value>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>Password1</con:value>
        </con:property>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">A06A9AA49F7073D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">A06A9AA49F7973D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SAMLassertion</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">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</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>loopuntil</con:name>
          <con:value>25</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTS</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value>_c7374e85-1710-426e-9259-3184c387d7d9</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value>urn:dece:userid:org:dece:A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value>A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value>urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value>A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>AccountID</con:name>
          <con:value>urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>ErrorDataVal</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetReqXml</con:name>
          <con:value>Authorization: SAML2 assertion=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
</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResXml</con:name>
          <con:value><![CDATA[<Device IsLegacy="false" DeviceID="urn:dece:deviceid:org:dece:A09D9C22F11CBC6DE0401F0A05996898" xmlns="http://www.decellc.org/schema/2010/10/dece" xmlns:ns2="http://www.movielabs.com/schema/md/v1.07/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <DisplayName>DeviceInfoDisplayName</DisplayName>
   <Manufacturer>Microsoft</Manufacturer>
   <Model>V344</Model>
   <Brand Language="en-US">DeviceInfoBrand</Brand>
   <SerialNo>123432442323424</SerialNo>
   <Image MimeType="MimeType3" Width="50" Height="50">http://www.oxygenxml.com/1234</Image>
   <LicAppID>urn:dece:licappid:org:dece:A09D9C22F11EBC6DE0401F0A05996898</LicAppID>
   <DRMClientID>urn:dece:drmclientid:org:dece:A0E2E4B822DB1B7CE0401F0A07994404</DRMClientID>
   <ResourceStatus>
      <Current CreatedBy="urn:dece:org:org:dece:0701" CreationDate="2011-04-11T04:02:39.637Z">
         <Value>urn:dece:type:status:pending</Value>
         <Description>Device Created</Description>
      </Current>
   </ResourceStatus>
</Device>]]></con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResTime</con:name>
          <con:value>223</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceID</con:name>
          <con:value>urn:dece:deviceid:org:dece:A09D9C22F11CBC6DE0401F0A05996898</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeDVGGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>SqlStr</con:name>
          <con:value>select Status from USER_STATUS_REF where Status !='active'</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeLAC</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>DomainID</con:name>
          <con:value>urn:dece:domainid:dece:A09DA589BD63A036E0401F0A05996D9A</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00019_DeviceGet_Retailer_FUNC_with_Verify_DRMClientID" searchProperties="true">
      <con:description>This test case will verify that Application Tier properly handles a DeviceGet request when invoked with the GET method and valid header request .

Expected Result:

System should return successful message.</con:description>
      <con:settings/>
      <con:testStep type="groovy" name="Verify Node User SAML Asssertion">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.model.testsuite.TestRunner.Status


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def ValSamlAssertion = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Validate SAML Assertion");

	ValSamlAssertion.setPropertyValue("TCaseName",testCase.getName());
	ValSamlAssertion.setPropertyValue("TSuiteName",testSuite.getName());

	def runnerTc = ValSamlAssertion.run( null , false )
	assert runnerTc.status == Status.FINISHED;

	rcUUID = testCase.getPropertyValue("rcUUID");

	if (runnerTc.status != Status.FINISHED || rcUUID.toInteger()!= 1){

			
		testCase.setPropertyValue("nodetype","retailer");
		testCase.setPropertyValue("nodeid","0701");
		testCase.setPropertyValue("username","sch-drm_user1");
		testCase.setPropertyValue("password","Password1");
		testCase.setPropertyValue("accountoid",null);
		testCase.setPropertyValue("useroid",null);
		testCase.setPropertyValue("assertid",null);
		testCase.setPropertyValue("SAMLassertion",null);
		testCase.setPropertyValue("tokentype","urn:dece:type:tokentype:usernamepassword");
		testCase.setPropertyValue("loopuntil","25");
		testCase.setPropertyValue("expectErrTypeSTS","SUCCESS");
		testCase.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
			
		log.info " SAML Assertion Expired ! re-generating Assertion";
		def RunSTS = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get SAML Assertion - STS")

				RunSTS.setPropertyValue("TCaseName",testCase.getName());
				RunSTS.setPropertyValue("TSuiteName",testSuite.getName());

				def runnerSTS = RunSTS.run( null , false )

				assert runnerSTS.status == Status.FINISHED;

		}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call LicAppCreate Request with Valid Data" disabled="true">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0");
testCase.setPropertyValue("expectErrTypeLAC","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedDeviceDDReq = testProject.getTestSuiteByName("Staging DeviceGet").getTestCaseByName("LicAppCreate Request");

FeedDeviceDDReq.setPropertyValue("TCaseName",testCase.getName());
FeedDeviceDDReq.setPropertyValue("TSuiteName",testSuite.getName());


def runnerTC = FeedDeviceDDReq.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Feed DeviceGet Request with Valid Data">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0");
testCase.setPropertyValue("DeviceID","urn:dece:deviceid:org:dece:A09D9C22F11CBC6DE0401F0A05996898");
testCase.setPropertyValue("DomainID","urn:dece:domainid:dece:A09DA589BD63A036E0401F0A05996D9A");
testCase.setPropertyValue("expectErrType","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedRTLReq = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request");

FeedRTLReq.setPropertyValue("TCaseName",testCase.getName());
FeedRTLReq.setPropertyValue("TSuiteName",testSuite.getName());

WsdlTestCaseRunner TSrunner = new WsdlTestCaseRunner( FeedRTLReq, null );

TSrunner.runTestStepByName("Get the DeviceGet Properties");
TSrunner.runTestStepByName("pem set");
assert TSrunner.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call DeviceGet Request">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )

WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );

TSrunnerRTC.runTestStepByName("DeviceGetRequest");

assert TSrunnerRTC.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract DeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Extract DeviceGet Information")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify theDeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Response Validation")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify the DeviceGet Response against DB Result">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGdataVal = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Data Validation");

RTGdataVal.setPropertyValue("TCaseName",testCase.getName());
RTGdataVal.setPropertyValue("TSuiteName",testSuite.getName());


def runnerRTC = RTGdataVal.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SAMLExpDate</con:name>
          <con:value>2013-06-14 18:31:45.0</con:value>
        </con:property>
        <con:property>
          <con:name>rcUUID</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>nodetype</con:name>
          <con:value>retailer</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>0701</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>sch-drm_user1</con:value>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>Password1</con:value>
        </con:property>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">A06A9AA49F7073D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">A06A9AA49F7973D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SAMLassertion</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">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</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>loopuntil</con:name>
          <con:value>25</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTS</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value>_a0222a18-8917-4c7c-b820-ea8c06ab3d69</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value>urn:dece:userid:org:dece:A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value>A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value>urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value>A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>AccountID</con:name>
          <con:value>urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>ErrorDataVal</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetReqXml</con:name>
          <con:value>Authorization: SAML2 assertion=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
</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResXml</con:name>
          <con:value><![CDATA[<Device IsLegacy="false" DeviceID="urn:dece:deviceid:org:dece:A09D9C22F11CBC6DE0401F0A05996898" xmlns="http://www.decellc.org/schema/2010/10/dece" xmlns:ns2="http://www.movielabs.com/schema/md/v1.07/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <DisplayName>DeviceInfoDisplayName</DisplayName>
   <Manufacturer>Microsoft</Manufacturer>
   <Model>V344</Model>
   <Brand Language="en-US">DeviceInfoBrand</Brand>
   <SerialNo>123432442323424</SerialNo>
   <Image MimeType="MimeType3" Width="50" Height="50">http://www.oxygenxml.com/1234</Image>
   <LicAppID>urn:dece:licappid:org:dece:A09D9C22F11EBC6DE0401F0A05996898</LicAppID>
   <DRMClientID>urn:dece:drmclientid:org:dece:A0E2E4B822DB1B7CE0401F0A07994404</DRMClientID>
   <ResourceStatus>
      <Current CreatedBy="urn:dece:org:org:dece:0701" CreationDate="2011-04-11T04:02:39.637Z">
         <Value>urn:dece:type:status:pending</Value>
         <Description>Device Created</Description>
      </Current>
   </ResourceStatus>
</Device>]]></con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResTime</con:name>
          <con:value>186</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceID</con:name>
          <con:value>urn:dece:deviceid:org:dece:A09D9C22F11CBC6DE0401F0A05996898</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeDVGGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>SqlStr</con:name>
          <con:value>select Status from USER_STATUS_REF where Status !='active'</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeLAC</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>DomainID</con:name>
          <con:value>urn:dece:domainid:dece:A09DA589BD63A036E0401F0A05996D9A</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00020_DeviceGet_Retailer_FUNC_with_Verify_Resource_Status" searchProperties="true">
      <con:description>This test case will verify that Application Tier properly handles a DeviceGet request when invoked with the GET method and valid header request .

Expected Result:

System should return successful message.</con:description>
      <con:settings/>
      <con:testStep type="groovy" name="Verify Node User SAML Asssertion">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.model.testsuite.TestRunner.Status


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def ValSamlAssertion = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Validate SAML Assertion");

	ValSamlAssertion.setPropertyValue("TCaseName",testCase.getName());
	ValSamlAssertion.setPropertyValue("TSuiteName",testSuite.getName());

	def runnerTc = ValSamlAssertion.run( null , false )
	assert runnerTc.status == Status.FINISHED;

	rcUUID = testCase.getPropertyValue("rcUUID");

	if (runnerTc.status != Status.FINISHED || rcUUID.toInteger()!= 1){

			
		testCase.setPropertyValue("nodetype","retailer");
		testCase.setPropertyValue("nodeid","0701");
		testCase.setPropertyValue("username","sch-drm_user1");
		testCase.setPropertyValue("password","Password1");
		testCase.setPropertyValue("accountoid",null);
		testCase.setPropertyValue("useroid",null);
		testCase.setPropertyValue("assertid",null);
		testCase.setPropertyValue("SAMLassertion",null);
		testCase.setPropertyValue("tokentype","urn:dece:type:tokentype:usernamepassword");
		testCase.setPropertyValue("loopuntil","25");
		testCase.setPropertyValue("expectErrTypeSTS","SUCCESS");
		testCase.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
			
		log.info " SAML Assertion Expired ! re-generating Assertion";
		def RunSTS = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get SAML Assertion - STS")

				RunSTS.setPropertyValue("TCaseName",testCase.getName());
				RunSTS.setPropertyValue("TSuiteName",testSuite.getName());

				def runnerSTS = RunSTS.run( null , false )

				assert runnerSTS.status == Status.FINISHED;

		}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call LicAppCreate Request with Valid Data" disabled="true">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0");
testCase.setPropertyValue("expectErrTypeLAC","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedDeviceDDReq = testProject.getTestSuiteByName("Staging DeviceGet").getTestCaseByName("LicAppCreate Request");

FeedDeviceDDReq.setPropertyValue("TCaseName",testCase.getName());
FeedDeviceDDReq.setPropertyValue("TSuiteName",testSuite.getName());


def runnerTC = FeedDeviceDDReq.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Feed DeviceGet Request with Valid Data">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0");
testCase.setPropertyValue("DeviceID","urn:dece:deviceid:org:dece:A09D9C22F11CBC6DE0401F0A05996898");
testCase.setPropertyValue("DomainID","urn:dece:domainid:dece:A09DA589BD63A036E0401F0A05996D9A");
testCase.setPropertyValue("expectErrType","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedRTLReq = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request");

FeedRTLReq.setPropertyValue("TCaseName",testCase.getName());
FeedRTLReq.setPropertyValue("TSuiteName",testSuite.getName());

WsdlTestCaseRunner TSrunner = new WsdlTestCaseRunner( FeedRTLReq, null );

TSrunner.runTestStepByName("Get the DeviceGet Properties");
TSrunner.runTestStepByName("pem set");
assert TSrunner.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call DeviceGet Request">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )

WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );

TSrunnerRTC.runTestStepByName("DeviceGetRequest");

assert TSrunnerRTC.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract DeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Extract DeviceGet Information")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify theDeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Response Validation")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify the DeviceGet Response against DB Result">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGdataVal = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Data Validation");

RTGdataVal.setPropertyValue("TCaseName",testCase.getName());
RTGdataVal.setPropertyValue("TSuiteName",testSuite.getName());


def runnerRTC = RTGdataVal.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SAMLExpDate</con:name>
          <con:value>2013-06-14 18:31:45.0</con:value>
        </con:property>
        <con:property>
          <con:name>rcUUID</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>nodetype</con:name>
          <con:value>retailer</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>0701</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>sch-drm_user1</con:value>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>Password1</con:value>
        </con:property>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">A06A9AA49F7073D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">A06A9AA49F7973D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SAMLassertion</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">nVdZk6LKEn73VxjOo2GzuBvTHVGsoqKCuODLDYQSUDYpEPTXnwJb2+7pmTPnPnTYleTyZeZHkvUTGb5HDwBCME7cMKhK3Gvtf5RlQWju9o1OyyIbrR3Zbxhmp9voQ2tHGV2qvW+1a1UJoRRKAUqMIHmt0SRFN8hOg2ppVG/QbA3o7kuX7m1r1RWMEXaNVV7IWjX3vQANyrCvtTQOBqGBXDQIDB+iQWIOFkCeDLDmwLhjqr39vKEsA8ZvTpJEA4IwXyxoQs8zX8zQJ34Sn3R+WmiwcO3ASNIYvse00Gvt3TbLspes+RLGNkGTJEmQfQLrWMi1f9TeKndjaEnBPrydWSMIA9c0PPdqFKBkmDihVQWeHcZu4vi/cU0RFFm4bsDcbJhUK/hRIz4ClOj+0tMnkDEyGsgxqLszFe5hDAMTVpeq9Fr78XcdvNlqsRGgfRj76Mv5v0GCwRl6YQStBrpndkf39x6/KdfbT2gOpMD0UuSe4bSgSWSYEFXnMdy7+cRFmHwWqpbtr+bozjBo/peW/CSecWLYxDeV4VwbouT/6ddzr25eVoaXwrfwLCjamlkRkzoQNwdySPnby1iY9LTjawnhWfkG6tHq9/NXoj549W7EbxcbcynZk1wUT0YoWgf6qkUXTrA2h2kM9euu68grQx/F4QKcdfYQtXrejJmQgGxJ11HWDX31yEDqUN9FlYO+6vVzle9vLt5SSDt9cRWt59M0IcK12Kcuk6F/WtLjBE382ZGdjXcXdTEjF0PLaMdpHuaRPdcQu5WFMTevLONepDZZY7he7erbaGr6+utHTs85FHmN4aVMsvh/0yb7nJEYjwNbTIo9fj0T+CZLEpdeWRZcFjbIJAbY+O8Apox9PDlHV+xnJAMURQAcy3gHfiKDowioJc84MrtayTl7BSPGnq6woVYB3paRVT7jMp1bKcqQzxzNEleXneil2ys/lQEqjVlH5lV+xakaL8sgvMlymduJ+UFeyJmk6FwFO+D4PLpaYj+BYu6atNSWF21aX7TT7WaF5cJl4k/PO433ZFYW2cVJXEi7JqfwI6Dqa5MWUmx7nfhRWNGXzJPRKIIHAIWMxDHBVdaOmawt6SmnGqVM+yyTJXEkKyhjlTIrscJno9Xy+lELlpFZy+dzXgPzWy1MjRWm5HYzQsa6HcgqyDi7NB7zmTW7A5EVMquwt1pN+Ezl1eVUkFUp40Ep4/jMQzt66uxE52w2lXykgcNzY1iFXwsBfh6oZ/PSPlUMUQA7f0WZTdUx3bZrbMLM3vYyTtFH43ArYTdToPAMowAMiARFarj+DJgwq/Yscvu0Cyd7IfShE1dkKhwfz9ec7LnNmT2frtvc/tidi+68aVgOIXkmfWgegSRBa0w5imGpOqFygXvtzMbLDXRj/ZpM2wrVcXvtirpOlxsu9LrWcKMvx/VcNxVtNl8s1/Nrnk9Ph97VS4YzZhgvRjJnz6YQzpFZJ0hDYLQe12b14QHzaa+SsF0BtswAIB5sm3cxgZnh4UbCoSrzmLxAZjORXbPiAohinZcYTlH2gkPNTXGVLqmpLPGWh8t00TeqV9myDIc7RRrrbaTTArnVgFU6U1q8YCvLdn20gVtl6mmrBGTRah9QFClGynAvZ7YpFwywpGzB4LeIqaQSWBqzaETm41WHpE6K5Y0WfbBs5gv6mM8ce3s52tsjbor+9OroGvBW2hPHJEyxdUXReFUGvdv7lsvSsql6pp9HO9/MOQ33rDQONYZXBYVc5hwHxjcZ0gCdI/3KH2SWL+0rIJcNTIvzbuMgPZi6M41PMWnTJ7ocdjT5rxwrKFb5zLETCxTwlWP8jWM82J/qUo+jULvDRmid2YzIn5TuajLqR6SymRwrTF0g7MT1WrOgl2nj+pq6ZF3noKzXfYlz2Hqw153mLmFI42oqcHTsiq565IJOy7vIE1lpL13Cu5AHeMrQpDKVqIBvJleB6MdpnfG3rn+9Nlv00p8v0rO0NMaIuji707qfHebDDkHE4qV97W7PirAJTf32Hfk6JB/C2xglngfspwl8370W6e4AzeR+LL7DElcV8MfRSP68xxUS12rsS9VBVCyDKIFBUnsrrIodbpDiTc+1BvjLeTsDsgP6ALT6QrfbbXJdnmyRlIC/SO1+n2oL5H3Zu6H4ApENg71bxCrW2dvH+s8ATX+wg0YM49ofPBV1qkqBirePMEBQC19rfZoUWl0e0Iwg9ADFUy22SZItjqb7/Tbf7Naq0zCZBbMY7BMYP23I7a8bsgpNN3JhsUa/7xIowYU4Gec08eiXs/ESwBTv2XGx6g66JEkTyPUjDxZwCT+0Ug++RE5UloVAt18ab3yolJJdkip3nN9m9/XZvRBYx3ILBVTkwkDcRPjNqk/dE/kl4ea3V4K7e5BabrHK4KomsWvekHx+9EGSgh0PhhQp3TE/VL8KPrklvmb0iGSdXfPB88dNCC/SeNUqLxsIN+RkvJxe0vM5/WhBjN0TFIH/W0AzxbvgRQuPMCAeLoi/WsMfqL9Efsg/40sTJ1gk+B32MV+q5fHf72CfrHEJEpgn38lYD9+6iuB/vJiZA7PQw+I5/snC2Pqo/De+nuJgyMX8cQO7OBX78+U3DTZD7NbFMyiMn51/5+C74J+Fj3o9sCSYGLs0gb9/Ui2Gy2vNMM0wDRKJq5WC54FX4kwuERx8KP3iptxg368kOfrtlWQjTxamA32j9tB1/1254ZadNyG2Qm6J5bWW49s1Dh7YTwP2HeD3M7bD/2nGfs7k7Rfxr5Knmn6l9ts/</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>loopuntil</con:name>
          <con:value>25</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTS</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value>_1ddeecbf-64d0-4b09-ac67-9edb1a715f45</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value>urn:dece:userid:org:dece:A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value>A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value>urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value>A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>AccountID</con:name>
          <con:value>urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>ErrorDataVal</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetReqXml</con:name>
          <con:value>Authorization: SAML2 assertion=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
</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResXml</con:name>
          <con:value><![CDATA[<Device IsLegacy="false" DeviceID="urn:dece:deviceid:org:dece:A09D9C22F11CBC6DE0401F0A05996898" xmlns="http://www.decellc.org/schema/2010/10/dece" xmlns:ns2="http://www.movielabs.com/schema/md/v1.07/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <DisplayName>DeviceInfoDisplayName</DisplayName>
   <Manufacturer>Microsoft</Manufacturer>
   <Model>V344</Model>
   <Brand Language="en-US">DeviceInfoBrand</Brand>
   <SerialNo>123432442323424</SerialNo>
   <Image MimeType="MimeType3" Width="50" Height="50">http://www.oxygenxml.com/1234</Image>
   <LicAppID>urn:dece:licappid:org:dece:A09D9C22F11EBC6DE0401F0A05996898</LicAppID>
   <DRMClientID>urn:dece:drmclientid:org:dece:A0E2E4B822DB1B7CE0401F0A07994404</DRMClientID>
   <ResourceStatus>
      <Current CreatedBy="urn:dece:org:org:dece:0701" CreationDate="2011-04-11T04:02:39.637Z">
         <Value>urn:dece:type:status:pending</Value>
         <Description>Device Created</Description>
      </Current>
   </ResourceStatus>
</Device>]]></con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResTime</con:name>
          <con:value>342</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceID</con:name>
          <con:value>urn:dece:deviceid:org:dece:A09D9C22F11CBC6DE0401F0A05996898</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeDVGGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>SqlStr</con:name>
          <con:value>select Status from USER_STATUS_REF where Status !='active'</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeLAC</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>DomainID</con:name>
          <con:value>urn:dece:domainid:dece:A09DA589BD63A036E0401F0A05996D9A</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:properties/>
    <con:reportParameters/>
  </con:testSuite><con:testSuite name="DeviceGet  Retailer_CS Test Cases Old" disabled="true">
    <con:description/>
    <con:settings/>
    <con:runType>SEQUENTIAL</con:runType>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00001_DeviceGet_RetailerCS_FUNC_with_ValidData" searchProperties="true">
      <con:description>This test case will verify that Application Tier properly handles a DeviceGet request when invoked with the GET method and valid header request .

Expected Result:

System should return successful message.</con:description>
      <con:settings/>
      <con:testStep type="groovy" name="Verify Node User SAML Asssertion">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.model.testsuite.TestRunner.Status


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def ValSamlAssertion = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Validate SAML Assertion");

	ValSamlAssertion.setPropertyValue("TCaseName",testCase.getName());
	ValSamlAssertion.setPropertyValue("TSuiteName",testSuite.getName());

	def runnerTc = ValSamlAssertion.run( null , false )
	assert runnerTc.status == Status.FINISHED;

	rcUUID = testCase.getPropertyValue("rcUUID");

	if (runnerTc.status != Status.FINISHED || rcUUID.toInteger()!= 1){

			
		testCase.setPropertyValue("nodetype","retailer");
		testCase.setPropertyValue("nodeid","0701");
		testCase.setPropertyValue("audienceNodeid","0702");
		testCase.setPropertyValue("username","sch-drm_user1");
		testCase.setPropertyValue("password","Password1");
		testCase.setPropertyValue("accountoid",null);
		testCase.setPropertyValue("useroid",null);
		testCase.setPropertyValue("assertid",null);
		testCase.setPropertyValue("SAMLassertion",null);
		testCase.setPropertyValue("tokentype","urn:dece:type:tokentype:usernamepassword");
		testCase.setPropertyValue("loopuntil","25");
		testCase.setPropertyValue("expectErrTypeSTS","SUCCESS");
		testCase.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
			
		log.info " SAML Assertion Expired ! re-generating Assertion";
		def RunSTS = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get SAML Assertion - STS")

				RunSTS.setPropertyValue("TCaseName",testCase.getName());
				RunSTS.setPropertyValue("TSuiteName",testSuite.getName());

				def runnerSTS = RunSTS.run( null , false )

				assert runnerSTS.status == Status.FINISHED;

		}</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call LicAppCreate Request with Valid Data" disabled="true">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0");
testCase.setPropertyValue("expectErrTypeLAC","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedDeviceDDReq = testProject.getTestSuiteByName("Staging DeviceGet").getTestCaseByName("LicAppCreate Request");

FeedDeviceDDReq.setPropertyValue("TCaseName",testCase.getName());
FeedDeviceDDReq.setPropertyValue("TSuiteName",testSuite.getName());


def runnerTC = FeedDeviceDDReq.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Feed DeviceGet Request with Valid Data">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//DeviceGet Request and properties

// setup Retailer CS Nodeid with the account
testCase.setPropertyValue("NodeID","0702");

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0");
testCase.setPropertyValue("DeviceID","urn:dece:deviceid:org:dece:A09D9C22F11CBC6DE0401F0A05996898");
testCase.setPropertyValue("DomainID","urn:dece:domainid:dece:A09DA589BD63A036E0401F0A05996D9A");
testCase.setPropertyValue("expectErrType","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedRTLReq = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request");

FeedRTLReq.setPropertyValue("TCaseName",testCase.getName());
FeedRTLReq.setPropertyValue("TSuiteName",testSuite.getName());

WsdlTestCaseRunner TSrunner = new WsdlTestCaseRunner( FeedRTLReq, null );

TSrunner.runTestStepByName("Get the DeviceGet Properties");
TSrunner.runTestStepByName("pem set");
assert TSrunner.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract DeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Extract DeviceGet Information")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call DeviceGet Request">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();



def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )

WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );

TSrunnerRTC.runTestStepByName("DeviceGetRequest");

assert TSrunnerRTC.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify theDeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Response Validation")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify the DeviceGet Response against DB Result">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGdataVal = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Data Validation");

RTGdataVal.setPropertyValue("TCaseName",testCase.getName());
RTGdataVal.setPropertyValue("TSuiteName",testSuite.getName());


def runnerRTC = RTGdataVal.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SAMLExpDate</con:name>
          <con:value>2013-06-14 18:31:45.0</con:value>
        </con:property>
        <con:property>
          <con:name>rcUUID</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>nodetype</con:name>
          <con:value>retailer</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>0702</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>sch-drm_user1</con:value>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>Password1</con:value>
        </con:property>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">A06A9AA49F7073D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">A06A9AA49F7973D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SAMLassertion</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">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</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>loopuntil</con:name>
          <con:value>25</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTS</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value>_1b2329cc-1151-4246-b92f-430b1a7ec846</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value>urn:dece:userid:org:dece:A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value>A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value>urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value>A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>AccountID</con:name>
          <con:value>urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>ErrorDataVal</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetReqXml</con:name>
          <con:value>Authorization: SAML2 assertion=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
</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResXml</con:name>
          <con:value><![CDATA[<Device IsLegacy="false" DeviceID="urn:dece:deviceid:org:dece:A09D9C22F11CBC6DE0401F0A05996898" xmlns="http://www.decellc.org/schema/2010/10/dece" xmlns:ns2="http://www.movielabs.com/schema/md/v1.07/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <DisplayName>DeviceInfoDisplayName</DisplayName>
   <Manufacturer>Microsoft</Manufacturer>
   <Model>V344</Model>
   <Brand Language="en-US">DeviceInfoBrand</Brand>
   <SerialNo>123432442323424</SerialNo>
   <Image MimeType="MimeType3" Width="50" Height="50">http://www.oxygenxml.com/1234</Image>
   <LicAppID>urn:dece:licappid:org:dece:A09D9C22F11EBC6DE0401F0A05996898</LicAppID>
   <DRMClientID>urn:dece:drmclientid:org:dece:A0E2E4B822DB1B7CE0401F0A07994404</DRMClientID>
   <ResourceStatus>
      <Current CreatedBy="urn:dece:org:org:dece:0701" CreationDate="2011-04-11T04:02:39.637Z">
         <Value>urn:dece:type:status:pending</Value>
         <Description>Device Created</Description>
      </Current>
   </ResourceStatus>
</Device>]]></con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResTime</con:name>
          <con:value>544</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceID</con:name>
          <con:value>urn:dece:deviceid:org:dece:A09D9C22F11CBC6DE0401F0A05996898</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeDVGGet</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SqlStr</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>expectErrTypeLAC</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>DomainID</con:name>
          <con:value>urn:dece:domainid:dece:A09DA589BD63A036E0401F0A05996D9A</con:value>
        </con:property>
      <con:property><con:name>audienceNodeid</con:name><con:value>0702</con:value></con:property></con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00002_DeviceGet_RetailerCS_FUNC_with_Invalid AccountID" searchProperties="true">
      <con:description>This test case will verify that Application Tier properly handles a DeviceGet request when invoked with the GET method and Invalid Account ID in request .

Expected Result:

System should return an Error message.</con:description>
      <con:settings/>
      <con:testStep type="groovy" name="Verify Node User SAML Asssertion">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.model.testsuite.TestRunner.Status


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def ValSamlAssertion = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Validate SAML Assertion");

	ValSamlAssertion.setPropertyValue("TCaseName",testCase.getName());
	ValSamlAssertion.setPropertyValue("TSuiteName",testSuite.getName());

	def runnerTc = ValSamlAssertion.run( null , false )
	assert runnerTc.status == Status.FINISHED;

	rcUUID = testCase.getPropertyValue("rcUUID");

	if (runnerTc.status != Status.FINISHED || rcUUID.toInteger()!= 1){

			
		testCase.setPropertyValue("nodetype","retailer");
		testCase.setPropertyValue("nodeid","0701");
		testCase.setPropertyValue("audienceNodeid","0702");
		testCase.setPropertyValue("username","sch-drm_user1");
		testCase.setPropertyValue("password","Password1");
		testCase.setPropertyValue("accountoid",null);
		testCase.setPropertyValue("useroid",null);
		testCase.setPropertyValue("assertid",null);
		testCase.setPropertyValue("SAMLassertion",null);
		testCase.setPropertyValue("tokentype","urn:dece:type:tokentype:usernamepassword");
		testCase.setPropertyValue("loopuntil","25");
		testCase.setPropertyValue("expectErrTypeSTS","SUCCESS");
		testCase.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
			
		log.info " SAML Assertion Expired ! re-generating Assertion";
		def RunSTS = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get SAML Assertion - STS")

				RunSTS.setPropertyValue("TCaseName",testCase.getName());
				RunSTS.setPropertyValue("TSuiteName",testSuite.getName());

				def runnerSTS = RunSTS.run( null , false )

				assert runnerSTS.status == Status.FINISHED;

		}</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call LicAppCreate Request with Valid Data" disabled="true">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0");
testCase.setPropertyValue("expectErrTypeLAC","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedDeviceDDReq = testProject.getTestSuiteByName("Staging DeviceGet").getTestCaseByName("LicAppCreate Request");

FeedDeviceDDReq.setPropertyValue("TCaseName",testCase.getName());
FeedDeviceDDReq.setPropertyValue("TSuiteName",testSuite.getName());


def runnerTC = FeedDeviceDDReq.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Feed DeviceGet Request with Invalid AccountID">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

// setup Retailer CS Nodeid with the account
testCase.setPropertyValue("NodeID","0702");

//DeviceGet Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:org:org:dece:A06A9AA49F6E73D7E0401F0A059915F0");
testCase.setPropertyValue("DeviceID","urn:dece:deviceid:org:dece:A09D9C22F11CBC6DE0401F0A05996898");
testCase.setPropertyValue("DomainID","urn:dece:domainid:dece:A09DA589BD63A036E0401F0A05996D9A");
testCase.setPropertyValue("expectErrType","ACCOUNTID NOT MATCH");
testCase.setPropertyValue("ErrorDataVal","1");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedRTLReq = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request");

FeedRTLReq.setPropertyValue("TCaseName",testCase.getName());
FeedRTLReq.setPropertyValue("TSuiteName",testSuite.getName());

WsdlTestCaseRunner TSrunner = new WsdlTestCaseRunner( FeedRTLReq, null );

TSrunner.runTestStepByName("Get the DeviceGet Properties");
TSrunner.runTestStepByName("pem set");
assert TSrunner.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call DeviceGet Request">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )

WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );

TSrunnerRTC.runTestStepByName("DeviceGetRequest");

assert TSrunnerRTC.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract DeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Extract DeviceGet Information")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify theDeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Response Validation")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SAMLExpDate</con:name>
          <con:value>2013-06-14 18:31:45.0</con:value>
        </con:property>
        <con:property>
          <con:name>rcUUID</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>nodetype</con:name>
          <con:value>retailer</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>0702</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>sch-drm_user1</con:value>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>Password1</con:value>
        </con:property>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">A06A9AA49F7073D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">A06A9AA49F7973D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SAMLassertion</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">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</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>loopuntil</con:name>
          <con:value>25</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTS</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value>_7417b530-5744-41cf-8625-85ef5986613e</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value>urn:dece:userid:org:dece:A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value>A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value>urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value>A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>AccountID</con:name>
          <con:value>urn:dece:accountid:org:org:org:dece:A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>ErrorDataVal</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>ACCOUNTID NOT MATCH</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetReqXml</con:name>
          <con:value>Authorization: SAML2 assertion=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
</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResXml</con:name>
          <con:value><![CDATA[<Device IsLegacy="false" DeviceID="urn:dece:deviceid:org:dece:A09D9C22F11CBC6DE0401F0A05996898" xmlns="http://www.decellc.org/schema/2010/10/dece" xmlns:ns2="http://www.movielabs.com/schema/md/v1.07/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <DisplayName>DeviceInfoDisplayName</DisplayName>
   <Manufacturer>Microsoft</Manufacturer>
   <Model>V344</Model>
   <Brand Language="en-US">DeviceInfoBrand</Brand>
   <SerialNo>123432442323424</SerialNo>
   <Image MimeType="MimeType3" Width="50" Height="50">http://www.oxygenxml.com/1234</Image>
   <LicAppID>urn:dece:licappid:org:dece:A09D9C22F11EBC6DE0401F0A05996898</LicAppID>
   <DRMClientID>urn:dece:drmclientid:org:dece:A0E2E4B822DB1B7CE0401F0A07994404</DRMClientID>
   <ResourceStatus>
      <Current CreatedBy="urn:dece:org:org:dece:0701" CreationDate="2011-04-11T04:02:39.637Z">
         <Value>urn:dece:type:status:pending</Value>
         <Description>Device Created</Description>
      </Current>
   </ResourceStatus>
</Device>]]></con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResTime</con:name>
          <con:value>688</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetID</con:name>
          <con:value>Request Account ID not matchhttps://qa.q.uvvu.com:7002/rest/1/0/Account/urn%3Adece%3Aaccountid%3Aorg%3Aorg%3Aorg%3Adece%3AA06A9AA49F6E73D7E0401F0A059915F0/Device/urn%3Adece%3Adeviceid%3Aorg%3Adece%3AA09D9C22F11CBC6DE0401F0A05996898/DECEDomainhttps://qa.q.uvvu.com:7002/rest/1/0/error/en/ErrorList.html#AccountIdUnmatched</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceID</con:name>
          <con:value>urn:dece:deviceid:org:dece:A09D9C22F11CBC6DE0401F0A05996898</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeDVGGet</con:name>
          <con:value>ACCOUNTID NOT MATCH</con:value>
        </con:property>
        <con:property>
          <con:name>DomainID</con:name>
          <con:value>urn:dece:domainid:dece:A09DA589BD63A036E0401F0A05996D9A</con:value>
        </con:property>
      <con:property><con:name>audienceNodeid</con:name><con:value>0702</con:value></con:property></con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00003_DeviceGet_RetailerCS_FUNC_with_Non_Existing_ AccountID" searchProperties="true">
      <con:settings/>
      <con:testStep type="groovy" name="Verify Node User SAML Asssertion">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.model.testsuite.TestRunner.Status


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def ValSamlAssertion = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Validate SAML Assertion");

	ValSamlAssertion.setPropertyValue("TCaseName",testCase.getName());
	ValSamlAssertion.setPropertyValue("TSuiteName",testSuite.getName());

	def runnerTc = ValSamlAssertion.run( null , false )
	assert runnerTc.status == Status.FINISHED;

	rcUUID = testCase.getPropertyValue("rcUUID");

	if (runnerTc.status != Status.FINISHED || rcUUID.toInteger()!= 1){

			
		testCase.setPropertyValue("nodetype","device");
		testCase.setPropertyValue("nodeid","0701");
		testCase.setPropertyValue("audienceNodeid","0702");
		testCase.setPropertyValue("username","sch-drm_user1");
		testCase.setPropertyValue("password","Password1");
		testCase.setPropertyValue("accountoid",null);
		testCase.setPropertyValue("useroid",null);
		testCase.setPropertyValue("assertid",null);
		testCase.setPropertyValue("SAMLassertion",null);
		testCase.setPropertyValue("tokentype","urn:dece:type:tokentype:usernamepassword");
		testCase.setPropertyValue("loopuntil","25");
		testCase.setPropertyValue("expectErrTypeSTS","SUCCESS");
		testCase.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
			
		log.info " SAML Assertion Expired ! re-generating Assertion";
		def RunSTS = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get SAML Assertion - STS")

				RunSTS.setPropertyValue("TCaseName",testCase.getName());
				RunSTS.setPropertyValue("TSuiteName",testSuite.getName());

				def runnerSTS = RunSTS.run( null , false )

				assert runnerSTS.status == Status.FINISHED;

		}</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call LicAppCreate Request with Valid Data" disabled="true">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0");
testCase.setPropertyValue("expectErrTypeLAC","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedDeviceDDReq = testProject.getTestSuiteByName("Staging DeviceGet").getTestCaseByName("LicAppCreate Request");

FeedDeviceDDReq.setPropertyValue("TCaseName",testCase.getName());
FeedDeviceDDReq.setPropertyValue("TSuiteName",testSuite.getName());


def runnerTC = FeedDeviceDDReq.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Feed DeviceGet Request with Non-Existing AccountID">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


// setup Retailer CS Nodeid with the account
testCase.setPropertyValue("NodeID","0702");

//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0STSTTTSTTSTSTTSST");
testCase.setPropertyValue("DeviceID","urn:dece:deviceid:org:dece:A09D9C22F11CBC6DE0401F0A05996898");
testCase.setPropertyValue("DomainID","urn:dece:domainid:dece:A09DA589BD63A036E0401F0A05996D9A");
testCase.setPropertyValue("expectErrType","ACCOUNTID NOT MATCH");
testCase.setPropertyValue("ErrorDataVal","1");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedRTLReq = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request");

FeedRTLReq.setPropertyValue("TCaseName",testCase.getName());
FeedRTLReq.setPropertyValue("TSuiteName",testSuite.getName());

WsdlTestCaseRunner TSrunner = new WsdlTestCaseRunner( FeedRTLReq, null );

TSrunner.runTestStepByName("Get the DeviceGet Properties");
TSrunner.runTestStepByName("pem set");
assert TSrunner.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call DeviceGet Request">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )

WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );

TSrunnerRTC.runTestStepByName("DeviceGetRequest");

assert TSrunnerRTC.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract DeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Extract DeviceGet Information")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify theDeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Response Validation")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>SAMLExpDate</con:name>
          <con:value>2013-06-14 18:31:45.0</con:value>
        </con:property>
        <con:property>
          <con:name>rcUUID</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>nodetype</con:name>
          <con:value>device</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>0702</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>sch-drm_user1</con:value>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>Password1</con:value>
        </con:property>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value>A06A9AA49F7073D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value>A06A9AA49F7973D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SAMLassertion</con:name>
          <con:value>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</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>loopuntil</con:name>
          <con:value>25</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTS</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value>_82a16e94-1913-4191-9987-6e4f5aaad496</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value>urn:dece:userid:org:dece:A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value>A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value>urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value>A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>AccountID</con:name>
          <con:value>urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0STSTTTSTTSTSTTSST</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceID</con:name>
          <con:value>urn:dece:deviceid:org:dece:A09D9C22F11CBC6DE0401F0A05996898</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>ACCOUNTID NOT MATCH</con:value>
        </con:property>
        <con:property>
          <con:name>ErrorDataVal</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetReqXml</con:name>
          <con:value>Authorization: SAML2 assertion=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
</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResXml</con:name>
          <con:value><![CDATA[<ErrorList xmlns="http://www.decellc.org/schema/2010/10/dece" xmlns:ns2="http://www.movielabs.com/schema/md/v1.07/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Error ErrorID="urn:dece:errorid:org:dece:AccountIdUnmatched">
      <Reason Language="en">Request Account ID not match</Reason>
      <OriginalRequest>https://qa.q.uvvu.com:7002/rest/1/0/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3AA06A9AA49F6E73D7E0401F0A059915F0STSTTTSTTSTSTTSST/Domain/urn%3Adece%3Adomainid%3Adece%3AA09DA589BD63A036E0401F0A05996D9A/Device/urn%3Adece%3Adeviceid%3Aorg%3Adece%3AA09D9C22F11CBC6DE0401F0A05996898</OriginalRequest>
      <ErrorLink>https://qa.q.uvvu.com:7002/rest/1/0/error/en/ErrorList.html#AccountIdUnmatched</ErrorLink>
   </Error>
</ErrorList>]]></con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResTime</con:name>
          <con:value>160</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetID</con:name>
          <con:value>Request Account ID not matchhttps://qa.q.uvvu.com:7002/rest/1/0/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3AA06A9AA49F6E73D7E0401F0A059915F0STSTTTSTTSTSTTSST/Device/urn%3Adece%3Adeviceid%3Aorg%3Adece%3AA09D9C22F11CBC6DE0401F0A05996898/DECEDomainhttps://qa.q.uvvu.com:7002/rest/1/0/error/en/ErrorList.html#AccountIdUnmatched</con:value>
        </con:property>
        <con:property>
          <con:name>DomainID</con:name>
          <con:value>urn:dece:domainid:dece:A09DA589BD63A036E0401F0A05996D9A</con:value>
        </con:property>
      <con:property><con:name>audienceNodeid</con:name><con:value>0702</con:value></con:property></con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00004_DeviceGet_RetailerCS_FUNC_with_Nonexistent_NodeID" searchProperties="true" disabled="true">
      <con:description>This test case will verify that Application Tier properly handles a RightsLockerDataGet  request when the nodeID supplied doesn't exist.

Expected Result:

System should return error message.</con:description>
      <con:settings/>
      <con:testStep type="groovy" name="Verify Node User SAML Asssertion">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.model.testsuite.TestRunner.Status


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def ValSamlAssertion = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Validate SAML Assertion");

	ValSamlAssertion.setPropertyValue("TCaseName",testCase.getName());
	ValSamlAssertion.setPropertyValue("TSuiteName",testSuite.getName());

	def runnerTc = ValSamlAssertion.run( null , false )
	assert runnerTc.status == Status.FINISHED;

	rcUUID = testCase.getPropertyValue("rcUUID");

	if (runnerTc.status != Status.FINISHED || rcUUID.toInteger()!= 1){

			
		testCase.setPropertyValue("nodetype","device");
		testCase.setPropertyValue("nodeid","0701");
		testCase.setPropertyValue("username","sch-drm_user1");
		testCase.setPropertyValue("password","Password1");
		testCase.setPropertyValue("accountoid",null);
		testCase.setPropertyValue("useroid",null);
		testCase.setPropertyValue("assertid",null);
		testCase.setPropertyValue("SAMLassertion",null);
		testCase.setPropertyValue("tokentype","urn:dece:type:tokentype:usernamepassword");
		testCase.setPropertyValue("loopuntil","25");
		testCase.setPropertyValue("expectErrTypeSTS","SUCCESS");
		testCase.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
			
		log.info " SAML Assertion Expired ! re-generating Assertion";
		def RunSTS = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get SAML Assertion - STS")

				RunSTS.setPropertyValue("TCaseName",testCase.getName());
				RunSTS.setPropertyValue("TSuiteName",testSuite.getName());

				def runnerSTS = RunSTS.run( null , false )

				assert runnerSTS.status == Status.FINISHED;

		}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call LicAppCreate Request with Valid Data" disabled="true">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0");
testCase.setPropertyValue("expectErrTypeLAC","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedDeviceDDReq = testProject.getTestSuiteByName("Staging DeviceGet").getTestCaseByName("LicAppCreate Request");

FeedDeviceDDReq.setPropertyValue("TCaseName",testCase.getName());
FeedDeviceDDReq.setPropertyValue("TSuiteName",testSuite.getName());


def runnerTC = FeedDeviceDDReq.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Feed DeviceGet Request with Non-Existing NodeID">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0");
testCase.setPropertyValue("DeviceID","urn:dece:deviceid:org:dece:A09D9C22F11CBC6DE0401F0A05996898");
testCase.setPropertyValue("DomainID","urn:dece:domainid:dece:A09DA589BD63A036E0401F0A05996D9A");
testCase.setPropertyValue("expectErrType","FORBIDDEN");
testCase.setPropertyValue("ErrorDataVal","1");

// setup Non-Existing Nodeid with the account
testCase.setPropertyValue("NodeID","700030");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedRTLReq = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request");

FeedRTLReq.setPropertyValue("TCaseName",testCase.getName());
FeedRTLReq.setPropertyValue("TSuiteName",testSuite.getName());

WsdlTestCaseRunner TSrunner = new WsdlTestCaseRunner( FeedRTLReq, null );

TSrunner.runTestStepByName("Get the DeviceGet Properties");
TSrunner.runTestStepByName("pem set");
assert TSrunner.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call DeviceGet Request">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )

WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );

TSrunnerRTC.runTestStepByName("DeviceGetRequest");

assert TSrunnerRTC.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract DeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Extract DeviceGet Information")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify theDeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Response Validation")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Re-Set Node id">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("NodeID","0701");</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value>30570</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>SAMLExpDate</con:name>
          <con:value>2012-04-18 16:10:01.0</con:value>
        </con:property>
        <con:property>
          <con:name>rcUUID</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>nodetype</con:name>
          <con:value>device</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>700030</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>sch-drm_user1</con:value>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>Password1</con:value>
        </con:property>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value>A06A9AA49F7073D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value>A06A9AA49F7973D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SAMLassertion</con:name>
          <con:value>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</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>loopuntil</con:name>
          <con:value>25</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTS</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value>17478c99-a1eb-4499-be1d-cca4ae630020</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value>urn:dece:userid:org:dece:A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value>A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value>urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value>A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>AccountID</con:name>
          <con:value>urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeRTLGet</con:name>
          <con:value>FORBIDDEN</con:value>
        </con:property>
        <con:property>
          <con:name>ErrorDataVal</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>RightsResXml</con:name>
          <con:value><![CDATA[<ErrorList xmlns="http://www.decellc.org/schema/2010/10/dece" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Error ErrorID="token_rejected">
      <Reason>CN specified and Audience in Affiliation are disjoint</Reason>
      <OriginalRequest/>
      <ErrorLink/>
   </Error>
</ErrorList>]]></con:value>
        </con:property>
        <con:property>
          <con:name>RightsResTime</con:name>
          <con:value>373</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceID</con:name>
          <con:value>urn:dece:deviceid:org:dece:A09D9C22F11CBC6DE0401F0A05996898</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>FORBIDDEN</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetReqXml</con:name>
          <con:value>Host: qa.q.uvvu.com:7002</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResXml</con:name>
          <con:value><![CDATA[<ErrorList xmlns="http://www.decellc.org/schema/2010/10/dece" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Error ErrorID="token_rejected">
      <Reason>CN specified and Audience in Affiliation are disjoint</Reason>
      <OriginalRequest/>
      <ErrorLink/>
   </Error>
</ErrorList>]]></con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResTime</con:name>
          <con:value>420</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetID</con:name>
          <con:value>CN specified and Audience in Affiliation are disjoint</con:value>
        </con:property>
        <con:property>
          <con:name>DomainID</con:name>
          <con:value>urn:dece:domainid:dece:A09DA589BD63A036E0401F0A05996D9A</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00008_DeviceGet_RetailerCS_FUNC_HouseholdAccount_User_Status_Inactive" searchProperties="true" disabled="true">
      <con:description>This test case will verify that Application Tier properly handles a DeviceGet request when invoked with the GET method and Invalid Account ID in request .

Expected Result:

System should return an Error message.</con:description>
      <con:settings/>
      <con:testStep type="groovy" name="Verify Node User SAML Asssertion">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.model.testsuite.TestRunner.Status


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def ValSamlAssertion = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Validate SAML Assertion");

	ValSamlAssertion.setPropertyValue("TCaseName",testCase.getName());
	ValSamlAssertion.setPropertyValue("TSuiteName",testSuite.getName());

	def runnerTc = ValSamlAssertion.run( null , false )
	assert runnerTc.status == Status.FINISHED;

	rcUUID = testCase.getPropertyValue("rcUUID");

	if (runnerTc.status != Status.FINISHED || rcUUID.toInteger()!= 1){

			
		testCase.setPropertyValue("nodetype","device");
		testCase.setPropertyValue("nodeid","0701");
		testCase.setPropertyValue("username","sch-drm_user1");
		testCase.setPropertyValue("password","Password1");
		testCase.setPropertyValue("accountoid",null);
		testCase.setPropertyValue("useroid",null);
		testCase.setPropertyValue("assertid",null);
		testCase.setPropertyValue("SAMLassertion",null);
		testCase.setPropertyValue("tokentype","urn:dece:type:tokentype:usernamepassword");
		testCase.setPropertyValue("loopuntil","25");
		testCase.setPropertyValue("expectErrTypeSTS","SUCCESS");
		testCase.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
			
		log.info " SAML Assertion Expired ! re-generating Assertion";
		def RunSTS = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get SAML Assertion - STS")

				RunSTS.setPropertyValue("TCaseName",testCase.getName());
				RunSTS.setPropertyValue("TSuiteName",testSuite.getName());

				def runnerSTS = RunSTS.run( null , false )

				assert runnerSTS.status == Status.FINISHED;

		}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call LicAppCreate Request with Valid Data" disabled="true">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0");
testCase.setPropertyValue("expectErrTypeLAC","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedDeviceDDReq = testProject.getTestSuiteByName("Staging DeviceGet").getTestCaseByName("LicAppCreate Request");

FeedDeviceDDReq.setPropertyValue("TCaseName",testCase.getName());
FeedDeviceDDReq.setPropertyValue("TSuiteName",testSuite.getName());


def runnerTC = FeedDeviceDDReq.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Get User Inactive Statuses">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def GetUserStatus = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get-Set User Status");

// Get ALL inactive Status from USER_STATUS_REF Except = 'Pending'

SqlStr = "select Status from USER_STATUS_REF where Status !='active'";

testCase.setPropertyValue("SqlStr",SqlStr);

GetUserStatus.setPropertyValue("TCaseName",testCase.getName());
GetUserStatus.setPropertyValue("TSuiteName",testSuite.getName());

WsdlTestCaseRunner TSrunner = new WsdlTestCaseRunner( GetUserStatus, null );

TSrunner.runTestStepByName("Get User Status for DVG");

assert TSrunner.status == Status.INITIALIZED;

 log.info " Current User Status: " + testCase.getPropertyValue("UserStatus");

testCase.getPropertyValue("UserStatusXML");</script>
        </con:config>
      </con:testStep>
      <con:testStep type="datasource" name="Feed DataSource for Inactive User Statuses">
        <con:settings/>
        <con:config xsi:type="con:DataSourceStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dataSource type="XML">
            <con:configuration><sourceStep>Get User Inactive Statuses</sourceStep><sourceProperty>result</sourceProperty><rowPath>//Results[1]/ResultSet[1]/Row</rowPath><columnPath>STATUS</columnPath></con:configuration>
          </con:dataSource>
          <con:property>UserStatus</con:property>
          <con:restartOnRun>true</con:restartOnRun>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Feed DeviceGet Request with Inactive User">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


// setup Retailer CS Nodeid with the account
testCase.setPropertyValue("NodeID","0702");


//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0");
testCase.setPropertyValue("DeviceID","urn:dece:deviceid:org:dece:A09D9C22F11CBC6DE0401F0A05996898");
testCase.setPropertyValue("DomainID","urn:dece:domainid:dece:A09DA589BD63A036E0401F0A05996D9A");
testCase.setPropertyValue("expectErrType","USER_NOT_ACTIVE");
testCase.setPropertyValue("ErrorDataVal","1");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedRTLReq = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request");

FeedRTLReq.setPropertyValue("TCaseName",testCase.getName());
FeedRTLReq.setPropertyValue("TSuiteName",testSuite.getName());

WsdlTestCaseRunner TSrunner = new WsdlTestCaseRunner( FeedRTLReq, null );

TSrunner.runTestStepByName("Get the DeviceGet Properties");
TSrunner.runTestStepByName("pem set");
assert TSrunner.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="SetUp User Inactive Status for DVG">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

// SetUp the Node Status from the Data Source

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

// Get NodeStatus Values from Data Source

def DsUserStatus = testRunner.testCase.testSteps['Feed DataSource for Inactive User Statuses'];
log.info  "User Status is to set to: " + DsUserStatus.getPropertyValue("UserStatus");

testCase.setPropertyValue("UserStatus",DsUserStatus.getPropertyValue("UserStatus"));

def SetUserStatus = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get-Set User Status");

SetUserStatus.setPropertyValue("TCaseName",testCase.getName());
SetUserStatus.setPropertyValue("TSuiteName",testSuite.getName());

WsdlTestCaseRunner TSrunner = new WsdlTestCaseRunner( SetUserStatus, null );

TSrunner.runTestStepByName("Set User Status for DVG")

assert TSrunner.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call DeviceGet Request">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )

WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );

TSrunnerRTC.runTestStepByName("DeviceGetRequest");

assert TSrunnerRTC.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract DeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Extract DeviceGet Information")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify theDeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Response Validation")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="datasourceloop" name="DataSource Loop">
        <con:settings/>
        <con:config>
          <dataSourceStep>Feed DataSource for Inactive User Statuses</dataSourceStep>
          <targetStep>SetUp User Inactive Status for DVG</targetStep>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Re-Set User Status to Active">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

// SetUp the Node Status from the Data Source

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

// Re - Set NodeStatus Value to Active


def SetUserStatus = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get-Set User Status");

SetUserStatus.setPropertyValue("TCaseName",testCase.getName());
SetUserStatus.setPropertyValue("TSuiteName",testSuite.getName());

testCase.setPropertyValue("UserStatus", "active");
log.info " Re-Set User Status to : " + testCase.getPropertyValue("UserStatus");

WsdlTestCaseRunner TSrunner = new WsdlTestCaseRunner( SetUserStatus, null );

TSrunner.runTestStepByName("Set User Status for DVG")

assert TSrunner.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SAMLExpDate</con:name>
          <con:value>2012-04-18 16:10:01.0</con:value>
        </con:property>
        <con:property>
          <con:name>rcUUID</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>nodetype</con:name>
          <con:value>device</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>0701</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>sch-drm_user1</con:value>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>Password1</con:value>
        </con:property>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">A06A9AA49F7073D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">A06A9AA49F7973D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SAMLassertion</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">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</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>loopuntil</con:name>
          <con:value>25</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTS</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value>b4ef90ff-31db-4ccf-88cf-dca18a1014ed</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value>urn:dece:userid:org:dece:A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value>A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value>urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value>A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>AccountID</con:name>
          <con:value>urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>ErrorDataVal</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>USER_NOT_ACTIVE</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetReqXml</con:name>
          <con:value>Host: qa.q.uvvu.com:7002</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResXml</con:name>
          <con:value><![CDATA[<ErrorList xmlns="http://www.decellc.org/schema/2010/10/dece" xmlns:ns2="http://www.movielabs.com/schema/md/v1.07/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Error ErrorID="urn:dece:errorid:org:dece:RequestorNotActive">
      <Reason Language="en">The requestor is not active.</Reason>
      <OriginalRequest>https://qa.q.uvvu.com:7002/rest/1/0/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3AA06A9AA49F6E73D7E0401F0A059915F0/Domain/urn%3Adece%3Adomainid%3Adece%3AA09DA589BD63A036E0401F0A05996D9A/Device/urn%3Adece%3Adeviceid%3Aorg%3Adece%3AA09D9C22F11CBC6DE0401F0A05996898</OriginalRequest>
      <ErrorLink>https://qa.q.uvvu.com:7002/rest/1/0/error/en/ErrorList.html#RequestorNotActive</ErrorLink>
   </Error>
</ErrorList>]]></con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResTime</con:name>
          <con:value>144</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetID</con:name>
          <con:value>The identified user is not active.https://qa.q.uvvu.com:7002/rest/1/0/Account/urn%3Adece%3Aaccountid%3Aorg%3Aorg%3Aorg%3Adece%3AA06A9AA49F6E73D7E0401F0A059915F0/Device/urn%3Adece%3Adeviceid%3Aorg%3Adece%3AA09D9C22F11CBC6DE0401F0A05996898/DECEDomainhttps://qa.q.uvvu.com:7002/rest/1/0/error/en/ErrorList.html#UserNotActive</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceID</con:name>
          <con:value/>
        </con:property>
        <con:property>
          <con:name>expectErrTypeDVGGet</con:name>
          <con:value>ACCOUNTID NOT MATCH</con:value>
        </con:property>
        <con:property>
          <con:name>SqlStr</con:name>
          <con:value>select Status from USER_STATUS_REF where Status !='active'</con:value>
        </con:property>
        <con:property>
          <con:name>UserStatusXML</con:name>
          <con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <STATUS>archived</STATUS>
    </Row>
    <Row rowNumber='2'>
      <STATUS>blocked</STATUS>
    </Row>
    <Row rowNumber='3'>
      <STATUS>blocked:clg</STATUS>
    </Row>
    <Row rowNumber='4'>
      <STATUS>blocked:tou</STATUS>
    </Row>
    <Row rowNumber='5'>
      <STATUS>deleted</STATUS>
    </Row>
    <Row rowNumber='6'>
      <STATUS>forceddelete</STATUS>
    </Row>
    <Row rowNumber='7'>
      <STATUS>other</STATUS>
    </Row>
    <Row rowNumber='8'>
      <STATUS>pending</STATUS>
    </Row>
    <Row rowNumber='9'>
      <STATUS>suspended</STATUS>
    </Row>
  </ResultSet>
</Results>]]></con:value>
        </con:property>
        <con:property>
          <con:name>UserStatus</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceStatusXML</con:name>
          <con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <STATUS>archived</STATUS>
    </Row>
    <Row rowNumber='2'>
      <STATUS>blocked</STATUS>
    </Row>
    <Row rowNumber='3'>
      <STATUS>blocked:clg</STATUS>
    </Row>
    <Row rowNumber='4'>
      <STATUS>blocked:tou</STATUS>
    </Row>
    <Row rowNumber='5'>
      <STATUS>deleted</STATUS>
    </Row>
    <Row rowNumber='6'>
      <STATUS>forceddelete</STATUS>
    </Row>
    <Row rowNumber='7'>
      <STATUS>other</STATUS>
    </Row>
    <Row rowNumber='8'>
      <STATUS>pending</STATUS>
    </Row>
    <Row rowNumber='9'>
      <STATUS>suspended</STATUS>
    </Row>
  </ResultSet>
</Results>]]></con:value>
        </con:property>
        <con:property>
          <con:name>DomainID</con:name>
          <con:value>urn:dece:domainid:dece:A09DA589BD63A036E0401F0A05996D9A</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00005_DeviceGet_RetailerCS_FUNC_with_Invalid_NodeID" searchProperties="true" disabled="true">
      <con:description>This test case will verify that Application Tier properly handles a RightsLockerDataGet  request when the nodeID supplied doesn't exist.

Expected Result:

System should return error message.</con:description>
      <con:settings/>
      <con:testStep type="groovy" name="Verify Node User SAML Asssertion">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.model.testsuite.TestRunner.Status


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def ValSamlAssertion = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Validate SAML Assertion");

	ValSamlAssertion.setPropertyValue("TCaseName",testCase.getName());
	ValSamlAssertion.setPropertyValue("TSuiteName",testSuite.getName());

	def runnerTc = ValSamlAssertion.run( null , false )
	assert runnerTc.status == Status.FINISHED;

	rcUUID = testCase.getPropertyValue("rcUUID");

	if (runnerTc.status != Status.FINISHED || rcUUID.toInteger()!= 1){

			
		testCase.setPropertyValue("nodetype","device");
		testCase.setPropertyValue("nodeid","0701");
		testCase.setPropertyValue("username","sch-drm_user1");
		testCase.setPropertyValue("password","Password1");
		testCase.setPropertyValue("accountoid",null);
		testCase.setPropertyValue("useroid",null);
		testCase.setPropertyValue("assertid",null);
		testCase.setPropertyValue("SAMLassertion",null);
		testCase.setPropertyValue("tokentype","urn:dece:type:tokentype:usernamepassword");
		testCase.setPropertyValue("loopuntil","25");
		testCase.setPropertyValue("expectErrTypeSTS","SUCCESS");
		testCase.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
			
		log.info " SAML Assertion Expired ! re-generating Assertion";
		def RunSTS = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get SAML Assertion - STS")

				RunSTS.setPropertyValue("TCaseName",testCase.getName());
				RunSTS.setPropertyValue("TSuiteName",testSuite.getName());

				def runnerSTS = RunSTS.run( null , false )

				assert runnerSTS.status == Status.FINISHED;

		}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call LicAppCreate Request with Valid Data" disabled="true">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0");
testCase.setPropertyValue("expectErrTypeLAC","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedDeviceDDReq = testProject.getTestSuiteByName("Staging DeviceGet").getTestCaseByName("LicAppCreate Request");

FeedDeviceDDReq.setPropertyValue("TCaseName",testCase.getName());
FeedDeviceDDReq.setPropertyValue("TSuiteName",testSuite.getName());


def runnerTC = FeedDeviceDDReq.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Feed DeviceGet Request with Invalid NodeID">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


// setup Retailer CS Nodeid with the account
testCase.setPropertyValue("NodeID","0702");


//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0");
testCase.setPropertyValue("DeviceID","urn:dece:deviceid:org:dece:A09D9C22F11CBC6DE0401F0A05996898");
testCase.setPropertyValue("DomainID","urn:dece:domainid:dece:A09DA589BD63A036E0401F0A05996D9A");
testCase.setPropertyValue("expectErrType","FORBIDDEN");
testCase.setPropertyValue("ErrorDataVal","1");

// setup Non-Existing Nodeid with the account
testCase.setPropertyValue("NodeID","700030");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedRTLReq = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request");

FeedRTLReq.setPropertyValue("TCaseName",testCase.getName());
FeedRTLReq.setPropertyValue("TSuiteName",testSuite.getName());

WsdlTestCaseRunner TSrunner = new WsdlTestCaseRunner( FeedRTLReq, null );

TSrunner.runTestStepByName("Get the DeviceGet Properties");
TSrunner.runTestStepByName("pem set");
assert TSrunner.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call DeviceGet Request">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )

WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );

TSrunnerRTC.runTestStepByName("DeviceGetRequest");

assert TSrunnerRTC.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract DeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Extract DeviceGet Information")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify theDeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Response Validation")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Re-Set Node id">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("NodeID","0701");</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value>30570</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>SAMLExpDate</con:name>
          <con:value>2012-04-18 16:10:01.0</con:value>
        </con:property>
        <con:property>
          <con:name>rcUUID</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>nodetype</con:name>
          <con:value>device</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>700030</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>sch-drm_user1</con:value>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>Password1</con:value>
        </con:property>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value>A06A9AA49F7073D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value>A06A9AA49F7973D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SAMLassertion</con:name>
          <con:value>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</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>loopuntil</con:name>
          <con:value>25</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTS</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value>4e143295-7885-45a8-8193-1ae9d4693879</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value>urn:dece:userid:org:dece:A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value>A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value>urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value>A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>AccountID</con:name>
          <con:value>urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeRTLGet</con:name>
          <con:value>FORBIDDEN</con:value>
        </con:property>
        <con:property>
          <con:name>ErrorDataVal</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>RightsResXml</con:name>
          <con:value><![CDATA[<ErrorList xmlns="http://www.decellc.org/schema/2010/10/dece" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Error ErrorID="token_rejected">
      <Reason>CN specified and Audience in Affiliation are disjoint</Reason>
      <OriginalRequest/>
      <ErrorLink/>
   </Error>
</ErrorList>]]></con:value>
        </con:property>
        <con:property>
          <con:name>RightsResTime</con:name>
          <con:value>373</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceID</con:name>
          <con:value>urn:dece:deviceid:org:dece:A09D9C22F11CBC6DE0401F0A05996898</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>FORBIDDEN</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetReqXml</con:name>
          <con:value>Host: qa.q.uvvu.com:7002</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResXml</con:name>
          <con:value><![CDATA[<ErrorList xmlns="http://www.decellc.org/schema/2010/10/dece" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Error ErrorID="token_rejected">
      <Reason>CN specified and Audience in Affiliation are disjoint</Reason>
      <OriginalRequest/>
      <ErrorLink/>
   </Error>
</ErrorList>]]></con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResTime</con:name>
          <con:value>442</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetID</con:name>
          <con:value>CN specified and Audience in Affiliation are disjoint</con:value>
        </con:property>
        <con:property>
          <con:name>DomainID</con:name>
          <con:value>urn:dece:domainid:dece:A09DA589BD63A036E0401F0A05996D9A</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00006_DeviceGet_RetailerCS_FUNC_with_Inactive NodeID" searchProperties="true" disabled="true">
      <con:description>This test case will verify that Application Tier properly handles a DeviceGet request when invoked with the GET method and Inactive NodeID in request .

Expected Result:

System should return Error message.</con:description>
      <con:settings/>
      <con:testStep type="groovy" name="Verify Node User SAML Asssertion">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.model.testsuite.TestRunner.Status


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def ValSamlAssertion = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Validate SAML Assertion");

	ValSamlAssertion.setPropertyValue("TCaseName",testCase.getName());
	ValSamlAssertion.setPropertyValue("TSuiteName",testSuite.getName());

	def runnerTc = ValSamlAssertion.run( null , false )
	assert runnerTc.status == Status.FINISHED;

	rcUUID = testCase.getPropertyValue("rcUUID");

	if (runnerTc.status != Status.FINISHED || rcUUID.toInteger()!= 1){

			
		testCase.setPropertyValue("nodetype","device");
		testCase.setPropertyValue("nodeid","0701");
		testCase.setPropertyValue("username","sch-drm_user1");
		testCase.setPropertyValue("password","Password1");
		testCase.setPropertyValue("accountoid",null);
		testCase.setPropertyValue("useroid",null);
		testCase.setPropertyValue("assertid",null);
		testCase.setPropertyValue("SAMLassertion",null);
		testCase.setPropertyValue("tokentype","urn:dece:type:tokentype:usernamepassword");
		testCase.setPropertyValue("loopuntil","25");
		testCase.setPropertyValue("expectErrTypeSTS","SUCCESS");
		testCase.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
			
		log.info " SAML Assertion Expired ! re-generating Assertion";
		def RunSTS = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get SAML Assertion - STS")

				RunSTS.setPropertyValue("TCaseName",testCase.getName());
				RunSTS.setPropertyValue("TSuiteName",testSuite.getName());

				def runnerSTS = RunSTS.run( null , false )

				assert runnerSTS.status == Status.FINISHED;

		}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call LicAppCreate Request with Valid Data" disabled="true">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0");
testCase.setPropertyValue("expectErrTypeLAC","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedDeviceDDReq = testProject.getTestSuiteByName("Staging DeviceGet").getTestCaseByName("LicAppCreate Request");

FeedDeviceDDReq.setPropertyValue("TCaseName",testCase.getName());
FeedDeviceDDReq.setPropertyValue("TSuiteName",testSuite.getName());


def runnerTC = FeedDeviceDDReq.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Get Node Inactive Statuses">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def GetNodeStatus = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get-Set Node Statuses");

GetNodeStatus.setPropertyValue("TCaseName",testCase.getName());
GetNodeStatus.setPropertyValue("TSuiteName",testSuite.getName());

WsdlTestCaseRunner TSrunner = new WsdlTestCaseRunner( GetNodeStatus, null );

TSrunner.runTestStepByName("Get Node Statuses for DVG");

assert TSrunner.status == Status.INITIALIZED;

testCase.getPropertyValue("NodeStatusXML");</script>
        </con:config>
      </con:testStep>
      <con:testStep type="datasource" name="Feed DataSource for Inactive Node Statuses">
        <con:settings/>
        <con:config xsi:type="con:DataSourceStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dataSource type="XML">
            <con:configuration><sourceStep>Get Node Inactive Statuses</sourceStep><sourceProperty>result</sourceProperty><rowPath>//Results[1]/ResultSet[1]/Row</rowPath><columnPath>STATUS</columnPath></con:configuration>
          </con:dataSource>
          <con:property>NodeStatus</con:property>
          <con:restartOnRun>true</con:restartOnRun>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="SetUp Node Inactive Status for DVG">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

// SetUp the Node Status from the Data Source

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

// Get NodeStatus Values from Data Source

def DsNodeStatus = testRunner.testCase.testSteps['Feed DataSource for Inactive Node Statuses'];
log.info  "Node Status is to set to: " + DsNodeStatus.getPropertyValue("NodeStatus");

testCase.setPropertyValue("NodeStatus",DsNodeStatus.getPropertyValue("NodeStatus"));

def SetNodeStatus = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get-Set Node Statuses");

SetNodeStatus.setPropertyValue("TCaseName",testCase.getName());
SetNodeStatus.setPropertyValue("TSuiteName",testSuite.getName());

WsdlTestCaseRunner TSrunner = new WsdlTestCaseRunner( SetNodeStatus, null );

TSrunner.runTestStepByName("Set Node Statuses for DVG")

assert TSrunner.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Feed DeviceGet Request with Inactive NodeID">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();



// setup Retailer CS Nodeid with the account
testCase.setPropertyValue("NodeID","0702");

//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0");
testCase.setPropertyValue("DeviceID","urn:dece:deviceid:org:dece:A09D9C22F11CBC6DE0401F0A05996898");
testCase.setPropertyValue("DomainID","urn:dece:domainid:dece:A09DA589BD63A036E0401F0A05996D9A");
testCase.setPropertyValue("expectErrType","Node_status_inactive");
testCase.setPropertyValue("ErrorDataVal","1");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedRTLReq = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request");

FeedRTLReq.setPropertyValue("TCaseName",testCase.getName());
FeedRTLReq.setPropertyValue("TSuiteName",testSuite.getName());

WsdlTestCaseRunner TSrunner = new WsdlTestCaseRunner( FeedRTLReq, null );

TSrunner.runTestStepByName("Get the DeviceGet Properties");
TSrunner.runTestStepByName("pem set");
assert TSrunner.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call DeviceGet Request">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )

WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );

TSrunnerRTC.runTestStepByName("DeviceGetRequest");

assert TSrunnerRTC.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract DeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Extract DeviceGet Information")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify theDeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Response Validation")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="datasourceloop" name="DataSource Loop">
        <con:settings/>
        <con:config>
          <dataSourceStep>Feed DataSource for Inactive Node Statuses</dataSourceStep>
          <targetStep>SetUp Node Inactive Status for DVG</targetStep>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Re-Set Node Status to Active">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

// SetUp the Node Status from the Data Source

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

// Re - Set NodeStatus Value to Active


def SetNodeStatus = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get-Set Node Statuses");

SetNodeStatus.setPropertyValue("TCaseName",testCase.getName());
SetNodeStatus.setPropertyValue("TSuiteName",testSuite.getName());

testCase.setPropertyValue("NodeStatus","active");

WsdlTestCaseRunner TSrunner = new WsdlTestCaseRunner( SetNodeStatus, null );

TSrunner.runTestStepByName("Set Node Statuses for DVG")

assert TSrunner.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SAMLExpDate</con:name>
          <con:value>2012-04-18 16:10:01.0</con:value>
        </con:property>
        <con:property>
          <con:name>rcUUID</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>nodetype</con:name>
          <con:value>device</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>0701</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>sch-drm_user1</con:value>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>Password1</con:value>
        </con:property>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">A06A9AA49F7073D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">A06A9AA49F7973D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SAMLassertion</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">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</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>loopuntil</con:name>
          <con:value>25</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTS</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value>7974c863-47db-4b50-95a0-8cc4c83ae4a8</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value>urn:dece:userid:org:dece:A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value>A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value>urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value>A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>AccountID</con:name>
          <con:value>urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>ErrorDataVal</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>Node_status_inactive</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetReqXml</con:name>
          <con:value>Host: qa.q.uvvu.com:7002</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResXml</con:name>
          <con:value><![CDATA[<ErrorList xmlns="http://www.decellc.org/schema/2010/10/dece" xmlns:ns2="http://www.movielabs.com/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Error ErrorID="Bad_Request">
      <Reason>Node_status_inactive</Reason>
      <OriginalRequest/>
      <ErrorLink/>
   </Error>
</ErrorList>]]></con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResTime</con:name>
          <con:value>454</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetID</con:name>
          <con:value>Node_status_inactive</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceID</con:name>
          <con:value>urn:dece:deviceid:org:dece:A09D9C22F11CBC6DE0401F0A05996898</con:value>
        </con:property>
        <con:property>
          <con:name>NodeStatusXML</con:name>
          <con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <STATUS>deleted</STATUS>
    </Row>
    <Row rowNumber='2'>
      <STATUS>pending</STATUS>
    </Row>
    <Row rowNumber='3'>
      <STATUS>suspended</STATUS>
    </Row>
  </ResultSet>
</Results>]]></con:value>
        </con:property>
        <con:property>
          <con:name>NodeStatus</con:name>
          <con:value>deleted</con:value>
        </con:property>
        <con:property>
          <con:name>DomainID</con:name>
          <con:value>urn:dece:domainid:dece:A09DA589BD63A036E0401F0A05996D9A</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00007_DeviceGet_RetailerCS_FUNC_with_InActive AccountID_CS_ROLE_Allowed" searchProperties="true">
      <con:description>This test case will verify that Application Tier properly handles a DeviceGet request when invoked with the GET method and Invalid Account ID in request .

Expected Result:

System should return an Error message.</con:description>
      <con:settings/>
      <con:testStep type="groovy" name="Verify Node User SAML Asssertion">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.model.testsuite.TestRunner.Status


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def ValSamlAssertion = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Validate SAML Assertion");

	ValSamlAssertion.setPropertyValue("TCaseName",testCase.getName());
	ValSamlAssertion.setPropertyValue("TSuiteName",testSuite.getName());

	def runnerTc = ValSamlAssertion.run( null , false )
	assert runnerTc.status == Status.FINISHED;

	rcUUID = testCase.getPropertyValue("rcUUID");

	if (runnerTc.status != Status.FINISHED || rcUUID.toInteger()!= 1){

			
		testCase.setPropertyValue("nodetype","device");
		testCase.setPropertyValue("nodeid","0701");
		testCase.setPropertyValue("audienceNodeid","0702");
		testCase.setPropertyValue("username","sch-drm_user1");
		testCase.setPropertyValue("password","Password1");
		testCase.setPropertyValue("accountoid",null);
		testCase.setPropertyValue("useroid",null);
		testCase.setPropertyValue("assertid",null);
		testCase.setPropertyValue("SAMLassertion",null);
		testCase.setPropertyValue("tokentype","urn:dece:type:tokentype:usernamepassword");
		testCase.setPropertyValue("loopuntil","25");
		testCase.setPropertyValue("expectErrTypeSTS","SUCCESS");
		testCase.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
			
		log.info " SAML Assertion Expired ! re-generating Assertion";
		def RunSTS = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get SAML Assertion - STS")

				RunSTS.setPropertyValue("TCaseName",testCase.getName());
				RunSTS.setPropertyValue("TSuiteName",testSuite.getName());

				def runnerSTS = RunSTS.run( null , false )

				assert runnerSTS.status == Status.FINISHED;

		}</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call LicAppCreate Request with Valid Data" disabled="true">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0");
testCase.setPropertyValue("expectErrTypeLAC","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedDeviceDDReq = testProject.getTestSuiteByName("Staging DeviceGet").getTestCaseByName("LicAppCreate Request");

FeedDeviceDDReq.setPropertyValue("TCaseName",testCase.getName());
FeedDeviceDDReq.setPropertyValue("TSuiteName",testSuite.getName());


def runnerTC = FeedDeviceDDReq.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Get Account Inactive Statuses">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def GetAccountStatus = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get-Set Account Status");

// Get ALL inactive Status from ACCOUNT_STATUS_REF Except = 'Pending'

SqlStr = "select Status from ACCOUNT_STATUS_REF where Status !='active' AND Status !='forceddelete' AND Status !='suspended' AND Status !='other'";

testCase.setPropertyValue("SqlStr",SqlStr);

GetAccountStatus.setPropertyValue("TCaseName",testCase.getName());
GetAccountStatus.setPropertyValue("TSuiteName",testSuite.getName());

WsdlTestCaseRunner TSrunner = new WsdlTestCaseRunner( GetAccountStatus, null );

TSrunner.runTestStepByName("Get Account Status for DVG");

assert TSrunner.status == Status.INITIALIZED;

 log.info " Current Account Status: " + testCase.getPropertyValue("AccountStatus");

testCase.getPropertyValue("AccountStatusXML");</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Feed DeviceGet Request with Inactive AccountID">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


// setup Retailer CS Nodeid with the account
testCase.setPropertyValue("NodeID","0702");


//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0");
testCase.setPropertyValue("DeviceID","urn:dece:deviceid:org:dece:A09D9C22F11CBC6DE0401F0A05996898");
testCase.setPropertyValue("DomainID","urn:dece:domainid:dece:A09DA589BD63A036E0401F0A05996D9A");
testCase.setPropertyValue("expectErrType","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedRTLReq = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request");

FeedRTLReq.setPropertyValue("TCaseName",testCase.getName());
FeedRTLReq.setPropertyValue("TSuiteName",testSuite.getName());

WsdlTestCaseRunner TSrunner = new WsdlTestCaseRunner( FeedRTLReq, null );

TSrunner.runTestStepByName("Get the DeviceGet Properties");
TSrunner.runTestStepByName("pem set");
assert TSrunner.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="datasource" name="Feed DataSource for Inactive Account Statuses">
        <con:settings/>
        <con:config xsi:type="con:DataSourceStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dataSource type="XML">
            <con:configuration><sourceStep>Get Account Inactive Statuses</sourceStep><sourceProperty>result</sourceProperty><rowPath>//Results[1]/ResultSet[1]/Row</rowPath><columnPath>STATUS</columnPath></con:configuration>
          </con:dataSource>
          <con:property>AccountStatus</con:property>
          <con:restartOnRun>true</con:restartOnRun>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="SetUp inactive Account Status for DVG">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

// SetUp the Node Status from the Data Source

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

// Get AccountStatus Values from Data Source

def DsAccountStatus = testRunner.testCase.testSteps['Feed DataSource for Inactive Account Statuses'];
log.info  "Account Status is to set to: " + DsAccountStatus.getPropertyValue("AccountStatus");

testCase.setPropertyValue("AccountStatus",DsAccountStatus.getPropertyValue("AccountStatus"));

def SetAccountStatus = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get-Set Account Status");

SetAccountStatus.setPropertyValue("TCaseName",testCase.getName());
SetAccountStatus.setPropertyValue("TSuiteName",testSuite.getName());

WsdlTestCaseRunner TSrunner = new WsdlTestCaseRunner( SetAccountStatus, null );

TSrunner.runTestStepByName("Set Account Status for DVG")

assert TSrunner.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call DeviceGet Request">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )

WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );

TSrunnerRTC.runTestStepByName("DeviceGetRequest");

assert TSrunnerRTC.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract DeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Extract DeviceGet Information")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify theDeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Response Validation")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="datasourceloop" name="DataSource Loop">
        <con:settings/>
        <con:config>
          <dataSourceStep>Feed DataSource for Inactive Account Statuses</dataSourceStep>
          <targetStep>SetUp inactive Account Status for DVG</targetStep>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Re-Setactive Account Status">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

// SetUp the Node Status from the Data Source

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

// Re-set AccountStatus Values  = 'active'

testCase.setPropertyValue("AccountStatus","active");

def SetAccountStatus = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get-Set Account Status");

SetAccountStatus.setPropertyValue("TCaseName",testCase.getName());
SetAccountStatus.setPropertyValue("TSuiteName",testSuite.getName());

WsdlTestCaseRunner TSrunner = new WsdlTestCaseRunner( SetAccountStatus, null );

TSrunner.runTestStepByName("Set Account Status for DVG")

assert TSrunner.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SAMLExpDate</con:name>
          <con:value>2013-06-14 18:31:45.0</con:value>
        </con:property>
        <con:property>
          <con:name>rcUUID</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>nodetype</con:name>
          <con:value>device</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>0702</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>sch-drm_user1</con:value>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>Password1</con:value>
        </con:property>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">A06A9AA49F7073D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">A06A9AA49F7973D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SAMLassertion</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">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</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>loopuntil</con:name>
          <con:value>25</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTS</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value>_c31a8b31-491e-44d1-9f28-88305a082294</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value>urn:dece:userid:org:dece:A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value>A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value>urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value>A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>AccountID</con:name>
          <con:value>urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>ErrorDataVal</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetReqXml</con:name>
          <con:value>Authorization: SAML2 assertion=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
</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResXml</con:name>
          <con:value><![CDATA[<Device IsLegacy="false" DeviceID="urn:dece:deviceid:org:dece:A09D9C22F11CBC6DE0401F0A05996898" xmlns="http://www.decellc.org/schema/2010/10/dece" xmlns:ns2="http://www.movielabs.com/schema/md/v1.07/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <DisplayName>DeviceInfoDisplayName</DisplayName>
   <Manufacturer>Microsoft</Manufacturer>
   <Model>V344</Model>
   <Brand Language="en-US">DeviceInfoBrand</Brand>
   <SerialNo>123432442323424</SerialNo>
   <Image MimeType="MimeType3" Width="50" Height="50">http://www.oxygenxml.com/1234</Image>
   <LicAppID>urn:dece:licappid:org:dece:A09D9C22F11EBC6DE0401F0A05996898</LicAppID>
   <DRMClientID>urn:dece:drmclientid:org:dece:A0E2E4B822DB1B7CE0401F0A07994404</DRMClientID>
   <ResourceStatus>
      <Current CreatedBy="urn:dece:org:org:dece:0701" CreationDate="2011-04-11T04:02:39.637Z">
         <Value>urn:dece:type:status:pending</Value>
         <Description>Device Created</Description>
      </Current>
   </ResourceStatus>
</Device>]]></con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResTime</con:name>
          <con:value>477</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetID</con:name>
          <con:value>The supplied AccountID is invalid.https://qa.q.uvvu.com:7002/rest/1/0/Account/urn%3Adece%3Aaccountid%3Aorg%3Aorg%3Aorg%3Adece%3AA06A9AA49F6E73D7E0401F0A059915F0/Device/urn%3Adece%3Adeviceid%3Aorg%3Adece%3AA09D9C22F11CBC6DE0401F0A05996898/DECEDomainhttps://qa.q.uvvu.com:7002/rest/1/0/error/en/ErrorList.html#AccountIdNotValid</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceID</con:name>
          <con:value>urn:dece:deviceid:org:dece:A09D9C22F11CBC6DE0401F0A05996898</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeDVGGet</con:name>
          <con:value>ACCOUNTID NOT MATCH</con:value>
        </con:property>
        <con:property>
          <con:name>SqlStr</con:name>
          <con:value>select Status from ACCOUNT_STATUS_REF where Status !='active' AND Status !='forceddelete' AND Status !='suspended' AND Status !='other'</con:value>
        </con:property>
        <con:property>
          <con:name>AccountStatusXML</con:name>
          <con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <STATUS>archived</STATUS>
    </Row>
    <Row rowNumber='2'>
      <STATUS>blocked</STATUS>
    </Row>
    <Row rowNumber='3'>
      <STATUS>blocked:tou</STATUS>
    </Row>
    <Row rowNumber='4'>
      <STATUS>deleted</STATUS>
    </Row>
    <Row rowNumber='5'>
      <STATUS>pending</STATUS>
    </Row>
  </ResultSet>
</Results>]]></con:value>
        </con:property>
        <con:property>
          <con:name>AccountStatus</con:name>
          <con:value>active</con:value>
        </con:property>
        <con:property>
          <con:name>DomainID</con:name>
          <con:value>urn:dece:domainid:dece:A09DA589BD63A036E0401F0A05996D9A</con:value>
        </con:property>
      <con:property><con:name>audienceNodeid</con:name><con:value>0702</con:value></con:property></con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00009_DeviceGet_RetailerCS_FUNC_with_Invalid DeviceID" searchProperties="true">
      <con:description>This test case will verify that Application Tier properly handles a DeviceGet request when invoked with the GET method and Invalid Account ID in request .

Expected Result:

System should return an Error message.</con:description>
      <con:settings/>
      <con:testStep type="groovy" name="Verify Node User SAML Asssertion">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.model.testsuite.TestRunner.Status


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def ValSamlAssertion = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Validate SAML Assertion");

	ValSamlAssertion.setPropertyValue("TCaseName",testCase.getName());
	ValSamlAssertion.setPropertyValue("TSuiteName",testSuite.getName());

	def runnerTc = ValSamlAssertion.run( null , false )
	assert runnerTc.status == Status.FINISHED;

	rcUUID = testCase.getPropertyValue("rcUUID");

	if (runnerTc.status != Status.FINISHED || rcUUID.toInteger()!= 1){

			
		testCase.setPropertyValue("nodetype","device");
		testCase.setPropertyValue("nodeid","0701");
		testCase.setPropertyValue("audienceNodeid","0702");
		testCase.setPropertyValue("username","sch-drm_user1");
		testCase.setPropertyValue("password","Password1");
		testCase.setPropertyValue("accountoid",null);
		testCase.setPropertyValue("useroid",null);
		testCase.setPropertyValue("assertid",null);
		testCase.setPropertyValue("SAMLassertion",null);
		testCase.setPropertyValue("tokentype","urn:dece:type:tokentype:usernamepassword");
		testCase.setPropertyValue("loopuntil","25");
		testCase.setPropertyValue("expectErrTypeSTS","SUCCESS");
		testCase.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
			
		log.info " SAML Assertion Expired ! re-generating Assertion";
		def RunSTS = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get SAML Assertion - STS")

				RunSTS.setPropertyValue("TCaseName",testCase.getName());
				RunSTS.setPropertyValue("TSuiteName",testSuite.getName());

				def runnerSTS = RunSTS.run( null , false )

				assert runnerSTS.status == Status.FINISHED;

		}</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call LicAppCreate Request with Valid Data" disabled="true">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0");
testCase.setPropertyValue("expectErrTypeLAC","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedDeviceDDReq = testProject.getTestSuiteByName("Staging DeviceGet").getTestCaseByName("LicAppCreate Request");

FeedDeviceDDReq.setPropertyValue("TCaseName",testCase.getName());
FeedDeviceDDReq.setPropertyValue("TSuiteName",testSuite.getName());


def runnerTC = FeedDeviceDDReq.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Feed DeviceGet Request with Invalid DeviceID">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

// setup Retailer CS Nodeid with the account
testCase.setPropertyValue("NodeID","0702");


//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0");
testCase.setPropertyValue("DeviceID","urn:dece:deviceid:org:tree:dece:A09D9C22F11CBC6DE0401F0A05996898");
testCase.setPropertyValue("DomainID","urn:dece:domainid:dece:A09DA589BD63A036E0401F0A05996D9A");
testCase.setPropertyValue("expectErrType","DEVICEID_NOT_FOUND");
testCase.setPropertyValue("ErrorDataVal","1");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedRTLReq = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request");

FeedRTLReq.setPropertyValue("TCaseName",testCase.getName());
FeedRTLReq.setPropertyValue("TSuiteName",testSuite.getName());

WsdlTestCaseRunner TSrunner = new WsdlTestCaseRunner( FeedRTLReq, null );

TSrunner.runTestStepByName("Get the DeviceGet Properties");
TSrunner.runTestStepByName("pem set");
assert TSrunner.status == Status.INITIALIZED;</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call DeviceGet Request">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )

WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );

TSrunnerRTC.runTestStepByName("DeviceGetRequest");

assert TSrunnerRTC.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract DeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Extract DeviceGet Information")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify theDeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Response Validation")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SAMLExpDate</con:name>
          <con:value>2013-06-14 18:31:45.0</con:value>
        </con:property>
        <con:property>
          <con:name>rcUUID</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>nodetype</con:name>
          <con:value>device</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>0702</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>sch-drm_user1</con:value>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>Password1</con:value>
        </con:property>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">A06A9AA49F7073D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">A06A9AA49F7973D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SAMLassertion</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">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</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>loopuntil</con:name>
          <con:value>25</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTS</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value>_42f73a1a-b0ac-4e53-b4f1-0dca8a4eb496</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value>urn:dece:userid:org:dece:A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value>A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value>urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value>A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>AccountID</con:name>
          <con:value>urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>ErrorDataVal</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>DEVICEID_NOT_FOUND</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetReqXml</con:name>
          <con:value>Authorization: SAML2 assertion=nVdbc6rKEn73V1iux5RhQPFWSaqGi4iKCuL15RTCCCgXZUDQX78HjMZkZWWvfR5SZpq+fN390fS8YMP3mA7EGEWxGwZlWXit/K/ObJs1gzaqG2CY1Tpia9VNfUtXgWUaLaOONvV2o1KWMU6QHODYCOLXCgNopgoaVZrVAdOptzt0+xm0a+tKeY4iTFwTlWdQKWe+F+BOEfa1kkRBJzSwizuB4SPcic3OFCrDDtHsGDdMlbeXK8oiYPTmxPGhQ1Hms4VM5Hnmsxn61Av1SefFwp2pawdGnEToPaaFXyvvtmmaPqe15zCyKQYAQIE2RXQs7Nq/Km+lmzGy5GAbXs+8EYSBaxqeezFyUAqKndAqQ88OIzd2/D+4pika5K6rKDOrJl0PflWojwAFur/09AlkhI0qdgz65kxDWxShwETlmSa/Vn79XQevtnpkBHgbRj7+cv5vkFBwQl54QFYV3zK7oft7j9+U6+0FmR05ML0Euyc0ymlyMEyEy5MIbd1s6GJCPguXi/aXM3xjGDL/S0teqEecBDb1TWUE10Y4/n/69dirq5e54SXoTWXcVdJM2aXf69bqzSGIFYuil9N0mb4WEB6Vr6DurX4/fyXqnVfvRpHf6JnjRF067HhmndvqSE098xTEUbO/GnvujjkqzDw7tqYzSx1s/a1tr5mG3581k7CP5DPHjXp+vxv5fQRLtMTvkgBvfLoNwJ7dKGgu1HlFb+6n63ZwXFt2f+DVV5IgwQyP03SoJal8gr6GrUWrFjW0HVxMaoI6Om7PJS09LdbhWAk4VmVGu1qwx68fOT3mkOc1QOciyfz/JQvaghEb9wOfT4oteT1j9KbIspBceB6epzZMZQ7a5G8HR5y9Pzp7V2qngIOq2oUCz3k7cajAvQTpmcg5Cj+fKxl/gX3OHs2JoV6C3ppTNDEV0pUwV9WemDq6Jc3PG8lL1hdxpEBcGPOOImriXNB0UVFgeJVlirCRsp0yVVJZXQkl4kAQs8PFktoxkjLXZGRWmbLMasom6+WcyLvnoT86bXTRU3hF4qdHaSpvSL3EPtRWC5PpJsT2MvQPYWk14x6M+ge0g6ibAhITXhR9nyr6jBkJmlHI9M8yRZb6iopTXi2ykkpi2p/PLh+14DmFt3wxE3U4udbC1PnuCKyXfWws2EDRYCrYhfFATK3xDYiigrTEX2s1FFNN1GajrqLJqQgLmSCmHt4wI2cjOSezpmZ9He4eG8Or4qIbkOeBdjLP7LFkSF248ee0WdMc02VdYxmm9rqVCuqqPwjXMnEzgqrIcSokgADMUyP15+CQm7Pjg9tmXDTcdkMfOVFJocPB/nTJQMutje3JaMEK231zIrmTmmE5lOyZzK62h7KMrAHtqIalrShNCNxLYzyYLZEbrS7xiFXphttiS9oimS2F0GtaveVqNnjKVqaqjyfT2WJyybLRcde6eHFvzPWiaV8R7PEIoQk2nyhgdDm9JbD8qrcjfNpqALElaCschNLOtkWXEJjr7a4k7GmKSMgLFT6V+AUvTaEkPYkyJ6jqtuvQE1OaJzN6pMii5ZEynVdLzSuteU4gnQLGYn1YMV2w1qFVOFPrYtdWZ+xTf4nW6sjT5zFMD/NtQNNAOqi9rZLappIzwJLTKUfeIq6UyHBmjA99kA3mDUAfVcvrT9twVsumzD4bO/b6vLfXe9KU1cOrs9KhN9cfOCYTii1Kqi5qCmxd37dMkWc1zTP97LDxzUzQSc8K41DnRK2rglkmCHBwlWEdMhleXcSdwouFfQlmikFocdosHbwKRu5YFxNC2uSBLrsNA/6VYznFSp85duShCr9yTLxyTITb45PcEmjMNvgDXqQ2J4lHtTkf9tsHoC6H+xL31KXs2PXq46CV6oOnBX1Om85OXSzasuDwT8F25dQ2MQeMi6mi/r4pudpeCBp176wMFZWduZR3Bjt0TPGwNJLpQKzFly7VjpInzl+7/uVSqzMzfzJNTvLMGGD67GyOi3a6m/QaFBVJZ/bSXJ/U7jI0V9fvyNcheRdexyj1OGA/TeDb7jVNNjtkxrdj/h2WhXKXfByN+Oc9Lpe4VnVbqHYO+TKIYxTElbfcKt/hOgnZ9FyrQ76c1zMEDdiGsN7uNpvNmtAUQR3QXQAB227TbBfclr0rii8Q+TDYunmsfJ29fqx/Bmj6nQ0yIhRVfvCU16ksBxrZPsIAIz18rcB2jQY1nmvXWVoAsFmnBR6yIltrNFoNka9XyqMwHgfjCG5jFD1syI2vG7KGTPfgonyNft8lcEwKcTROSezRzyfjOUAJ2bOjfNXtMPUWS2HXP3goh0v5oZV46PngHIqyUPj6y1QNExdS0AR0seP8Mbuvz26FIDqWmyvgPBcOkSaib1Z9cEvkt4Rr314Jbu5hYrn5KkOqGkeueUXy+dEHSXJ23BlCUmJumO+qf21K/25K/YCI+lqMeyTr5D7EvV1YyA5OtrTinoJJL4/G8/E5OZ2SontNABgqIu4pmiL/TZGZkDXyrId7FFB3F9RfbfB31F8i3+Wf8SWxE0xj8vr7hGrl4vjv17dP1qQEMcri72S8Ry5sefAf73Rmx8z1iHhCftIwsj4q/42vhzgEcj663MDOT/nqff5Dg82QuHXJ+AqjR+ffOfgu+GfhvV53LDEhxiaJ0Z+flPO59FoxTDNMglgWKoXgcVYWOOPzAXU+lH5zUyy/77eZDP/xNrNUhlPTQb5Rueu6/65cdYvOm4hYYbfA8lrJyMWcBA/sh9n8DvD78dwQfxrPnzN5+038u+Shpl+p/fYP
</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResXml</con:name>
          <con:value><![CDATA[<ErrorList xmlns="http://www.decellc.org/schema/2010/10/dece" xmlns:ns2="http://www.movielabs.com/schema/md/v1.07/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Error ErrorID="urn:dece:errorid:org:dece:DeviceIdInvalid">
      <Reason Language="en">Device ID Invalid.</Reason>
      <OriginalRequest>https://qa.q.uvvu.com:7002/rest/1/0/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3AA06A9AA49F6E73D7E0401F0A059915F0/Domain/urn%3Adece%3Adomainid%3Adece%3AA09DA589BD63A036E0401F0A05996D9A/Device/urn%3Adece%3Adeviceid%3Aorg%3Atree%3Adece%3AA09D9C22F11CBC6DE0401F0A05996898</OriginalRequest>
      <ErrorLink>https://qa.q.uvvu.com:7002/rest/1/0/error/en/ErrorList.html#DeviceIdInvalid</ErrorLink>
   </Error>
</ErrorList>]]></con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResTime</con:name>
          <con:value>156</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetID</con:name>
          <con:value>Device ID Invalid.https://qa.q.uvvu.com:7002/rest/1/0/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3AA06A9AA49F6E73D7E0401F0A059915F0/Device/urn%3Adece%3Adeviceid%3Aorg%3Atree%3Adece%3AA09D9C22F11CBC6DE0401F0A05996898/DECEDomainhttps://qa.q.uvvu.com:7002/rest/1/0/error/en/ErrorList.html#DeviceIdInvalid</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceID</con:name>
          <con:value>urn:dece:deviceid:org:tree:dece:A09D9C22F11CBC6DE0401F0A05996898</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeDVGGet</con:name>
          <con:value>ACCOUNTID NOT MATCH</con:value>
        </con:property>
        <con:property>
          <con:name>DomainID</con:name>
          <con:value>urn:dece:domainid:dece:A09DA589BD63A036E0401F0A05996D9A</con:value>
        </con:property>
      <con:property><con:name>audienceNodeid</con:name><con:value>0702</con:value></con:property></con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00010_DeviceGet_RetailerCS_FUNC_with_Non_Existing_ DeviceID" searchProperties="true" disabled="true">
      <con:description>This test case will verify that Application Tier properly handles a DeviceGet request when invoked with the GET method and Invalid Account ID in request .

Expected Result:

System should return an Error message.</con:description>
      <con:settings/>
      <con:testStep type="groovy" name="Verify Node User SAML Asssertion">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.model.testsuite.TestRunner.Status


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def ValSamlAssertion = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Validate SAML Assertion");

	ValSamlAssertion.setPropertyValue("TCaseName",testCase.getName());
	ValSamlAssertion.setPropertyValue("TSuiteName",testSuite.getName());

	def runnerTc = ValSamlAssertion.run( null , false )
	assert runnerTc.status == Status.FINISHED;

	rcUUID = testCase.getPropertyValue("rcUUID");

	if (runnerTc.status != Status.FINISHED || rcUUID.toInteger()!= 1){

			
		testCase.setPropertyValue("nodetype","device");
		testCase.setPropertyValue("nodeid","0701");
		testCase.setPropertyValue("username","sch-drm_user1");
		testCase.setPropertyValue("password","Password1");
		testCase.setPropertyValue("accountoid",null);
		testCase.setPropertyValue("useroid",null);
		testCase.setPropertyValue("assertid",null);
		testCase.setPropertyValue("SAMLassertion",null);
		testCase.setPropertyValue("tokentype","urn:dece:type:tokentype:usernamepassword");
		testCase.setPropertyValue("loopuntil","25");
		testCase.setPropertyValue("expectErrTypeSTS","SUCCESS");
		testCase.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
			
		log.info " SAML Assertion Expired ! re-generating Assertion";
		def RunSTS = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get SAML Assertion - STS")

				RunSTS.setPropertyValue("TCaseName",testCase.getName());
				RunSTS.setPropertyValue("TSuiteName",testSuite.getName());

				def runnerSTS = RunSTS.run( null , false )

				assert runnerSTS.status == Status.FINISHED;

		}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call LicAppCreate Request with Valid Data" disabled="true">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0");
testCase.setPropertyValue("expectErrTypeLAC","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedDeviceDDReq = testProject.getTestSuiteByName("Staging DeviceGet").getTestCaseByName("LicAppCreate Request");

FeedDeviceDDReq.setPropertyValue("TCaseName",testCase.getName());
FeedDeviceDDReq.setPropertyValue("TSuiteName",testSuite.getName());


def runnerTC = FeedDeviceDDReq.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Feed DeviceGet Request with Non-Existing DeviceID">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();



// setup Retailer CS Nodeid with the account
testCase.setPropertyValue("NodeID","0702");

//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0");
testCase.setPropertyValue("DeviceID","urn:dece:deviceid:org:dece:A09D9C22F11CBC6DE0401F0A05996898" + "9233");
testCase.setPropertyValue("DomainID","urn:dece:domainid:dece:A09DA589BD63A036E0401F0A05996D9A");
testCase.setPropertyValue("expectErrType","DEVICEID_NOT_FOUND");
testCase.setPropertyValue("ErrorDataVal","1");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedRTLReq = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request");

FeedRTLReq.setPropertyValue("TCaseName",testCase.getName());
FeedRTLReq.setPropertyValue("TSuiteName",testSuite.getName());

WsdlTestCaseRunner TSrunner = new WsdlTestCaseRunner( FeedRTLReq, null );

TSrunner.runTestStepByName("Get the DeviceGet Properties");
TSrunner.runTestStepByName("pem set");
assert TSrunner.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call DeviceGet Request">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )

WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );

TSrunnerRTC.runTestStepByName("DeviceGetRequest");

assert TSrunnerRTC.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract DeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Extract DeviceGet Information")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify theDeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Response Validation")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SAMLExpDate</con:name>
          <con:value>2012-04-18 16:10:01.0</con:value>
        </con:property>
        <con:property>
          <con:name>rcUUID</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>nodetype</con:name>
          <con:value>device</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>0701</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>sch-drm_user1</con:value>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>Password1</con:value>
        </con:property>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">A06A9AA49F7073D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">A06A9AA49F7973D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SAMLassertion</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">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</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>loopuntil</con:name>
          <con:value>25</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTS</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value>291da5df-6cbe-4f2c-b15e-0939741d3df8</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value>urn:dece:userid:org:dece:A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value>A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value>urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value>A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>AccountID</con:name>
          <con:value>urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>ErrorDataVal</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>DEVICEID_NOT_FOUND</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetReqXml</con:name>
          <con:value>Host: qa.q.uvvu.com:7002</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResXml</con:name>
          <con:value><![CDATA[<ErrorList xmlns="http://www.decellc.org/schema/2010/10/dece" xmlns:ns2="http://www.movielabs.com/schema/md/v1.07/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Error ErrorID="urn:dece:errorid:org:dece:DeviceIdInvalid">
      <Reason Language="en">Device ID Invalid.</Reason>
      <OriginalRequest>https://qa.q.uvvu.com:7002/rest/1/0/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3AA06A9AA49F6E73D7E0401F0A059915F0/Domain/urn%3Adece%3Adomainid%3Adece%3AA09DA589BD63A036E0401F0A05996D9A/Device/urn%3Adece%3Adeviceid%3Aorg%3Adece%3AA09D9C22F11CBC6DE0401F0A059968989233</OriginalRequest>
      <ErrorLink>https://qa.q.uvvu.com:7002/rest/1/0/error/en/ErrorList.html#DeviceIdInvalid</ErrorLink>
   </Error>
</ErrorList>]]></con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResTime</con:name>
          <con:value>249</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetID</con:name>
          <con:value>Device ID Invalid.https://qa.q.uvvu.com:7002/rest/1/0/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3AA06A9AA49F6E73D7E0401F0A059915F0/Device/urn%3Adece%3Adeviceid%3Aorg%3Adece%3AA09D9C22F11CBC6DE0401F0A059968989238487847849821942174/DECEDomainhttps://qa.q.uvvu.com:7002/rest/1/0/error/en/ErrorList.html#DeviceIdInvalid</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceID</con:name>
          <con:value/>
        </con:property>
        <con:property>
          <con:name>expectErrTypeDVGGet</con:name>
          <con:value>ACCOUNTID NOT MATCH</con:value>
        </con:property>
        <con:property>
          <con:name>DomainID</con:name>
          <con:value>urn:dece:domainid:dece:A09DA589BD63A036E0401F0A05996D9A</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00011_DeviceGet_RetailerCS_FUNC_with_Inactive_ DeviceID" searchProperties="true">
      <con:description>This test case will verify that Application Tier properly handles a DeviceGet request when invoked with the GET method and Invalid Account ID in request .

Expected Result:

System should return an Error message.</con:description>
      <con:settings/>
      <con:testStep type="groovy" name="Verify Node User SAML Asssertion">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.model.testsuite.TestRunner.Status


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def ValSamlAssertion = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Validate SAML Assertion");

	ValSamlAssertion.setPropertyValue("TCaseName",testCase.getName());
	ValSamlAssertion.setPropertyValue("TSuiteName",testSuite.getName());

	def runnerTc = ValSamlAssertion.run( null , false )
	assert runnerTc.status == Status.FINISHED;

	rcUUID = testCase.getPropertyValue("rcUUID");

	if (runnerTc.status != Status.FINISHED || rcUUID.toInteger()!= 1){

			
		testCase.setPropertyValue("nodetype","device");
		testCase.setPropertyValue("nodeid","0701");
		testCase.setPropertyValue("audienceNodeid","0702");
		testCase.setPropertyValue("username","sch-drm_user1");
		testCase.setPropertyValue("password","Password1");
		testCase.setPropertyValue("accountoid",null);
		testCase.setPropertyValue("useroid",null);
		testCase.setPropertyValue("assertid",null);
		testCase.setPropertyValue("SAMLassertion",null);
		testCase.setPropertyValue("tokentype","urn:dece:type:tokentype:usernamepassword");
		testCase.setPropertyValue("loopuntil","25");
		testCase.setPropertyValue("expectErrTypeSTS","SUCCESS");
		testCase.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
			
		log.info " SAML Assertion Expired ! re-generating Assertion";
		def RunSTS = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get SAML Assertion - STS")

				RunSTS.setPropertyValue("TCaseName",testCase.getName());
				RunSTS.setPropertyValue("TSuiteName",testSuite.getName());

				def runnerSTS = RunSTS.run( null , false )

				assert runnerSTS.status == Status.FINISHED;

		}</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call LicAppCreate Request with Valid Data" disabled="true">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0");
testCase.setPropertyValue("expectErrTypeLAC","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedDeviceDDReq = testProject.getTestSuiteByName("Staging DeviceGet").getTestCaseByName("LicAppCreate Request");

FeedDeviceDDReq.setPropertyValue("TCaseName",testCase.getName());
FeedDeviceDDReq.setPropertyValue("TSuiteName",testSuite.getName());


def runnerTC = FeedDeviceDDReq.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Get Device Inactive Statuses">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def GetDeviceStatus = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get-Set Device Status");

// Get ALL inactive Status from DEVICE_STATUS_REF Except = 'Pending'

SqlStr = "select Status from DEVICE_STATUS_REF where Status !='active' AND Status !='pending'";

testCase.setPropertyValue("SqlStr",SqlStr);

GetDeviceStatus.setPropertyValue("TCaseName",testCase.getName());
GetDeviceStatus.setPropertyValue("TSuiteName",testSuite.getName());

WsdlTestCaseRunner TSrunner = new WsdlTestCaseRunner( GetDeviceStatus, null );

TSrunner.runTestStepByName("Get Device Status for DVG");

assert TSrunner.status == Status.INITIALIZED;

 log.info " Current Device Status: " + testCase.getPropertyValue("DeviceStatus");

testCase.getPropertyValue("DeviceStatusXML");</script>
        </con:config>
      </con:testStep>
      <con:testStep type="datasource" name="Feed DataSource for Inactive Device Statuses">
        <con:settings/>
        <con:config xsi:type="con:DataSourceStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dataSource type="XML">
            <con:configuration><sourceStep>Get Device Inactive Statuses</sourceStep><sourceProperty>result</sourceProperty><rowPath>//Results[1]/ResultSet[1]/Row</rowPath><columnPath>STATUS</columnPath></con:configuration>
          </con:dataSource>
          <con:property>DeviceStatus</con:property>
          <con:restartOnRun>true</con:restartOnRun>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Feed DeviceGet Request with Inactive DeviceID">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//RightsToken Request and properties

// setup Retailer CS Nodeid with the account
testCase.setPropertyValue("NodeID","0702");


//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0");
testCase.setPropertyValue("DeviceID","urn:dece:deviceid:org:dece:A09D9C22F11CBC6DE0401F0A05996898");
testCase.setPropertyValue("DomainID","urn:dece:domainid:dece:A09DA589BD63A036E0401F0A05996D9A");
testCase.setPropertyValue("expectErrType","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedRTLReq = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request");

FeedRTLReq.setPropertyValue("TCaseName",testCase.getName());
FeedRTLReq.setPropertyValue("TSuiteName",testSuite.getName());

WsdlTestCaseRunner TSrunner = new WsdlTestCaseRunner( FeedRTLReq, null );

TSrunner.runTestStepByName("Get the DeviceGet Properties");
TSrunner.runTestStepByName("pem set");
assert TSrunner.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="SetUp Device Inactive Status for DVG">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

// SetUp the Node Status from the Data Source

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

// Get NodeStatus Values from Data Source

def DsDeviceStatus = testRunner.testCase.testSteps['Feed DataSource for Inactive Device Statuses'];
log.info  "Device Status is to set to: " + DsDeviceStatus.getPropertyValue("DeviceStatus");

testCase.setPropertyValue("DeviceStatus",DsDeviceStatus.getPropertyValue("DeviceStatus"));

def SetDeviceStatus = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get-Set Device Status");

SetDeviceStatus.setPropertyValue("TCaseName",testCase.getName());
SetDeviceStatus.setPropertyValue("TSuiteName",testSuite.getName());
SetDeviceStatus.setPropertyValue("DeviceID",testCase.getPropertyValue("DeviceID"));

WsdlTestCaseRunner TSrunner = new WsdlTestCaseRunner( SetDeviceStatus, null );

TSrunner.runTestStepByName("Set Device Status for DVG")

assert TSrunner.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call DeviceGet Request">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )

WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );

TSrunnerRTC.runTestStepByName("DeviceGetRequest");

assert TSrunnerRTC.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify theDeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Response Validation")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="datasourceloop" name="DataSource Loop">
        <con:settings/>
        <con:config>
          <dataSourceStep>Feed DataSource for Inactive Device Statuses</dataSourceStep>
          <targetStep>SetUp Device Inactive Status for DVG</targetStep>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Re-Set Device Status to Active">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

// SetUp the Node Status from the Data Source

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

// Get NodeStatus Values from Data Source

testCase.setPropertyValue("DeviceStatus","pending");

def SetDeviceStatus = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get-Set Device Status");

SetDeviceStatus.setPropertyValue("TCaseName",testCase.getName());
SetDeviceStatus.setPropertyValue("TSuiteName",testSuite.getName());

WsdlTestCaseRunner TSrunner = new WsdlTestCaseRunner( SetDeviceStatus, null );

TSrunner.runTestStepByName("Set Device Status for DVG")

assert TSrunner.status == Status.INITIALIZED;

TSrunner.runTestStepByName("Get Device Status for DVG")

assert TSrunner.status == Status.INITIALIZED;

log.info " Current Device Status: " + testCase.getPropertyValue("DeviceStatus");</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SAMLExpDate</con:name>
          <con:value>2013-06-14 18:31:45.0</con:value>
        </con:property>
        <con:property>
          <con:name>rcUUID</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>nodetype</con:name>
          <con:value>device</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>0702</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>sch-drm_user1</con:value>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>Password1</con:value>
        </con:property>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">A06A9AA49F7073D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">A06A9AA49F7973D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SAMLassertion</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">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</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>loopuntil</con:name>
          <con:value>25</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTS</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value>_5e7f126d-7237-4dc8-bcb3-6838ad98e5c3</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value>urn:dece:userid:org:dece:A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value>A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value>urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value>A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>AccountID</con:name>
          <con:value>urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>ErrorDataVal</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetReqXml</con:name>
          <con:value>Host: qa.q.uvvu.com:7002</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResXml</con:name>
          <con:value><![CDATA[<ErrorList xmlns="http://www.decellc.org/schema/2010/10/dece" xmlns:ns2="http://www.movielabs.com/schema/md/v1.07/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Error ErrorID="urn:dece:errorid:org:dece:DeviceNotFound">
      <Reason Language="en">The device cannot be found</Reason>
      <OriginalRequest>https://qa.q.uvvu.com:7002/rest/1/0/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3AA06A9AA49F6E73D7E0401F0A059915F0/Domain/urn%3Adece%3Adomainid%3Adece%3AA09DA589BD63A036E0401F0A05996D9A/Device/urn%3Adece%3Adeviceid%3Aorg%3Adece%3AA09D9C22F11CBC6DE0401F0A05996898</OriginalRequest>
      <ErrorLink>https://qa.q.uvvu.com:7002/rest/1/0/error/en/ErrorList.html#DeviceNotFound</ErrorLink>
   </Error>
</ErrorList>]]></con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResTime</con:name>
          <con:value>935</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetID</con:name>
          <con:value>The device cannot be foundhttps://qa.q.uvvu.com:7002/rest/1/0/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3AA06A9AA49F6E73D7E0401F0A059915F0/Device/urn%3Adece%3Adeviceid%3Aorg%3Adece%3AA09D9C22F11CBC6DE0401F0A05996898/DECEDomainhttps://qa.q.uvvu.com:7002/rest/1/0/error/en/ErrorList.html#DeviceNotFound</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceID</con:name>
          <con:value>urn:dece:deviceid:org:dece:A09D9C22F11CBC6DE0401F0A05996898</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeDVGGet</con:name>
          <con:value>ACCOUNTID NOT MATCH</con:value>
        </con:property>
        <con:property>
          <con:name>SqlStr</con:name>
          <con:value>select Status from DEVICE_STATUS_REF where Status !='active' AND Status !='pending'</con:value>
        </con:property>
        <con:property>
          <con:name>UserStatusXML</con:name>
          <con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <STATUS>deleted</STATUS>
    </Row>
    <Row rowNumber='2'>
      <STATUS>forceddelete</STATUS>
    </Row>
  </ResultSet>
</Results>]]></con:value>
        </con:property>
        <con:property>
          <con:name>UserStatus</con:name>
          <con:value>active</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceStatusXML</con:name>
          <con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <STATUS>deleted</STATUS>
    </Row>
    <Row rowNumber='2'>
      <STATUS>forceddelete</STATUS>
    </Row>
  </ResultSet>
</Results>]]></con:value>
        </con:property>
        <con:property>
          <con:name>DeviceStatus</con:name>
          <con:value>pending</con:value>
        </con:property>
        <con:property>
          <con:name>rcDeviceStatus</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>DomainID</con:name>
          <con:value>urn:dece:domainid:dece:A09DA589BD63A036E0401F0A05996D9A</con:value>
        </con:property>
      <con:property><con:name>audienceNodeid</con:name><con:value>0702</con:value></con:property></con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00012_DeviceGet_RetailerCS_FUNC_Verify_DECE_DomainID_with_DEVICE_DomainID" searchProperties="true">
      <con:description>This test case will verify that Application Tier properly handles a DeviceGet request when invoked with the GET method and valid header request .

Expected Result:

System should return successful message.</con:description>
      <con:settings/>
      <con:testStep type="groovy" name="Verify Node User SAML Asssertion">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.model.testsuite.TestRunner.Status


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def ValSamlAssertion = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Validate SAML Assertion");

	ValSamlAssertion.setPropertyValue("TCaseName",testCase.getName());
	ValSamlAssertion.setPropertyValue("TSuiteName",testSuite.getName());

	def runnerTc = ValSamlAssertion.run( null , false )
	assert runnerTc.status == Status.FINISHED;

	rcUUID = testCase.getPropertyValue("rcUUID");

	if (runnerTc.status != Status.FINISHED || rcUUID.toInteger()!= 1){

			
		testCase.setPropertyValue("nodetype","device");
		testCase.setPropertyValue("nodeid","0701");
		testCase.setPropertyValue("audienceNodeid","0702");
		testCase.setPropertyValue("username","sch-drm_user1");
		testCase.setPropertyValue("password","Password1");
		testCase.setPropertyValue("accountoid",null);
		testCase.setPropertyValue("useroid",null);
		testCase.setPropertyValue("assertid",null);
		testCase.setPropertyValue("SAMLassertion",null);
		testCase.setPropertyValue("tokentype","urn:dece:type:tokentype:usernamepassword");
		testCase.setPropertyValue("loopuntil","25");
		testCase.setPropertyValue("expectErrTypeSTS","SUCCESS");
		testCase.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
			
		log.info " SAML Assertion Expired ! re-generating Assertion";
		def RunSTS = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get SAML Assertion - STS")

				RunSTS.setPropertyValue("TCaseName",testCase.getName());
				RunSTS.setPropertyValue("TSuiteName",testSuite.getName());

				def runnerSTS = RunSTS.run( null , false )

				assert runnerSTS.status == Status.FINISHED;

		}</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call LicAppCreate Request with Valid Data" disabled="true">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0");
testCase.setPropertyValue("expectErrTypeLAC","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedDeviceDDReq = testProject.getTestSuiteByName("Staging DeviceGet").getTestCaseByName("LicAppCreate Request");

FeedDeviceDDReq.setPropertyValue("TCaseName",testCase.getName());
FeedDeviceDDReq.setPropertyValue("TSuiteName",testSuite.getName());


def runnerTC = FeedDeviceDDReq.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Feed DeviceGet Request with Valid Data">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();



// setup Retailer CS Nodeid with the account
testCase.setPropertyValue("NodeID","0702");

//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0");
testCase.setPropertyValue("DeviceID","urn:dece:deviceid:org:dece:A09D9C22F11CBC6DE0401F0A05996898");
testCase.setPropertyValue("DomainID","urn:dece:domainid:dece:A09DA589BD63A036E0401F0A05996D9A");
testCase.setPropertyValue("expectErrType","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedRTLReq = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request");

FeedRTLReq.setPropertyValue("TCaseName",testCase.getName());
FeedRTLReq.setPropertyValue("TSuiteName",testSuite.getName());

WsdlTestCaseRunner TSrunner = new WsdlTestCaseRunner( FeedRTLReq, null );

TSrunner.runTestStepByName("Get the DeviceGet Properties");
TSrunner.runTestStepByName("pem set");
assert TSrunner.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call DeviceGet Request">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )

WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );

TSrunnerRTC.runTestStepByName("DeviceGetRequest");

assert TSrunnerRTC.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract DeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Extract DeviceGet Information")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify theDeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Response Validation")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify the DeviceGet Response against DB Result">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGdataVal = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Data Validation");

RTGdataVal.setPropertyValue("TCaseName",testCase.getName());
RTGdataVal.setPropertyValue("TSuiteName",testSuite.getName());


def runnerRTC = RTGdataVal.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SAMLExpDate</con:name>
          <con:value>2013-06-14 18:31:45.0</con:value>
        </con:property>
        <con:property>
          <con:name>rcUUID</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>nodetype</con:name>
          <con:value>device</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>0702</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>sch-drm_user1</con:value>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>Password1</con:value>
        </con:property>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">A06A9AA49F7073D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">A06A9AA49F7973D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SAMLassertion</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">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</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>loopuntil</con:name>
          <con:value>25</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTS</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value>_b57f348b-ca9c-416a-8f88-41fd5b7c38da</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value>urn:dece:userid:org:dece:A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value>A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value>urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value>A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>AccountID</con:name>
          <con:value>urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>ErrorDataVal</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetReqXml</con:name>
          <con:value>Authorization: SAML2 assertion=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
</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResXml</con:name>
          <con:value><![CDATA[<Device IsLegacy="false" DeviceID="urn:dece:deviceid:org:dece:A09D9C22F11CBC6DE0401F0A05996898" xmlns="http://www.decellc.org/schema/2010/10/dece" xmlns:ns2="http://www.movielabs.com/schema/md/v1.07/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <DisplayName>DeviceInfoDisplayName</DisplayName>
   <Manufacturer>Microsoft</Manufacturer>
   <Model>V344</Model>
   <Brand Language="en-US">DeviceInfoBrand</Brand>
   <SerialNo>123432442323424</SerialNo>
   <Image MimeType="MimeType3" Width="50" Height="50">http://www.oxygenxml.com/1234</Image>
   <LicAppID>urn:dece:licappid:org:dece:A09D9C22F11EBC6DE0401F0A05996898</LicAppID>
   <DRMClientID>urn:dece:drmclientid:org:dece:A0E2E4B822DB1B7CE0401F0A07994404</DRMClientID>
   <ResourceStatus>
      <Current CreatedBy="urn:dece:org:org:dece:0701" CreationDate="2011-04-11T04:02:39.637Z">
         <Value>urn:dece:type:status:pending</Value>
         <Description>Device Created</Description>
      </Current>
   </ResourceStatus>
</Device>]]></con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResTime</con:name>
          <con:value>446</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetID</con:name>
          <con:value>A09DA589BD63A036E0401F0A05996D9A</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceID</con:name>
          <con:value>urn:dece:deviceid:org:dece:A09D9C22F11CBC6DE0401F0A05996898</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeDVGGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>SqlStr</con:name>
          <con:value>select Status from USER_STATUS_REF where Status !='active'</con:value>
        </con:property>
        <con:property>
          <con:name>DomainID</con:name>
          <con:value>urn:dece:domainid:dece:A09DA589BD63A036E0401F0A05996D9A</con:value>
        </con:property>
      <con:property><con:name>audienceNodeid</con:name><con:value>0702</con:value></con:property></con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00013_DeviceGet_RetailerCS_FUNC_with_NULL AccountID" searchProperties="true">
      <con:description>This test case will verify that Application Tier properly handles a DeviceGet request when invoked with the GET method and Invalid Account ID in request .

Expected Result:

System should return an Error message.</con:description>
      <con:settings/>
      <con:testStep type="groovy" name="Verify Node User SAML Asssertion">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.model.testsuite.TestRunner.Status


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def ValSamlAssertion = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Validate SAML Assertion");

	ValSamlAssertion.setPropertyValue("TCaseName",testCase.getName());
	ValSamlAssertion.setPropertyValue("TSuiteName",testSuite.getName());

	def runnerTc = ValSamlAssertion.run( null , false )
	assert runnerTc.status == Status.FINISHED;

	rcUUID = testCase.getPropertyValue("rcUUID");

	if (runnerTc.status != Status.FINISHED || rcUUID.toInteger()!= 1){

			
		testCase.setPropertyValue("nodetype","device");
		testCase.setPropertyValue("nodeid","0701");
		testCase.setPropertyValue("audienceNodeid","0702");
		testCase.setPropertyValue("username","sch-drm_user1");
		testCase.setPropertyValue("password","Password1");
		testCase.setPropertyValue("accountoid",null);
		testCase.setPropertyValue("useroid",null);
		testCase.setPropertyValue("assertid",null);
		testCase.setPropertyValue("SAMLassertion",null);
		testCase.setPropertyValue("tokentype","urn:dece:type:tokentype:usernamepassword");
		testCase.setPropertyValue("loopuntil","25");
		testCase.setPropertyValue("expectErrTypeSTS","SUCCESS");
		testCase.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
			
		log.info " SAML Assertion Expired ! re-generating Assertion";
		def RunSTS = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get SAML Assertion - STS")

				RunSTS.setPropertyValue("TCaseName",testCase.getName());
				RunSTS.setPropertyValue("TSuiteName",testSuite.getName());

				def runnerSTS = RunSTS.run( null , false )

				assert runnerSTS.status == Status.FINISHED;

		}</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call LicAppCreate Request with Valid Data" disabled="true">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0");
testCase.setPropertyValue("expectErrTypeLAC","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedDeviceDDReq = testProject.getTestSuiteByName("Staging DeviceGet").getTestCaseByName("LicAppCreate Request");

FeedDeviceDDReq.setPropertyValue("TCaseName",testCase.getName());
FeedDeviceDDReq.setPropertyValue("TSuiteName",testSuite.getName());


def runnerTC = FeedDeviceDDReq.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Feed DeviceGet Request with Invalid AccountID">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


// setup Retailer CS Nodeid with the account
testCase.setPropertyValue("NodeID","0702");


//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:");
testCase.setPropertyValue("DeviceID","urn:dece:deviceid:org:dece:A09D9C22F11CBC6DE0401F0A05996898");
testCase.setPropertyValue("DomainID","urn:dece:domainid:dece:A09DA589BD63A036E0401F0A05996D9A");
testCase.setPropertyValue("expectErrType","ACCOUNTID NOT MATCH");
testCase.setPropertyValue("ErrorDataVal","1");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedRTLReq = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request");

FeedRTLReq.setPropertyValue("TCaseName",testCase.getName());
FeedRTLReq.setPropertyValue("TSuiteName",testSuite.getName());

WsdlTestCaseRunner TSrunner = new WsdlTestCaseRunner( FeedRTLReq, null );

TSrunner.runTestStepByName("Get the DeviceGet Properties");
TSrunner.runTestStepByName("pem set");
assert TSrunner.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call DeviceGet Request">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )

WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );

TSrunnerRTC.runTestStepByName("DeviceGetRequest");

assert TSrunnerRTC.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract DeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Extract DeviceGet Information")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify theDeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Response Validation")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SAMLExpDate</con:name>
          <con:value>2013-06-14 18:31:45.0</con:value>
        </con:property>
        <con:property>
          <con:name>rcUUID</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>nodetype</con:name>
          <con:value>device</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>0702</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>sch-drm_user1</con:value>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>Password1</con:value>
        </con:property>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">A06A9AA49F7073D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">A06A9AA49F7973D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SAMLassertion</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">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</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>loopuntil</con:name>
          <con:value>25</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTS</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value>_edf8e37f-b224-49e9-b4fc-9b2bc9d3883a</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value>urn:dece:userid:org:dece:A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value>A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value>urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value>A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>AccountID</con:name>
          <con:value>urn:dece:accountid:org:dece:</con:value>
        </con:property>
        <con:property>
          <con:name>ErrorDataVal</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>ACCOUNTID NOT MATCH</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetReqXml</con:name>
          <con:value>Authorization: SAML2 assertion=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
</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResXml</con:name>
          <con:value><![CDATA[<ErrorList xmlns="http://www.decellc.org/schema/2010/10/dece" xmlns:ns2="http://www.movielabs.com/schema/md/v1.07/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Error ErrorID="urn:dece:errorid:org:dece:AccountIdUnmatched">
      <Reason Language="en">Request Account ID not match</Reason>
      <OriginalRequest>https://qa.q.uvvu.com:7002/rest/1/0/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3A/Domain/urn%3Adece%3Adomainid%3Adece%3AA09DA589BD63A036E0401F0A05996D9A/Device/urn%3Adece%3Adeviceid%3Aorg%3Adece%3AA09D9C22F11CBC6DE0401F0A05996898</OriginalRequest>
      <ErrorLink>https://qa.q.uvvu.com:7002/rest/1/0/error/en/ErrorList.html#AccountIdUnmatched</ErrorLink>
   </Error>
</ErrorList>]]></con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResTime</con:name>
          <con:value>204</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetID</con:name>
          <con:value>Request Account ID not matchhttps://qa.q.uvvu.com:7002/rest/1/0/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3A/Device/urn%3Adece%3Adeviceid%3Aorg%3Adece%3AA09D9C22F11CBC6DE0401F0A05996898/DECEDomainhttps://qa.q.uvvu.com:7002/rest/1/0/error/en/ErrorList.html#AccountIdUnmatched</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceID</con:name>
          <con:value>urn:dece:deviceid:org:dece:A09D9C22F11CBC6DE0401F0A05996898</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeDVGGet</con:name>
          <con:value>ACCOUNTID NOT MATCH</con:value>
        </con:property>
        <con:property>
          <con:name>DomainID</con:name>
          <con:value>urn:dece:domainid:dece:A09DA589BD63A036E0401F0A05996D9A</con:value>
        </con:property>
      <con:property><con:name>audienceNodeid</con:name><con:value>0702</con:value></con:property></con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00014_DeviceGet_RetailerCS_FUNC_with_NULL_ DeviceID" searchProperties="true">
      <con:description>This test case will verify that Application Tier properly handles a DeviceGet request when invoked with the GET method and Invalid Account ID in request .

Expected Result:

System should return an Error message.</con:description>
      <con:settings/>
      <con:testStep type="groovy" name="Verify Node User SAML Asssertion">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.model.testsuite.TestRunner.Status


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def ValSamlAssertion = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Validate SAML Assertion");

	ValSamlAssertion.setPropertyValue("TCaseName",testCase.getName());
	ValSamlAssertion.setPropertyValue("TSuiteName",testSuite.getName());

	def runnerTc = ValSamlAssertion.run( null , false )
	assert runnerTc.status == Status.FINISHED;

	rcUUID = testCase.getPropertyValue("rcUUID");

	if (runnerTc.status != Status.FINISHED || rcUUID.toInteger()!= 1){

			
		testCase.setPropertyValue("nodetype","device");
		testCase.setPropertyValue("nodeid","0701");
		testCase.setPropertyValue("audienceNodeid","0702");
		testCase.setPropertyValue("username","sch-drm_user1");
		testCase.setPropertyValue("password","Password1");
		testCase.setPropertyValue("accountoid",null);
		testCase.setPropertyValue("useroid",null);
		testCase.setPropertyValue("assertid",null);
		testCase.setPropertyValue("SAMLassertion",null);
		testCase.setPropertyValue("tokentype","urn:dece:type:tokentype:usernamepassword");
		testCase.setPropertyValue("loopuntil","25");
		testCase.setPropertyValue("expectErrTypeSTS","SUCCESS");
		testCase.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
			
		log.info " SAML Assertion Expired ! re-generating Assertion";
		def RunSTS = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get SAML Assertion - STS")

				RunSTS.setPropertyValue("TCaseName",testCase.getName());
				RunSTS.setPropertyValue("TSuiteName",testSuite.getName());

				def runnerSTS = RunSTS.run( null , false )

				assert runnerSTS.status == Status.FINISHED;

		}</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call LicAppCreate Request with Valid Data" disabled="true">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0");
testCase.setPropertyValue("expectErrTypeLAC","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedDeviceDDReq = testProject.getTestSuiteByName("Staging DeviceGet").getTestCaseByName("LicAppCreate Request");

FeedDeviceDDReq.setPropertyValue("TCaseName",testCase.getName());
FeedDeviceDDReq.setPropertyValue("TSuiteName",testSuite.getName());


def runnerTC = FeedDeviceDDReq.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Feed DeviceGet Request with Invalid DeviceID">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

// setup Retailer CS Nodeid with the account
testCase.setPropertyValue("NodeID","0702");


//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0");
testCase.setPropertyValue("DeviceID","urn:dece:deviceid:org:dece:");
testCase.setPropertyValue("DomainID","urn:dece:domainid:dece:A09DA589BD63A036E0401F0A05996D9A");
testCase.setPropertyValue("expectErrType","DEVICEID_NOT_VALID");
testCase.setPropertyValue("ErrorDataVal","1");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedRTLReq = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request");

FeedRTLReq.setPropertyValue("TCaseName",testCase.getName());
FeedRTLReq.setPropertyValue("TSuiteName",testSuite.getName());

WsdlTestCaseRunner TSrunner = new WsdlTestCaseRunner( FeedRTLReq, null );

TSrunner.runTestStepByName("Get the DeviceGet Properties");
TSrunner.runTestStepByName("pem set");
assert TSrunner.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call DeviceGet Request">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )

WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );

TSrunnerRTC.runTestStepByName("DeviceGetRequest");

assert TSrunnerRTC.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract DeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Extract DeviceGet Information")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify theDeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Response Validation")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SAMLExpDate</con:name>
          <con:value>2013-06-14 18:31:45.0</con:value>
        </con:property>
        <con:property>
          <con:name>rcUUID</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>nodetype</con:name>
          <con:value>device</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>0702</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>sch-drm_user1</con:value>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>Password1</con:value>
        </con:property>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">A06A9AA49F7073D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">A06A9AA49F7973D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SAMLassertion</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">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</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>loopuntil</con:name>
          <con:value>25</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTS</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value>_5759724b-49e1-45c0-ba7b-2c80eb7a26d7</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value>urn:dece:userid:org:dece:A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value>A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value>urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value>A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>AccountID</con:name>
          <con:value>urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>ErrorDataVal</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>DEVICEID_NOT_VALID</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetReqXml</con:name>
          <con:value>Authorization: SAML2 assertion=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
</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResXml</con:name>
          <con:value><![CDATA[<ErrorList xmlns="http://www.decellc.org/schema/2010/10/dece" xmlns:ns2="http://www.movielabs.com/schema/md/v1.07/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Error ErrorID="urn:dece:errorid:org:dece:DeviceIdInvalid">
      <Reason Language="en">Device ID Invalid.</Reason>
      <OriginalRequest>https://qa.q.uvvu.com:7002/rest/1/0/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3AA06A9AA49F6E73D7E0401F0A059915F0/Domain/urn%3Adece%3Adomainid%3Adece%3AA09DA589BD63A036E0401F0A05996D9A/Device/urn%3Adece%3Adeviceid%3Aorg%3Adece%3A</OriginalRequest>
      <ErrorLink>https://qa.q.uvvu.com:7002/rest/1/0/error/en/ErrorList.html#DeviceIdInvalid</ErrorLink>
   </Error>
</ErrorList>]]></con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResTime</con:name>
          <con:value>233</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetID</con:name>
          <con:value>Device ID Invalid.https://qa.q.uvvu.com:7002/rest/1/0/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3AA06A9AA49F6E73D7E0401F0A059915F0/Device/urn%3Adece%3Adeviceid%3Aorg%3Adece%3A/DECEDomainhttps://qa.q.uvvu.com:7002/rest/1/0/error/en/ErrorList.html#DeviceIdInvalid</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceID</con:name>
          <con:value>urn:dece:deviceid:org:dece:</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeDVGGet</con:name>
          <con:value>ACCOUNTID NOT MATCH</con:value>
        </con:property>
        <con:property>
          <con:name>DomainID</con:name>
          <con:value>urn:dece:domainid:dece:A09DA589BD63A036E0401F0A05996D9A</con:value>
        </con:property>
      <con:property><con:name>audienceNodeid</con:name><con:value>0702</con:value></con:property></con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00015_DeviceGet_RetailerCS_FUNC_Verify_DECE_DomainID_associated to Account" searchProperties="true">
      <con:description>This test case will verify that Application Tier properly handles a DeviceGet request when invoked with the GET method and valid header request .

Expected Result:

System should return successful message.</con:description>
      <con:settings/>
      <con:testStep type="groovy" name="Verify Node User SAML Asssertion">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.model.testsuite.TestRunner.Status


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def ValSamlAssertion = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Validate SAML Assertion");

	ValSamlAssertion.setPropertyValue("TCaseName",testCase.getName());
	ValSamlAssertion.setPropertyValue("TSuiteName",testSuite.getName());

	def runnerTc = ValSamlAssertion.run( null , false )
	assert runnerTc.status == Status.FINISHED;

	rcUUID = testCase.getPropertyValue("rcUUID");

	if (runnerTc.status != Status.FINISHED || rcUUID.toInteger()!= 1){

			
		testCase.setPropertyValue("nodetype","device");
		testCase.setPropertyValue("nodeid","0701");
		testCase.setPropertyValue("audienceNodeid","0702");
		testCase.setPropertyValue("username","sch-drm_user1");
		testCase.setPropertyValue("password","Password1");
		testCase.setPropertyValue("accountoid",null);
		testCase.setPropertyValue("useroid",null);
		testCase.setPropertyValue("assertid",null);
		testCase.setPropertyValue("SAMLassertion",null);
		testCase.setPropertyValue("tokentype","urn:dece:type:tokentype:usernamepassword");
		testCase.setPropertyValue("loopuntil","25");
		testCase.setPropertyValue("expectErrTypeSTS","SUCCESS");
		testCase.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
			
		log.info " SAML Assertion Expired ! re-generating Assertion";
		def RunSTS = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get SAML Assertion - STS")

				RunSTS.setPropertyValue("TCaseName",testCase.getName());
				RunSTS.setPropertyValue("TSuiteName",testSuite.getName());

				def runnerSTS = RunSTS.run( null , false )

				assert runnerSTS.status == Status.FINISHED;

		}</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call LicAppCreate Request with Valid Data" disabled="true">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0");
testCase.setPropertyValue("expectErrTypeLAC","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedDeviceDDReq = testProject.getTestSuiteByName("Staging DeviceGet").getTestCaseByName("LicAppCreate Request");

FeedDeviceDDReq.setPropertyValue("TCaseName",testCase.getName());
FeedDeviceDDReq.setPropertyValue("TSuiteName",testSuite.getName());


def runnerTC = FeedDeviceDDReq.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Feed DeviceGet Request with Valid Data">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

// setup Retailer CS Nodeid with the account
testCase.setPropertyValue("NodeID","0702");


//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0");
testCase.setPropertyValue("DeviceID","urn:dece:deviceid:org:dece:A09D9C22F11CBC6DE0401F0A05996898");
testCase.setPropertyValue("DomainID","urn:dece:domainid:dece:A09DA589BD63A036E0401F0A05996D9A");
testCase.setPropertyValue("expectErrType","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedRTLReq = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request");

FeedRTLReq.setPropertyValue("TCaseName",testCase.getName());
FeedRTLReq.setPropertyValue("TSuiteName",testSuite.getName());

WsdlTestCaseRunner TSrunner = new WsdlTestCaseRunner( FeedRTLReq, null );

TSrunner.runTestStepByName("Get the DeviceGet Properties");
TSrunner.runTestStepByName("pem set");
assert TSrunner.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call DeviceGet Request">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )

WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );

TSrunnerRTC.runTestStepByName("DeviceGetRequest");

assert TSrunnerRTC.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract DeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Extract DeviceGet Information")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify theDeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Response Validation")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify the DeviceGet Response against DB Result">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGdataVal = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Data Validation");

RTGdataVal.setPropertyValue("TCaseName",testCase.getName());
RTGdataVal.setPropertyValue("TSuiteName",testSuite.getName());


def runnerRTC = RTGdataVal.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SAMLExpDate</con:name>
          <con:value>2013-06-14 18:31:45.0</con:value>
        </con:property>
        <con:property>
          <con:name>rcUUID</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>nodetype</con:name>
          <con:value>device</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>0702</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>sch-drm_user1</con:value>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>Password1</con:value>
        </con:property>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">A06A9AA49F7073D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">A06A9AA49F7973D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SAMLassertion</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">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</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>loopuntil</con:name>
          <con:value>25</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTS</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value>_f3840575-99c1-4beb-9b85-6eff2cb085ae</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value>urn:dece:userid:org:dece:A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value>A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value>urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value>A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>AccountID</con:name>
          <con:value>urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>ErrorDataVal</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetReqXml</con:name>
          <con:value>Authorization: SAML2 assertion=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
</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResXml</con:name>
          <con:value><![CDATA[<Device IsLegacy="false" DeviceID="urn:dece:deviceid:org:dece:A09D9C22F11CBC6DE0401F0A05996898" xmlns="http://www.decellc.org/schema/2010/10/dece" xmlns:ns2="http://www.movielabs.com/schema/md/v1.07/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <DisplayName>DeviceInfoDisplayName</DisplayName>
   <Manufacturer>Microsoft</Manufacturer>
   <Model>V344</Model>
   <Brand Language="en-US">DeviceInfoBrand</Brand>
   <SerialNo>123432442323424</SerialNo>
   <Image MimeType="MimeType3" Width="50" Height="50">http://www.oxygenxml.com/1234</Image>
   <LicAppID>urn:dece:licappid:org:dece:A09D9C22F11EBC6DE0401F0A05996898</LicAppID>
   <DRMClientID>urn:dece:drmclientid:org:dece:A0E2E4B822DB1B7CE0401F0A07994404</DRMClientID>
   <ResourceStatus>
      <Current CreatedBy="urn:dece:org:org:dece:0701" CreationDate="2011-04-11T04:02:39.637Z">
         <Value>urn:dece:type:status:pending</Value>
         <Description>Device Created</Description>
      </Current>
   </ResourceStatus>
</Device>]]></con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResTime</con:name>
          <con:value>442</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetID</con:name>
          <con:value>A09DA589BD63A036E0401F0A05996D9A</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceID</con:name>
          <con:value>urn:dece:deviceid:org:dece:A09D9C22F11CBC6DE0401F0A05996898</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeDVGGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>SqlStr</con:name>
          <con:value>select Status from USER_STATUS_REF where Status !='active'</con:value>
        </con:property>
        <con:property>
          <con:name>DomainID</con:name>
          <con:value>urn:dece:domainid:dece:A09DA589BD63A036E0401F0A05996D9A</con:value>
        </con:property>
      <con:property><con:name>audienceNodeid</con:name><con:value>0702</con:value></con:property></con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00016_DeviceGet_RetailerCS_FUNC_Verify_DeviceID_Belongs_to_Account" searchProperties="true" disabled="true">
      <con:description>This test case will verify that Application Tier properly handles a DeviceGet request when invoked with the GET method and Invalid Account ID in request .

Expected Result:

System should return an Error message.</con:description>
      <con:settings/>
      <con:testStep type="groovy" name="Verify Node User SAML Asssertion">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.model.testsuite.TestRunner.Status


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def ValSamlAssertion = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Validate SAML Assertion");

	ValSamlAssertion.setPropertyValue("TCaseName",testCase.getName());
	ValSamlAssertion.setPropertyValue("TSuiteName",testSuite.getName());

	def runnerTc = ValSamlAssertion.run( null , false )
	assert runnerTc.status == Status.FINISHED;

	rcUUID = testCase.getPropertyValue("rcUUID");

	if (runnerTc.status != Status.FINISHED || rcUUID.toInteger()!= 1){

			
		testCase.setPropertyValue("nodetype","device");
		testCase.setPropertyValue("nodeid","0701");
		testCase.setPropertyValue("username","sch-drm_user1");
		testCase.setPropertyValue("password","Password1");
		testCase.setPropertyValue("accountoid",null);
		testCase.setPropertyValue("useroid",null);
		testCase.setPropertyValue("assertid",null);
		testCase.setPropertyValue("SAMLassertion",null);
		testCase.setPropertyValue("tokentype","urn:dece:type:tokentype:usernamepassword");
		testCase.setPropertyValue("loopuntil","25");
		testCase.setPropertyValue("expectErrTypeSTS","SUCCESS");
		testCase.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
			
		log.info " SAML Assertion Expired ! re-generating Assertion";
		def RunSTS = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get SAML Assertion - STS")

				RunSTS.setPropertyValue("TCaseName",testCase.getName());
				RunSTS.setPropertyValue("TSuiteName",testSuite.getName());

				def runnerSTS = RunSTS.run( null , false )

				assert runnerSTS.status == Status.FINISHED;

		}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call LicAppCreate Request with Valid Data" disabled="true">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0");
testCase.setPropertyValue("expectErrTypeLAC","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedDeviceDDReq = testProject.getTestSuiteByName("Staging DeviceGet").getTestCaseByName("LicAppCreate Request");

FeedDeviceDDReq.setPropertyValue("TCaseName",testCase.getName());
FeedDeviceDDReq.setPropertyValue("TSuiteName",testSuite.getName());


def runnerTC = FeedDeviceDDReq.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Feed DeviceGet Request with Invalid DeviceID">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


// setup Retailer CS Nodeid with the account
testCase.setPropertyValue("NodeID","0702");


//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0");
testCase.setPropertyValue("DeviceID","urn:dece:deviceid:org:dece:A04559CE239D84F3E0401F0A07993907");
testCase.setPropertyValue("DomainID","urn:dece:domainid:dece:A09DA589BD63A036E0401F0A05996D9A");
testCase.setPropertyValue("expectErrType","DEVICEID_NOT_FOUND");
testCase.setPropertyValue("ErrorDataVal","1");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedRTLReq = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request");

FeedRTLReq.setPropertyValue("TCaseName",testCase.getName());
FeedRTLReq.setPropertyValue("TSuiteName",testSuite.getName());

WsdlTestCaseRunner TSrunner = new WsdlTestCaseRunner( FeedRTLReq, null );

TSrunner.runTestStepByName("Get the DeviceGet Properties");
TSrunner.runTestStepByName("pem set");
assert TSrunner.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call DeviceGet Request">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )

WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );

TSrunnerRTC.runTestStepByName("DeviceGetRequest");

assert TSrunnerRTC.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract DeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Extract DeviceGet Information")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify theDeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Response Validation")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SAMLExpDate</con:name>
          <con:value>2012-04-18 16:10:01.0</con:value>
        </con:property>
        <con:property>
          <con:name>rcUUID</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>nodetype</con:name>
          <con:value>device</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>0701</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>sch-drm_user1</con:value>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>Password1</con:value>
        </con:property>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">A06A9AA49F7073D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">A06A9AA49F7973D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SAMLassertion</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">nVdbc6JME773V1jupZUAKipWkqrhKCoqCJ7uEIaDIiAHQX79N2A0JpvN7vtdpMw0fXim+5menpdYP3qtAYhjGCVu4NdF9rUBKbxjET39STfx7lOng/efdl2SeMIpq99vtXu6hRONuhjHKRT9ONH95LXRwgmk0Hki+irRHZD4gOw9U2R726gvYRQjz0jlGW/U86Pnx4Mq6msjjfxBoMduPPD1I4wHiTFYAGkyQJoD/Qap8fZyBVkFjN6cJAkHGGY8m9CAnmc8G8ERe8E+6byY8WDh2r6epBF8j2nGr4132yzLnrP2cxDZWAvHcQynMKRjxq79q/FWuxlDU/St4LpmdD/wXUP33EIvQUkwcQKzDjw7iNzEOf7BNYEReOn6CebGk0F0/F8N7CNAhe4fPX0CGcX6U+zoxM2ZAi0YQd+AdU0RXxu//qmAV1M10v3YCqJj/GX93xBB/wy9IITmU3zb2A3cv3v8JltvL9AYiL7hpbF7htOSJaFuwLg+j6Dl5hM3Rtwz43pV/Xoe3wgGjf9SkRfsESeCjX2TGda1YZz8P+V6LNXVy1L3UvhGndRZJhVdVnDkbh6kmtddWLSgFdvOawXhUfkK6l7p9/VXnt5p9W7Eb0Ir2M+bpqJTkZsFtpNqSdY2ThSeWoQtELa8YlbD3DqJaTvECWkzJHrxkumdJxutRZBLu7soFqfmyZvPa/ZuqHbwVYYL1lwtvG6npaepB8dkYvd2nDh3SB+E3OiwDPKzQ7EF1j8nTLZIugHRYYaAZZtrzjQ4T3O8Zc1S1N2M2tLjTBeOGWhaE/H1Y0+Peyj3NYaXapPl/2sSp1g90e8LpmwUFjqdCXyTRJFNC4YBl4UNMpEGNvrbgyltH07OwRWoDKeBLPOAZWhvz00kcBAAoXG0IzHLpZQzBRjR9nSJDNUa8La0pHAZm23YpSwPucxRTWF52Qleui24qQTiyphxJE7hlqyicpIEgqssl9idkO+lhZSJ8oatIQcsl4eFKVAJFHLXaImktCBbmwWZbtdLJOcvk+P0vFM5T2IkgVmchIW4a7MyNwLKZmW0+BTZFpNjGNQ2Gv1gNArhHkA+w1FMUEjqIZNUrTVlFb2SqZ9lkiiMJDnOGLnalVDjstFSKz5ywdASYx65nFPB/JoLQ2X4Kb5dj2J9RfqSAjLWrozHXGbObkAkGc9qzDVXEy5TOEWb8pIiZhyoZCyXefGuNXV2gnM22nI+UsH+sTCMzK14H333lbNxIU81XeDB7rgkjLbiGC7p6usgs7f9jJU3o3GwFZGbKZA5mpYBAoSDcmso/zSY0EtyFrpUy4UTiw+O0IlqEhGMD+cix/tue2bPpyuStQ69ueDO27rpYKJntPbtAxBFaI4JR9ZNZYMprO8W3dlYW0M32hTJlJSJrtsna8oq1dZs4PXM4XqjjZv5xpDV2XyhreZFnk9P+37hJcMZPYwWI4m1Z1MI57HRxHCdp9U+SzKb4R7xyVJwSNaALdEACHvb5lxEYHq4v5JwqEgcIi+QmExgVoywAILQ5ESalWWLd4i5ISxTjZhKImd6KE2XzVrxaluGZlGlcH21DTctHt+qwKycyR2Ot2WNbI7WcCtPPXWZgCxcWj5B4EIoDy0psw2pZIApZgsanSK6lopA02fhCM/Hyy5OnGTTGy0ooLXzReuQzxx7eznY2wMqyubh6GxU4C3VB46JiGKrmqxyigT61/OWS6LWVjzjmIe7o5GzKqpZZRyoNKfwMq7lLAvGV1msglYebwpuLzFcZV8DuaQjWpx3ayfe+FN3pnIpIm36QJf9roX/lWMlxWqfOXZigAy+coy7cowD1qkp9lkiJrtMGK8ymxa4k9xbTkZUiMvryaFGN3nMTlyvM/P7mTpurohL1nP28mpFiazDNH1r47R3CY3rhSHD0aEnuMqB9bsd7yJNJJnUXMy74Ht4yuJJbSoSPtdOCh6jorRJH7fusSjanZZ2nC/Ss6jp45i4OLvTisr282EXwyLhQha97Vnm14Gxud4jX5vkXXhto9hjg/3UgW+j1yLd7aGR3JblPSyydR5djnry8xhXSlzzyapUB2E5C8YJ9JPGW2lVjnCDFA16rjlAN+d1DfAuoADoUHyv12uzPQ7v4ASPA5ykKILk8dusd0XxBSIT+JZbxiqH2etl/TNA4zjYQT2CUeMHT2We6qKvoOkj8GOoBq8NDrSoHkGAHoMQ9mi+3+YAw/A9vku06TbHN+rTIJn5swhYCYweBmTq64CsQMMNXVhO0e+zRJygRJz0c5p4xPNZf/ZhisbsqJx0B61On6wSgJnpMTTQB9TdojCIk+fQCath5o/b+PrttmOkY7qlQlyCpiGqFvxmpO/cEP+2s9a3o//NPUhNt5xZUPqSyDWuSD5/+mBDSYM7FfAeTtww31X/2bT1uyn2AyLsazLukcyz+xD39jBBszYax6r3SIyKdtKfT8/p+ZxWZerheAuLkHuMwHBsAY0UjYsXNThAH7t7wP5lUL9j/hL3Lv+MLk0cf5GgU35EjKpXy78/0j5ZowQkME++kzEeepaVwX98uRkDo9RD4jn6yYLI/Mj7N74e4iDIZYdyfbtclRP25XN530/CwAiQVxc1qSB69P2d/XexPwvv6bpDSRArdmkC//ylXnaf14ZuGEHqJyLbqASPHbHCnFxCOPhQ+s1NNeK+v1ny+I9vlrU0WRgOPOqNu677d+Untyq8AZFV7FZYXhs5en2j4L790IHfAX7fhLvcT034807efhP/LnnI6Vdmv/0P</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>loopuntil</con:name>
          <con:value>25</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTS</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value>e904f17a-ad06-4408-b651-09f88237af01</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value>urn:dece:userid:org:dece:A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value>A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value>urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value>A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>AccountID</con:name>
          <con:value>urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>ErrorDataVal</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>DEVICEID_NOT_FOUND</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetReqXml</con:name>
          <con:value>Host: qa.q.uvvu.com:7002</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResXml</con:name>
          <con:value><![CDATA[<Device IsLegacy="false" DeviceID="urn:dece:deviceid:org:dece:A04559CE239D84F3E0401F0A07993907" xmlns="http://www.decellc.org/schema/2010/10/dece" xmlns:ns2="http://www.movielabs.com/schema/md/v1.07/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <DisplayName>DeviceInfoDisplayName</DisplayName>
   <Manufacturer>DeviceInfoManufacturer</Manufacturer>
   <Model>DeviceInfoModel</Model>
   <Brand Language="en-US">DeviceInfoBrand</Brand>
   <SerialNo>DeviceInfoSerialNo</SerialNo>
   <Image MimeType="MimeType3" Width="50" Height="50">http://www.oxygenxml.com/</Image>
   <LicAppID>urn:dece:licappid:org:dece:A04559CE239F84F3E0401F0A07993907</LicAppID>
   <ResourceStatus>
      <Current CreatedBy="urn:dece:org:org:dece:1397" CreationDate="2011-04-06T19:02:37.674Z">
         <Value>urn:dece:type:status:pending</Value>
         <Description>Device Created</Description>
      </Current>
   </ResourceStatus>
</Device>]]></con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResTime</con:name>
          <con:value>183</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetID</con:name>
          <con:value>Device ID Invalid.https://qa.q.uvvu.com:7002/rest/1/0/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3AA06A9AA49F6E73D7E0401F0A059915F0/Device/urn%3Adece%3Adeviceid%3Aorg%3Adece%3A/DECEDomainhttps://qa.q.uvvu.com:7002/rest/1/0/error/en/ErrorList.html#DeviceIdInvalid</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceID</con:name>
          <con:value>urn:dece:deviceid:org:dece:A04559CE239D84F3E0401F0A07993907</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeDVGGet</con:name>
          <con:value>ACCOUNTID NOT MATCH</con:value>
        </con:property>
        <con:property>
          <con:name>DomainID</con:name>
          <con:value>urn:dece:domainid:dece:A09DA589BD63A036E0401F0A05996D9A</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00017_DeviceGet_RetailerCS_FUNC_with_Verify_Device_Info" searchProperties="true">
      <con:description>This test case will verify that Application Tier properly handles a DeviceGet request when invoked with the GET method and valid header request .

Expected Result:

System should return successful message.</con:description>
      <con:settings/>
      <con:testStep type="groovy" name="Verify Node User SAML Asssertion">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.model.testsuite.TestRunner.Status


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def ValSamlAssertion = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Validate SAML Assertion");

	ValSamlAssertion.setPropertyValue("TCaseName",testCase.getName());
	ValSamlAssertion.setPropertyValue("TSuiteName",testSuite.getName());

	def runnerTc = ValSamlAssertion.run( null , false )
	assert runnerTc.status == Status.FINISHED;

	rcUUID = testCase.getPropertyValue("rcUUID");

	if (runnerTc.status != Status.FINISHED || rcUUID.toInteger()!= 1){

			
		testCase.setPropertyValue("nodetype","retailer");
		testCase.setPropertyValue("nodeid","0701");
		testCase.setPropertyValue("audienceNodeid","0702");
		testCase.setPropertyValue("username","sch-drm_user1");
		testCase.setPropertyValue("password","Password1");
		testCase.setPropertyValue("accountoid",null);
		testCase.setPropertyValue("useroid",null);
		testCase.setPropertyValue("assertid",null);
		testCase.setPropertyValue("SAMLassertion",null);
		testCase.setPropertyValue("tokentype","urn:dece:type:tokentype:usernamepassword");
		testCase.setPropertyValue("loopuntil","25");
		testCase.setPropertyValue("expectErrTypeSTS","SUCCESS");
		testCase.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
			
		log.info " SAML Assertion Expired ! re-generating Assertion";
		def RunSTS = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get SAML Assertion - STS")

				RunSTS.setPropertyValue("TCaseName",testCase.getName());
				RunSTS.setPropertyValue("TSuiteName",testSuite.getName());

				def runnerSTS = RunSTS.run( null , false )

				assert runnerSTS.status == Status.FINISHED;

		}</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call LicAppCreate Request with Valid Data" disabled="true">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0");
testCase.setPropertyValue("expectErrTypeLAC","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedDeviceDDReq = testProject.getTestSuiteByName("Staging DeviceGet").getTestCaseByName("LicAppCreate Request");

FeedDeviceDDReq.setPropertyValue("TCaseName",testCase.getName());
FeedDeviceDDReq.setPropertyValue("TSuiteName",testSuite.getName());


def runnerTC = FeedDeviceDDReq.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Feed DeviceGet Request with Valid Data">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


// setup Retailer CS Nodeid with the account
testCase.setPropertyValue("NodeID","0702");


//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0");
testCase.setPropertyValue("DeviceID","urn:dece:deviceid:org:dece:A09D9C22F11CBC6DE0401F0A05996898");
testCase.setPropertyValue("DomainID","urn:dece:domainid:dece:A09DA589BD63A036E0401F0A05996D9A");
testCase.setPropertyValue("expectErrType","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedRTLReq = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request");

FeedRTLReq.setPropertyValue("TCaseName",testCase.getName());
FeedRTLReq.setPropertyValue("TSuiteName",testSuite.getName());

WsdlTestCaseRunner TSrunner = new WsdlTestCaseRunner( FeedRTLReq, null );

TSrunner.runTestStepByName("Get the DeviceGet Properties");
TSrunner.runTestStepByName("pem set");
assert TSrunner.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call DeviceGet Request">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )

WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );

TSrunnerRTC.runTestStepByName("DeviceGetRequest");

assert TSrunnerRTC.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract DeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Extract DeviceGet Information")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify theDeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Response Validation")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify the DeviceGet Response against DB Result">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGdataVal = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Data Validation");

RTGdataVal.setPropertyValue("TCaseName",testCase.getName());
RTGdataVal.setPropertyValue("TSuiteName",testSuite.getName());


def runnerRTC = RTGdataVal.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SAMLExpDate</con:name>
          <con:value>2013-06-14 18:31:45.0</con:value>
        </con:property>
        <con:property>
          <con:name>rcUUID</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>nodetype</con:name>
          <con:value>retailer</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>0702</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>sch-drm_user1</con:value>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>Password1</con:value>
        </con:property>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">A06A9AA49F7073D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">A06A9AA49F7973D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SAMLassertion</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">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</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>loopuntil</con:name>
          <con:value>25</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTS</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value>_3d3d0b69-626c-42c5-b9c9-5d42b98a55b6</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value>urn:dece:userid:org:dece:A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value>A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value>urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value>A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>AccountID</con:name>
          <con:value>urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>ErrorDataVal</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetReqXml</con:name>
          <con:value>Authorization: SAML2 assertion=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
</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResXml</con:name>
          <con:value><![CDATA[<Device IsLegacy="false" DeviceID="urn:dece:deviceid:org:dece:A09D9C22F11CBC6DE0401F0A05996898" xmlns="http://www.decellc.org/schema/2010/10/dece" xmlns:ns2="http://www.movielabs.com/schema/md/v1.07/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <DisplayName>DeviceInfoDisplayName</DisplayName>
   <Manufacturer>Microsoft</Manufacturer>
   <Model>V344</Model>
   <Brand Language="en-US">DeviceInfoBrand</Brand>
   <SerialNo>123432442323424</SerialNo>
   <Image MimeType="MimeType3" Width="50" Height="50">http://www.oxygenxml.com/1234</Image>
   <LicAppID>urn:dece:licappid:org:dece:A09D9C22F11EBC6DE0401F0A05996898</LicAppID>
   <DRMClientID>urn:dece:drmclientid:org:dece:A0E2E4B822DB1B7CE0401F0A07994404</DRMClientID>
   <ResourceStatus>
      <Current CreatedBy="urn:dece:org:org:dece:0701" CreationDate="2011-04-11T04:02:39.637Z">
         <Value>urn:dece:type:status:pending</Value>
         <Description>Device Created</Description>
      </Current>
   </ResourceStatus>
</Device>]]></con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResTime</con:name>
          <con:value>549</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceID</con:name>
          <con:value>urn:dece:deviceid:org:dece:A09D9C22F11CBC6DE0401F0A05996898</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeDVGGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>SqlStr</con:name>
          <con:value>select Status from USER_STATUS_REF where Status !='active'</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeLAC</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>DomainID</con:name>
          <con:value>urn:dece:domainid:dece:A09DA589BD63A036E0401F0A05996D9A</con:value>
        </con:property>
      <con:property><con:name>audienceNodeid</con:name><con:value>0702</con:value></con:property></con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00018_DeviceGet_RetailerCS_FUNC_with_Verify_LICAPP_ID" searchProperties="true">
      <con:description>This test case will verify that Application Tier properly handles a DeviceGet request when invoked with the GET method and valid header request .

Expected Result:

System should return successful message.</con:description>
      <con:settings/>
      <con:testStep type="groovy" name="Verify Node User SAML Asssertion">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.model.testsuite.TestRunner.Status


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def ValSamlAssertion = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Validate SAML Assertion");

	ValSamlAssertion.setPropertyValue("TCaseName",testCase.getName());
	ValSamlAssertion.setPropertyValue("TSuiteName",testSuite.getName());

	def runnerTc = ValSamlAssertion.run( null , false )
	assert runnerTc.status == Status.FINISHED;

	rcUUID = testCase.getPropertyValue("rcUUID");

	if (runnerTc.status != Status.FINISHED || rcUUID.toInteger()!= 1){

			
		testCase.setPropertyValue("nodetype","retailer");
		testCase.setPropertyValue("nodeid","0701");
		testCase.setPropertyValue("audienceNodeid","0702");
		testCase.setPropertyValue("username","sch-drm_user1");
		testCase.setPropertyValue("password","Password1");
		testCase.setPropertyValue("accountoid",null);
		testCase.setPropertyValue("useroid",null);
		testCase.setPropertyValue("assertid",null);
		testCase.setPropertyValue("SAMLassertion",null);
		testCase.setPropertyValue("tokentype","urn:dece:type:tokentype:usernamepassword");
		testCase.setPropertyValue("loopuntil","25");
		testCase.setPropertyValue("expectErrTypeSTS","SUCCESS");
		testCase.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
			
		log.info " SAML Assertion Expired ! re-generating Assertion";
		def RunSTS = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get SAML Assertion - STS")

				RunSTS.setPropertyValue("TCaseName",testCase.getName());
				RunSTS.setPropertyValue("TSuiteName",testSuite.getName());

				def runnerSTS = RunSTS.run( null , false )

				assert runnerSTS.status == Status.FINISHED;

		}</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call LicAppCreate Request with Valid Data" disabled="true">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0");
testCase.setPropertyValue("expectErrTypeLAC","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedDeviceDDReq = testProject.getTestSuiteByName("Staging DeviceGet").getTestCaseByName("LicAppCreate Request");

FeedDeviceDDReq.setPropertyValue("TCaseName",testCase.getName());
FeedDeviceDDReq.setPropertyValue("TSuiteName",testSuite.getName());


def runnerTC = FeedDeviceDDReq.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Feed DeviceGet Request with Valid Data">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


// setup Retailer CS Nodeid with the account
testCase.setPropertyValue("NodeID","0702");


//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0");
testCase.setPropertyValue("DeviceID","urn:dece:deviceid:org:dece:A09D9C22F11CBC6DE0401F0A05996898");
testCase.setPropertyValue("DomainID","urn:dece:domainid:dece:A09DA589BD63A036E0401F0A05996D9A");
testCase.setPropertyValue("expectErrType","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedRTLReq = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request");

FeedRTLReq.setPropertyValue("TCaseName",testCase.getName());
FeedRTLReq.setPropertyValue("TSuiteName",testSuite.getName());

WsdlTestCaseRunner TSrunner = new WsdlTestCaseRunner( FeedRTLReq, null );

TSrunner.runTestStepByName("Get the DeviceGet Properties");
TSrunner.runTestStepByName("pem set");
assert TSrunner.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call DeviceGet Request">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )

WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );

TSrunnerRTC.runTestStepByName("DeviceGetRequest");

assert TSrunnerRTC.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract DeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Extract DeviceGet Information")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify theDeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Response Validation")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify the DeviceGet Response against DB Result">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGdataVal = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Data Validation");

RTGdataVal.setPropertyValue("TCaseName",testCase.getName());
RTGdataVal.setPropertyValue("TSuiteName",testSuite.getName());


def runnerRTC = RTGdataVal.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SAMLExpDate</con:name>
          <con:value>2013-06-14 18:31:45.0</con:value>
        </con:property>
        <con:property>
          <con:name>rcUUID</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>nodetype</con:name>
          <con:value>retailer</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>0702</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>sch-drm_user1</con:value>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>Password1</con:value>
        </con:property>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">A06A9AA49F7073D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">A06A9AA49F7973D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SAMLassertion</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">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</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>loopuntil</con:name>
          <con:value>25</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTS</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value>_90c1ae2b-4ac0-4606-a134-88ff6282d2f4</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value>urn:dece:userid:org:dece:A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value>A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value>urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value>A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>AccountID</con:name>
          <con:value>urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>ErrorDataVal</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetReqXml</con:name>
          <con:value>Authorization: SAML2 assertion=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
</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResXml</con:name>
          <con:value><![CDATA[<Device IsLegacy="false" DeviceID="urn:dece:deviceid:org:dece:A09D9C22F11CBC6DE0401F0A05996898" xmlns="http://www.decellc.org/schema/2010/10/dece" xmlns:ns2="http://www.movielabs.com/schema/md/v1.07/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <DisplayName>DeviceInfoDisplayName</DisplayName>
   <Manufacturer>Microsoft</Manufacturer>
   <Model>V344</Model>
   <Brand Language="en-US">DeviceInfoBrand</Brand>
   <SerialNo>123432442323424</SerialNo>
   <Image MimeType="MimeType3" Width="50" Height="50">http://www.oxygenxml.com/1234</Image>
   <LicAppID>urn:dece:licappid:org:dece:A09D9C22F11EBC6DE0401F0A05996898</LicAppID>
   <DRMClientID>urn:dece:drmclientid:org:dece:A0E2E4B822DB1B7CE0401F0A07994404</DRMClientID>
   <ResourceStatus>
      <Current CreatedBy="urn:dece:org:org:dece:0701" CreationDate="2011-04-11T04:02:39.637Z">
         <Value>urn:dece:type:status:pending</Value>
         <Description>Device Created</Description>
      </Current>
   </ResourceStatus>
</Device>]]></con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResTime</con:name>
          <con:value>484</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceID</con:name>
          <con:value>urn:dece:deviceid:org:dece:A09D9C22F11CBC6DE0401F0A05996898</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeDVGGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>SqlStr</con:name>
          <con:value>select Status from USER_STATUS_REF where Status !='active'</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeLAC</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>DomainID</con:name>
          <con:value>urn:dece:domainid:dece:A09DA589BD63A036E0401F0A05996D9A</con:value>
        </con:property>
      <con:property><con:name>audienceNodeid</con:name><con:value>0702</con:value></con:property></con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00019_DeviceGet_RetailerCS_FUNC_with_Verify_DRMClientID" searchProperties="true">
      <con:description>This test case will verify that Application Tier properly handles a DeviceGet request when invoked with the GET method and valid header request .

Expected Result:

System should return successful message.</con:description>
      <con:settings/>
      <con:testStep type="groovy" name="Verify Node User SAML Asssertion">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.model.testsuite.TestRunner.Status


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def ValSamlAssertion = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Validate SAML Assertion");

	ValSamlAssertion.setPropertyValue("TCaseName",testCase.getName());
	ValSamlAssertion.setPropertyValue("TSuiteName",testSuite.getName());

	def runnerTc = ValSamlAssertion.run( null , false )
	assert runnerTc.status == Status.FINISHED;

	rcUUID = testCase.getPropertyValue("rcUUID");

	if (runnerTc.status != Status.FINISHED || rcUUID.toInteger()!= 1){

			
		testCase.setPropertyValue("nodetype","retailer");
		testCase.setPropertyValue("nodeid","0701");
		testCase.setPropertyValue("audienceNodeid","0702");
		testCase.setPropertyValue("username","sch-drm_user1");
		testCase.setPropertyValue("password","Password1");
		testCase.setPropertyValue("accountoid",null);
		testCase.setPropertyValue("useroid",null);
		testCase.setPropertyValue("assertid",null);
		testCase.setPropertyValue("SAMLassertion",null);
		testCase.setPropertyValue("tokentype","urn:dece:type:tokentype:usernamepassword");
		testCase.setPropertyValue("loopuntil","25");
		testCase.setPropertyValue("expectErrTypeSTS","SUCCESS");
		testCase.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
			
		log.info " SAML Assertion Expired ! re-generating Assertion";
		def RunSTS = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get SAML Assertion - STS")

				RunSTS.setPropertyValue("TCaseName",testCase.getName());
				RunSTS.setPropertyValue("TSuiteName",testSuite.getName());

				def runnerSTS = RunSTS.run( null , false )

				assert runnerSTS.status == Status.FINISHED;

		}</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call LicAppCreate Request with Valid Data" disabled="true">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0");
testCase.setPropertyValue("expectErrTypeLAC","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedDeviceDDReq = testProject.getTestSuiteByName("Staging DeviceGet").getTestCaseByName("LicAppCreate Request");

FeedDeviceDDReq.setPropertyValue("TCaseName",testCase.getName());
FeedDeviceDDReq.setPropertyValue("TSuiteName",testSuite.getName());


def runnerTC = FeedDeviceDDReq.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Feed DeviceGet Request with Valid Data">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//RightsToken Request and properties

// setup Retailer CS Nodeid with the account
testCase.setPropertyValue("NodeID","0702");


//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0");
testCase.setPropertyValue("DeviceID","urn:dece:deviceid:org:dece:A09D9C22F11CBC6DE0401F0A05996898");
testCase.setPropertyValue("DomainID","urn:dece:domainid:dece:A09DA589BD63A036E0401F0A05996D9A");
testCase.setPropertyValue("expectErrType","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedRTLReq = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request");

FeedRTLReq.setPropertyValue("TCaseName",testCase.getName());
FeedRTLReq.setPropertyValue("TSuiteName",testSuite.getName());

WsdlTestCaseRunner TSrunner = new WsdlTestCaseRunner( FeedRTLReq, null );

TSrunner.runTestStepByName("Get the DeviceGet Properties");
TSrunner.runTestStepByName("pem set");
assert TSrunner.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call DeviceGet Request">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )

WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );

TSrunnerRTC.runTestStepByName("DeviceGetRequest");

assert TSrunnerRTC.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract DeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Extract DeviceGet Information")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify theDeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Response Validation")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify the DeviceGet Response against DB Result">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGdataVal = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Data Validation");

RTGdataVal.setPropertyValue("TCaseName",testCase.getName());
RTGdataVal.setPropertyValue("TSuiteName",testSuite.getName());


def runnerRTC = RTGdataVal.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SAMLExpDate</con:name>
          <con:value>2013-06-14 18:31:45.0</con:value>
        </con:property>
        <con:property>
          <con:name>rcUUID</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>nodetype</con:name>
          <con:value>retailer</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>0702</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>sch-drm_user1</con:value>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>Password1</con:value>
        </con:property>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">A06A9AA49F7073D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">A06A9AA49F7973D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SAMLassertion</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">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</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>loopuntil</con:name>
          <con:value>25</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTS</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value>_1702250c-a85f-4527-9d81-fb3eaaa05a15</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value>urn:dece:userid:org:dece:A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value>A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value>urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value>A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>AccountID</con:name>
          <con:value>urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>ErrorDataVal</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetReqXml</con:name>
          <con:value>Authorization: SAML2 assertion=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
</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResXml</con:name>
          <con:value><![CDATA[<Device IsLegacy="false" DeviceID="urn:dece:deviceid:org:dece:A09D9C22F11CBC6DE0401F0A05996898" xmlns="http://www.decellc.org/schema/2010/10/dece" xmlns:ns2="http://www.movielabs.com/schema/md/v1.07/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <DisplayName>DeviceInfoDisplayName</DisplayName>
   <Manufacturer>Microsoft</Manufacturer>
   <Model>V344</Model>
   <Brand Language="en-US">DeviceInfoBrand</Brand>
   <SerialNo>123432442323424</SerialNo>
   <Image MimeType="MimeType3" Width="50" Height="50">http://www.oxygenxml.com/1234</Image>
   <LicAppID>urn:dece:licappid:org:dece:A09D9C22F11EBC6DE0401F0A05996898</LicAppID>
   <DRMClientID>urn:dece:drmclientid:org:dece:A0E2E4B822DB1B7CE0401F0A07994404</DRMClientID>
   <ResourceStatus>
      <Current CreatedBy="urn:dece:org:org:dece:0701" CreationDate="2011-04-11T04:02:39.637Z">
         <Value>urn:dece:type:status:pending</Value>
         <Description>Device Created</Description>
      </Current>
   </ResourceStatus>
</Device>]]></con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResTime</con:name>
          <con:value>488</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceID</con:name>
          <con:value>urn:dece:deviceid:org:dece:A09D9C22F11CBC6DE0401F0A05996898</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeDVGGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>SqlStr</con:name>
          <con:value>select Status from USER_STATUS_REF where Status !='active'</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeLAC</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>DomainID</con:name>
          <con:value>urn:dece:domainid:dece:A09DA589BD63A036E0401F0A05996D9A</con:value>
        </con:property>
      <con:property><con:name>audienceNodeid</con:name><con:value>0702</con:value></con:property></con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00020_DeviceGet_RetailerCS_FUNC_with_Verify_Resource_Status" searchProperties="true">
      <con:description>This test case will verify that Application Tier properly handles a DeviceGet request when invoked with the GET method and valid header request .

Expected Result:

System should return successful message.</con:description>
      <con:settings/>
      <con:testStep type="groovy" name="Verify Node User SAML Asssertion">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.model.testsuite.TestRunner.Status


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def ValSamlAssertion = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Validate SAML Assertion");

	ValSamlAssertion.setPropertyValue("TCaseName",testCase.getName());
	ValSamlAssertion.setPropertyValue("TSuiteName",testSuite.getName());

	def runnerTc = ValSamlAssertion.run( null , false )
	assert runnerTc.status == Status.FINISHED;

	rcUUID = testCase.getPropertyValue("rcUUID");

	if (runnerTc.status != Status.FINISHED || rcUUID.toInteger()!= 1){

			
		testCase.setPropertyValue("nodetype","retailer");
		testCase.setPropertyValue("nodeid","0701");
		testCase.setPropertyValue("audienceNodeid","0702");
		testCase.setPropertyValue("username","sch-drm_user1");
		testCase.setPropertyValue("password","Password1");
		testCase.setPropertyValue("accountoid",null);
		testCase.setPropertyValue("useroid",null);
		testCase.setPropertyValue("assertid",null);
		testCase.setPropertyValue("SAMLassertion",null);
		testCase.setPropertyValue("tokentype","urn:dece:type:tokentype:usernamepassword");
		testCase.setPropertyValue("loopuntil","25");
		testCase.setPropertyValue("expectErrTypeSTS","SUCCESS");
		testCase.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
			
		log.info " SAML Assertion Expired ! re-generating Assertion";
		def RunSTS = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get SAML Assertion - STS")

				RunSTS.setPropertyValue("TCaseName",testCase.getName());
				RunSTS.setPropertyValue("TSuiteName",testSuite.getName());

				def runnerSTS = RunSTS.run( null , false )

				assert runnerSTS.status == Status.FINISHED;

		}</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call LicAppCreate Request with Valid Data" disabled="true">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0");
testCase.setPropertyValue("expectErrTypeLAC","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedDeviceDDReq = testProject.getTestSuiteByName("Staging DeviceGet").getTestCaseByName("LicAppCreate Request");

FeedDeviceDDReq.setPropertyValue("TCaseName",testCase.getName());
FeedDeviceDDReq.setPropertyValue("TSuiteName",testSuite.getName());


def runnerTC = FeedDeviceDDReq.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Feed DeviceGet Request with Valid Data">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


// setup Retailer CS Nodeid with the account
testCase.setPropertyValue("NodeID","0702");

//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0");
testCase.setPropertyValue("DeviceID","urn:dece:deviceid:org:dece:A09D9C22F11CBC6DE0401F0A05996898");
testCase.setPropertyValue("DomainID","urn:dece:domainid:dece:A09DA589BD63A036E0401F0A05996D9A");
testCase.setPropertyValue("expectErrType","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedRTLReq = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request");

FeedRTLReq.setPropertyValue("TCaseName",testCase.getName());
FeedRTLReq.setPropertyValue("TSuiteName",testSuite.getName());

WsdlTestCaseRunner TSrunner = new WsdlTestCaseRunner( FeedRTLReq, null );

TSrunner.runTestStepByName("Get the DeviceGet Properties");
TSrunner.runTestStepByName("pem set");
assert TSrunner.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call DeviceGet Request">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )

WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );

TSrunnerRTC.runTestStepByName("DeviceGetRequest");

assert TSrunnerRTC.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract DeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Extract DeviceGet Information")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify theDeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Response Validation")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify the DeviceGet Response against DB Result">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGdataVal = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Data Validation");

RTGdataVal.setPropertyValue("TCaseName",testCase.getName());
RTGdataVal.setPropertyValue("TSuiteName",testSuite.getName());


def runnerRTC = RTGdataVal.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SAMLExpDate</con:name>
          <con:value>2013-06-14 18:31:45.0</con:value>
        </con:property>
        <con:property>
          <con:name>rcUUID</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>nodetype</con:name>
          <con:value>retailer</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>0702</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>sch-drm_user1</con:value>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>Password1</con:value>
        </con:property>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">A06A9AA49F7073D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">A06A9AA49F7973D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SAMLassertion</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">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</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>loopuntil</con:name>
          <con:value>25</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTS</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value>_fc3bcf85-396d-49b6-9dce-d06db72730ce</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value>urn:dece:userid:org:dece:A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value>A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value>urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value>A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>AccountID</con:name>
          <con:value>urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>ErrorDataVal</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetReqXml</con:name>
          <con:value>Authorization: SAML2 assertion=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
</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResXml</con:name>
          <con:value><![CDATA[<Device IsLegacy="false" DeviceID="urn:dece:deviceid:org:dece:A09D9C22F11CBC6DE0401F0A05996898" xmlns="http://www.decellc.org/schema/2010/10/dece" xmlns:ns2="http://www.movielabs.com/schema/md/v1.07/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <DisplayName>DeviceInfoDisplayName</DisplayName>
   <Manufacturer>Microsoft</Manufacturer>
   <Model>V344</Model>
   <Brand Language="en-US">DeviceInfoBrand</Brand>
   <SerialNo>123432442323424</SerialNo>
   <Image MimeType="MimeType3" Width="50" Height="50">http://www.oxygenxml.com/1234</Image>
   <LicAppID>urn:dece:licappid:org:dece:A09D9C22F11EBC6DE0401F0A05996898</LicAppID>
   <DRMClientID>urn:dece:drmclientid:org:dece:A0E2E4B822DB1B7CE0401F0A07994404</DRMClientID>
   <ResourceStatus>
      <Current CreatedBy="urn:dece:org:org:dece:0701" CreationDate="2011-04-11T04:02:39.637Z">
         <Value>urn:dece:type:status:pending</Value>
         <Description>Device Created</Description>
      </Current>
   </ResourceStatus>
</Device>]]></con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResTime</con:name>
          <con:value>497</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceID</con:name>
          <con:value>urn:dece:deviceid:org:dece:A09D9C22F11CBC6DE0401F0A05996898</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeDVGGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>SqlStr</con:name>
          <con:value>select Status from USER_STATUS_REF where Status !='active'</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeLAC</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>DomainID</con:name>
          <con:value>urn:dece:domainid:dece:A09DA589BD63A036E0401F0A05996D9A</con:value>
        </con:property>
      <con:property><con:name>audienceNodeid</con:name><con:value>0702</con:value></con:property></con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_00021_DeviceGet_RetailerCS_FUNC_with_InActive AccountID_CS_ROLE_NOT_Allowed" searchProperties="true">
      <con:description>This test case will verify that Application Tier properly handles a DeviceGet request when invoked with the GET method and Invalid Account ID in request .

Expected Result:

System should return an Error message.</con:description>
      <con:settings/>
      <con:testStep type="groovy" name="Verify Node User SAML Asssertion">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.model.testsuite.TestRunner.Status


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def ValSamlAssertion = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Validate SAML Assertion");

	ValSamlAssertion.setPropertyValue("TCaseName",testCase.getName());
	ValSamlAssertion.setPropertyValue("TSuiteName",testSuite.getName());

	def runnerTc = ValSamlAssertion.run( null , false )
	assert runnerTc.status == Status.FINISHED;

	rcUUID = testCase.getPropertyValue("rcUUID");

	if (runnerTc.status != Status.FINISHED || rcUUID.toInteger()!= 1){

			
		testCase.setPropertyValue("nodetype","device");
		testCase.setPropertyValue("nodeid","0701");
		testCase.setPropertyValue("audienceNodeid","0702");
		testCase.setPropertyValue("username","sch-drm_user1");
		testCase.setPropertyValue("password","Password1");
		testCase.setPropertyValue("accountoid",null);
		testCase.setPropertyValue("useroid",null);
		testCase.setPropertyValue("assertid",null);
		testCase.setPropertyValue("SAMLassertion",null);
		testCase.setPropertyValue("tokentype","urn:dece:type:tokentype:usernamepassword");
		testCase.setPropertyValue("loopuntil","25");
		testCase.setPropertyValue("expectErrTypeSTS","SUCCESS");
		testCase.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
			
		log.info " SAML Assertion Expired ! re-generating Assertion";
		def RunSTS = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get SAML Assertion - STS")

				RunSTS.setPropertyValue("TCaseName",testCase.getName());
				RunSTS.setPropertyValue("TSuiteName",testSuite.getName());

				def runnerSTS = RunSTS.run( null , false )

				assert runnerSTS.status == Status.FINISHED;

		}</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call LicAppCreate Request with Valid Data" disabled="true">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0");
testCase.setPropertyValue("expectErrTypeLAC","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedDeviceDDReq = testProject.getTestSuiteByName("Staging DeviceGet").getTestCaseByName("LicAppCreate Request");

FeedDeviceDDReq.setPropertyValue("TCaseName",testCase.getName());
FeedDeviceDDReq.setPropertyValue("TSuiteName",testSuite.getName());


def runnerTC = FeedDeviceDDReq.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Get Account Inactive Statuses">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def GetAccountStatus = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get-Set Account Status");

// Get ALL inactive Status from ACCOUNT_STATUS_REF Except = 'Pending'

SqlStr = "select Status from ACCOUNT_STATUS_REF where Status !='active' AND Status !='archived' AND Status !='blocked' AND Status !='blocked:tou' AND Status !='pending' AND Status !='deleted'";


testCase.setPropertyValue("SqlStr",SqlStr);

GetAccountStatus.setPropertyValue("TCaseName",testCase.getName());
GetAccountStatus.setPropertyValue("TSuiteName",testSuite.getName());

WsdlTestCaseRunner TSrunner = new WsdlTestCaseRunner( GetAccountStatus, null );

TSrunner.runTestStepByName("Get Account Status for DVG");

assert TSrunner.status == Status.INITIALIZED;

 log.info " Current Account Status: " + testCase.getPropertyValue("AccountStatus");

testCase.getPropertyValue("AccountStatusXML");</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Feed DeviceGet Request with Inactive AccountID">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


// setup Retailer CS Nodeid with the account
testCase.setPropertyValue("NodeID","0702");


//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0");
testCase.setPropertyValue("DeviceID","urn:dece:deviceid:org:dece:A09D9C22F11CBC6DE0401F0A05996898");
testCase.setPropertyValue("DomainID","urn:dece:domainid:dece:A09DA589BD63A036E0401F0A05996D9A");
testCase.setPropertyValue("expectErrType","NODE_UNAUTHORIZED");
testCase.setPropertyValue("ErrorDataVal","1");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedRTLReq = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request");

FeedRTLReq.setPropertyValue("TCaseName",testCase.getName());
FeedRTLReq.setPropertyValue("TSuiteName",testSuite.getName());

WsdlTestCaseRunner TSrunner = new WsdlTestCaseRunner( FeedRTLReq, null );

TSrunner.runTestStepByName("Get the DeviceGet Properties");
TSrunner.runTestStepByName("pem set");
assert TSrunner.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="datasource" name="Feed DataSource for Inactive Account Statuses">
        <con:settings/>
        <con:config xsi:type="con:DataSourceStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:dataSource type="XML">
            <con:configuration><sourceStep>Get Account Inactive Statuses</sourceStep><sourceProperty>result</sourceProperty><rowPath>//Results[1]/ResultSet[1]/Row</rowPath><columnPath>STATUS</columnPath></con:configuration>
          </con:dataSource>
          <con:property>AccountStatus</con:property>
          <con:restartOnRun>true</con:restartOnRun>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="SetUp inactive Account Status for DVG">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

// SetUp the Node Status from the Data Source

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

// Get AccountStatus Values from Data Source

def DsAccountStatus = testRunner.testCase.testSteps['Feed DataSource for Inactive Account Statuses'];
log.info  "Account Status is to set to: " + DsAccountStatus.getPropertyValue("AccountStatus");

testCase.setPropertyValue("AccountStatus",DsAccountStatus.getPropertyValue("AccountStatus"));

def SetAccountStatus = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get-Set Account Status");

SetAccountStatus.setPropertyValue("TCaseName",testCase.getName());
SetAccountStatus.setPropertyValue("TSuiteName",testSuite.getName());

WsdlTestCaseRunner TSrunner = new WsdlTestCaseRunner( SetAccountStatus, null );

TSrunner.runTestStepByName("Set Account Status for DVG")

assert TSrunner.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call DeviceGet Request">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )

WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );

TSrunnerRTC.runTestStepByName("DeviceGetRequest");

assert TSrunnerRTC.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract DeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Extract DeviceGet Information")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify theDeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Response Validation")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="datasourceloop" name="DataSource Loop">
        <con:settings/>
        <con:config>
          <dataSourceStep>Feed DataSource for Inactive Account Statuses</dataSourceStep>
          <targetStep>SetUp inactive Account Status for DVG</targetStep>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Re-Setactive Account Status">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

// SetUp the Node Status from the Data Source

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

// Re-set AccountStatus Values  = 'active'

testCase.setPropertyValue("AccountStatus","active");

def SetAccountStatus = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get-Set Account Status");

SetAccountStatus.setPropertyValue("TCaseName",testCase.getName());
SetAccountStatus.setPropertyValue("TSuiteName",testSuite.getName());

WsdlTestCaseRunner TSrunner = new WsdlTestCaseRunner( SetAccountStatus, null );

TSrunner.runTestStepByName("Set Account Status for DVG")

assert TSrunner.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SAMLExpDate</con:name>
          <con:value>2013-06-15 02:50:22.0</con:value>
        </con:property>
        <con:property>
          <con:name>rcUUID</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>nodetype</con:name>
          <con:value>device</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>0702</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>sch-drm_user1</con:value>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>Password1</con:value>
        </con:property>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">A06A9AA49F7073D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">A06A9AA49F7973D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SAMLassertion</con:name>
          <con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">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</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>loopuntil</con:name>
          <con:value>25</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTS</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value>_f683db4c-40fd-45b6-99b3-57dea3984873</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value>urn:dece:userid:org:dece:A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value>A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value>urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value>A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>AccountID</con:name>
          <con:value>urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>ErrorDataVal</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>NODE_UNAUTHORIZED</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetReqXml</con:name>
          <con:value>Authorization: SAML2 assertion=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
</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResXml</con:name>
          <con:value><![CDATA[<Device IsLegacy="false" DeviceID="urn:dece:deviceid:org:dece:A09D9C22F11CBC6DE0401F0A05996898" xmlns="http://www.decellc.org/schema/2010/10/dece" xmlns:ns2="http://www.movielabs.com/schema/md/v1.07/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <DisplayName>DeviceInfoDisplayName</DisplayName>
   <Manufacturer>Microsoft</Manufacturer>
   <Model>V344</Model>
   <Brand Language="en-US">DeviceInfoBrand</Brand>
   <SerialNo>123432442323424</SerialNo>
   <Image MimeType="MimeType3" Width="50" Height="50">http://www.oxygenxml.com/1234</Image>
   <LicAppID>urn:dece:licappid:org:dece:A09D9C22F11EBC6DE0401F0A05996898</LicAppID>
   <DRMClientID>urn:dece:drmclientid:org:dece:A0E2E4B822DB1B7CE0401F0A07994404</DRMClientID>
   <ResourceStatus>
      <Current CreatedBy="urn:dece:org:org:dece:0701" CreationDate="2011-04-11T04:02:39.637Z">
         <Value>urn:dece:type:status:pending</Value>
         <Description>Device Created</Description>
      </Current>
   </ResourceStatus>
</Device>]]></con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResTime</con:name>
          <con:value>532</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetID</con:name>
          <con:value>The supplied AccountID is invalid.https://qa.q.uvvu.com:7002/rest/1/0/Account/urn%3Adece%3Aaccountid%3Aorg%3Aorg%3Aorg%3Adece%3AA06A9AA49F6E73D7E0401F0A059915F0/Device/urn%3Adece%3Adeviceid%3Aorg%3Adece%3AA09D9C22F11CBC6DE0401F0A05996898/DECEDomainhttps://qa.q.uvvu.com:7002/rest/1/0/error/en/ErrorList.html#AccountIdNotValid</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceID</con:name>
          <con:value>urn:dece:deviceid:org:dece:A09D9C22F11CBC6DE0401F0A05996898</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeDVGGet</con:name>
          <con:value>ACCOUNTID NOT MATCH</con:value>
        </con:property>
        <con:property>
          <con:name>SqlStr</con:name>
          <con:value>select Status from ACCOUNT_STATUS_REF where Status !='active' AND Status !='archived' AND Status !='blocked' AND Status !='blocked:tou' AND Status !='pending' AND Status !='deleted'</con:value>
        </con:property>
        <con:property>
          <con:name>AccountStatusXML</con:name>
          <con:value><![CDATA[<Results>
  <ResultSet fetchSize='10'>
    <Row rowNumber='1'>
      <STATUS>forceddelete</STATUS>
    </Row>
    <Row rowNumber='2'>
      <STATUS>other</STATUS>
    </Row>
    <Row rowNumber='3'>
      <STATUS>suspended</STATUS>
    </Row>
  </ResultSet>
</Results>]]></con:value>
        </con:property>
        <con:property>
          <con:name>AccountStatus</con:name>
          <con:value>active</con:value>
        </con:property>
        <con:property>
          <con:name>DomainID</con:name>
          <con:value>urn:dece:domainid:dece:A09DA589BD63A036E0401F0A05996D9A</con:value>
        </con:property>
      <con:property><con:name>audienceNodeid</con:name><con:value>0702</con:value></con:property></con:properties>
      <con:reportParameters/>
    <con:breakPoints><con:testStepId>c18c6418-c612-4b19-b8b3-33ec6e008eab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase>
    <con:properties/>
    <con:reportParameters/>
  </con:testSuite><con:testSuite name="DeviceGet_Invocation_ByPermission_TestCases_Old" disabled="true">
    <con:description/>
    <con:settings/>
    <con:runType>SEQUENTIAL</con:runType>
    <con:properties/>
    <con:reportParameters/>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_30001 -  DeviceGet - PERM - SecurityRoleValid - Invocation with DECE" searchProperties="true">
      <con:description>This test case will verify that the Application Tier properly responses to a DeviceGet invocation when the requesting node is DECE.

Expected Result :

It should not allow API invocation for the "DECE" node.</con:description>
      <con:settings/>
      <con:testStep type="groovy" name="Verify Node User SAML Asssertion">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.model.testsuite.TestRunner.Status


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def ValSamlAssertion = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Validate SAML Assertion");

	ValSamlAssertion.setPropertyValue("TCaseName",testCase.getName());
	ValSamlAssertion.setPropertyValue("TSuiteName",testSuite.getName());

	def runnerTc = ValSamlAssertion.run( null , false )
	assert runnerTc.status == Status.FINISHED;

	rcUUID = testCase.getPropertyValue("rcUUID");

	if (runnerTc.status != Status.FINISHED || rcUUID.toInteger()!= 1){

			
		testCase.setPropertyValue("nodetype","manufacturerportal");
		testCase.setPropertyValue("nodeid","0701");
		testCase.setPropertyValue("username","sch-drm_user1");
		testCase.setPropertyValue("password","Password1");
		testCase.setPropertyValue("accountoid",null);
		testCase.setPropertyValue("useroid",null);
		testCase.setPropertyValue("assertid",null);
		testCase.setPropertyValue("SAMLassertion",null);
		testCase.setPropertyValue("tokentype","urn:dece:type:tokentype:usernamepassword");
		testCase.setPropertyValue("loopuntil","25");
		testCase.setPropertyValue("expectErrTypeSTS","SUCCESS");
		testCase.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
			
		log.info " SAML Assertion Expired ! re-generating Assertion";
		def RunSTS = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get SAML Assertion - STS")

				RunSTS.setPropertyValue("TCaseName",testCase.getName());
				RunSTS.setPropertyValue("TSuiteName",testSuite.getName());

				def runnerSTS = RunSTS.run( null , false )

				assert runnerSTS.status == Status.FINISHED;

		}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call LicAppCreate Request with Valid Data" disabled="true">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0");
testCase.setPropertyValue("expectErrTypeLAC","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedDeviceDDReq = testProject.getTestSuiteByName("Staging DeviceGet").getTestCaseByName("LicAppCreate Request");

FeedDeviceDDReq.setPropertyValue("TCaseName",testCase.getName());
FeedDeviceDDReq.setPropertyValue("TSuiteName",testSuite.getName());


def runnerTC = FeedDeviceDDReq.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Feed DeviceGet Request with Valid Data">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0");
testCase.setPropertyValue("DeviceID","urn:dece:deviceid:org:dece:A09D9C22F11CBC6DE0401F0A05996898");
testCase.setPropertyValue("DomainID","urn:dece:domainid:dece:A09DA589BD63A036E0401F0A05996D9A");
testCase.setPropertyValue("expectErrType","FORBIDDEN");
testCase.setPropertyValue("ErrorDataVal","1");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedRTLReq = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request");

FeedRTLReq.setPropertyValue("TCaseName",testCase.getName());
FeedRTLReq.setPropertyValue("TSuiteName",testSuite.getName());

WsdlTestCaseRunner TSrunner = new WsdlTestCaseRunner( FeedRTLReq, null );

TSrunner.runTestStepByName("Get the DeviceGet Properties");
TSrunner.runTestStepByName("pem set");
assert TSrunner.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Set Node Role to DECE">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

// Set Node Role

testCase.setPropertyValue("NodeRole","urn:dece:role:dece");


def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get-Set Node Role")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )

WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );

TSrunnerRTC.runTestStepByName("Set Node Role for DDD");

assert TSrunnerRTC.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call DeviceGet Request">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )

WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );

TSrunnerRTC.runTestStepByName("DeviceGetRequest");

assert TSrunnerRTC.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract DeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Extract DeviceGet Information")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify theDeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Response Validation")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value>28192</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>SAMLExpDate</con:name>
          <con:value>2013-06-15 03:22:10.0</con:value>
        </con:property>
        <con:property>
          <con:name>rcUUID</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>nodetype</con:name>
          <con:value>manufacturerportal</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>0701</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>sch-drm_user1</con:value>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>Password1</con:value>
        </con:property>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value>A06A9AA49F7073D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value>A06A9AA49F7973D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SAMLassertion</con:name>
          <con:value>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</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>loopuntil</con:name>
          <con:value>25</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTS</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value>_df6ea584-6723-4b5d-b2e8-d20651f6942c</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value>urn:dece:userid:org:dece:A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value>A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value>urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value>A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>NodeRole</con:name>
          <con:value>urn:dece:role:dece</con:value>
        </con:property>
        <con:property>
          <con:name>AccountID</con:name>
          <con:value>urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceID</con:name>
          <con:value>urn:dece:deviceid:org:dece:A09D9C22F11CBC6DE0401F0A05996898</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>FORBIDDEN</con:value>
        </con:property>
        <con:property>
          <con:name>ErrorDataVal</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetReqXml</con:name>
          <con:value>Authorization: SAML2 assertion=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
</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResXml</con:name>
          <con:value><![CDATA[<ErrorList xmlns="http://www.decellc.org/schema/2010/10/dece" xmlns:ns2="http://www.movielabs.com/schema/md/v1.07/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Error ErrorID="urn:dece:errorid:org:dece:Security:RoleInvalid">
      <Reason Language="en">API call not authorized</Reason>
      <OriginalRequest>https://qa.q.uvvu.com:7002/rest/1/0/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3AA06A9AA49F6E73D7E0401F0A059915F0/Device/urn%3Adece%3Adeviceid%3Aorg%3Adece%3AA09D9C22F11CBC6DE0401F0A05996898/DECEDomain</OriginalRequest>
      <ErrorLink>https://qa.q.uvvu.com:7002/rest/1/0/error/en/ErrorList.html#Security:RoleInvalid</ErrorLink>
   </Error>
</ErrorList>]]></con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResTime</con:name>
          <con:value>3419</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetID</con:name>
          <con:value>API call not authorizedhttps://qa.q.uvvu.com:7002/rest/1/0/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3AA06A9AA49F6E73D7E0401F0A059915F0/Device/urn%3Adece%3Adeviceid%3Aorg%3Adece%3AA09D9C22F11CBC6DE0401F0A05996898/DECEDomainhttps://qa.q.uvvu.com:7002/rest/1/0/error/en/ErrorList.html#Security:RoleInvalid</con:value>
        </con:property>
        <con:property>
          <con:name>DomainID</con:name>
          <con:value>urn:dece:domainid:dece:A09DA589BD63A036E0401F0A05996D9A</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_30002 -  DeviceGet - PERM - SecurityRoleValid - Invocation with DECE_CS" searchProperties="true">
      <con:description>This test case will verify that the Application Tier properly responses to a DeviceGet invocation when the requesting node is DECE Customer Support.

Expected Result :

It should not allow API invocation for the "DECE CUSTOMER SERVICE" node.</con:description>
      <con:settings/>
      <con:testStep type="groovy" name="Verify Node User SAML Asssertion">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.model.testsuite.TestRunner.Status


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def ValSamlAssertion = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Validate SAML Assertion");

	ValSamlAssertion.setPropertyValue("TCaseName",testCase.getName());
	ValSamlAssertion.setPropertyValue("TSuiteName",testSuite.getName());

	def runnerTc = ValSamlAssertion.run( null , false )
	assert runnerTc.status == Status.FINISHED;

	rcUUID = testCase.getPropertyValue("rcUUID");

	if (runnerTc.status != Status.FINISHED || rcUUID.toInteger()!= 1){

			
		testCase.setPropertyValue("nodetype","manufacturerportal");
		testCase.setPropertyValue("nodeid","0701");
		testCase.setPropertyValue("username","sch-drm_user1");
		testCase.setPropertyValue("password","Password1");
		testCase.setPropertyValue("accountoid",null);
		testCase.setPropertyValue("useroid",null);
		testCase.setPropertyValue("assertid",null);
		testCase.setPropertyValue("SAMLassertion",null);
		testCase.setPropertyValue("tokentype","urn:dece:type:tokentype:usernamepassword");
		testCase.setPropertyValue("loopuntil","25");
		testCase.setPropertyValue("expectErrTypeSTS","SUCCESS");
		testCase.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
			
		log.info " SAML Assertion Expired ! re-generating Assertion";
		def RunSTS = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get SAML Assertion - STS")

				RunSTS.setPropertyValue("TCaseName",testCase.getName());
				RunSTS.setPropertyValue("TSuiteName",testSuite.getName());

				def runnerSTS = RunSTS.run( null , false )

				assert runnerSTS.status == Status.FINISHED;

		}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call LicAppCreate Request with Valid Data" disabled="true">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0");
testCase.setPropertyValue("expectErrTypeLAC","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedDeviceDDReq = testProject.getTestSuiteByName("Staging DeviceGet").getTestCaseByName("LicAppCreate Request");

FeedDeviceDDReq.setPropertyValue("TCaseName",testCase.getName());
FeedDeviceDDReq.setPropertyValue("TSuiteName",testSuite.getName());


def runnerTC = FeedDeviceDDReq.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Feed DeviceGet Request with Valid Data">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0");
testCase.setPropertyValue("DeviceID","urn:dece:deviceid:org:dece:A09D9C22F11CBC6DE0401F0A05996898");
testCase.setPropertyValue("DomainID","urn:dece:domainid:dece:A09DA589BD63A036E0401F0A05996D9A");
testCase.setPropertyValue("expectErrType","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedRTLReq = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request");

FeedRTLReq.setPropertyValue("TCaseName",testCase.getName());
FeedRTLReq.setPropertyValue("TSuiteName",testSuite.getName());

WsdlTestCaseRunner TSrunner = new WsdlTestCaseRunner( FeedRTLReq, null );

TSrunner.runTestStepByName("Get the DeviceGet Properties");
TSrunner.runTestStepByName("pem set");
assert TSrunner.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Set Node Role to DECE_CS">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

// Set Node Role

testCase.setPropertyValue("NodeRole","urn:dece:role:dece:customersupport");

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get-Set Node Role")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )

WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );

TSrunnerRTC.runTestStepByName("Set Node Role for DDD");

assert TSrunnerRTC.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call DeviceGet Request">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )

WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );

TSrunnerRTC.runTestStepByName("DeviceGetRequest");

assert TSrunnerRTC.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract DeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Extract DeviceGet Information")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify theDeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Response Validation")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value>28193</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>SAMLExpDate</con:name>
          <con:value>2013-06-15 02:50:22.0</con:value>
        </con:property>
        <con:property>
          <con:name>rcUUID</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>nodetype</con:name>
          <con:value>manufacturerportal</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>0701</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>sch-drm_user1</con:value>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>Password1</con:value>
        </con:property>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>assertid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SAMLassertion</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>loopuntil</con:name>
          <con:value>25</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTS</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value>df7ce57e-8db3-481e-be7a-d949a73f601d</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value>urn:dece:userid:org:dece:A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value>A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value>urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value>A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>AccountID</con:name>
          <con:value>urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceID</con:name>
          <con:value>urn:dece:deviceid:org:dece:A09D9C22F11CBC6DE0401F0A05996898</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>ErrorDataVal</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>NodeRole</con:name>
          <con:value>urn:dece:role:dece:customersupport</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetReqXml</con:name>
          <con:value>Host: qa.q.uvvu.com:7002</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResXml</con:name>
          <con:value><![CDATA[<Device IsLegacy="false" DeviceID="urn:dece:deviceid:org:dece:A09D9C22F11CBC6DE0401F0A05996898" xmlns="http://www.decellc.org/schema/2010/10/dece" xmlns:ns2="http://www.movielabs.com/schema/md/v1.07/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <DisplayName>DeviceInfoDisplayName</DisplayName>
   <Manufacturer>Microsoft</Manufacturer>
   <Model>V344</Model>
   <Brand Language="en-US">DeviceInfoBrand</Brand>
   <SerialNo>123432442323424</SerialNo>
   <Image MimeType="MimeType3" Width="50" Height="50">http://www.oxygenxml.com/1234</Image>
   <LicAppID>urn:dece:licappid:org:dece:A09D9C22F11EBC6DE0401F0A05996898</LicAppID>
   <DRMClientID>urn:dece:drmclientid:org:dece:A0E2E4B822DB1B7CE0401F0A07994404</DRMClientID>
   <ResourceStatus>
      <Current CreatedBy="urn:dece:org:org:dece:0701" CreationDate="2011-04-11T04:02:39.637Z">
         <Value>urn:dece:type:status:pending</Value>
         <Description>Device Created</Description>
      </Current>
   </ResourceStatus>
</Device>]]></con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResTime</con:name>
          <con:value>132</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetID</con:name>
          <con:value>API call not authorizedhttps://qa.q.uvvu.com:7002/rest/1/0/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3AA06A9AA49F6E73D7E0401F0A059915F0/Device/urn%3Adece%3Adeviceid%3Aorg%3Adece%3AA09D9C22F11CBC6DE0401F0A05996898/DECEDomainhttps://qa.q.uvvu.com:7002/rest/1/0/error/en/ErrorList.html#Security:RoleInvalid</con:value>
        </con:property>
        <con:property>
          <con:name>DomainID</con:name>
          <con:value>urn:dece:domainid:dece:A09DA589BD63A036E0401F0A05996D9A</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_30003 -  DeviceGet - PERM - SecurityRoleValid - Invocation with DECE_Coordinator" searchProperties="true">
      <con:description>This test case will verify that the Application Tier properly responses to a DeviceGet invocation when the requesting node is DECE Coordinator.

Expected Result :

It should not allow API invocation for the "DECE COORDINATOR" node.</con:description>
      <con:settings/>
      <con:testStep type="groovy" name="Verify Node User SAML Asssertion">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.model.testsuite.TestRunner.Status


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def ValSamlAssertion = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Validate SAML Assertion");

	ValSamlAssertion.setPropertyValue("TCaseName",testCase.getName());
	ValSamlAssertion.setPropertyValue("TSuiteName",testSuite.getName());

	def runnerTc = ValSamlAssertion.run( null , false )
	assert runnerTc.status == Status.FINISHED;

	rcUUID = testCase.getPropertyValue("rcUUID");

	if (runnerTc.status != Status.FINISHED || rcUUID.toInteger()!= 1){

			
		testCase.setPropertyValue("nodetype","manufacturerportal");
		testCase.setPropertyValue("nodeid","0701");
		testCase.setPropertyValue("username","sch-drm_user1");
		testCase.setPropertyValue("password","Password1");
		testCase.setPropertyValue("accountoid",null);
		testCase.setPropertyValue("useroid",null);
		testCase.setPropertyValue("assertid",null);
		testCase.setPropertyValue("SAMLassertion",null);
		testCase.setPropertyValue("tokentype","urn:dece:type:tokentype:usernamepassword");
		testCase.setPropertyValue("loopuntil","25");
		testCase.setPropertyValue("expectErrTypeSTS","SUCCESS");
		testCase.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
			
		log.info " SAML Assertion Expired ! re-generating Assertion";
		def RunSTS = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get SAML Assertion - STS")

				RunSTS.setPropertyValue("TCaseName",testCase.getName());
				RunSTS.setPropertyValue("TSuiteName",testSuite.getName());

				def runnerSTS = RunSTS.run( null , false )

				assert runnerSTS.status == Status.FINISHED;

		}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call LicAppCreate Request with Valid Data" disabled="true">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0");
testCase.setPropertyValue("expectErrTypeLAC","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedDeviceDDReq = testProject.getTestSuiteByName("Staging DeviceGet").getTestCaseByName("LicAppCreate Request");

FeedDeviceDDReq.setPropertyValue("TCaseName",testCase.getName());
FeedDeviceDDReq.setPropertyValue("TSuiteName",testSuite.getName());


def runnerTC = FeedDeviceDDReq.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Feed DeviceGet Request with Valid Data">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0");
testCase.setPropertyValue("DeviceID","urn:dece:deviceid:org:dece:A09D9C22F11CBC6DE0401F0A05996898");
testCase.setPropertyValue("DomainID","urn:dece:domainid:dece:A09DA589BD63A036E0401F0A05996D9A");
testCase.setPropertyValue("expectErrType","FORBIDDEN");
testCase.setPropertyValue("ErrorDataVal","1");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedRTLReq = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request");

FeedRTLReq.setPropertyValue("TCaseName",testCase.getName());
FeedRTLReq.setPropertyValue("TSuiteName",testSuite.getName());

WsdlTestCaseRunner TSrunner = new WsdlTestCaseRunner( FeedRTLReq, null );

TSrunner.runTestStepByName("Get the DeviceGet Properties");
TSrunner.runTestStepByName("pem set");
assert TSrunner.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Set Node Role to Coordinator">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

// Set Node Role

testCase.setPropertyValue("NodeRole","urn:dece:role:coordinator");


def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get-Set Node Role")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )

WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );

TSrunnerRTC.runTestStepByName("Set Node Role for DDD");

assert TSrunnerRTC.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call DeviceGet Request">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )

WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );

TSrunnerRTC.runTestStepByName("DeviceGetRequest");

assert TSrunnerRTC.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract DeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Extract DeviceGet Information")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify theDeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Response Validation")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value>28194</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>SAMLExpDate</con:name>
          <con:value>2012-04-14 13:34:23.0</con:value>
        </con:property>
        <con:property>
          <con:name>rcUUID</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>nodetype</con:name>
          <con:value>manufacturerportal</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>0701</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>sch-drm_user1</con:value>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>Password1</con:value>
        </con:property>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value>A06A9AA49F7073D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value>A06A9AA49F7973D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SAMLassertion</con:name>
          <con:value>nVdbc6JME773V1jupWU4eLaSVA0HCSooiMc7HEZAEZABQX/9N2A0JpvN7vtdpMw0fXi6+6HpecbmwWN7AGMUxW7gl2XhpWI26hurhWCtXmeZWsNiYK1Lw0aNYdHGMtsNpr61KmUZ4wTJPo5NP36psDTD1OhGjaUNutFj271G54nudNeV8hxFmHgmKk90pZwdPB/3iqgvlSTye4GJXdzzzQPCvRj2pkAZ9Yhmz7xBqrw+X0EWAaNXJ47DHkXBJwtB5HnwCQYH6pn6pPNs4d7UtX0zTiL0HtPCL5V32zRNn9L6UxDZFEvTNEV3KaJjYdf+VXkt3YyRJfvb4HrmTT/wXWh67sXMQSkodgKrDDw7iNzYOfzBNUMxdO66hjJYg0zD/1WhPgIU6P7R0yeQETZr2DGZmzMdbVGEfIjKM11+qfz6pwZeTY3I9PE2iA74y/m/IUL+CXlBiKwaviV2A/fvHr+p1uszgj3Zh16C3RNSc5aEJkS4PInQ1s1GLibcs3C56H45wzeCIfhfOvJMPeIksKlvKiO4NsLx/9Oux1ZdvcxNL0GvE/9t07KHabsFmKa/hlWT6QSqmKrt9KWA8Kh8BXXv9Pv5K0/vtHo3UutOtSuZ9nJEheZ0PBZaDAjFkA9x6M809rzg8N4TZdHnDHGW7ZSVYFbf2uvE7uaZD3WYjNUg7ttOXd+XWNxe6cxoih01oRKZHujDebIPdl2IL2LrsubDebtuJFNR6M+nc7NquKfl8GKz+/Pes96ArNkNX+XsxdTm1NK8xTobFQyMTj0+WvbEGsgvHzk95pDnNUTnIsn8/2WT7gpmbN4PfD4otuTtjNGrIstCcuF5cJ7aIJU5YJO/HSBh90dn70rdlOaApvWBwHPeThwpYC8BZiZyjsLP50rGX8CAs9U5MTRKwFtzii6mQroS5pr2JqaOYUnz80bykvVFVBWAC2PeUURdnAu6ISoKCK6yTBE2EinpVEllbSWUiANBzMKLJXVjJGUuZOWmMm2yq2kzWS/nRN4/jw7qaWOInsIrEj89SlN5Uxc0cQD01QKy/YTYXkaHMCitZtyD0SBEO4D6KU1igoti7FPFmLGqoJuFzPgsU2RpoGg45bUiK6kkpoP57PJRC55TeOsgZqIBJtdaQIPvq/R6OcDmoukrOkgFuzAeiqk1vgFRNDot8ddajcRUF/WZ2ld0ORVBIRPE1MMbVnU2knOCdS0bGGD32BheExd9nzz39RM8N48lU+qDzWHOwLruQLfpmssgtdedVNBWg2GwlokbFWgix2mAAKJBnhqpPwdG3Lw5Dt0u66LRth8ckBOVFCYY7k+XjO649bE9URdNYbtvTyR3Ujcth5I9yO7qeyDLyBoyjmZa+orSBd+9tMbD2RK50eoSq02NabmdZklfJLOlEHht6225mg2r2QpqxngynS0mlyxTj7vOxYvfxtxbNB0ogj1WEZpgWKVos88ZHaHJr952hE9bnUbNErAVDgBpZ9uiSwjMve2uJHzTFZGQFyh8KvELXpoCSaqKMido2rbvMBMozZMZoyqyaHmkTOfVUvdKa54TSKdoc7EOV2yfXhvAKpxpDbFva7NmdbBEa031jHkM0nC+9RmGlkLtbaukNlRyBlhyOuXIW8SVEhnMzHE4oLPhvEUzR83yBtMumNWzKbvPxo69Pu/t9Z40ZfXw6qwM4M2NB47JhGKLkmaIugI61/ctU+RZXffgIQs3B5gJBulZYRwYnKj3NXqWCQIYXmXYAGyGVxdxp/BiYV8CmWISWpw2SwevfNUdG2JCSJs80GW3Yem/ciynWOkzx4480MBXjolXjolge6zKHYHBzRaZoovU5iTxqLXno0E3pLXlaF/iqn3Kjl2vMfY7qTGsLphz2nZ22mLRlQWHr/rblVPfxBxtXqCGBvu25Op7wW81vLMyUrTmzKW8M71DxxSPSqrM+GI9vvSpbpRUucPaPVwu9QY7O0ymyUmemUPMnJ3NcdFNd5O3FkVF0rl5aa9PWn8ZwNX1O/J1SN6F1zFKPQ7YTxP4tnpNk80Owfh2zL/DslDuk0+EGf+8xuUS16ptC9VemO+COEZ+XHnNrfIVrpeQRc+1euTLeT0DugW6ADS6/Xa7XRfaIt2gmT4N6Ga3yzT79G3Xu6L4ApEP/K2bx8qX2evH+meA8NDbIDNCUeUHT3mdyrKvk+0j8DEygpcK1yD1a/AcaIldsd2kQUPstjvtRqvVBTTdYCpl8uEc++MIbGMUPSzIzNcFWUfQDV2Ub9HvuwSOSSGO5imJPebpZD75KCFrdpRvuj220WkWBaCs5BBC8oBMtygMcPwUOmGxzPwxja/PbhkTHcvNFXAOmkOkW+iblb5+Q/xbZuy3q//NPUgsN99ZSPniyIVXJJ8ffbAhp8GdCnSbZm6Y76r/bMr+bkr9gIj6Wox7JOvkPsS9XUzIrk3WseI+gknTjubT8Sk5nZKiTW2aZqmIuKcYiqamCCZkXTwbwR751N0D9S+L+h3zl7h3+Wd0Sez405i85QfCqHJx/Psl7ZM1KUCMsvg7Ge+Ra1ke/MebG+zBXI+IJ+QnDaKPHL7z9RCHQM4nlOvb+SnfsM+f2/v+JvRgQLy6ZEgF0aPv7+y/i/1ZeC/XHUpMWLFJYvTnJ+V8+pCrMoRB4seyUCkEjxOxwByfQ9T7UPrNTbHivt9ZMvzHO8tSGU2hgw5m5a7r/l255haNh4hYYbfA8lLJyO2bBPfthwn8DvD7IdwSfxrCnzN5/U38u+Shpl+Z/fo/</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>loopuntil</con:name>
          <con:value>25</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTS</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value>a43bd6ec-3321-4d1c-90c4-12ebda7413fd</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value>urn:dece:userid:org:dece:A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value>A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value>urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value>A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>AccountID</con:name>
          <con:value>urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceID</con:name>
          <con:value>urn:dece:deviceid:org:dece:A09D9C22F11CBC6DE0401F0A05996898</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>FORBIDDEN</con:value>
        </con:property>
        <con:property>
          <con:name>ErrorDataVal</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>NodeRole</con:name>
          <con:value>urn:dece:role:coordinator</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetReqXml</con:name>
          <con:value>Host: qa.q.uvvu.com:7002</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResXml</con:name>
          <con:value><![CDATA[<ErrorList xmlns="http://www.decellc.org/schema/2010/10/dece" xmlns:ns2="http://www.movielabs.com/schema/md/v1.07/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Error ErrorID="urn:dece:errorid:org:dece:Security:RoleInvalid">
      <Reason Language="en">API call not authorized</Reason>
      <OriginalRequest>https://qa.q.uvvu.com:7002/rest/1/0/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3AA06A9AA49F6E73D7E0401F0A059915F0/Device/urn%3Adece%3Adeviceid%3Aorg%3Adece%3AA09D9C22F11CBC6DE0401F0A05996898/DECEDomain</OriginalRequest>
      <ErrorLink>https://qa.q.uvvu.com:7002/rest/1/0/error/en/ErrorList.html#Security:RoleInvalid</ErrorLink>
   </Error>
</ErrorList>]]></con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResTime</con:name>
          <con:value>116</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetID</con:name>
          <con:value>API call not authorizedhttps://qa.q.uvvu.com:7002/rest/1/0/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3AA06A9AA49F6E73D7E0401F0A059915F0/Device/urn%3Adece%3Adeviceid%3Aorg%3Adece%3AA09D9C22F11CBC6DE0401F0A05996898/DECEDomainhttps://qa.q.uvvu.com:7002/rest/1/0/error/en/ErrorList.html#Security:RoleInvalid</con:value>
        </con:property>
        <con:property>
          <con:name>DomainID</con:name>
          <con:value>urn:dece:domainid:dece:A09DA589BD63A036E0401F0A05996D9A</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_30004 -  DeviceGet - PERM - SecurityRoleValid - Invocation with DECE_Coordinator_CS" searchProperties="true">
      <con:description>This test case will verify that the Application Tier properly responses to a DeviceGet invocation when the requesting node is DECE Coordinator Customer Support.

Expected Result :

It should not allow API invocation for the "DECE COORDINATOR CUSTOMER SUPPORT" node.</con:description>
      <con:settings/>
      <con:testStep type="groovy" name="Verify Node User SAML Asssertion">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.model.testsuite.TestRunner.Status


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def ValSamlAssertion = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Validate SAML Assertion");

	ValSamlAssertion.setPropertyValue("TCaseName",testCase.getName());
	ValSamlAssertion.setPropertyValue("TSuiteName",testSuite.getName());

	def runnerTc = ValSamlAssertion.run( null , false )
	assert runnerTc.status == Status.FINISHED;

	rcUUID = testCase.getPropertyValue("rcUUID");

	if (runnerTc.status != Status.FINISHED || rcUUID.toInteger()!= 1){

			
		testCase.setPropertyValue("nodetype","manufacturerportal");
		testCase.setPropertyValue("nodeid","0701");
		testCase.setPropertyValue("username","sch-drm_user1");
		testCase.setPropertyValue("password","Password1");
		testCase.setPropertyValue("accountoid",null);
		testCase.setPropertyValue("useroid",null);
		testCase.setPropertyValue("assertid",null);
		testCase.setPropertyValue("SAMLassertion",null);
		testCase.setPropertyValue("tokentype","urn:dece:type:tokentype:usernamepassword");
		testCase.setPropertyValue("loopuntil","25");
		testCase.setPropertyValue("expectErrTypeSTS","SUCCESS");
		testCase.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
			
		log.info " SAML Assertion Expired ! re-generating Assertion";
		def RunSTS = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get SAML Assertion - STS")

				RunSTS.setPropertyValue("TCaseName",testCase.getName());
				RunSTS.setPropertyValue("TSuiteName",testSuite.getName());

				def runnerSTS = RunSTS.run( null , false )

				assert runnerSTS.status == Status.FINISHED;

		}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call LicAppCreate Request with Valid Data" disabled="true">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0");
testCase.setPropertyValue("expectErrTypeLAC","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedDeviceDDReq = testProject.getTestSuiteByName("Staging DeviceGet").getTestCaseByName("LicAppCreate Request");

FeedDeviceDDReq.setPropertyValue("TCaseName",testCase.getName());
FeedDeviceDDReq.setPropertyValue("TSuiteName",testSuite.getName());


def runnerTC = FeedDeviceDDReq.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Feed DeviceGet Request with Valid Data">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0");
testCase.setPropertyValue("DeviceID","urn:dece:deviceid:org:dece:A09D9C22F11CBC6DE0401F0A05996898");
testCase.setPropertyValue("DomainID","urn:dece:domainid:dece:A09DA589BD63A036E0401F0A05996D9A");
testCase.setPropertyValue("expectErrType","FORBIDDEN");
testCase.setPropertyValue("ErrorDataVal","1");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedRTLReq = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request");

FeedRTLReq.setPropertyValue("TCaseName",testCase.getName());
FeedRTLReq.setPropertyValue("TSuiteName",testSuite.getName());

WsdlTestCaseRunner TSrunner = new WsdlTestCaseRunner( FeedRTLReq, null );

TSrunner.runTestStepByName("Get the DeviceGet Properties");
TSrunner.runTestStepByName("pem set");
assert TSrunner.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Set Node Role to Coordinator CS">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

// Set Node Role

testCase.setPropertyValue("NodeRole","urn:dece:role:coordinator:customersupport");


def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get-Set Node Role")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )

WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );

TSrunnerRTC.runTestStepByName("Set Node Role for DDD");

assert TSrunnerRTC.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call DeviceGet Request">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )

WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );

TSrunnerRTC.runTestStepByName("DeviceGetRequest");

assert TSrunnerRTC.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract DeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Extract DeviceGet Information")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify theDeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Response Validation")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value>28195</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>SAMLExpDate</con:name>
          <con:value>2012-04-14 13:34:23.0</con:value>
        </con:property>
        <con:property>
          <con:name>rcUUID</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>nodetype</con:name>
          <con:value>manufacturerportal</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>0701</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>sch-drm_user1</con:value>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>Password1</con:value>
        </con:property>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value>A06A9AA49F7073D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value>A06A9AA49F7973D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SAMLassertion</con:name>
          <con:value>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</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>loopuntil</con:name>
          <con:value>25</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTS</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value>9e583e5c-6afb-4849-a38b-52e4442ce11e</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value>urn:dece:userid:org:dece:A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value>A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value>urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value>A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>AccountID</con:name>
          <con:value>urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceID</con:name>
          <con:value>urn:dece:deviceid:org:dece:A09D9C22F11CBC6DE0401F0A05996898</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>FORBIDDEN</con:value>
        </con:property>
        <con:property>
          <con:name>ErrorDataVal</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>NodeRole</con:name>
          <con:value>urn:dece:role:coordinator:customersupport</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetReqXml</con:name>
          <con:value>Host: qa.q.uvvu.com:7002</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResXml</con:name>
          <con:value><![CDATA[<ErrorList xmlns="http://www.decellc.org/schema/2010/10/dece" xmlns:ns2="http://www.movielabs.com/schema/md/v1.07/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Error ErrorID="urn:dece:errorid:org:dece:Security:RoleInvalid">
      <Reason Language="en">API call not authorized</Reason>
      <OriginalRequest>https://qa.q.uvvu.com:7002/rest/1/0/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3AA06A9AA49F6E73D7E0401F0A059915F0/Device/urn%3Adece%3Adeviceid%3Aorg%3Adece%3AA09D9C22F11CBC6DE0401F0A05996898/DECEDomain</OriginalRequest>
      <ErrorLink>https://qa.q.uvvu.com:7002/rest/1/0/error/en/ErrorList.html#Security:RoleInvalid</ErrorLink>
   </Error>
</ErrorList>]]></con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResTime</con:name>
          <con:value>111</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetID</con:name>
          <con:value>API call not authorizedhttps://qa.q.uvvu.com:7002/rest/1/0/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3AA06A9AA49F6E73D7E0401F0A059915F0/Device/urn%3Adece%3Adeviceid%3Aorg%3Adece%3AA09D9C22F11CBC6DE0401F0A05996898/DECEDomainhttps://qa.q.uvvu.com:7002/rest/1/0/error/en/ErrorList.html#Security:RoleInvalid</con:value>
        </con:property>
        <con:property>
          <con:name>DomainID</con:name>
          <con:value>urn:dece:domainid:dece:A09DA589BD63A036E0401F0A05996D9A</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_30005 -  DeviceGet - PERM - SecurityRoleValid - Invocation with DECE_Portal." searchProperties="true">
      <con:description>This test case will verify that the Application Tier properly responses to a DeviceGet invocation when the requesting node is DECE Coordinator Portal.

Expected Result :

It should not allow API invocation for the "DECE PORTAL" node.</con:description>
      <con:settings/>
      <con:testStep type="groovy" name="Verify Node User SAML Asssertion">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.model.testsuite.TestRunner.Status


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def ValSamlAssertion = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Validate SAML Assertion");

	ValSamlAssertion.setPropertyValue("TCaseName",testCase.getName());
	ValSamlAssertion.setPropertyValue("TSuiteName",testSuite.getName());

	def runnerTc = ValSamlAssertion.run( null , false )
	assert runnerTc.status == Status.FINISHED;

	rcUUID = testCase.getPropertyValue("rcUUID");

	if (runnerTc.status != Status.FINISHED || rcUUID.toInteger()!= 1){

			
		testCase.setPropertyValue("nodetype","manufacturerportal");
		testCase.setPropertyValue("nodeid","0701");
		testCase.setPropertyValue("username","sch-drm_user1");
		testCase.setPropertyValue("password","Password1");
		testCase.setPropertyValue("accountoid",null);
		testCase.setPropertyValue("useroid",null);
		testCase.setPropertyValue("assertid",null);
		testCase.setPropertyValue("SAMLassertion",null);
		testCase.setPropertyValue("tokentype","urn:dece:type:tokentype:usernamepassword");
		testCase.setPropertyValue("loopuntil","25");
		testCase.setPropertyValue("expectErrTypeSTS","SUCCESS");
		testCase.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
			
		log.info " SAML Assertion Expired ! re-generating Assertion";
		def RunSTS = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get SAML Assertion - STS")

				RunSTS.setPropertyValue("TCaseName",testCase.getName());
				RunSTS.setPropertyValue("TSuiteName",testSuite.getName());

				def runnerSTS = RunSTS.run( null , false )

				assert runnerSTS.status == Status.FINISHED;

		}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call LicAppCreate Request with Valid Data" disabled="true">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0");
testCase.setPropertyValue("expectErrTypeLAC","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedDeviceDDReq = testProject.getTestSuiteByName("Staging DeviceGet").getTestCaseByName("LicAppCreate Request");

FeedDeviceDDReq.setPropertyValue("TCaseName",testCase.getName());
FeedDeviceDDReq.setPropertyValue("TSuiteName",testSuite.getName());


def runnerTC = FeedDeviceDDReq.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Feed DeviceGet Request with Valid Data">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0");
testCase.setPropertyValue("DeviceID","urn:dece:deviceid:org:dece:A09D9C22F11CBC6DE0401F0A05996898");
testCase.setPropertyValue("DomainID","urn:dece:domainid:dece:A09DA589BD63A036E0401F0A05996D9A");
testCase.setPropertyValue("expectErrType","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedRTLReq = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request");

FeedRTLReq.setPropertyValue("TCaseName",testCase.getName());
FeedRTLReq.setPropertyValue("TSuiteName",testSuite.getName());

WsdlTestCaseRunner TSrunner = new WsdlTestCaseRunner( FeedRTLReq, null );

TSrunner.runTestStepByName("Get the DeviceGet Properties");
TSrunner.runTestStepByName("pem set");
assert TSrunner.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Set Node Role to DECE- Portal">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

// Set Node Role

testCase.setPropertyValue("NodeRole","urn:dece:role:portal");


def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get-Set Node Role")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )

WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );

TSrunnerRTC.runTestStepByName("Set Node Role for DDD");

assert TSrunnerRTC.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call DeviceGet Request">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )

WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );

TSrunnerRTC.runTestStepByName("DeviceGetRequest");

assert TSrunnerRTC.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract DeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Extract DeviceGet Information")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify theDeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Response Validation")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value>28196</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>SAMLExpDate</con:name>
          <con:value>2012-04-14 13:34:23.0</con:value>
        </con:property>
        <con:property>
          <con:name>rcUUID</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>nodetype</con:name>
          <con:value>manufacturerportal</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>0701</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>sch-drm_user1</con:value>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>Password1</con:value>
        </con:property>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value>A06A9AA49F7073D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value>A06A9AA49F7973D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SAMLassertion</con:name>
          <con:value>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</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>loopuntil</con:name>
          <con:value>25</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTS</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value>02a1f8dd-0e73-42a7-a111-c7753bbd4b14</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value>urn:dece:userid:org:dece:A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value>A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value>urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value>A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>AccountID</con:name>
          <con:value>urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceID</con:name>
          <con:value>urn:dece:deviceid:org:dece:A09D9C22F11CBC6DE0401F0A05996898</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>ErrorDataVal</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>NodeRole</con:name>
          <con:value>urn:dece:role:portal</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetReqXml</con:name>
          <con:value>Host: qa.q.uvvu.com:7002</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResXml</con:name>
          <con:value><![CDATA[<Device IsLegacy="false" DeviceID="urn:dece:deviceid:org:dece:A09D9C22F11CBC6DE0401F0A05996898" xmlns="http://www.decellc.org/schema/2010/10/dece" xmlns:ns2="http://www.movielabs.com/schema/md/v1.07/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <DisplayName>DeviceInfoDisplayName</DisplayName>
   <Manufacturer>Microsoft</Manufacturer>
   <Model>V344</Model>
   <Brand Language="en-US">DeviceInfoBrand</Brand>
   <SerialNo>123432442323424</SerialNo>
   <Image MimeType="MimeType3" Width="50" Height="50">http://www.oxygenxml.com/1234</Image>
   <LicAppID>urn:dece:licappid:org:dece:A09D9C22F11EBC6DE0401F0A05996898</LicAppID>
   <DRMClientID>urn:dece:drmclientid:org:dece:A0E2E4B822DB1B7CE0401F0A07994404</DRMClientID>
   <ResourceStatus>
      <Current CreatedBy="urn:dece:org:org:dece:0701" CreationDate="2011-04-11T04:02:39.637Z">
         <Value>urn:dece:type:status:pending</Value>
         <Description>Device Created</Description>
      </Current>
   </ResourceStatus>
</Device>]]></con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResTime</con:name>
          <con:value>248</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetID</con:name>
          <con:value>API call not authorizedhttps://qa.q.uvvu.com:7002/rest/1/0/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3AA06A9AA49F6E73D7E0401F0A059915F0/Device/urn%3Adece%3Adeviceid%3Aorg%3Adece%3AA09D9C22F11CBC6DE0401F0A05996898/DECEDomainhttps://qa.q.uvvu.com:7002/rest/1/0/error/en/ErrorList.html#Security:RoleInvalid</con:value>
        </con:property>
        <con:property>
          <con:name>DomainID</con:name>
          <con:value>urn:dece:domainid:dece:A09DA589BD63A036E0401F0A05996D9A</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_30006 -  DeviceGet - PERM - SecurityRoleValid - Invocation with DECE_Portal_CS" searchProperties="true">
      <con:description>This test case will verify that the Application Tier properly responses to a DeviceGet invocation when the requesting node is DECE  Portal Customer Support.

Expected Result :

It should not allow API invocation for the "DECE PORTAL CUSTOMER SUPPORT" node.</con:description>
      <con:settings/>
      <con:testStep type="groovy" name="Verify Node User SAML Asssertion">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.model.testsuite.TestRunner.Status


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def ValSamlAssertion = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Validate SAML Assertion");

	ValSamlAssertion.setPropertyValue("TCaseName",testCase.getName());
	ValSamlAssertion.setPropertyValue("TSuiteName",testSuite.getName());

	def runnerTc = ValSamlAssertion.run( null , false )
	assert runnerTc.status == Status.FINISHED;

	rcUUID = testCase.getPropertyValue("rcUUID");

	if (runnerTc.status != Status.FINISHED || rcUUID.toInteger()!= 1){

			
		testCase.setPropertyValue("nodetype","manufacturerportal");
		testCase.setPropertyValue("nodeid","0701");
		testCase.setPropertyValue("username","sch-drm_user1");
		testCase.setPropertyValue("password","Password1");
		testCase.setPropertyValue("accountoid",null);
		testCase.setPropertyValue("useroid",null);
		testCase.setPropertyValue("assertid",null);
		testCase.setPropertyValue("SAMLassertion",null);
		testCase.setPropertyValue("tokentype","urn:dece:type:tokentype:usernamepassword");
		testCase.setPropertyValue("loopuntil","25");
		testCase.setPropertyValue("expectErrTypeSTS","SUCCESS");
		testCase.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
			
		log.info " SAML Assertion Expired ! re-generating Assertion";
		def RunSTS = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get SAML Assertion - STS")

				RunSTS.setPropertyValue("TCaseName",testCase.getName());
				RunSTS.setPropertyValue("TSuiteName",testSuite.getName());

				def runnerSTS = RunSTS.run( null , false )

				assert runnerSTS.status == Status.FINISHED;

		}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call LicAppCreate Request with Valid Data" disabled="true">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0");
testCase.setPropertyValue("expectErrTypeLAC","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedDeviceDDReq = testProject.getTestSuiteByName("Staging DeviceGet").getTestCaseByName("LicAppCreate Request");

FeedDeviceDDReq.setPropertyValue("TCaseName",testCase.getName());
FeedDeviceDDReq.setPropertyValue("TSuiteName",testSuite.getName());


def runnerTC = FeedDeviceDDReq.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Feed DeviceGet Request with Valid Data">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0");
testCase.setPropertyValue("DeviceID","urn:dece:deviceid:org:dece:A09D9C22F11CBC6DE0401F0A05996898");
testCase.setPropertyValue("DomainID","urn:dece:domainid:dece:A09DA589BD63A036E0401F0A05996D9A");
testCase.setPropertyValue("expectErrType","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedRTLReq = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request");

FeedRTLReq.setPropertyValue("TCaseName",testCase.getName());
FeedRTLReq.setPropertyValue("TSuiteName",testSuite.getName());

WsdlTestCaseRunner TSrunner = new WsdlTestCaseRunner( FeedRTLReq, null );

TSrunner.runTestStepByName("Get the DeviceGet Properties");
TSrunner.runTestStepByName("pem set");
assert TSrunner.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Set Node Role to DECE Portal CS">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

// Set Node Role

testCase.setPropertyValue("NodeRole","urn:dece:role:portal:customersupport");

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get-Set Node Role")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )

WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );

TSrunnerRTC.runTestStepByName("Set Node Role for DDD");

assert TSrunnerRTC.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call DeviceGet Request">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )

WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );

TSrunnerRTC.runTestStepByName("DeviceGetRequest");

assert TSrunnerRTC.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract DeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Extract DeviceGet Information")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify theDeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Response Validation")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value>28197</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>SAMLExpDate</con:name>
          <con:value>2012-04-14 13:34:23.0</con:value>
        </con:property>
        <con:property>
          <con:name>rcUUID</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>nodetype</con:name>
          <con:value>manufacturerportal</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>0701</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>sch-drm_user1</con:value>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>Password1</con:value>
        </con:property>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value>A06A9AA49F7073D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value>A06A9AA49F7973D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SAMLassertion</con:name>
          <con:value>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</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>loopuntil</con:name>
          <con:value>25</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTS</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value>925204b7-0512-462f-bc60-8bcab370b652</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value>urn:dece:userid:org:dece:A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value>A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value>urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value>A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>AccountID</con:name>
          <con:value>urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceID</con:name>
          <con:value>urn:dece:deviceid:org:dece:A09D9C22F11CBC6DE0401F0A05996898</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>ErrorDataVal</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>NodeRole</con:name>
          <con:value>urn:dece:role:portal:customersupport</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetReqXml</con:name>
          <con:value>Host: qa.q.uvvu.com:7002</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResXml</con:name>
          <con:value><![CDATA[<Device IsLegacy="false" DeviceID="urn:dece:deviceid:org:dece:A09D9C22F11CBC6DE0401F0A05996898" xmlns="http://www.decellc.org/schema/2010/10/dece" xmlns:ns2="http://www.movielabs.com/schema/md/v1.07/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <DisplayName>DeviceInfoDisplayName</DisplayName>
   <Manufacturer>Microsoft</Manufacturer>
   <Model>V344</Model>
   <Brand Language="en-US">DeviceInfoBrand</Brand>
   <SerialNo>123432442323424</SerialNo>
   <Image MimeType="MimeType3" Width="50" Height="50">http://www.oxygenxml.com/1234</Image>
   <LicAppID>urn:dece:licappid:org:dece:A09D9C22F11EBC6DE0401F0A05996898</LicAppID>
   <DRMClientID>urn:dece:drmclientid:org:dece:A0E2E4B822DB1B7CE0401F0A07994404</DRMClientID>
   <ResourceStatus>
      <Current CreatedBy="urn:dece:org:org:dece:0701" CreationDate="2011-04-11T04:02:39.637Z">
         <Value>urn:dece:type:status:pending</Value>
         <Description>Device Created</Description>
      </Current>
   </ResourceStatus>
</Device>]]></con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResTime</con:name>
          <con:value>224</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetID</con:name>
          <con:value>API call not authorizedhttps://qa.q.uvvu.com:7002/rest/1/0/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3AA06A9AA49F6E73D7E0401F0A059915F0/Device/urn%3Adece%3Adeviceid%3Aorg%3Adece%3AA09D9C22F11CBC6DE0401F0A05996898/DECEDomainhttps://qa.q.uvvu.com:7002/rest/1/0/error/en/ErrorList.html#Security:RoleInvalid</con:value>
        </con:property>
        <con:property>
          <con:name>DomainID</con:name>
          <con:value>urn:dece:domainid:dece:A09DA589BD63A036E0401F0A05996D9A</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_30007 -  DeviceGet - PERM - SecurityRoleValid - Invocation with LLASP" searchProperties="true">
      <con:description>This test case will verify that the Application Tier properly responses to a DeviceGet invocation when the requesting node is Linked LASP

Expected Result :

It should not allow API invocation for the "L-LASP" node.</con:description>
      <con:settings/>
      <con:testStep type="groovy" name="Verify Node User SAML Asssertion">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.model.testsuite.TestRunner.Status


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def ValSamlAssertion = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Validate SAML Assertion");

	ValSamlAssertion.setPropertyValue("TCaseName",testCase.getName());
	ValSamlAssertion.setPropertyValue("TSuiteName",testSuite.getName());

	def runnerTc = ValSamlAssertion.run( null , false )
	assert runnerTc.status == Status.FINISHED;

	rcUUID = testCase.getPropertyValue("rcUUID");

	if (runnerTc.status != Status.FINISHED || rcUUID.toInteger()!= 1){

			
		testCase.setPropertyValue("nodetype","manufacturerportal");
		testCase.setPropertyValue("nodeid","0701");
		testCase.setPropertyValue("username","sch-drm_user1");
		testCase.setPropertyValue("password","Password1");
		testCase.setPropertyValue("accountoid",null);
		testCase.setPropertyValue("useroid",null);
		testCase.setPropertyValue("assertid",null);
		testCase.setPropertyValue("SAMLassertion",null);
		testCase.setPropertyValue("tokentype","urn:dece:type:tokentype:usernamepassword");
		testCase.setPropertyValue("loopuntil","25");
		testCase.setPropertyValue("expectErrTypeSTS","SUCCESS");
		testCase.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
			
		log.info " SAML Assertion Expired ! re-generating Assertion";
		def RunSTS = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get SAML Assertion - STS")

				RunSTS.setPropertyValue("TCaseName",testCase.getName());
				RunSTS.setPropertyValue("TSuiteName",testSuite.getName());

				def runnerSTS = RunSTS.run( null , false )

				assert runnerSTS.status == Status.FINISHED;

		}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call LicAppCreate Request with Valid Data" disabled="true">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0");
testCase.setPropertyValue("expectErrTypeLAC","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedDeviceDDReq = testProject.getTestSuiteByName("Staging DeviceGet").getTestCaseByName("LicAppCreate Request");

FeedDeviceDDReq.setPropertyValue("TCaseName",testCase.getName());
FeedDeviceDDReq.setPropertyValue("TSuiteName",testSuite.getName());


def runnerTC = FeedDeviceDDReq.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Feed DeviceGet Request with Valid Data">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

testCase.setPropertyValue("NodeRole","urn:dece:role:dece");

//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0");
testCase.setPropertyValue("DeviceID","urn:dece:deviceid:org:dece:A09D9C22F11CBC6DE0401F0A05996898");
testCase.setPropertyValue("DomainID","urn:dece:domainid:dece:A09DA589BD63A036E0401F0A05996D9A");
testCase.setPropertyValue("expectErrType","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedRTLReq = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request");

FeedRTLReq.setPropertyValue("TCaseName",testCase.getName());
FeedRTLReq.setPropertyValue("TSuiteName",testSuite.getName());

WsdlTestCaseRunner TSrunner = new WsdlTestCaseRunner( FeedRTLReq, null );

TSrunner.runTestStepByName("Get the DeviceGet Properties");
TSrunner.runTestStepByName("pem set");
assert TSrunner.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Set Node Role to LLASP">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
// Set Node Role

testCase.setPropertyValue("NodeRole","urn:dece:role:lasp:linked");

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get-Set Node Role")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )

WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );

TSrunnerRTC.runTestStepByName("Set Node Role for DDD");

assert TSrunnerRTC.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call DeviceGet Request">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )

WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );

TSrunnerRTC.runTestStepByName("DeviceGetRequest");

assert TSrunnerRTC.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract DeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Extract DeviceGet Information")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify theDeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Response Validation")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value>28198</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>SAMLExpDate</con:name>
          <con:value>2012-04-14 13:34:23.0</con:value>
        </con:property>
        <con:property>
          <con:name>rcUUID</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>nodetype</con:name>
          <con:value>manufacturerportal</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>0701</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>sch-drm_user1</con:value>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>Password1</con:value>
        </con:property>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value>A06A9AA49F7073D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value>A06A9AA49F7973D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SAMLassertion</con:name>
          <con:value>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</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>loopuntil</con:name>
          <con:value>25</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTS</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value>0bfd2f38-d125-4a72-817c-2685b1e6f05f</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value>urn:dece:userid:org:dece:A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value>A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value>urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value>A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>NodeRole</con:name>
          <con:value>urn:dece:role:lasp:linked</con:value>
        </con:property>
        <con:property>
          <con:name>AccountID</con:name>
          <con:value>urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceID</con:name>
          <con:value>urn:dece:deviceid:org:dece:A09D9C22F11CBC6DE0401F0A05996898</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>ErrorDataVal</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetReqXml</con:name>
          <con:value>Host: qa.q.uvvu.com:7002</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResXml</con:name>
          <con:value><![CDATA[<Device IsLegacy="false" DeviceID="urn:dece:deviceid:org:dece:A09D9C22F11CBC6DE0401F0A05996898" xmlns="http://www.decellc.org/schema/2010/10/dece" xmlns:ns2="http://www.movielabs.com/schema/md/v1.07/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <DisplayName>DeviceInfoDisplayName</DisplayName>
   <Manufacturer>Microsoft</Manufacturer>
   <Model>V344</Model>
   <Brand Language="en-US">DeviceInfoBrand</Brand>
   <SerialNo>123432442323424</SerialNo>
   <Image MimeType="MimeType3" Width="50" Height="50">http://www.oxygenxml.com/1234</Image>
   <LicAppID>urn:dece:licappid:org:dece:A09D9C22F11EBC6DE0401F0A05996898</LicAppID>
   <DRMClientID>urn:dece:drmclientid:org:dece:A0E2E4B822DB1B7CE0401F0A07994404</DRMClientID>
   <ResourceStatus>
      <Current CreatedBy="urn:dece:org:org:dece:0701" CreationDate="2011-04-11T04:02:39.637Z">
         <Value>urn:dece:type:status:pending</Value>
         <Description>Device Created</Description>
      </Current>
   </ResourceStatus>
</Device>]]></con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResTime</con:name>
          <con:value>172</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetID</con:name>
          <con:value>API call not authorizedhttps://qa.q.uvvu.com:7002/rest/1/0/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3AA06A9AA49F6E73D7E0401F0A059915F0/Device/urn%3Adece%3Adeviceid%3Aorg%3Adece%3AA09D9C22F11CBC6DE0401F0A05996898/DECEDomainhttps://qa.q.uvvu.com:7002/rest/1/0/error/en/ErrorList.html#Security:RoleInvalid</con:value>
        </con:property>
        <con:property>
          <con:name>DomainID</con:name>
          <con:value>urn:dece:domainid:dece:A09DA589BD63A036E0401F0A05996D9A</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_30008 -  DeviceGet - PERM - SecurityRoleValid - Invocation with LLASP_CS" searchProperties="true">
      <con:description>This test case will verify that the Application Tier properly responses to a DeviceGet invocation when the requesting node is Linked LASP CustomerSupport

Expected Result :

It should not allow API invocation for the "L-LASP CUSTOMER SERVICE" node.</con:description>
      <con:settings/>
      <con:testStep type="groovy" name="Verify Node User SAML Asssertion">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.model.testsuite.TestRunner.Status


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def ValSamlAssertion = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Validate SAML Assertion");

	ValSamlAssertion.setPropertyValue("TCaseName",testCase.getName());
	ValSamlAssertion.setPropertyValue("TSuiteName",testSuite.getName());

	def runnerTc = ValSamlAssertion.run( null , false )
	assert runnerTc.status == Status.FINISHED;

	rcUUID = testCase.getPropertyValue("rcUUID");

	if (runnerTc.status != Status.FINISHED || rcUUID.toInteger()!= 1){

			
		testCase.setPropertyValue("nodetype","manufacturerportal");
		testCase.setPropertyValue("nodeid","0701");
		testCase.setPropertyValue("username","sch-drm_user1");
		testCase.setPropertyValue("password","Password1");
		testCase.setPropertyValue("accountoid",null);
		testCase.setPropertyValue("useroid",null);
		testCase.setPropertyValue("assertid",null);
		testCase.setPropertyValue("SAMLassertion",null);
		testCase.setPropertyValue("tokentype","urn:dece:type:tokentype:usernamepassword");
		testCase.setPropertyValue("loopuntil","25");
		testCase.setPropertyValue("expectErrTypeSTS","SUCCESS");
		testCase.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
			
		log.info " SAML Assertion Expired ! re-generating Assertion";
		def RunSTS = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get SAML Assertion - STS")

				RunSTS.setPropertyValue("TCaseName",testCase.getName());
				RunSTS.setPropertyValue("TSuiteName",testSuite.getName());

				def runnerSTS = RunSTS.run( null , false )

				assert runnerSTS.status == Status.FINISHED;

		}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call LicAppCreate Request with Valid Data" disabled="true">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0");
testCase.setPropertyValue("expectErrTypeLAC","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedDeviceDDReq = testProject.getTestSuiteByName("Staging DeviceGet").getTestCaseByName("LicAppCreate Request");

FeedDeviceDDReq.setPropertyValue("TCaseName",testCase.getName());
FeedDeviceDDReq.setPropertyValue("TSuiteName",testSuite.getName());


def runnerTC = FeedDeviceDDReq.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Feed DeviceGet Request with Valid Data">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0");
testCase.setPropertyValue("DeviceID","urn:dece:deviceid:org:dece:A09D9C22F11CBC6DE0401F0A05996898");
testCase.setPropertyValue("DomainID","urn:dece:domainid:dece:A09DA589BD63A036E0401F0A05996D9A");
testCase.setPropertyValue("expectErrType","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedRTLReq = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request");

FeedRTLReq.setPropertyValue("TCaseName",testCase.getName());
FeedRTLReq.setPropertyValue("TSuiteName",testSuite.getName());

WsdlTestCaseRunner TSrunner = new WsdlTestCaseRunner( FeedRTLReq, null );

TSrunner.runTestStepByName("Get the DeviceGet Properties");
TSrunner.runTestStepByName("pem set");
assert TSrunner.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Set Node Role to LLASP CS">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

// Set Node Role

testCase.setPropertyValue("NodeRole","urn:dece:role:lasp:linked:customersupport");

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get-Set Node Role")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )

WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );

TSrunnerRTC.runTestStepByName("Set Node Role for DDD");

assert TSrunnerRTC.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call DeviceGet Request">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )

WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );

TSrunnerRTC.runTestStepByName("DeviceGetRequest");

assert TSrunnerRTC.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract DeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Extract DeviceGet Information")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify theDeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Response Validation")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value>28199</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>SAMLExpDate</con:name>
          <con:value>2012-04-14 13:34:23.0</con:value>
        </con:property>
        <con:property>
          <con:name>rcUUID</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>nodetype</con:name>
          <con:value>manufacturerportal</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>0701</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>sch-drm_user1</con:value>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>Password1</con:value>
        </con:property>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value>A06A9AA49F7073D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value>A06A9AA49F7973D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SAMLassertion</con:name>
          <con:value>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</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>loopuntil</con:name>
          <con:value>25</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTS</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value>782f5898-cd2c-429f-8e41-3202ca4ff4a3</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value>urn:dece:userid:org:dece:A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value>A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value>urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value>A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>AccountID</con:name>
          <con:value>urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceID</con:name>
          <con:value>urn:dece:deviceid:org:dece:A09D9C22F11CBC6DE0401F0A05996898</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>ErrorDataVal</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>NodeRole</con:name>
          <con:value>urn:dece:role:lasp:linked:customersupport</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetReqXml</con:name>
          <con:value>Host: qa.q.uvvu.com:7002</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResXml</con:name>
          <con:value><![CDATA[<Device IsLegacy="false" DeviceID="urn:dece:deviceid:org:dece:A09D9C22F11CBC6DE0401F0A05996898" xmlns="http://www.decellc.org/schema/2010/10/dece" xmlns:ns2="http://www.movielabs.com/schema/md/v1.07/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <DisplayName>DeviceInfoDisplayName</DisplayName>
   <Manufacturer>Microsoft</Manufacturer>
   <Model>V344</Model>
   <Brand Language="en-US">DeviceInfoBrand</Brand>
   <SerialNo>123432442323424</SerialNo>
   <Image MimeType="MimeType3" Width="50" Height="50">http://www.oxygenxml.com/1234</Image>
   <LicAppID>urn:dece:licappid:org:dece:A09D9C22F11EBC6DE0401F0A05996898</LicAppID>
   <DRMClientID>urn:dece:drmclientid:org:dece:A0E2E4B822DB1B7CE0401F0A07994404</DRMClientID>
   <ResourceStatus>
      <Current CreatedBy="urn:dece:org:org:dece:0701" CreationDate="2011-04-11T04:02:39.637Z">
         <Value>urn:dece:type:status:pending</Value>
         <Description>Device Created</Description>
      </Current>
   </ResourceStatus>
</Device>]]></con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResTime</con:name>
          <con:value>159</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetID</con:name>
          <con:value>API call not authorizedhttps://qa.q.uvvu.com:7002/rest/1/0/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3AA06A9AA49F6E73D7E0401F0A059915F0/Device/urn%3Adece%3Adeviceid%3Aorg%3Adece%3AA09D9C22F11CBC6DE0401F0A05996898/DECEDomainhttps://qa.q.uvvu.com:7002/rest/1/0/error/en/ErrorList.html#Security:RoleInvalid</con:value>
        </con:property>
        <con:property>
          <con:name>DomainID</con:name>
          <con:value>urn:dece:domainid:dece:A09DA589BD63A036E0401F0A05996D9A</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_30009 -  DeviceGet - PERM - SecurityRoleValid - Invocation with DLASP" searchProperties="true">
      <con:description>This test case will verify that the Application Tier properly responses to a DeviceGet invocation when the requesting node is Dynamic LASP

Expected Result :

It should not allow API invocation for the "D-LASP" node.</con:description>
      <con:settings/>
      <con:testStep type="groovy" name="Verify Node User SAML Asssertion">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.model.testsuite.TestRunner.Status


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def ValSamlAssertion = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Validate SAML Assertion");

	ValSamlAssertion.setPropertyValue("TCaseName",testCase.getName());
	ValSamlAssertion.setPropertyValue("TSuiteName",testSuite.getName());

	def runnerTc = ValSamlAssertion.run( null , false )
	assert runnerTc.status == Status.FINISHED;

	rcUUID = testCase.getPropertyValue("rcUUID");

	if (runnerTc.status != Status.FINISHED || rcUUID.toInteger()!= 1){

			
		testCase.setPropertyValue("nodetype","manufacturerportal");
		testCase.setPropertyValue("nodeid","0701");
		testCase.setPropertyValue("username","sch-drm_user1");
		testCase.setPropertyValue("password","Password1");
		testCase.setPropertyValue("accountoid",null);
		testCase.setPropertyValue("useroid",null);
		testCase.setPropertyValue("assertid",null);
		testCase.setPropertyValue("SAMLassertion",null);
		testCase.setPropertyValue("tokentype","urn:dece:type:tokentype:usernamepassword");
		testCase.setPropertyValue("loopuntil","25");
		testCase.setPropertyValue("expectErrTypeSTS","SUCCESS");
		testCase.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
			
		log.info " SAML Assertion Expired ! re-generating Assertion";
		def RunSTS = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get SAML Assertion - STS")

				RunSTS.setPropertyValue("TCaseName",testCase.getName());
				RunSTS.setPropertyValue("TSuiteName",testSuite.getName());

				def runnerSTS = RunSTS.run( null , false )

				assert runnerSTS.status == Status.FINISHED;

		}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call LicAppCreate Request with Valid Data" disabled="true">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0");
testCase.setPropertyValue("expectErrTypeLAC","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedDeviceDDReq = testProject.getTestSuiteByName("Staging DeviceGet").getTestCaseByName("LicAppCreate Request");

FeedDeviceDDReq.setPropertyValue("TCaseName",testCase.getName());
FeedDeviceDDReq.setPropertyValue("TSuiteName",testSuite.getName());


def runnerTC = FeedDeviceDDReq.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Feed DeviceGet Request with Valid Data">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0");
testCase.setPropertyValue("DeviceID","urn:dece:deviceid:org:dece:A09D9C22F11CBC6DE0401F0A05996898");
testCase.setPropertyValue("DomainID","urn:dece:domainid:dece:A09DA589BD63A036E0401F0A05996D9A");
testCase.setPropertyValue("expectErrType","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","1");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedRTLReq = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request");

FeedRTLReq.setPropertyValue("TCaseName",testCase.getName());
FeedRTLReq.setPropertyValue("TSuiteName",testSuite.getName());

WsdlTestCaseRunner TSrunner = new WsdlTestCaseRunner( FeedRTLReq, null );

TSrunner.runTestStepByName("Get the DeviceGet Properties");
TSrunner.runTestStepByName("pem set");
assert TSrunner.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Set Node Role to DLASP">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
// Set Node Role

testCase.setPropertyValue("NodeRole","urn:dece:role:lasp:dynamic");


def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get-Set Node Role")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )

WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );

TSrunnerRTC.runTestStepByName("Set Node Role for DDD");

assert TSrunnerRTC.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call DeviceGet Request">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )

WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );

TSrunnerRTC.runTestStepByName("DeviceGetRequest");

assert TSrunnerRTC.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract DeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Extract DeviceGet Information")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify theDeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Response Validation")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value>28200</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>SAMLExpDate</con:name>
          <con:value>2012-04-14 13:34:23.0</con:value>
        </con:property>
        <con:property>
          <con:name>rcUUID</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>nodetype</con:name>
          <con:value>manufacturerportal</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>0701</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>sch-drm_user1</con:value>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>Password1</con:value>
        </con:property>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value>A06A9AA49F7073D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value>A06A9AA49F7973D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SAMLassertion</con:name>
          <con:value>nVdbc6JME773V1jupWUYUDxVkqrhGFRQEA94hzACiqAcBP3134DRmGw2u+9XqVQyTR+e6X6mp+c5Nvc+1YdxjKLEC4OqxL3U2mBN0x2SamyszqbRsjqtholQq0E2222AWrbd7nZqVSmOUyQFcWIGyUuNAiTZAK0GBXTQ6lO9Pkk+dZvtVa06R1GMPWOVJ1Cr5ns/iPtl1JdaGgX90Iy9uB+YexT3E6s/hfKojzX75g1S7fX5CrIMGL26SXLoE4T1ZCML+b71ZIV74pn4pPNsx/2p5wRmkkboPaYdv9TebbMse8qaT2HkEBQAgAA9AuvYsef8qr1WbsbIloJNeF2zZhAGnmX63sUsQMkocUO7Cn0njLzE3f/BNUmQoHDdQLnVsMhW8KtGfAQo0f2jp08go9hsxK5J3pxpaIMiFFioOtOkl9qvfyrg1VSPzCDehNE+/rL+b4hQcEJ+eEB2I75t7Abu3z1+k63XZ2T1pcDy09g7IaVgycG0UFydRGjj5SMvxtyz42pZ/Woe3wiGrP9SkWfiESeGTXyTGc5zUJz8P+V6LNXVy9z0U/Sq9ZrE8M1ngLdYRGZGHWfsOVmPL/Ou8VJCeFS+grpX+n39lad3Wr0bCedlWx5FyYExyJPCOi2iKWUWNfC0CB2FVX1FLfSQOctv7lJq9y7eUG1HmkjXKYtMm/WBYMnkoTscdKEatCv1vLnpKJO0vUNK7BzlfRosFapubzU9lJFvzNxhlu/zqJ2bKwMYPtnjxr46BezitAjr7PGUMDPFupwTY+ZV9DO38QjT74KoR/SE7KhlLx97etxDsa8hOpebLP5f0qDHmYl5X7BFo9jg05mgV1mSuPTCsvA8dWAmMdDBv1uoMM7u6O48sZcBBqqqADmW8bf8SIY7EZIznnFldj6Xc/YCB4yjzLGhXoH+ipE1PuMyg5ur6hufubotzs9r0U9XF16RYVwas67Ma/yc03RelmF4leUytxbzrTyVM0k1uAp2wPH54WKLvQSJuWdREi1PacqY0ulqOcdy4TzaK6e1zvsyK4vs9ChOpXWTU/kB1IyFRQkptr2M9oewYsyYB6PBAW0hEjKAY8KLrO8yWZ9RCqeZpUz/LJMlcSCrccaq5a7ECp8N5rPLRy5YRmbtPZ/zOpxcc2HprKCA1XIQmws6kDWYcU5pPOQze3wDIqsgq7DXXI34TOO1mSLImpTxsJRxfObHa0px16J7sppqPtDh9rEwrMovhAB/D7STdaaPFVMU4Ho/J62m5loe7ZnLMHNW3YxTjcEwXEnYjQJVnmFUiAEBWGwN55+BI2ZOjw9ej/LQaCOEe+RGFZkMh7vTJQddrzl2JsqC5ja7zkT0Jk3TdgnJt6htcwclCdlD0lVNWzMIjQu8S3s8nC2RFxmXRKFVsu116Yq2SGdLLvQ79tvSmA3ruWGp+ngynS0mlzxXjtvuxU/exsxbNB3InDNWEJrEVp0ApsDoXY5mjbct5tNGA4iuQEdmIBS3jsN7mMDM2/ZKwjdN5jF5ocxmIrtgxSkUxTovMZyqbgSXnFjiPJ2Riizxto/TdDaWml9ZsQyHKwXMxepgUAJY6dAunaktXnDUGV0fLNFKVXx9nsDsMN8EJAnEg/q2kTPHkgsG2FI2ZfApYiqpBGfm+DAA+XDeBuRRtf3BtAdnzXxK7fKx66zOO2e1w0UxHo6OoUN/rj9wTMIUW1RUnddk2L2et1yWZk3Nt/b5Yb23ck7HNSuNQ53hNUEFs5zj4PAqi3VI5bFx4bcyy5f2FZjLJqbFab10YyNQvLHOp5i06QNdtmsK/JVjBcUqnzl2ZKEKv3KMv3KMh5tjXepyZEy32UO8yBxG5I9qZz4a9A5AXY52FaYuEE7i+a1x0M30YX1BnrOOu1UXi57EuWw92Bhuc50wwLxYKhrsOqKn7big3fLP8khW6ZlH+GewRccsHlUUiQz4ZnIRiF6U1pn9yttfLs0WNdtPpulJmpnDmDy76+Oil20nb22CiMQzfemsTqqwDK33e+Rrk7wLr22UeGywnzrwbfSapustspLbsriHJa4q4MvRTH4e4wqJZzc2pWr/UMyCcYKCpPZaWBUjXD/Fg55n9/HNeV1D0IY9CFs9odPpNLkOD1qAFAAEdK9H0gK4zXpXFF8gsmGw8YpYxTB7vax/Bmjt+2tkRiiq/eCpyFNVCjQ8fYRBjPTwpdZlmQ7LME2SpmGP7IA21RE6EP+0SNDqQrpWVcJkHIwjuElQ9DAgk18HZA1Z3sFDxRT9PkvECU7E0TyliU8+ncynAKV4zI6KSbdPtbp0mQDCTvcHC3/A3S06hHHydHAP5TDzx218/XbbMdaxvUIhLkAzCFcLfTPSgxvi33ZGfTv639zD1PaKmQWnL4k864rk86cPNhQ0uFMBdAB5w3xX/WdT6ndT4gdExNdk3CPZJ+8h7u1hgmdtPI6V75EYF+1oPh2f0tMpLcvUAYAiIuyeIAlATJGV4nHxrIc7FBB3D8S/DOp3zF/i3uWf0aWJG0wTfMr3mFHVcvn3R9ona5yABOXJdzLWx8+yIviPLzerbxV6WDzBf7Iwsj/y/o2vhzgYctGhvMApVsWEff5c3veT0LdC7NXDTSqMHn1/Z/9d7M/Ce7ruUBLMinWaoD9/qRbd56VmWlaYBonE1UrBY0csMSfnA+p/KP3mphxx398sefzHN8tSHk0tF+3N2l3X+7tywysLbyFsFXsllpdajl/fOHjgPHTgd4DfN+E2/1MT/ryT19/Ev0secvqV2a//Aw==</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>loopuntil</con:name>
          <con:value>25</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTS</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value>60b55712-fc7f-4c74-aee4-13660e4dd687</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value>urn:dece:userid:org:dece:A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value>A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value>urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value>A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>AccountID</con:name>
          <con:value>urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceID</con:name>
          <con:value>urn:dece:deviceid:org:dece:A09D9C22F11CBC6DE0401F0A05996898</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>ErrorDataVal</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>NodeRole</con:name>
          <con:value>urn:dece:role:lasp:dynamic</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetReqXml</con:name>
          <con:value>Host: qa.q.uvvu.com:7002</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResXml</con:name>
          <con:value><![CDATA[<Device IsLegacy="false" DeviceID="urn:dece:deviceid:org:dece:A09D9C22F11CBC6DE0401F0A05996898" xmlns="http://www.decellc.org/schema/2010/10/dece" xmlns:ns2="http://www.movielabs.com/schema/md/v1.07/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <DisplayName>DeviceInfoDisplayName</DisplayName>
   <Manufacturer>Microsoft</Manufacturer>
   <Model>V344</Model>
   <Brand Language="en-US">DeviceInfoBrand</Brand>
   <SerialNo>123432442323424</SerialNo>
   <Image MimeType="MimeType3" Width="50" Height="50">http://www.oxygenxml.com/1234</Image>
   <LicAppID>urn:dece:licappid:org:dece:A09D9C22F11EBC6DE0401F0A05996898</LicAppID>
   <DRMClientID>urn:dece:drmclientid:org:dece:A0E2E4B822DB1B7CE0401F0A07994404</DRMClientID>
   <ResourceStatus>
      <Current CreatedBy="urn:dece:org:org:dece:0701" CreationDate="2011-04-11T04:02:39.637Z">
         <Value>urn:dece:type:status:pending</Value>
         <Description>Device Created</Description>
      </Current>
   </ResourceStatus>
</Device>]]></con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResTime</con:name>
          <con:value>195</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetID</con:name>
          <con:value>API call not authorizedhttps://qa.q.uvvu.com:7002/rest/1/0/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3AA06A9AA49F6E73D7E0401F0A059915F0/Device/urn%3Adece%3Adeviceid%3Aorg%3Adece%3AA09D9C22F11CBC6DE0401F0A05996898/DECEDomainhttps://qa.q.uvvu.com:7002/rest/1/0/error/en/ErrorList.html#Security:RoleInvalid</con:value>
        </con:property>
        <con:property>
          <con:name>DomainID</con:name>
          <con:value>urn:dece:domainid:dece:A09DA589BD63A036E0401F0A05996D9A</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_30010 -  DeviceGet - PERM - SecurityRoleValid - Invocation with DLASP_CS" searchProperties="true">
      <con:description>This test case will verify that the Application Tier properly responses to a DeviceGet invocation when the requesting node is Dynamic LASP Customer Support

Expected Result :

It should not allow API invocation for the "D-LASP CUSTOMER SUPPORT" node.</con:description>
      <con:settings/>
      <con:testStep type="groovy" name="Verify Node User SAML Asssertion">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.model.testsuite.TestRunner.Status


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def ValSamlAssertion = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Validate SAML Assertion");

	ValSamlAssertion.setPropertyValue("TCaseName",testCase.getName());
	ValSamlAssertion.setPropertyValue("TSuiteName",testSuite.getName());

	def runnerTc = ValSamlAssertion.run( null , false )
	assert runnerTc.status == Status.FINISHED;

	rcUUID = testCase.getPropertyValue("rcUUID");

	if (runnerTc.status != Status.FINISHED || rcUUID.toInteger()!= 1){

			
		testCase.setPropertyValue("nodetype","manufacturerportal");
		testCase.setPropertyValue("nodeid","0701");
		testCase.setPropertyValue("username","sch-drm_user1");
		testCase.setPropertyValue("password","Password1");
		testCase.setPropertyValue("accountoid",null);
		testCase.setPropertyValue("useroid",null);
		testCase.setPropertyValue("assertid",null);
		testCase.setPropertyValue("SAMLassertion",null);
		testCase.setPropertyValue("tokentype","urn:dece:type:tokentype:usernamepassword");
		testCase.setPropertyValue("loopuntil","25");
		testCase.setPropertyValue("expectErrTypeSTS","SUCCESS");
		testCase.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
			
		log.info " SAML Assertion Expired ! re-generating Assertion";
		def RunSTS = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get SAML Assertion - STS")

				RunSTS.setPropertyValue("TCaseName",testCase.getName());
				RunSTS.setPropertyValue("TSuiteName",testSuite.getName());

				def runnerSTS = RunSTS.run( null , false )

				assert runnerSTS.status == Status.FINISHED;

		}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call LicAppCreate Request with Valid Data" disabled="true">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0");
testCase.setPropertyValue("expectErrTypeLAC","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedDeviceDDReq = testProject.getTestSuiteByName("Staging DeviceGet").getTestCaseByName("LicAppCreate Request");

FeedDeviceDDReq.setPropertyValue("TCaseName",testCase.getName());
FeedDeviceDDReq.setPropertyValue("TSuiteName",testSuite.getName());


def runnerTC = FeedDeviceDDReq.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Feed DeviceGet Request with Valid Data">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0");
testCase.setPropertyValue("DeviceID","urn:dece:deviceid:org:dece:A09D9C22F11CBC6DE0401F0A05996898");
testCase.setPropertyValue("DomainID","urn:dece:domainid:dece:A09DA589BD63A036E0401F0A05996D9A");
testCase.setPropertyValue("expectErrType","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","1");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedRTLReq = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request");

FeedRTLReq.setPropertyValue("TCaseName",testCase.getName());
FeedRTLReq.setPropertyValue("TSuiteName",testSuite.getName());

WsdlTestCaseRunner TSrunner = new WsdlTestCaseRunner( FeedRTLReq, null );

TSrunner.runTestStepByName("Get the DeviceGet Properties");
TSrunner.runTestStepByName("pem set");
assert TSrunner.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Set Node Role to DLASP CS">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

// Set Node Role

testCase.setPropertyValue("NodeRole","urn:dece:role:lasp:dynamic:customersupport");


def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get-Set Node Role")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )

WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );

TSrunnerRTC.runTestStepByName("Set Node Role for DDD");

assert TSrunnerRTC.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call DeviceGet Request">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )

WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );

TSrunnerRTC.runTestStepByName("DeviceGetRequest");

assert TSrunnerRTC.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract DeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Extract DeviceGet Information")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify theDeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Response Validation")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value>28201</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>SAMLExpDate</con:name>
          <con:value>2012-04-14 13:34:23.0</con:value>
        </con:property>
        <con:property>
          <con:name>rcUUID</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>nodetype</con:name>
          <con:value>manufacturerportal</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>0701</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>sch-drm_user1</con:value>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>Password1</con:value>
        </con:property>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value>A06A9AA49F7073D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value>A06A9AA49F7973D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SAMLassertion</con:name>
          <con:value>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</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>loopuntil</con:name>
          <con:value>25</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTS</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value>954beb58-9fe6-486c-abb1-667d75e114df</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value>urn:dece:userid:org:dece:A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value>A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value>urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value>A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>AccountID</con:name>
          <con:value>urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceID</con:name>
          <con:value>urn:dece:deviceid:org:dece:A09D9C22F11CBC6DE0401F0A05996898</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>ErrorDataVal</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>NodeRole</con:name>
          <con:value>urn:dece:role:lasp:dynamic:customersupport</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetReqXml</con:name>
          <con:value>Host: qa.q.uvvu.com:7002</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResXml</con:name>
          <con:value><![CDATA[<Device IsLegacy="false" DeviceID="urn:dece:deviceid:org:dece:A09D9C22F11CBC6DE0401F0A05996898" xmlns="http://www.decellc.org/schema/2010/10/dece" xmlns:ns2="http://www.movielabs.com/schema/md/v1.07/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <DisplayName>DeviceInfoDisplayName</DisplayName>
   <Manufacturer>Microsoft</Manufacturer>
   <Model>V344</Model>
   <Brand Language="en-US">DeviceInfoBrand</Brand>
   <SerialNo>123432442323424</SerialNo>
   <Image MimeType="MimeType3" Width="50" Height="50">http://www.oxygenxml.com/1234</Image>
   <LicAppID>urn:dece:licappid:org:dece:A09D9C22F11EBC6DE0401F0A05996898</LicAppID>
   <DRMClientID>urn:dece:drmclientid:org:dece:A0E2E4B822DB1B7CE0401F0A07994404</DRMClientID>
   <ResourceStatus>
      <Current CreatedBy="urn:dece:org:org:dece:0701" CreationDate="2011-04-11T04:02:39.637Z">
         <Value>urn:dece:type:status:pending</Value>
         <Description>Device Created</Description>
      </Current>
   </ResourceStatus>
</Device>]]></con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResTime</con:name>
          <con:value>203</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetID</con:name>
          <con:value>API call not authorizedhttps://qa.q.uvvu.com:7002/rest/1/0/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3AA06A9AA49F6E73D7E0401F0A059915F0/Device/urn%3Adece%3Adeviceid%3Aorg%3Adece%3AA09D9C22F11CBC6DE0401F0A05996898/DECEDomainhttps://qa.q.uvvu.com:7002/rest/1/0/error/en/ErrorList.html#Security:RoleInvalid</con:value>
        </con:property>
        <con:property>
          <con:name>DomainID</con:name>
          <con:value>urn:dece:domainid:dece:A09DA589BD63A036E0401F0A05996D9A</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_30011 -  DeviceGet - PERM - SecurityRoleValid - Invocation with DSP" searchProperties="true">
      <con:description>This test case will verify that the Application Tier properly responses to a DeviceGet invocation when the requesting node is DSP

Expected Result :

It should not allow API invocation for the "DSP" node.</con:description>
      <con:settings/>
      <con:testStep type="groovy" name="Verify Node User SAML Asssertion">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.model.testsuite.TestRunner.Status


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def ValSamlAssertion = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Validate SAML Assertion");

	ValSamlAssertion.setPropertyValue("TCaseName",testCase.getName());
	ValSamlAssertion.setPropertyValue("TSuiteName",testSuite.getName());

	def runnerTc = ValSamlAssertion.run( null , false )
	assert runnerTc.status == Status.FINISHED;

	rcUUID = testCase.getPropertyValue("rcUUID");

	if (runnerTc.status != Status.FINISHED || rcUUID.toInteger()!= 1){

			
		testCase.setPropertyValue("nodetype","manufacturerportal");
		testCase.setPropertyValue("nodeid","0701");
		testCase.setPropertyValue("username","sch-drm_user1");
		testCase.setPropertyValue("password","Password1");
		testCase.setPropertyValue("accountoid",null);
		testCase.setPropertyValue("useroid",null);
		testCase.setPropertyValue("assertid",null);
		testCase.setPropertyValue("SAMLassertion",null);
		testCase.setPropertyValue("tokentype","urn:dece:type:tokentype:usernamepassword");
		testCase.setPropertyValue("loopuntil","25");
		testCase.setPropertyValue("expectErrTypeSTS","SUCCESS");
		testCase.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
			
		log.info " SAML Assertion Expired ! re-generating Assertion";
		def RunSTS = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get SAML Assertion - STS")

				RunSTS.setPropertyValue("TCaseName",testCase.getName());
				RunSTS.setPropertyValue("TSuiteName",testSuite.getName());

				def runnerSTS = RunSTS.run( null , false )

				assert runnerSTS.status == Status.FINISHED;

		}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call LicAppCreate Request with Valid Data" disabled="true">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0");
testCase.setPropertyValue("expectErrTypeLAC","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedDeviceDDReq = testProject.getTestSuiteByName("Staging DeviceGet").getTestCaseByName("LicAppCreate Request");

FeedDeviceDDReq.setPropertyValue("TCaseName",testCase.getName());
FeedDeviceDDReq.setPropertyValue("TSuiteName",testSuite.getName());


def runnerTC = FeedDeviceDDReq.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Feed DeviceGet Request with Valid Data">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0");
testCase.setPropertyValue("DeviceID","urn:dece:deviceid:org:dece:A09D9C22F11CBC6DE0401F0A05996898");
testCase.setPropertyValue("DomainID","urn:dece:domainid:dece:A09DA589BD63A036E0401F0A05996D9A");
testCase.setPropertyValue("expectErrType","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","1");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedRTLReq = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request");

FeedRTLReq.setPropertyValue("TCaseName",testCase.getName());
FeedRTLReq.setPropertyValue("TSuiteName",testSuite.getName());

WsdlTestCaseRunner TSrunner = new WsdlTestCaseRunner( FeedRTLReq, null );

TSrunner.runTestStepByName("Get the DeviceGet Properties");
TSrunner.runTestStepByName("pem set");
assert TSrunner.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Set Node Role to DSP">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
// Set Node Role

testCase.setPropertyValue("NodeRole","urn:dece:role:dsp");


def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get-Set Node Role")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )

WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );

TSrunnerRTC.runTestStepByName("Set Node Role for DDD");

assert TSrunnerRTC.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call DeviceGet Request">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )

WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );

TSrunnerRTC.runTestStepByName("DeviceGetRequest");

assert TSrunnerRTC.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract DeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Extract DeviceGet Information")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify theDeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Response Validation")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value>28202</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>SAMLExpDate</con:name>
          <con:value>2012-04-14 13:34:23.0</con:value>
        </con:property>
        <con:property>
          <con:name>rcUUID</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>nodetype</con:name>
          <con:value>manufacturerportal</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>0701</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>sch-drm_user1</con:value>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>Password1</con:value>
        </con:property>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value>A06A9AA49F7073D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value>A06A9AA49F7973D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SAMLassertion</con:name>
          <con:value>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</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>loopuntil</con:name>
          <con:value>25</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTS</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value>cdb1d170-8756-4d88-87d6-c105a2efd06d</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value>urn:dece:userid:org:dece:A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value>A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value>urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value>A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>AccountID</con:name>
          <con:value>urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceID</con:name>
          <con:value>urn:dece:deviceid:org:dece:A09D9C22F11CBC6DE0401F0A05996898</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>ErrorDataVal</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>NodeRole</con:name>
          <con:value>urn:dece:role:dsp</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetReqXml</con:name>
          <con:value>Host: qa.q.uvvu.com:7002</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResXml</con:name>
          <con:value><![CDATA[<Device IsLegacy="false" DeviceID="urn:dece:deviceid:org:dece:A09D9C22F11CBC6DE0401F0A05996898" xmlns="http://www.decellc.org/schema/2010/10/dece" xmlns:ns2="http://www.movielabs.com/schema/md/v1.07/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <DisplayName>DeviceInfoDisplayName</DisplayName>
   <Manufacturer>Microsoft</Manufacturer>
   <Model>V344</Model>
   <Brand Language="en-US">DeviceInfoBrand</Brand>
   <SerialNo>123432442323424</SerialNo>
   <Image MimeType="MimeType3" Width="50" Height="50">http://www.oxygenxml.com/1234</Image>
   <LicAppID>urn:dece:licappid:org:dece:A09D9C22F11EBC6DE0401F0A05996898</LicAppID>
   <DRMClientID>urn:dece:drmclientid:org:dece:A0E2E4B822DB1B7CE0401F0A07994404</DRMClientID>
   <ResourceStatus>
      <Current CreatedBy="urn:dece:org:org:dece:0701" CreationDate="2011-04-11T04:02:39.637Z">
         <Value>urn:dece:type:status:pending</Value>
         <Description>Device Created</Description>
      </Current>
   </ResourceStatus>
</Device>]]></con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResTime</con:name>
          <con:value>162</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetID</con:name>
          <con:value>API call not authorizedhttps://qa.q.uvvu.com:7002/rest/1/0/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3AA06A9AA49F6E73D7E0401F0A059915F0/Device/urn%3Adece%3Adeviceid%3Aorg%3Adece%3AA09D9C22F11CBC6DE0401F0A05996898/DECEDomainhttps://qa.q.uvvu.com:7002/rest/1/0/error/en/ErrorList.html#Security:RoleInvalid</con:value>
        </con:property>
        <con:property>
          <con:name>DomainID</con:name>
          <con:value>urn:dece:domainid:dece:A09DA589BD63A036E0401F0A05996D9A</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_30012 -  DeviceGet - PERM - SecurityRoleValid - Invocation with DSP_CS" searchProperties="true">
      <con:description>This test case will verify that the Application Tier properly responses to a DeviceGet invocation when the requesting node is DSP Cusomter Support

Expected Result :

It should not allow API invocation for the "DSP CUSTOMER SUPPORT" node.</con:description>
      <con:settings/>
      <con:testStep type="groovy" name="Verify Node User SAML Asssertion">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.model.testsuite.TestRunner.Status


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def ValSamlAssertion = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Validate SAML Assertion");

	ValSamlAssertion.setPropertyValue("TCaseName",testCase.getName());
	ValSamlAssertion.setPropertyValue("TSuiteName",testSuite.getName());

	def runnerTc = ValSamlAssertion.run( null , false )
	assert runnerTc.status == Status.FINISHED;

	rcUUID = testCase.getPropertyValue("rcUUID");

	if (runnerTc.status != Status.FINISHED || rcUUID.toInteger()!= 1){

			
		testCase.setPropertyValue("nodetype","manufacturerportal");
		testCase.setPropertyValue("nodeid","0701");
		testCase.setPropertyValue("username","sch-drm_user1");
		testCase.setPropertyValue("password","Password1");
		testCase.setPropertyValue("accountoid",null);
		testCase.setPropertyValue("useroid",null);
		testCase.setPropertyValue("assertid",null);
		testCase.setPropertyValue("SAMLassertion",null);
		testCase.setPropertyValue("tokentype","urn:dece:type:tokentype:usernamepassword");
		testCase.setPropertyValue("loopuntil","25");
		testCase.setPropertyValue("expectErrTypeSTS","SUCCESS");
		testCase.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
			
		log.info " SAML Assertion Expired ! re-generating Assertion";
		def RunSTS = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get SAML Assertion - STS")

				RunSTS.setPropertyValue("TCaseName",testCase.getName());
				RunSTS.setPropertyValue("TSuiteName",testSuite.getName());

				def runnerSTS = RunSTS.run( null , false )

				assert runnerSTS.status == Status.FINISHED;

		}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call LicAppCreate Request with Valid Data" disabled="true">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0");
testCase.setPropertyValue("expectErrTypeLAC","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedDeviceDDReq = testProject.getTestSuiteByName("Staging DeviceGet").getTestCaseByName("LicAppCreate Request");

FeedDeviceDDReq.setPropertyValue("TCaseName",testCase.getName());
FeedDeviceDDReq.setPropertyValue("TSuiteName",testSuite.getName());


def runnerTC = FeedDeviceDDReq.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Feed DeviceGet Request with Valid Data">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0");
testCase.setPropertyValue("DeviceID","urn:dece:deviceid:org:dece:A09D9C22F11CBC6DE0401F0A05996898");
testCase.setPropertyValue("DomainID","urn:dece:domainid:dece:A09DA589BD63A036E0401F0A05996D9A");
testCase.setPropertyValue("expectErrType","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedRTLReq = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request");

FeedRTLReq.setPropertyValue("TCaseName",testCase.getName());
FeedRTLReq.setPropertyValue("TSuiteName",testSuite.getName());

WsdlTestCaseRunner TSrunner = new WsdlTestCaseRunner( FeedRTLReq, null );

TSrunner.runTestStepByName("Get the DeviceGet Properties");
TSrunner.runTestStepByName("pem set");
assert TSrunner.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Set Node Role to DSP CS">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();
// Set Node Role

testCase.setPropertyValue("NodeRole","urn:dece:role:lasp:dsp:customersupport");


def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get-Set Node Role")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )

WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );

TSrunnerRTC.runTestStepByName("Set Node Role for DDD");

assert TSrunnerRTC.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call DeviceGet Request">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )

WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );

TSrunnerRTC.runTestStepByName("DeviceGetRequest");

assert TSrunnerRTC.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract DeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Extract DeviceGet Information")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify theDeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Response Validation")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value>28203</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>SAMLExpDate</con:name>
          <con:value>2012-04-14 13:34:23.0</con:value>
        </con:property>
        <con:property>
          <con:name>rcUUID</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>nodetype</con:name>
          <con:value>manufacturerportal</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>0701</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>sch-drm_user1</con:value>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>Password1</con:value>
        </con:property>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value>A06A9AA49F7073D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value>A06A9AA49F7973D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SAMLassertion</con:name>
          <con:value>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</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>loopuntil</con:name>
          <con:value>25</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTS</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value>2590e3f6-799c-4d85-802c-e1ceab546027</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value>urn:dece:userid:org:dece:A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value>A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value>urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value>A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>AccountID</con:name>
          <con:value>urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceID</con:name>
          <con:value>urn:dece:deviceid:org:dece:A09D9C22F11CBC6DE0401F0A05996898</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>ErrorDataVal</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>NodeRole</con:name>
          <con:value>urn:dece:role:dsp</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetReqXml</con:name>
          <con:value>Host: qa.q.uvvu.com:7002</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResXml</con:name>
          <con:value><![CDATA[<Device IsLegacy="false" DeviceID="urn:dece:deviceid:org:dece:A09D9C22F11CBC6DE0401F0A05996898" xmlns="http://www.decellc.org/schema/2010/10/dece" xmlns:ns2="http://www.movielabs.com/schema/md/v1.07/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <DisplayName>DeviceInfoDisplayName</DisplayName>
   <Manufacturer>Microsoft</Manufacturer>
   <Model>V344</Model>
   <Brand Language="en-US">DeviceInfoBrand</Brand>
   <SerialNo>123432442323424</SerialNo>
   <Image MimeType="MimeType3" Width="50" Height="50">http://www.oxygenxml.com/1234</Image>
   <LicAppID>urn:dece:licappid:org:dece:A09D9C22F11EBC6DE0401F0A05996898</LicAppID>
   <DRMClientID>urn:dece:drmclientid:org:dece:A0E2E4B822DB1B7CE0401F0A07994404</DRMClientID>
   <ResourceStatus>
      <Current CreatedBy="urn:dece:org:org:dece:0701" CreationDate="2011-04-11T04:02:39.637Z">
         <Value>urn:dece:type:status:pending</Value>
         <Description>Device Created</Description>
      </Current>
   </ResourceStatus>
</Device>]]></con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResTime</con:name>
          <con:value>264</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetID</con:name>
          <con:value>API call not authorizedhttps://qa.q.uvvu.com:7002/rest/1/0/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3AA06A9AA49F6E73D7E0401F0A059915F0/Device/urn%3Adece%3Adeviceid%3Aorg%3Adece%3AA09D9C22F11CBC6DE0401F0A05996898/DECEDomainhttps://qa.q.uvvu.com:7002/rest/1/0/error/en/ErrorList.html#Security:RoleInvalid</con:value>
        </con:property>
        <con:property>
          <con:name>DomainID</con:name>
          <con:value>urn:dece:domainid:dece:A09DA589BD63A036E0401F0A05996D9A</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_30013 -  DeviceGet - PERM - SecurityRoleValid - Invocation with drmdomainmanager" searchProperties="true">
      <con:description>This test case will verify that the Application Tier properly responses to a DeviceGet invocation when the requesting node is a Device.

Expected Result :

It should not allow API invocation for the "DEVICE " node.</con:description>
      <con:settings/>
      <con:testStep type="groovy" name="Verify Node User SAML Asssertion">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.model.testsuite.TestRunner.Status


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def ValSamlAssertion = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Validate SAML Assertion");

	ValSamlAssertion.setPropertyValue("TCaseName",testCase.getName());
	ValSamlAssertion.setPropertyValue("TSuiteName",testSuite.getName());

	def runnerTc = ValSamlAssertion.run( null , false )
	assert runnerTc.status == Status.FINISHED;

	rcUUID = testCase.getPropertyValue("rcUUID");

	if (runnerTc.status != Status.FINISHED || rcUUID.toInteger()!= 1){

			
		testCase.setPropertyValue("nodetype","manufacturerportal");
		testCase.setPropertyValue("nodeid","0701");
		testCase.setPropertyValue("username","sch-drm_user1");
		testCase.setPropertyValue("password","Password1");
		testCase.setPropertyValue("accountoid",null);
		testCase.setPropertyValue("useroid",null);
		testCase.setPropertyValue("assertid",null);
		testCase.setPropertyValue("SAMLassertion",null);
		testCase.setPropertyValue("tokentype","urn:dece:type:tokentype:usernamepassword");
		testCase.setPropertyValue("loopuntil","25");
		testCase.setPropertyValue("expectErrTypeSTS","SUCCESS");
		testCase.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
			
		log.info " SAML Assertion Expired ! re-generating Assertion";
		def RunSTS = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get SAML Assertion - STS")

				RunSTS.setPropertyValue("TCaseName",testCase.getName());
				RunSTS.setPropertyValue("TSuiteName",testSuite.getName());

				def runnerSTS = RunSTS.run( null , false )

				assert runnerSTS.status == Status.FINISHED;

		}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call LicAppCreate Request with Valid Data" disabled="true">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0");
testCase.setPropertyValue("expectErrTypeLAC","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedDeviceDDReq = testProject.getTestSuiteByName("Staging DeviceGet").getTestCaseByName("LicAppCreate Request");

FeedDeviceDDReq.setPropertyValue("TCaseName",testCase.getName());
FeedDeviceDDReq.setPropertyValue("TSuiteName",testSuite.getName());


def runnerTC = FeedDeviceDDReq.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Feed DeviceGet Request with Valid Data">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0");
testCase.setPropertyValue("DeviceID","urn:dece:deviceid:org:dece:A09D9C22F11CBC6DE0401F0A05996898");
testCase.setPropertyValue("DomainID","urn:dece:domainid:dece:A09DA589BD63A036E0401F0A05996D9A");
testCase.setPropertyValue("expectErrType","FORBIDDEN");
testCase.setPropertyValue("ErrorDataVal","1");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedRTLReq = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request");

FeedRTLReq.setPropertyValue("TCaseName",testCase.getName());
FeedRTLReq.setPropertyValue("TSuiteName",testSuite.getName());

WsdlTestCaseRunner TSrunner = new WsdlTestCaseRunner( FeedRTLReq, null );

TSrunner.runTestStepByName("Get the DeviceGet Properties");
TSrunner.runTestStepByName("pem set");
assert TSrunner.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Set Node Role to DRM DM">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

// Set Role 

testCase.setPropertyValue("NodeRole","urn:dece:role:drmdomainmanager");


def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get-Set Node Role")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )

WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );

TSrunnerRTC.runTestStepByName("Set Node Role for DDD");

assert TSrunnerRTC.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call DeviceGet Request">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )

WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );

TSrunnerRTC.runTestStepByName("DeviceGetRequest");

assert TSrunnerRTC.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract DeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Extract DeviceGet Information")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify theDeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Response Validation")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value>28204</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>SAMLExpDate</con:name>
          <con:value>2012-04-14 13:34:23.0</con:value>
        </con:property>
        <con:property>
          <con:name>rcUUID</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>nodetype</con:name>
          <con:value>manufacturerportal</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>0701</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>sch-drm_user1</con:value>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>Password1</con:value>
        </con:property>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value>A06A9AA49F7073D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value>A06A9AA49F7973D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SAMLassertion</con:name>
          <con:value>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</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>loopuntil</con:name>
          <con:value>25</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTS</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value>436eba85-f7ab-4931-8e49-608fa00c0d25</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value>urn:dece:userid:org:dece:A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value>A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value>urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value>A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>AccountID</con:name>
          <con:value>urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceID</con:name>
          <con:value>urn:dece:deviceid:org:dece:A09D9C22F11CBC6DE0401F0A05996898</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>FORBIDDEN</con:value>
        </con:property>
        <con:property>
          <con:name>ErrorDataVal</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>NodeRole</con:name>
          <con:value>urn:dece:role:drmdomainmanager</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetReqXml</con:name>
          <con:value>Host: qa.q.uvvu.com:7002</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResXml</con:name>
          <con:value><![CDATA[<ErrorList xmlns="http://www.decellc.org/schema/2010/10/dece" xmlns:ns2="http://www.movielabs.com/schema/md/v1.07/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Error ErrorID="urn:dece:errorid:org:dece:Security:RoleInvalid">
      <Reason Language="en">API call not authorized</Reason>
      <OriginalRequest>https://qa.q.uvvu.com:7002/rest/1/0/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3AA06A9AA49F6E73D7E0401F0A059915F0/Device/urn%3Adece%3Adeviceid%3Aorg%3Adece%3AA09D9C22F11CBC6DE0401F0A05996898/DECEDomain</OriginalRequest>
      <ErrorLink>https://qa.q.uvvu.com:7002/rest/1/0/error/en/ErrorList.html#Security:RoleInvalid</ErrorLink>
   </Error>
</ErrorList>]]></con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResTime</con:name>
          <con:value>130</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetID</con:name>
          <con:value>API call not authorizedhttps://qa.q.uvvu.com:7002/rest/1/0/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3AA06A9AA49F6E73D7E0401F0A059915F0/Device/urn%3Adece%3Adeviceid%3Aorg%3Adece%3AA09D9C22F11CBC6DE0401F0A05996898/DECEDomainhttps://qa.q.uvvu.com:7002/rest/1/0/error/en/ErrorList.html#Security:RoleInvalid</con:value>
        </con:property>
        <con:property>
          <con:name>DomainID</con:name>
          <con:value>urn:dece:domainid:dece:A09DA589BD63A036E0401F0A05996D9A</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_30014 -  DeviceGet - PERM - SecurityRoleValid - Invocation with DSP DRM LIC Authority" searchProperties="true">
      <con:description>This test case will verify that the Application Tier properly responses to a DeviceGet invocation when the requesting node is a Device customer support.

Expected Result :

It should not allow API invocation for the "DEVICE CUSTOMER SUPPORT" node.</con:description>
      <con:settings/>
      <con:testStep type="groovy" name="Verify Node User SAML Asssertion">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.model.testsuite.TestRunner.Status


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def ValSamlAssertion = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Validate SAML Assertion");

	ValSamlAssertion.setPropertyValue("TCaseName",testCase.getName());
	ValSamlAssertion.setPropertyValue("TSuiteName",testSuite.getName());

	def runnerTc = ValSamlAssertion.run( null , false )
	assert runnerTc.status == Status.FINISHED;

	rcUUID = testCase.getPropertyValue("rcUUID");

	if (runnerTc.status != Status.FINISHED || rcUUID.toInteger()!= 1){

			
		testCase.setPropertyValue("nodetype","manufacturerportal");
		testCase.setPropertyValue("nodeid","0701");
		testCase.setPropertyValue("username","sch-drm_user1");
		testCase.setPropertyValue("password","Password1");
		testCase.setPropertyValue("accountoid",null);
		testCase.setPropertyValue("useroid",null);
		testCase.setPropertyValue("assertid",null);
		testCase.setPropertyValue("SAMLassertion",null);
		testCase.setPropertyValue("tokentype","urn:dece:type:tokentype:usernamepassword");
		testCase.setPropertyValue("loopuntil","25");
		testCase.setPropertyValue("expectErrTypeSTS","SUCCESS");
		testCase.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
			
		log.info " SAML Assertion Expired ! re-generating Assertion";
		def RunSTS = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get SAML Assertion - STS")

				RunSTS.setPropertyValue("TCaseName",testCase.getName());
				RunSTS.setPropertyValue("TSuiteName",testSuite.getName());

				def runnerSTS = RunSTS.run( null , false )

				assert runnerSTS.status == Status.FINISHED;

		}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call LicAppCreate Request with Valid Data" disabled="true">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0");
testCase.setPropertyValue("expectErrTypeLAC","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedDeviceDDReq = testProject.getTestSuiteByName("Staging DeviceGet").getTestCaseByName("LicAppCreate Request");

FeedDeviceDDReq.setPropertyValue("TCaseName",testCase.getName());
FeedDeviceDDReq.setPropertyValue("TSuiteName",testSuite.getName());


def runnerTC = FeedDeviceDDReq.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Feed DeviceGet Request with Valid Data">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0");
testCase.setPropertyValue("DeviceID","urn:dece:deviceid:org:dece:A09D9C22F11CBC6DE0401F0A05996898");
testCase.setPropertyValue("DomainID","urn:dece:domainid:dece:A09DA589BD63A036E0401F0A05996D9A");
testCase.setPropertyValue("expectErrType","FORBIDDEN");
testCase.setPropertyValue("ErrorDataVal","1");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedRTLReq = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request");

FeedRTLReq.setPropertyValue("TCaseName",testCase.getName());
FeedRTLReq.setPropertyValue("TSuiteName",testSuite.getName());

WsdlTestCaseRunner TSrunner = new WsdlTestCaseRunner( FeedRTLReq, null );

TSrunner.runTestStepByName("Get the DeviceGet Properties");
TSrunner.runTestStepByName("pem set");
assert TSrunner.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Set Node Role to DSP drmlicauthority">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

// set Role
testCase.setPropertyValue("NodeRole","urn:dece:role:dsp:drmlicenseauthority:customersupport");


def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get-Set Node Role")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )

WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );

TSrunnerRTC.runTestStepByName("Set Node Role for DDD");

assert TSrunnerRTC.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call DeviceGet Request">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )

WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );

TSrunnerRTC.runTestStepByName("DeviceGetRequest");

assert TSrunnerRTC.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract DeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Extract DeviceGet Information")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify theDeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Response Validation")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value>28205</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>SAMLExpDate</con:name>
          <con:value>2012-04-14 13:34:23.0</con:value>
        </con:property>
        <con:property>
          <con:name>rcUUID</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>nodetype</con:name>
          <con:value>manufacturerportal</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>0701</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>sch-drm_user1</con:value>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>Password1</con:value>
        </con:property>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value>A06A9AA49F7073D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value>A06A9AA49F7973D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SAMLassertion</con:name>
          <con:value>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</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>loopuntil</con:name>
          <con:value>25</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTS</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value>3bb798f0-73fa-4aff-803a-f5443e0a5efa</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value>urn:dece:userid:org:dece:A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value>A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value>urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value>A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>AccountID</con:name>
          <con:value>urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceID</con:name>
          <con:value>urn:dece:deviceid:org:dece:A09D9C22F11CBC6DE0401F0A05996898</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>FORBIDDEN</con:value>
        </con:property>
        <con:property>
          <con:name>ErrorDataVal</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>NodeRole</con:name>
          <con:value>urn:dece:role:dsp:drmlicenseauthority:customersupport</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetReqXml</con:name>
          <con:value>Host: qa.q.uvvu.com:7002</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResXml</con:name>
          <con:value><![CDATA[<ErrorList xmlns="http://www.decellc.org/schema/2010/10/dece" xmlns:ns2="http://www.movielabs.com/schema/md/v1.07/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Error ErrorID="urn:dece:errorid:org:dece:Security:RoleInvalid">
      <Reason Language="en">API call not authorized</Reason>
      <OriginalRequest>https://qa.q.uvvu.com:7002/rest/1/0/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3AA06A9AA49F6E73D7E0401F0A059915F0/Device/urn%3Adece%3Adeviceid%3Aorg%3Adece%3AA09D9C22F11CBC6DE0401F0A05996898/DECEDomain</OriginalRequest>
      <ErrorLink>https://qa.q.uvvu.com:7002/rest/1/0/error/en/ErrorList.html#Security:RoleInvalid</ErrorLink>
   </Error>
</ErrorList>]]></con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResTime</con:name>
          <con:value>86</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetID</con:name>
          <con:value>API call not authorizedhttps://qa.q.uvvu.com:7002/rest/1/0/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3AA06A9AA49F6E73D7E0401F0A059915F0/Device/urn%3Adece%3Adeviceid%3Aorg%3Adece%3AA09D9C22F11CBC6DE0401F0A05996898/DECEDomainhttps://qa.q.uvvu.com:7002/rest/1/0/error/en/ErrorList.html#Security:RoleInvalid</con:value>
        </con:property>
        <con:property>
          <con:name>DomainID</con:name>
          <con:value>urn:dece:domainid:dece:A09DA589BD63A036E0401F0A05996D9A</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_30015 -  DeviceGet - PERM - SecurityRoleInvalid - Invocation with Content Publisher" searchProperties="true">
      <con:description>This test case will verify that the Application Tier properly responses to a DeviceGet invocation when the requesting node is a Content Publisher.


Expected Result :

It should not allow API invocation for the  "CONTENT PUBLISHER" node.System Should Return error Message</con:description>
      <con:settings/>
      <con:testStep type="groovy" name="Verify Node User SAML Asssertion">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.model.testsuite.TestRunner.Status


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def ValSamlAssertion = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Validate SAML Assertion");

	ValSamlAssertion.setPropertyValue("TCaseName",testCase.getName());
	ValSamlAssertion.setPropertyValue("TSuiteName",testSuite.getName());

	def runnerTc = ValSamlAssertion.run( null , false )
	assert runnerTc.status == Status.FINISHED;

	rcUUID = testCase.getPropertyValue("rcUUID");

	if (runnerTc.status != Status.FINISHED || rcUUID.toInteger()!= 1){

			
		testCase.setPropertyValue("nodetype","manufacturerportal");
		testCase.setPropertyValue("nodeid","0701");
		testCase.setPropertyValue("username","sch-drm_user1");
		testCase.setPropertyValue("password","Password1");
		testCase.setPropertyValue("accountoid",null);
		testCase.setPropertyValue("useroid",null);
		testCase.setPropertyValue("assertid",null);
		testCase.setPropertyValue("SAMLassertion",null);
		testCase.setPropertyValue("tokentype","urn:dece:type:tokentype:usernamepassword");
		testCase.setPropertyValue("loopuntil","25");
		testCase.setPropertyValue("expectErrTypeSTS","SUCCESS");
		testCase.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
			
		log.info " SAML Assertion Expired ! re-generating Assertion";
		def RunSTS = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get SAML Assertion - STS")

				RunSTS.setPropertyValue("TCaseName",testCase.getName());
				RunSTS.setPropertyValue("TSuiteName",testSuite.getName());

				def runnerSTS = RunSTS.run( null , false )

				assert runnerSTS.status == Status.FINISHED;

		}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call LicAppCreate Request with Valid Data" disabled="true">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0");
testCase.setPropertyValue("expectErrTypeLAC","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedDeviceDDReq = testProject.getTestSuiteByName("Staging DeviceGet").getTestCaseByName("LicAppCreate Request");

FeedDeviceDDReq.setPropertyValue("TCaseName",testCase.getName());
FeedDeviceDDReq.setPropertyValue("TSuiteName",testSuite.getName());


def runnerTC = FeedDeviceDDReq.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Feed DeviceGet Request with Valid Data">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0");
testCase.setPropertyValue("DeviceID","urn:dece:deviceid:org:dece:A09D9C22F11CBC6DE0401F0A05996898");
testCase.setPropertyValue("DomainID","urn:dece:domainid:dece:A09DA589BD63A036E0401F0A05996D9A");
testCase.setPropertyValue("expectErrType","FORBIDDEN");
testCase.setPropertyValue("ErrorDataVal","1");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedRTLReq = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request");

FeedRTLReq.setPropertyValue("TCaseName",testCase.getName());
FeedRTLReq.setPropertyValue("TSuiteName",testSuite.getName());

WsdlTestCaseRunner TSrunner = new WsdlTestCaseRunner( FeedRTLReq, null );

TSrunner.runTestStepByName("Get the DeviceGet Properties");
TSrunner.runTestStepByName("pem set");
assert TSrunner.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Set Node Role to Content Provider">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

// set Role
testCase.setPropertyValue("NodeRole","urn:dece:role:contentprovider");

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get-Set Node Role")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )

WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );

TSrunnerRTC.runTestStepByName("Set Node Role for DDD");

assert TSrunnerRTC.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call DeviceGet Request">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )

WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );

TSrunnerRTC.runTestStepByName("DeviceGetRequest");

assert TSrunnerRTC.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract DeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Extract DeviceGet Information")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify theDeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Response Validation")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value>28206</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>SAMLExpDate</con:name>
          <con:value>2012-04-14 13:34:23.0</con:value>
        </con:property>
        <con:property>
          <con:name>rcUUID</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>nodetype</con:name>
          <con:value>manufacturerportal</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>0701</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>sch-drm_user1</con:value>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>Password1</con:value>
        </con:property>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value>A06A9AA49F7073D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value>A06A9AA49F7973D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SAMLassertion</con:name>
          <con:value>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</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>loopuntil</con:name>
          <con:value>25</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTS</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value>ec8960cf-bc3d-4030-9070-790012b51c7c</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value>urn:dece:userid:org:dece:A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value>A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value>urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value>A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>AccountID</con:name>
          <con:value>urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceID</con:name>
          <con:value>urn:dece:deviceid:org:dece:A09D9C22F11CBC6DE0401F0A05996898</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>FORBIDDEN</con:value>
        </con:property>
        <con:property>
          <con:name>ErrorDataVal</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>NodeRole</con:name>
          <con:value>urn:dece:role:contentprovider</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetReqXml</con:name>
          <con:value>Host: qa.q.uvvu.com:7002</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResXml</con:name>
          <con:value><![CDATA[<ErrorList xmlns="http://www.decellc.org/schema/2010/10/dece" xmlns:ns2="http://www.movielabs.com/schema/md/v1.07/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Error ErrorID="urn:dece:errorid:org:dece:Security:RoleInvalid">
      <Reason Language="en">API call not authorized</Reason>
      <OriginalRequest>https://qa.q.uvvu.com:7002/rest/1/0/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3AA06A9AA49F6E73D7E0401F0A059915F0/Device/urn%3Adece%3Adeviceid%3Aorg%3Adece%3AA09D9C22F11CBC6DE0401F0A05996898/DECEDomain</OriginalRequest>
      <ErrorLink>https://qa.q.uvvu.com:7002/rest/1/0/error/en/ErrorList.html#Security:RoleInvalid</ErrorLink>
   </Error>
</ErrorList>]]></con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResTime</con:name>
          <con:value>118</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetID</con:name>
          <con:value>API call not authorizedhttps://qa.q.uvvu.com:7002/rest/1/0/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3AA06A9AA49F6E73D7E0401F0A059915F0/Device/urn%3Adece%3Adeviceid%3Aorg%3Adece%3AA09D9C22F11CBC6DE0401F0A05996898/DECEDomainhttps://qa.q.uvvu.com:7002/rest/1/0/error/en/ErrorList.html#Security:RoleInvalid</con:value>
        </con:property>
        <con:property>
          <con:name>DomainID</con:name>
          <con:value>urn:dece:domainid:dece:A09DA589BD63A036E0401F0A05996D9A</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_30016 -  DeviceGet - PERM - SecurityRoleInvalid - Invocation with Content Publisher_CS" searchProperties="true">
      <con:description>This test case will verify that the Application Tier properly responses to a DeviceGet invocation when the requesting node is a Content Publisher Customer support.

Expected Result :

It should not allow API invocation for the  "CONTENT PUBLISHER CUSTOMER SUPPORT" node.System Should Return error Message</con:description>
      <con:settings/>
      <con:testStep type="groovy" name="Verify Node User SAML Asssertion">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.model.testsuite.TestRunner.Status


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def ValSamlAssertion = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Validate SAML Assertion");

	ValSamlAssertion.setPropertyValue("TCaseName",testCase.getName());
	ValSamlAssertion.setPropertyValue("TSuiteName",testSuite.getName());

	def runnerTc = ValSamlAssertion.run( null , false )
	assert runnerTc.status == Status.FINISHED;

	rcUUID = testCase.getPropertyValue("rcUUID");

	if (runnerTc.status != Status.FINISHED || rcUUID.toInteger()!= 1){

			
		testCase.setPropertyValue("nodetype","manufacturerportal");
		testCase.setPropertyValue("nodeid","0701");
		testCase.setPropertyValue("username","sch-drm_user1");
		testCase.setPropertyValue("password","Password1");
		testCase.setPropertyValue("accountoid",null);
		testCase.setPropertyValue("useroid",null);
		testCase.setPropertyValue("assertid",null);
		testCase.setPropertyValue("SAMLassertion",null);
		testCase.setPropertyValue("tokentype","urn:dece:type:tokentype:usernamepassword");
		testCase.setPropertyValue("loopuntil","25");
		testCase.setPropertyValue("expectErrTypeSTS","SUCCESS");
		testCase.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
			
		log.info " SAML Assertion Expired ! re-generating Assertion";
		def RunSTS = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get SAML Assertion - STS")

				RunSTS.setPropertyValue("TCaseName",testCase.getName());
				RunSTS.setPropertyValue("TSuiteName",testSuite.getName());

				def runnerSTS = RunSTS.run( null , false )

				assert runnerSTS.status == Status.FINISHED;

		}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call LicAppCreate Request with Valid Data" disabled="true">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0");
testCase.setPropertyValue("expectErrTypeLAC","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedDeviceDDReq = testProject.getTestSuiteByName("Staging DeviceGet").getTestCaseByName("LicAppCreate Request");

FeedDeviceDDReq.setPropertyValue("TCaseName",testCase.getName());
FeedDeviceDDReq.setPropertyValue("TSuiteName",testSuite.getName());


def runnerTC = FeedDeviceDDReq.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Feed DeviceGet Request with Valid Data">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0");
testCase.setPropertyValue("DeviceID","urn:dece:deviceid:org:dece:A09D9C22F11CBC6DE0401F0A05996898");
testCase.setPropertyValue("DomainID","urn:dece:domainid:dece:A09DA589BD63A036E0401F0A05996D9A");
testCase.setPropertyValue("expectErrType","FORBIDDEN");
testCase.setPropertyValue("ErrorDataVal","1");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedRTLReq = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request");

FeedRTLReq.setPropertyValue("TCaseName",testCase.getName());
FeedRTLReq.setPropertyValue("TSuiteName",testSuite.getName());

WsdlTestCaseRunner TSrunner = new WsdlTestCaseRunner( FeedRTLReq, null );

TSrunner.runTestStepByName("Get the DeviceGet Properties");
TSrunner.runTestStepByName("pem set");
assert TSrunner.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Set Node Role to Content Provider CS">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

// set Role
testCase.setPropertyValue("NodeRole","urn:dece:role:contentprovider:customersupport");

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get-Set Node Role")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )

WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );

TSrunnerRTC.runTestStepByName("Set Node Role for DDD");

assert TSrunnerRTC.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call DeviceGet Request">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )

WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );

TSrunnerRTC.runTestStepByName("DeviceGetRequest");

assert TSrunnerRTC.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract DeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Extract DeviceGet Information")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify theDeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Response Validation")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value>28207</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>SAMLExpDate</con:name>
          <con:value>2012-04-14 13:34:23.0</con:value>
        </con:property>
        <con:property>
          <con:name>rcUUID</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>nodetype</con:name>
          <con:value>manufacturerportal</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>0701</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>sch-drm_user1</con:value>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>Password1</con:value>
        </con:property>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value>A06A9AA49F7073D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value>A06A9AA49F7973D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SAMLassertion</con:name>
          <con:value>nVdbc6rMEn33V1jux1TCRfFWSaqGiwQVFUQU33AYAUVQBgT99WfAaEx2dvb+zkPKTDPdvaZ70ax5xvYuYLsAYxQnfhRWFfGlxjlr225B+MihdeuxQTPtx5XTaj1CyEKHceprx27UqgrGKVJCnNhh8lJjaYZ5pBuPLG3QjW6d7nKNpzrbWNaqJooxiUy2PNG1ar4LQtwts77U0jjsRjb2cTe0dwh3E9idAnXYJTu79hVS7fX5ArJMGL96SbLvUhR8chBEQQCfYLSjnqlPe54d3J36bmgnaYzeczr4pfbum2XZU1Z/imKXYmmapugORfY42Hd/1V4rV2fkKOE6uqwFO4xCH9qBf7YLUCpKvMipgsCNYj/xdn8IzVAMXYR+RDl8hEwj/FWjPhKU6P4x0ieQMbYfsWcz12A6WqMYhRBVZ7ryUvv1Tw28uBqxHeJ1FO/wl/V/Q4TCIwqiPXIe8fVgV3D/HvGbar0+I9hVQhik2D+iUcGSvQ0Rrk5itPbzoY8J9xxcLbtfzfGVYAj+l448U/c4CWzqm8qIvotw8v+0675VlyimHaToNTs03B6cms3Fjt8z47VpOv2kc4rcGXwpIdxvvoC6dfp9/ZWnN1q9Oy22E3OpNE8rFS9yYKXCai5z4WweCUkW+AO/sR+sDQx29e3ZMgzaXPSxAKn+pOPWYdtjln5kxFCS+sO9daz0Z0PbberRasw1pUPrBAadw0Yxx8Gms5M6Xlyf0otJa6GKCzMbHXD85hoUZ4o4WTATY2ehQ7M/3rqLwcnYSBWp5TaaErfNwkl6tKy39lR5+TjT/RmKcw3QqTxk8f+Cozuindi3hVAMijV5OxP0qiqKmJ4FAZymLsgUHrjkbwNGvLs9eFtf7mQ0DzStB0SBDzbSUAVbGTAzifdUwTTVXDiDPu+OTOJoVECw5FVdysTMEk1Ne5Myz3Bk87SSg3R5lkYqwKWz4KmSLpmibkiqCqKLLVfFlZxv1KmaKZolVkgAUcr3Z0fuJEjOfcgqnDrlWGvKpcuFSey903A3Oq4MKVAFVRamB3mqrOqiJvWBbs0h20uJ73m420cVa8bfOfX3aANQL6NJTnBWjW2mGjN2JOp2aTM+21RF7qsazgStPJVckbK+OTt/1ELgVcHZSblkgMmlFtAQeiN6Sdhhz7lQ1UEmuqXzQMqc8RWIqtFZRbjUaihluqTPRj1VVzIJlDZRygK8YkfeSvaOsK7lfQNs7hsjaNK8F5LnoX6EJ+5QseUeWO1MBtZ1D/qcby+izF22M1Gz+oNoqZAwI6BJPK8BAogGxdFI/Xkw5E1uvPc7rI+G6160Q15cUZlosD2ec7rt18fuZDTnxPW2NZH9Sd12PEoJILupb4GiIGfAeJrt6Bali6F/bo4HswXyY+ucjDiNafptrqLP09lCjIKW87awZoOH3IKaMZ5MZ/PJOc9Hh037HCRvY/4tnvZV0R2PEJpg+EDRdo832iInWG8bwqe1TiOuAlyVB0DeuK7kEwLzb5sLCd90VSLkBaqQycJckKdAlh8khRc1bd3zmAmUzXTGjFRFcgJSppO10IPKUuBF0inani/3FtujlwZwymBaQ+q52ox76C/QUhsFhpmAbG+uQ4ah5b32tlYzF6oFAxwlm/LkLeIrqQJm9njfp/OB2aSZg+YE/WkHzOr5lN3mY89dnrbuckuaYt29OpYBAtO445hCKDavaIakq6B9ed9yVZnV9QDu8v1qB3PRID0rnSODl/SeRs9yUQSDiw0bgM2xdZY2qiCV/hWQqzahxXG18LAVjvyxIaWEtOkdXTYrlv4rxwqKVT5z7CAADXzlmHThmATWhwelLTKYawp7PM9cXpYOWssc9jt7WlsMtxX+oUe5iR80xmE7MwYPc+aUtbyNNp93FNETHsK15dVXCU/bZ6ih/rYl+/pWDJuN4KQOVY2b+VRwojfokOFhZaQwoVRPzj2qE6cP/G7p787neoOd7SbT9KjM7AFmTt7qMO9km8lbk6Ji+cSdW8uj1ltE0Lp8R74OyZvxMkap+wH7aQJfpdc0XW0QTK7L4jusiNUe+Tjayc8yrrD4zuO63NrdF1oQJyhMaq+FVyHhuikRer7TJV/OyxrQTdABoNHptVqtutiSaKJgejSguU6H4Xr0VetdUHyBKETh2i9yFWL28rH+GSDcdVfIjlFc+yFSUaeqEupEfUQhRkZE1CzodRiabvHNJidIDbZdF3iBZpsdocGyDbFdq46iZByOY7BOUHwnkJmvAllH0N/7qFDR71oCJ6QQB/uYJgHzdLSfQpQSmR0XSrfLNtpcWQDKSXd7SB6Q6RbvI5w87b19KWb+eIyvz64nJnscv9iAC9A8It1C30j6xhXxbydjv5X+1/AgdfxCs5DyJbEPL0g+P/pgQ0GDGxXoFs1cMd+2/rMr+7sr9QMi6msxbpmco3+X93oxIVqbyLHyPoJJ0w720+EpPR7Tsk0tmmapmISnGIqmpgimRC6ejGiLQuoWgfoXoX7D/CXvzf4ZXZp44TQhb/mOMKpaLv9+SfvkTQqQoDz5ziYE5FpWJP/x5ga7sNhHzBPyk0Wx81H3b2Ld5SGQiwnlh26xKhT26XN739+ELoxIVJ8MqSi+j/2d/3e5Pxtv5bpBSQgrVmmC/vykWkyfl5oNYZSGiSLWSsP9RCwxJ6c96n5s+i1MKXHf7yw5/uOdZaEOp9BDO7t22+v/ffOjXzYeIuKF/RLLSy0nt2+SPHTvJvA7wO+HcFP6aQh/Psnrb+bfLXc1/crs1/8B</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>loopuntil</con:name>
          <con:value>25</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTS</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value>5dfaa7cc-5ef7-4018-bd77-cc2cd1d3fda4</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value>urn:dece:userid:org:dece:A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value>A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value>urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value>A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>AccountID</con:name>
          <con:value>urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceID</con:name>
          <con:value>urn:dece:deviceid:org:dece:A09D9C22F11CBC6DE0401F0A05996898</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>FORBIDDEN</con:value>
        </con:property>
        <con:property>
          <con:name>ErrorDataVal</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>NodeRole</con:name>
          <con:value>urn:dece:role:contentprovider:customersupport</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetReqXml</con:name>
          <con:value>Host: qa.q.uvvu.com:7002</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResXml</con:name>
          <con:value><![CDATA[<ErrorList xmlns="http://www.decellc.org/schema/2010/10/dece" xmlns:ns2="http://www.movielabs.com/schema/md/v1.07/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Error ErrorID="urn:dece:errorid:org:dece:Security:RoleInvalid">
      <Reason Language="en">API call not authorized</Reason>
      <OriginalRequest>https://qa.q.uvvu.com:7002/rest/1/0/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3AA06A9AA49F6E73D7E0401F0A059915F0/Device/urn%3Adece%3Adeviceid%3Aorg%3Adece%3AA09D9C22F11CBC6DE0401F0A05996898/DECEDomain</OriginalRequest>
      <ErrorLink>https://qa.q.uvvu.com:7002/rest/1/0/error/en/ErrorList.html#Security:RoleInvalid</ErrorLink>
   </Error>
</ErrorList>]]></con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResTime</con:name>
          <con:value>83</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetID</con:name>
          <con:value>API call not authorizedhttps://qa.q.uvvu.com:7002/rest/1/0/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3AA06A9AA49F6E73D7E0401F0A059915F0/Device/urn%3Adece%3Adeviceid%3Aorg%3Adece%3AA09D9C22F11CBC6DE0401F0A05996898/DECEDomainhttps://qa.q.uvvu.com:7002/rest/1/0/error/en/ErrorList.html#Security:RoleInvalid</con:value>
        </con:property>
        <con:property>
          <con:name>DomainID</con:name>
          <con:value>urn:dece:domainid:dece:A09DA589BD63A036E0401F0A05996D9A</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_30017 -  DeviceGet - PERM - SecurityRoleValid - Invocation with Retailer" searchProperties="true">
      <con:description>This test case will verify that the Application Tier properly responses to a DeviceGet invocation when the requesting node is a Retailer.

Expected Result :

It should not allow API invocation for the "RETAILER" node.</con:description>
      <con:settings/>
      <con:testStep type="groovy" name="Verify Node User SAML Asssertion">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.model.testsuite.TestRunner.Status


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def ValSamlAssertion = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Validate SAML Assertion");

	ValSamlAssertion.setPropertyValue("TCaseName",testCase.getName());
	ValSamlAssertion.setPropertyValue("TSuiteName",testSuite.getName());

	def runnerTc = ValSamlAssertion.run( null , false )
	assert runnerTc.status == Status.FINISHED;

	rcUUID = testCase.getPropertyValue("rcUUID");

	if (runnerTc.status != Status.FINISHED || rcUUID.toInteger()!= 1){

			
		testCase.setPropertyValue("nodetype","manufacturerportal");
		testCase.setPropertyValue("nodeid","0701");
		testCase.setPropertyValue("username","sch-drm_user1");
		testCase.setPropertyValue("password","Password1");
		testCase.setPropertyValue("accountoid",null);
		testCase.setPropertyValue("useroid",null);
		testCase.setPropertyValue("assertid",null);
		testCase.setPropertyValue("SAMLassertion",null);
		testCase.setPropertyValue("tokentype","urn:dece:type:tokentype:usernamepassword");
		testCase.setPropertyValue("loopuntil","25");
		testCase.setPropertyValue("expectErrTypeSTS","SUCCESS");
		testCase.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
			
		log.info " SAML Assertion Expired ! re-generating Assertion";
		def RunSTS = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get SAML Assertion - STS")

				RunSTS.setPropertyValue("TCaseName",testCase.getName());
				RunSTS.setPropertyValue("TSuiteName",testSuite.getName());

				def runnerSTS = RunSTS.run( null , false )

				assert runnerSTS.status == Status.FINISHED;

		}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call LicAppCreate Request with Valid Data" disabled="true">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0");
testCase.setPropertyValue("expectErrTypeLAC","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedDeviceDDReq = testProject.getTestSuiteByName("Staging DeviceGet").getTestCaseByName("LicAppCreate Request");

FeedDeviceDDReq.setPropertyValue("TCaseName",testCase.getName());
FeedDeviceDDReq.setPropertyValue("TSuiteName",testSuite.getName());


def runnerTC = FeedDeviceDDReq.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Feed DeviceGet Request with Valid Data">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0");
testCase.setPropertyValue("DeviceID","urn:dece:deviceid:org:dece:A09D9C22F11CBC6DE0401F0A05996898");
testCase.setPropertyValue("DomainID","urn:dece:domainid:dece:A09DA589BD63A036E0401F0A05996D9A");
testCase.setPropertyValue("expectErrType","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedRTLReq = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request");

FeedRTLReq.setPropertyValue("TCaseName",testCase.getName());
FeedRTLReq.setPropertyValue("TSuiteName",testSuite.getName());

WsdlTestCaseRunner TSrunner = new WsdlTestCaseRunner( FeedRTLReq, null );

TSrunner.runTestStepByName("Get the DeviceGet Properties");
TSrunner.runTestStepByName("pem set");
assert TSrunner.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Set Node Role to Retailer">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

// set Role
testCase.setPropertyValue("NodeRole","urn:dece:role:retailer");

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get-Set Node Role")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )

WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );

TSrunnerRTC.runTestStepByName("Set Node Role for DDD");

assert TSrunnerRTC.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call DeviceGet Request">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )

WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );

TSrunnerRTC.runTestStepByName("DeviceGetRequest");

assert TSrunnerRTC.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract DeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Extract DeviceGet Information")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify theDeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Response Validation")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value>28208</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>SAMLExpDate</con:name>
          <con:value>2012-04-14 13:34:23.0</con:value>
        </con:property>
        <con:property>
          <con:name>rcUUID</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>nodetype</con:name>
          <con:value>manufacturerportal</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>0701</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>sch-drm_user1</con:value>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>Password1</con:value>
        </con:property>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value>A06A9AA49F7073D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value>A06A9AA49F7973D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SAMLassertion</con:name>
          <con:value>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</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>loopuntil</con:name>
          <con:value>25</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTS</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value>5f802914-3351-41c3-87e2-4eb8db1d3ca1</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value>urn:dece:userid:org:dece:A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value>A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value>urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value>A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>AccountID</con:name>
          <con:value>urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceID</con:name>
          <con:value>urn:dece:deviceid:org:dece:A09D9C22F11CBC6DE0401F0A05996898</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>ErrorDataVal</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>NodeRole</con:name>
          <con:value>urn:dece:role:retailer</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetReqXml</con:name>
          <con:value>Host: qa.q.uvvu.com:7002</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResXml</con:name>
          <con:value><![CDATA[<Device IsLegacy="false" DeviceID="urn:dece:deviceid:org:dece:A09D9C22F11CBC6DE0401F0A05996898" xmlns="http://www.decellc.org/schema/2010/10/dece" xmlns:ns2="http://www.movielabs.com/schema/md/v1.07/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <DisplayName>DeviceInfoDisplayName</DisplayName>
   <Manufacturer>Microsoft</Manufacturer>
   <Model>V344</Model>
   <Brand Language="en-US">DeviceInfoBrand</Brand>
   <SerialNo>123432442323424</SerialNo>
   <Image MimeType="MimeType3" Width="50" Height="50">http://www.oxygenxml.com/1234</Image>
   <LicAppID>urn:dece:licappid:org:dece:A09D9C22F11EBC6DE0401F0A05996898</LicAppID>
   <DRMClientID>urn:dece:drmclientid:org:dece:A0E2E4B822DB1B7CE0401F0A07994404</DRMClientID>
   <ResourceStatus>
      <Current CreatedBy="urn:dece:org:org:dece:0701" CreationDate="2011-04-11T04:02:39.637Z">
         <Value>urn:dece:type:status:pending</Value>
         <Description>Device Created</Description>
      </Current>
   </ResourceStatus>
</Device>]]></con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResTime</con:name>
          <con:value>259</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetID</con:name>
          <con:value>API call not authorizedhttps://qa.q.uvvu.com:7002/rest/1/0/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3AA06A9AA49F6E73D7E0401F0A059915F0/Device/urn%3Adece%3Adeviceid%3Aorg%3Adece%3AA09D9C22F11CBC6DE0401F0A05996898/DECEDomainhttps://qa.q.uvvu.com:7002/rest/1/0/error/en/ErrorList.html#Security:RoleInvalid</con:value>
        </con:property>
        <con:property>
          <con:name>DomainID</con:name>
          <con:value>urn:dece:domainid:dece:A09DA589BD63A036E0401F0A05996D9A</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_30018 -  DeviceGet - PERM - SecurityRoleValid - Invocation with Retailer_CS" searchProperties="true">
      <con:description>This test case will verify that the Application Tier properly responses to a DeviceGet invocation when the requesting node is a Retailer Customer Support.

Expected Result :

It should not allow API invocation for the "RETAILER CUSTOMER SUPPORT" node.</con:description>
      <con:settings/>
      <con:testStep type="groovy" name="Verify Node User SAML Asssertion">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.model.testsuite.TestRunner.Status


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def ValSamlAssertion = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Validate SAML Assertion");

	ValSamlAssertion.setPropertyValue("TCaseName",testCase.getName());
	ValSamlAssertion.setPropertyValue("TSuiteName",testSuite.getName());

	def runnerTc = ValSamlAssertion.run( null , false )
	assert runnerTc.status == Status.FINISHED;

	rcUUID = testCase.getPropertyValue("rcUUID");

	if (runnerTc.status != Status.FINISHED || rcUUID.toInteger()!= 1){

			
		testCase.setPropertyValue("nodetype","manufacturerportal");
		testCase.setPropertyValue("nodeid","0701");
		testCase.setPropertyValue("username","sch-drm_user1");
		testCase.setPropertyValue("password","Password1");
		testCase.setPropertyValue("accountoid",null);
		testCase.setPropertyValue("useroid",null);
		testCase.setPropertyValue("assertid",null);
		testCase.setPropertyValue("SAMLassertion",null);
		testCase.setPropertyValue("tokentype","urn:dece:type:tokentype:usernamepassword");
		testCase.setPropertyValue("loopuntil","25");
		testCase.setPropertyValue("expectErrTypeSTS","SUCCESS");
		testCase.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
			
		log.info " SAML Assertion Expired ! re-generating Assertion";
		def RunSTS = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get SAML Assertion - STS")

				RunSTS.setPropertyValue("TCaseName",testCase.getName());
				RunSTS.setPropertyValue("TSuiteName",testSuite.getName());

				def runnerSTS = RunSTS.run( null , false )

				assert runnerSTS.status == Status.FINISHED;

		}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call LicAppCreate Request with Valid Data" disabled="true">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0");
testCase.setPropertyValue("expectErrTypeLAC","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedDeviceDDReq = testProject.getTestSuiteByName("Staging DeviceGet").getTestCaseByName("LicAppCreate Request");

FeedDeviceDDReq.setPropertyValue("TCaseName",testCase.getName());
FeedDeviceDDReq.setPropertyValue("TSuiteName",testSuite.getName());


def runnerTC = FeedDeviceDDReq.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Feed DeviceGet Request with Valid Data">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0");
testCase.setPropertyValue("DeviceID","urn:dece:deviceid:org:dece:A09D9C22F11CBC6DE0401F0A05996898");
testCase.setPropertyValue("DomainID","urn:dece:domainid:dece:A09DA589BD63A036E0401F0A05996D9A");
testCase.setPropertyValue("expectErrType","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedRTLReq = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request");

FeedRTLReq.setPropertyValue("TCaseName",testCase.getName());
FeedRTLReq.setPropertyValue("TSuiteName",testSuite.getName());

WsdlTestCaseRunner TSrunner = new WsdlTestCaseRunner( FeedRTLReq, null );

TSrunner.runTestStepByName("Get the DeviceGet Properties");
TSrunner.runTestStepByName("pem set");
assert TSrunner.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Set Node Role to Retailer CS">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

// set Role
testCase.setPropertyValue("NodeRole","urn:dece:role:retailer:customersupport");

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get-Set Node Role")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )

WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );

TSrunnerRTC.runTestStepByName("Set Node Role for DDD");

assert TSrunnerRTC.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call DeviceGet Request">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )

WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );

TSrunnerRTC.runTestStepByName("DeviceGetRequest");

assert TSrunnerRTC.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract DeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Extract DeviceGet Information")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify theDeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Response Validation")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value>28209</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>SAMLExpDate</con:name>
          <con:value>2012-04-14 13:34:23.0</con:value>
        </con:property>
        <con:property>
          <con:name>rcUUID</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>nodetype</con:name>
          <con:value>manufacturerportal</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>0701</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>sch-drm_user1</con:value>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>Password1</con:value>
        </con:property>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value>A06A9AA49F7073D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value>A06A9AA49F7973D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SAMLassertion</con:name>
          <con:value>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</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>loopuntil</con:name>
          <con:value>25</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTS</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value>43466fc2-fdf2-4275-b995-dc22bde710b3</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value>urn:dece:userid:org:dece:A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value>A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value>urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value>A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>AccountID</con:name>
          <con:value>urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceID</con:name>
          <con:value>urn:dece:deviceid:org:dece:A09D9C22F11CBC6DE0401F0A05996898</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>ErrorDataVal</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>NodeRole</con:name>
          <con:value>urn:dece:role:retailer:customersupport</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetReqXml</con:name>
          <con:value>Host: qa.q.uvvu.com:7002</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResXml</con:name>
          <con:value><![CDATA[<Device IsLegacy="false" DeviceID="urn:dece:deviceid:org:dece:A09D9C22F11CBC6DE0401F0A05996898" xmlns="http://www.decellc.org/schema/2010/10/dece" xmlns:ns2="http://www.movielabs.com/schema/md/v1.07/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <DisplayName>DeviceInfoDisplayName</DisplayName>
   <Manufacturer>Microsoft</Manufacturer>
   <Model>V344</Model>
   <Brand Language="en-US">DeviceInfoBrand</Brand>
   <SerialNo>123432442323424</SerialNo>
   <Image MimeType="MimeType3" Width="50" Height="50">http://www.oxygenxml.com/1234</Image>
   <LicAppID>urn:dece:licappid:org:dece:A09D9C22F11EBC6DE0401F0A05996898</LicAppID>
   <DRMClientID>urn:dece:drmclientid:org:dece:A0E2E4B822DB1B7CE0401F0A07994404</DRMClientID>
   <ResourceStatus>
      <Current CreatedBy="urn:dece:org:org:dece:0701" CreationDate="2011-04-11T04:02:39.637Z">
         <Value>urn:dece:type:status:pending</Value>
         <Description>Device Created</Description>
      </Current>
   </ResourceStatus>
</Device>]]></con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResTime</con:name>
          <con:value>201</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetID</con:name>
          <con:value>API call not authorizedhttps://qa.q.uvvu.com:7002/rest/1/0/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3AA06A9AA49F6E73D7E0401F0A059915F0/Device/urn%3Adece%3Adeviceid%3Aorg%3Adece%3AA09D9C22F11CBC6DE0401F0A05996898/DECEDomainhttps://qa.q.uvvu.com:7002/rest/1/0/error/en/ErrorList.html#Security:RoleInvalid</con:value>
        </con:property>
        <con:property>
          <con:name>DomainID</con:name>
          <con:value>urn:dece:domainid:dece:A09DA589BD63A036E0401F0A05996D9A</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_30019 -  DeviceGet - PERM - SecurityRoleValid - Invocation with MDA Agent" searchProperties="true">
      <con:description>This test case will verify that the Application Tier properly responses to a DeviceGet invocation when the requesting node is a Device Manufacturer Portal.

Expected Result :

It should not allow API invocation for the "DEVICE MANUFACTURER PORTAL" node.</con:description>
      <con:settings/>
      <con:testStep type="groovy" name="Verify Node User SAML Asssertion">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.model.testsuite.TestRunner.Status


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def ValSamlAssertion = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Validate SAML Assertion");

	ValSamlAssertion.setPropertyValue("TCaseName",testCase.getName());
	ValSamlAssertion.setPropertyValue("TSuiteName",testSuite.getName());

	def runnerTc = ValSamlAssertion.run( null , false )
	assert runnerTc.status == Status.FINISHED;

	rcUUID = testCase.getPropertyValue("rcUUID");

	if (runnerTc.status != Status.FINISHED || rcUUID.toInteger()!= 1){

			
		testCase.setPropertyValue("nodetype","manufacturerportal");
		testCase.setPropertyValue("nodeid","0701");
		testCase.setPropertyValue("username","sch-drm_user1");
		testCase.setPropertyValue("password","Password1");
		testCase.setPropertyValue("accountoid",null);
		testCase.setPropertyValue("useroid",null);
		testCase.setPropertyValue("assertid",null);
		testCase.setPropertyValue("SAMLassertion",null);
		testCase.setPropertyValue("tokentype","urn:dece:type:tokentype:usernamepassword");
		testCase.setPropertyValue("loopuntil","25");
		testCase.setPropertyValue("expectErrTypeSTS","SUCCESS");
		testCase.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
			
		log.info " SAML Assertion Expired ! re-generating Assertion";
		def RunSTS = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get SAML Assertion - STS")

				RunSTS.setPropertyValue("TCaseName",testCase.getName());
				RunSTS.setPropertyValue("TSuiteName",testSuite.getName());

				def runnerSTS = RunSTS.run( null , false )

				assert runnerSTS.status == Status.FINISHED;

		}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call LicAppCreate Request with Valid Data" disabled="true">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0");
testCase.setPropertyValue("expectErrTypeLAC","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedDeviceDDReq = testProject.getTestSuiteByName("Staging DeviceGet").getTestCaseByName("LicAppCreate Request");

FeedDeviceDDReq.setPropertyValue("TCaseName",testCase.getName());
FeedDeviceDDReq.setPropertyValue("TSuiteName",testSuite.getName());


def runnerTC = FeedDeviceDDReq.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Feed DeviceGet Request with Valid Data">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0");
testCase.setPropertyValue("DeviceID","urn:dece:deviceid:org:dece:A09D9C22F11CBC6DE0401F0A05996898");
testCase.setPropertyValue("DomainID","urn:dece:domainid:dece:A09DA589BD63A036E0401F0A05996D9A");
testCase.setPropertyValue("expectErrType","FORBIDDEN");
testCase.setPropertyValue("ErrorDataVal","1");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedRTLReq = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request");

FeedRTLReq.setPropertyValue("TCaseName",testCase.getName());
FeedRTLReq.setPropertyValue("TSuiteName",testSuite.getName());

WsdlTestCaseRunner TSrunner = new WsdlTestCaseRunner( FeedRTLReq, null );

TSrunner.runTestStepByName("Get the DeviceGet Properties");
TSrunner.runTestStepByName("pem set");
assert TSrunner.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Set Node Role to MDA Agent">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


// set Role
testCase.setPropertyValue("NodeRole","urn:dece:role:mdagent");

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get-Set Node Role")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )

WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );

TSrunnerRTC.runTestStepByName("Set Node Role for DDD");

assert TSrunnerRTC.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call DeviceGet Request">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )

WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );

TSrunnerRTC.runTestStepByName("DeviceGetRequest");

assert TSrunnerRTC.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract DeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Extract DeviceGet Information")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify theDeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Response Validation")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value>28210</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>SAMLExpDate</con:name>
          <con:value>2012-04-14 13:34:23.0</con:value>
        </con:property>
        <con:property>
          <con:name>rcUUID</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>nodetype</con:name>
          <con:value>manufacturerportal</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>0701</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>sch-drm_user1</con:value>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>Password1</con:value>
        </con:property>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value>A06A9AA49F7073D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value>A06A9AA49F7973D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SAMLassertion</con:name>
          <con:value>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</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>loopuntil</con:name>
          <con:value>25</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTS</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value>619092cd-e0fc-421a-ab98-86aa9f2b4cf2</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value>urn:dece:userid:org:dece:A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value>A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value>urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value>A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>AccountID</con:name>
          <con:value>urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceID</con:name>
          <con:value>urn:dece:deviceid:org:dece:A09D9C22F11CBC6DE0401F0A05996898</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>FORBIDDEN</con:value>
        </con:property>
        <con:property>
          <con:name>ErrorDataVal</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>NodeRole</con:name>
          <con:value>urn:dece:role:mdagent</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetReqXml</con:name>
          <con:value>Host: qa.q.uvvu.com:7002</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResXml</con:name>
          <con:value><![CDATA[<ErrorList xmlns="http://www.decellc.org/schema/2010/10/dece" xmlns:ns2="http://www.movielabs.com/schema/md/v1.07/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Error ErrorID="urn:dece:errorid:org:dece:Security:RoleInvalid">
      <Reason Language="en">API call not authorized</Reason>
      <OriginalRequest>https://qa.q.uvvu.com:7002/rest/1/0/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3AA06A9AA49F6E73D7E0401F0A059915F0/Device/urn%3Adece%3Adeviceid%3Aorg%3Adece%3AA09D9C22F11CBC6DE0401F0A05996898/DECEDomain</OriginalRequest>
      <ErrorLink>https://qa.q.uvvu.com:7002/rest/1/0/error/en/ErrorList.html#Security:RoleInvalid</ErrorLink>
   </Error>
</ErrorList>]]></con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResTime</con:name>
          <con:value>80</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetID</con:name>
          <con:value>API call not authorizedhttps://qa.q.uvvu.com:7002/rest/1/0/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3AA06A9AA49F6E73D7E0401F0A059915F0/Device/urn%3Adece%3Adeviceid%3Aorg%3Adece%3AA09D9C22F11CBC6DE0401F0A05996898/DECEDomainhttps://qa.q.uvvu.com:7002/rest/1/0/error/en/ErrorList.html#Security:RoleInvalid</con:value>
        </con:property>
        <con:property>
          <con:name>DomainID</con:name>
          <con:value>urn:dece:domainid:dece:A09DA589BD63A036E0401F0A05996D9A</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_30020 -  DeviceGet - PERM - SecurityRoleValid - Invocation with MANF_Portal_CS" searchProperties="true">
      <con:description>This test case will verify that the Application Tier properly responses to a DeviceGet invocation when the requesting node is a Device Manufacturer Portal Customer Support.

Expected Result :

It should not allow API invocation for the "DEVICE MANUFACTURER PORTAL CUSTOMER SUPPORT" node.</con:description>
      <con:settings/>
      <con:testStep type="groovy" name="Verify Node User SAML Asssertion">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.model.testsuite.TestRunner.Status


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def ValSamlAssertion = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Validate SAML Assertion");

	ValSamlAssertion.setPropertyValue("TCaseName",testCase.getName());
	ValSamlAssertion.setPropertyValue("TSuiteName",testSuite.getName());

	def runnerTc = ValSamlAssertion.run( null , false )
	assert runnerTc.status == Status.FINISHED;

	rcUUID = testCase.getPropertyValue("rcUUID");

	if (runnerTc.status != Status.FINISHED || rcUUID.toInteger()!= 1){

			
		testCase.setPropertyValue("nodetype","manufacturerportal");
		testCase.setPropertyValue("nodeid","0701");
		testCase.setPropertyValue("username","sch-drm_user1");
		testCase.setPropertyValue("password","Password1");
		testCase.setPropertyValue("accountoid",null);
		testCase.setPropertyValue("useroid",null);
		testCase.setPropertyValue("assertid",null);
		testCase.setPropertyValue("SAMLassertion",null);
		testCase.setPropertyValue("tokentype","urn:dece:type:tokentype:usernamepassword");
		testCase.setPropertyValue("loopuntil","25");
		testCase.setPropertyValue("expectErrTypeSTS","SUCCESS");
		testCase.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
			
		log.info " SAML Assertion Expired ! re-generating Assertion";
		def RunSTS = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get SAML Assertion - STS")

				RunSTS.setPropertyValue("TCaseName",testCase.getName());
				RunSTS.setPropertyValue("TSuiteName",testSuite.getName());

				def runnerSTS = RunSTS.run( null , false )

				assert runnerSTS.status == Status.FINISHED;

		}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call LicAppCreate Request with Valid Data" disabled="true">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0");
testCase.setPropertyValue("expectErrTypeLAC","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedDeviceDDReq = testProject.getTestSuiteByName("Staging DeviceGet").getTestCaseByName("LicAppCreate Request");

FeedDeviceDDReq.setPropertyValue("TCaseName",testCase.getName());
FeedDeviceDDReq.setPropertyValue("TSuiteName",testSuite.getName());


def runnerTC = FeedDeviceDDReq.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Feed DeviceGet Request with Valid Data">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0");
testCase.setPropertyValue("DeviceID","urn:dece:deviceid:org:dece:A09D9C22F11CBC6DE0401F0A05996898");
testCase.setPropertyValue("DomainID","urn:dece:domainid:dece:A09DA589BD63A036E0401F0A05996D9A");
testCase.setPropertyValue("expectErrType","FORBIDDEN");
testCase.setPropertyValue("ErrorDataVal","1");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedRTLReq = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request");

FeedRTLReq.setPropertyValue("TCaseName",testCase.getName());
FeedRTLReq.setPropertyValue("TSuiteName",testSuite.getName());

WsdlTestCaseRunner TSrunner = new WsdlTestCaseRunner( FeedRTLReq, null );

TSrunner.runTestStepByName("Get the DeviceGet Properties");
TSrunner.runTestStepByName("pem set");
assert TSrunner.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Set Node Role to MANF_Portal_CS">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


// set Role
testCase.setPropertyValue("NodeRole","urn:dece:role:manufacturerportal:customersupport");

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get-Set Node Role")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )

WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );

TSrunnerRTC.runTestStepByName("Set Node Role for DDD");

assert TSrunnerRTC.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call DeviceGet Request">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )

WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );

TSrunnerRTC.runTestStepByName("DeviceGetRequest");

assert TSrunnerRTC.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract DeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Extract DeviceGet Information")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify theDeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Response Validation")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SAMLExpDate</con:name>
          <con:value>2012-04-14 13:34:23.0</con:value>
        </con:property>
        <con:property>
          <con:name>rcUUID</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>nodetype</con:name>
          <con:value>manufacturerportal</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>0701</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>sch-drm_user1</con:value>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>Password1</con:value>
        </con:property>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value>A06A9AA49F7073D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value>A06A9AA49F7973D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SAMLassertion</con:name>
          <con:value>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</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>loopuntil</con:name>
          <con:value>25</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTS</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value>206659e8-f128-4c50-bb1b-9fcf41d93b64</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value>urn:dece:userid:org:dece:A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value>A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value>urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value>A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>AccountID</con:name>
          <con:value>urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceID</con:name>
          <con:value>urn:dece:deviceid:org:dece:A09D9C22F11CBC6DE0401F0A05996898</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>FORBIDDEN</con:value>
        </con:property>
        <con:property>
          <con:name>ErrorDataVal</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>NodeRole</con:name>
          <con:value>urn:dece:role:manufacturerportal:customersupport</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetReqXml</con:name>
          <con:value>Host: qa.q.uvvu.com:7002</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResXml</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>DeviceGetResTime</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>DeviceGetID</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>DomainID</con:name>
          <con:value>urn:dece:domainid:dece:A09DA589BD63A036E0401F0A05996D9A</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
    <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_30021-  DeviceGet - PERM - SecurityRoleValid - Invocation with MANF_Portal" searchProperties="true">
      <con:description>This test case will verify that the Application Tier properly responses to a DeviceGet invocation when the requesting node is a Device Manufacturer Portal Customer Support.

Expected Result :

It should not allow API invocation for the "DEVICE MANUFACTURER PORTAL CUSTOMER SUPPORT" node.</con:description>
      <con:settings/>
      <con:testStep type="groovy" name="Verify Node User SAML Asssertion">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.model.testsuite.TestRunner.Status


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def ValSamlAssertion = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Validate SAML Assertion");

	ValSamlAssertion.setPropertyValue("TCaseName",testCase.getName());
	ValSamlAssertion.setPropertyValue("TSuiteName",testSuite.getName());

	def runnerTc = ValSamlAssertion.run( null , false )
	assert runnerTc.status == Status.FINISHED;

	rcUUID = testCase.getPropertyValue("rcUUID");

	if (runnerTc.status != Status.FINISHED || rcUUID.toInteger()!= 1){

			
		testCase.setPropertyValue("nodetype","manufacturerportal");
		testCase.setPropertyValue("nodeid","0701");
		testCase.setPropertyValue("username","sch-drm_user1");
		testCase.setPropertyValue("password","Password1");
		testCase.setPropertyValue("accountoid",null);
		testCase.setPropertyValue("useroid",null);
		testCase.setPropertyValue("assertid",null);
		testCase.setPropertyValue("SAMLassertion",null);
		testCase.setPropertyValue("tokentype","urn:dece:type:tokentype:usernamepassword");
		testCase.setPropertyValue("loopuntil","25");
		testCase.setPropertyValue("expectErrTypeSTS","SUCCESS");
		testCase.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
			
		log.info " SAML Assertion Expired ! re-generating Assertion";
		def RunSTS = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get SAML Assertion - STS")

				RunSTS.setPropertyValue("TCaseName",testCase.getName());
				RunSTS.setPropertyValue("TSuiteName",testSuite.getName());

				def runnerSTS = RunSTS.run( null , false )

				assert runnerSTS.status == Status.FINISHED;

		}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call LicAppCreate Request with Valid Data" disabled="true">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0");
testCase.setPropertyValue("expectErrTypeLAC","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedDeviceDDReq = testProject.getTestSuiteByName("Staging DeviceGet").getTestCaseByName("LicAppCreate Request");

FeedDeviceDDReq.setPropertyValue("TCaseName",testCase.getName());
FeedDeviceDDReq.setPropertyValue("TSuiteName",testSuite.getName());


def runnerTC = FeedDeviceDDReq.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Feed DeviceGet Request with Valid Data">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0");
testCase.setPropertyValue("DeviceID","urn:dece:deviceid:org:dece:A09D9C22F11CBC6DE0401F0A05996898");
testCase.setPropertyValue("DomainID","urn:dece:domainid:dece:A09DA589BD63A036E0401F0A05996D9A");
testCase.setPropertyValue("expectErrType","FORBIDDEN");
testCase.setPropertyValue("ErrorDataVal","1");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedRTLReq = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request");

FeedRTLReq.setPropertyValue("TCaseName",testCase.getName());
FeedRTLReq.setPropertyValue("TSuiteName",testSuite.getName());

WsdlTestCaseRunner TSrunner = new WsdlTestCaseRunner( FeedRTLReq, null );

TSrunner.runTestStepByName("Get the DeviceGet Properties");
TSrunner.runTestStepByName("pem set");
assert TSrunner.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Set Node Role to MANF_Portal_CS">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


// set Role
testCase.setPropertyValue("NodeRole","urn:dece:role:manufacturerportal:customersupport");

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get-Set Node Role")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )

WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );

TSrunnerRTC.runTestStepByName("Set Node Role for DDD");

assert TSrunnerRTC.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call DeviceGet Request">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )

WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );

TSrunnerRTC.runTestStepByName("DeviceGetRequest");

assert TSrunnerRTC.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract DeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Extract DeviceGet Information")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify theDeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Response Validation")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:properties>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SAMLExpDate</con:name>
          <con:value>2012-04-14 13:34:23.0</con:value>
        </con:property>
        <con:property>
          <con:name>rcUUID</con:name>
          <con:value>0</con:value>
        </con:property>
        <con:property>
          <con:name>nodetype</con:name>
          <con:value>manufacturerportal</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>0701</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>sch-drm_user1</con:value>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>Password1</con:value>
        </con:property>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value>A06A9AA49F7073D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value>A06A9AA49F7973D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SAMLassertion</con:name>
          <con:value>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</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>loopuntil</con:name>
          <con:value>25</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTS</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value>bb09b37f-ce2d-4825-a300-e2e8a6d3b9c7</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value>urn:dece:userid:org:dece:A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value>A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value>urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value>A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>AccountID</con:name>
          <con:value>urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceID</con:name>
          <con:value>urn:dece:deviceid:org:dece:A09D9C22F11CBC6DE0401F0A05996898</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>FORBIDDEN</con:value>
        </con:property>
        <con:property>
          <con:name>ErrorDataVal</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>NodeRole</con:name>
          <con:value>urn:dece:role:manufacturerportal:customersupport</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetReqXml</con:name>
          <con:value>Host: qa.q.uvvu.com:7002</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResXml</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>DeviceGetResTime</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>DeviceGetID</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>DomainID</con:name>
          <con:value>urn:dece:domainid:dece:A09DA589BD63A036E0401F0A05996D9A</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase>
  <con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC_DECE_30022 -  DeviceGet - PERM - SecurityRoleValid - Invocation with Coordinator Roles" searchProperties="true">
      <con:description>This test case will verify that the Application Tier properly responses to a DeviceGet invocation when the requesting node is DECE.

Expected Result :

It should not allow API invocation for the "DECE" node.</con:description>
      <con:settings/>
      <con:testStep type="groovy" name="Verify Node User SAML Asssertion">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.model.testsuite.TestRunner.Status


def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();


def ValSamlAssertion = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Validate SAML Assertion");

	ValSamlAssertion.setPropertyValue("TCaseName",testCase.getName());
	ValSamlAssertion.setPropertyValue("TSuiteName",testSuite.getName());

	def runnerTc = ValSamlAssertion.run( null , false )
	assert runnerTc.status == Status.FINISHED;

	rcUUID = testCase.getPropertyValue("rcUUID");

	if (runnerTc.status != Status.FINISHED || rcUUID.toInteger()!= 1){

			
		testCase.setPropertyValue("nodetype","manufacturerportal");
		testCase.setPropertyValue("nodeid","0701");
		testCase.setPropertyValue("username","sch-drm_user1");
		testCase.setPropertyValue("password","Password1");
		testCase.setPropertyValue("accountoid",null);
		testCase.setPropertyValue("useroid",null);
		testCase.setPropertyValue("assertid",null);
		testCase.setPropertyValue("SAMLassertion",null);
		testCase.setPropertyValue("tokentype","urn:dece:type:tokentype:usernamepassword");
		testCase.setPropertyValue("loopuntil","25");
		testCase.setPropertyValue("expectErrTypeSTS","SUCCESS");
		testCase.setPropertyValue("expectErrTypeSTSGet","SUCCESS");
			
		log.info " SAML Assertion Expired ! re-generating Assertion";
		def RunSTS = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get SAML Assertion - STS")

				RunSTS.setPropertyValue("TCaseName",testCase.getName());
				RunSTS.setPropertyValue("TSuiteName",testSuite.getName());

				def runnerSTS = RunSTS.run( null , false )

				assert runnerSTS.status == Status.FINISHED;

		}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="datasource" name="Feed Coordinator Roles"><con:settings/><con:config xsi:type="con:DataSourceStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dataSource type="Grid"><con:configuration><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">urn:dece:role:device</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">FORBIDDEN</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">urn:dece:role:portal:customersupport</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">SUCCESS</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">urn:dece:role:dsp:customersupport</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">SUCCESS</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">urn:dece:role:retailer:customersupport</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">SUCCESS</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">urn:dece:role:coordinator</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">FORBIDDEN</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">urn:dece:role:portal</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">SUCCESS</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">urn:dece:role:dece</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">FORBIDDEN</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">urn:dece:role:lasp:dynamic:customersupport</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">SUCCESS</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">urn:dece:role:mdagent</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">FORBIDDEN</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">urn:dece:role:lasp:linked</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">SUCCESS</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">urn:dece:role:coordinator:caf</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">FORBIDDEN</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">urn:dece:role:accessportal</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">FORBIDDEN</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">urn:dece:role:deviceportal</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">FORBIDDEN</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">urn:dece:role:lasp:dynamic</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">SUCCESS</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">urn:dece:role:coordinator:customersupport</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">FORBIDDEN</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">urn:dece:role:contentprovider:customersupport</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">FORBIDDEN</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">urn:dece:role:lasp:linked:customersupport</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">SUCCESS</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">urn:dece:role:retailer</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">SUCCESS</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">urn:dece:role:dsp</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">SUCCESS</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">urn:dece:role:contentprovider</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">FORBIDDEN</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">urn:dece:role:decedomainmanager</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">FORBIDDEN</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">urn:dece:role:dece:customersupport</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">SUCCESS</con:entry></xml-fragment>]]></row><row><![CDATA[<xml-fragment><con:entry xmlns:con="http://eviware.com/soapui/config">urn:dece:role:accessportal:customersupport</con:entry><con:entry xmlns:con="http://eviware.com/soapui/config">FORBIDDEN</con:entry></xml-fragment>]]></row></con:configuration></con:dataSource><con:property>Role</con:property><con:property>expectErrType</con:property><con:restartOnRun>true</con:restartOnRun></con:config></con:testStep><con:testStep type="groovy" name="Call LicAppCreate Request with Valid Data" disabled="true">
        <con:settings/>
        <con:config>
          <script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0");
testCase.setPropertyValue("expectErrTypeLAC","SUCCESS");
testCase.setPropertyValue("ErrorDataVal","0");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedDeviceDDReq = testProject.getTestSuiteByName("Staging DeviceGet").getTestCaseByName("LicAppCreate Request");

FeedDeviceDDReq.setPropertyValue("TCaseName",testCase.getName());
FeedDeviceDDReq.setPropertyValue("TSuiteName",testSuite.getName());


def runnerTC = FeedDeviceDDReq.run( null , false )

assert runnerTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Feed DeviceGet Request with Valid Data">
        <con:settings/>
        <con:config><script>import groovy.*
import groovy.xml.*
import groovy.util.*;
import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.support.types.StringToStringMap
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

// Use Data for ROle and Expected response 

def DsNodeRole = testRunner.testCase.testSteps['Feed Coordinator Roles'];
log.info  "Role set to: " + DsNodeRole.getPropertyValue("Role");

// Node Role 
testCase.setPropertyValue("NodeRole",DsNodeRole.getPropertyValue("Role"));

//RightsToken Request and properties

//TsRightsXMLReq.setPropertyValue("Request", testProject.getPropertyValue("ParamRTCReq"));
testCase.setPropertyValue("AccountID","urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0");
testCase.setPropertyValue("DeviceID","urn:dece:deviceid:org:dece:A09D9C22F11CBC6DE0401F0A05996898");
testCase.setPropertyValue("DomainID","urn:dece:domainid:dece:A09DA589BD63A036E0401F0A05996D9A");
testCase.setPropertyValue("expectErrType",DsNodeRole.getPropertyValue("expectErrType"));;
testCase.setPropertyValue("ErrorDataVal","1");


// Call RightsToken Locker DaTA Get Request - Get the Required Rights Properties TestStep

def FeedRTLReq = testRunner.testCase.testSuite.project.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request");

FeedRTLReq.setPropertyValue("TCaseName",testCase.getName());
FeedRTLReq.setPropertyValue("TSuiteName",testSuite.getName());

WsdlTestCaseRunner TSrunner = new WsdlTestCaseRunner( FeedRTLReq, null );

TSrunner.runTestStepByName("Get the DeviceGet Properties");
TSrunner.runTestStepByName("pem set");
assert TSrunner.status == Status.INITIALIZED;</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Set Up Node Role">
        <con:settings/>
        <con:config><script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

// Set Node Role



def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Get-Set Node Role")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )

WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );

TSrunnerRTC.runTestStepByName("Set Node Role for DDD");

assert TSrunnerRTC.status == Status.INITIALIZED;</script></con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Call DeviceGet Request">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status
import com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTCRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Request")

RTCRequest.setPropertyValue("TCaseName",testCase.getName());
RTCRequest.setPropertyValue("TSuiteName",testSuite.getName());

//def runnerRTC = RTCRequest.run( null , false )

WsdlTestCaseRunner TSrunnerRTC = new WsdlTestCaseRunner( RTCRequest, null );

TSrunnerRTC.runTestStepByName("DeviceGetRequest");

assert TSrunnerRTC.status == Status.INITIALIZED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Extract DeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("Extract DeviceGet Information")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Verify theDeviceGet Response">
        <con:settings/>
        <con:config>
          <script>import com.eviware.soapui.model.testsuite.TestRunner.Status

def testCase  = testRunner.getTestCase();
def testSuite = testCase.getTestSuite();
def testProject = testSuite.getProject();

def RTGRequest = testProject.getTestSuiteByName("Common Test Steps").getTestCaseByName("DeviceGet Response Validation")

RTGRequest.setPropertyValue("TCaseName",testCase.getName());
RTGRequest.setPropertyValue("TSuiteName",testSuite.getName());

def runnerRTC = RTGRequest.run( null , false )

assert runnerRTC.status == Status.FINISHED;</script>
        </con:config>
      </con:testStep>
      <con:testStep type="datasourceloop" name="Loop to Next Role"><con:settings/><con:config><dataSourceStep>Feed Coordinator Roles</dataSourceStep><targetStep>Feed DeviceGet Request with Valid Data</targetStep></con:config></con:testStep><con:properties>
        <con:property>
          <con:name>QC_Id</con:name>
          <con:value>28192</con:value>
        </con:property>
        <con:property>
          <con:name>synced</con:name>
          <con:value>true</con:value>
        </con:property>
        <con:property>
          <con:name>SAMLExpDate</con:name>
          <con:value>2013-06-15 03:22:10.0</con:value>
        </con:property>
        <con:property>
          <con:name>rcUUID</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>nodetype</con:name>
          <con:value>manufacturerportal</con:value>
        </con:property>
        <con:property>
          <con:name>nodeid</con:name>
          <con:value>0701</con:value>
        </con:property>
        <con:property>
          <con:name>username</con:name>
          <con:value>sch-drm_user1</con:value>
        </con:property>
        <con:property>
          <con:name>password</con:name>
          <con:value>Password1</con:value>
        </con:property>
        <con:property>
          <con:name>accountoid</con:name>
          <con:value>A06A9AA49F7073D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>useroid</con:name>
          <con:value>A06A9AA49F7973D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertid</con:name>
          <con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        </con:property>
        <con:property>
          <con:name>SAMLassertion</con:name>
          <con:value>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</con:value>
        </con:property>
        <con:property>
          <con:name>tokentype</con:name>
          <con:value>urn:dece:type:tokentype:usernamepassword</con:value>
        </con:property>
        <con:property>
          <con:name>loopuntil</con:name>
          <con:value>25</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTS</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrTypeSTSGet</con:name>
          <con:value>SUCCESS</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUUID</con:name>
          <con:value>_df6ea584-6723-4b5d-b2e8-d20651f6942c</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserIdFULL</con:name>
          <con:value>urn:dece:userid:org:dece:A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionUserId</con:name>
          <con:value>A06A9AA49F7773D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountIdFULL</con:name>
          <con:value>urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>assertionAccountId</con:name>
          <con:value>A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>NodeRole</con:name>
          <con:value>urn:dece:role:accessportal:customersupport</con:value>
        </con:property>
        <con:property>
          <con:name>AccountID</con:name>
          <con:value>urn:dece:accountid:org:dece:A06A9AA49F6E73D7E0401F0A059915F0</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceID</con:name>
          <con:value>urn:dece:deviceid:org:dece:A09D9C22F11CBC6DE0401F0A05996898</con:value>
        </con:property>
        <con:property>
          <con:name>expectErrType</con:name>
          <con:value>FORBIDDEN</con:value>
        </con:property>
        <con:property>
          <con:name>ErrorDataVal</con:name>
          <con:value>1</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetReqXml</con:name>
          <con:value>Authorization: SAML2 assertion=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
</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResXml</con:name>
          <con:value><![CDATA[<ErrorList xmlns="http://www.decellc.org/schema/2010/10/dece" xmlns:ns2="http://www.movielabs.com/schema/md/v1.07/md" xmlns:ns3="http://www.w3.org/2000/09/xmldsig#" xmlns:ns4="http://www.w3.org/2001/04/xmlenc#">
   <Error ErrorID="urn:dece:errorid:org:dece:Security:RoleInvalid">
      <Reason Language="en">API call not authorized</Reason>
      <OriginalRequest>https://qa.q.uvvu.com:7002/rest/1/0/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3AA06A9AA49F6E73D7E0401F0A059915F0/Device/urn%3Adece%3Adeviceid%3Aorg%3Adece%3AA09D9C22F11CBC6DE0401F0A05996898/DECEDomain</OriginalRequest>
      <ErrorLink>https://qa.q.uvvu.com:7002/rest/1/0/error/en/ErrorList.html#Security:RoleInvalid</ErrorLink>
   </Error>
</ErrorList>]]></con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetResTime</con:name>
          <con:value>3419</con:value>
        </con:property>
        <con:property>
          <con:name>DeviceGetID</con:name>
          <con:value>API call not authorizedhttps://qa.q.uvvu.com:7002/rest/1/0/Account/urn%3Adece%3Aaccountid%3Aorg%3Adece%3AA06A9AA49F6E73D7E0401F0A059915F0/Device/urn%3Adece%3Adeviceid%3Aorg%3Adece%3AA09D9C22F11CBC6DE0401F0A05996898/DECEDomainhttps://qa.q.uvvu.com:7002/rest/1/0/error/en/ErrorList.html#Security:RoleInvalid</con:value>
        </con:property>
        <con:property>
          <con:name>DomainID</con:name>
          <con:value>urn:dece:domainid:dece:A09DA589BD63A036E0401F0A05996D9A</con:value>
        </con:property>
      </con:properties>
      <con:reportParameters/>
    </con:testCase></con:testSuite><con:requirements/>
  <con:properties>
    <con:property><con:name>AccountCountry</con:name><con:value>US</con:value></con:property>
    <con:property><con:name>ALID</con:name><con:value>urn:dece:alid:file:EXAMPLE_ALID_Version_241580697.txt</con:value></con:property>
    
    <con:property><con:name>AlternateEmail</con:name><con:value>test_+126@uvvutesting.biz</con:value></con:property><con:property><con:name>APID</con:name><con:value>urn:dece:apid:file:AUDIO_MetadataDigitalCreate.txt:534576800</con:value></con:property><con:property><con:name>AppHost</con:name><con:value>https://qa.q.uvvu.com</con:value></con:property><con:property><con:name>AppPort</con:name><con:value>7001</con:value></con:property>
    
    
    <con:property><con:name>Batch_HostName</con:name><con:value>https://qa.b.uvvu.com:7001</con:value></con:property><con:property><con:name>cacheDuration</con:name><con:value>86400</con:value></con:property>
    
    
    
    
    <con:property><con:name>CertMatchesNodeID</con:name><con:value>YES</con:value></con:property>
    <con:property><con:name>CertMatchesNodeName</con:name><con:value>YES</con:value></con:property><con:property><con:name>certsPath_Linux</con:name><con:value>../../Certs/QALP1/</con:value></con:property><con:property><con:name>certsPath_Windows</con:name><con:value>../../Certs/QALP1/</con:value></con:property><con:property><con:name>CID</con:name><con:value>urn:dece:cid:file:A_File_Name_with_NUMBERS_740255950.txt</con:value></con:property>
    
    
    
    
    
    <con:property><con:name>clusterNumber</con:name><con:value>1</con:value></con:property><con:property><con:name>coordinatorSchema_02</con:name><con:value>http://www.decellc.org/schema/2015/03/coordinator</con:value></con:property><con:property><con:name>coordinatorSchema_06</con:name><con:value>http://www.decellc.org/schema/2012/12/coordinator</con:value></con:property><con:property><con:name>coordinatorSchema_07</con:name><con:value>http://www.decellc.org/schema/2013/06/coordinator</con:value></con:property><con:property><con:name>coordinatorSchema_11</con:name><con:value>http://www.decellc.org/schema/2013/10/coordinator</con:value></con:property><con:property><con:name>coords</con:name><con:value>FALKY,COORD-10000,COORD-3034,COORD-2999,COORD-2509,COORD-627,UV-135,UV-340,Coord-2180</con:value></con:property><con:property><con:name>DBIdentifier</con:name><con:value>LP1</con:value></con:property><con:property><con:name>DBPassword</con:name><con:value>lp1db_23</con:value></con:property>
    
  <con:property><con:name>DBPasswordDM</con:name><con:value>dedmqa1</con:value></con:property><con:property><con:name>DBUsername</con:name><con:value>DEQA1_APP</con:value></con:property><con:property><con:name>DBUsernameDM</con:name><con:value>dedmqa1</con:value></con:property><con:property><con:name>Device_HostName</con:name><con:value>https://qa.d.uvvu.com:7001</con:value></con:property><con:property><con:name>enablePriorityScript</con:name><con:value>falsedisablePriority=P3,CHILD,CLG</con:value></con:property><con:property><con:name>ENV</con:name><con:value>QALP1</con:value></con:property><con:property><con:name>envIdentifier</con:name><con:value>LP1</con:value></con:property><con:property><con:name>fileKeyStorePath</con:name><con:value>C:\Code_Repo\uv-coordinator-api-regression\Projects\201502\Devices</con:value></con:property><con:property><con:name>JDBCConnStr</con:name><con:value>jdbc:oracle:thin:@stdeqp-clu1-scan.va.neustar.com:2115/stdecqpdb_stdecqa.neustar.com</con:value></con:property><con:property><con:name>JDBCDriver</con:name><con:value>DECEOracle</con:value></con:property><con:property><con:name>JKSAliasName</con:name><con:value>qalp1</con:value></con:property><con:property><con:name>JKSPassword</con:name><con:value>testing</con:value></con:property><con:property><con:name>nodeIdAccportal</con:name><con:value>ACCESS</con:value></con:property><con:property><con:name>nodeIdAccportal2</con:name><con:value>ACCESS_2</con:value></con:property><con:property><con:name>nodeIdAccportalCS</con:name><con:value>ACCESCS</con:value></con:property><con:property><con:name>nodeIdAccportalCS2</con:name><con:value>ACCESSCS_2</con:value></con:property><con:property><con:name>nodeIdCON</con:name><con:value>CON</con:value></con:property><con:property><con:name>nodeIdCON2</con:name><con:value>CON_2</con:value></con:property><con:property><con:name>nodeIdCONCS</con:name><con:value>CON_CS_1</con:value></con:property><con:property><con:name>nodeIdCONCS2</con:name><con:value>CON_CS_2</con:value></con:property><con:property><con:name>nodeIdCoo</con:name><con:value>COO</con:value></con:property><con:property><con:name>nodeIdCoo2</con:name><con:value>COO_2</con:value></con:property><con:property><con:name>nodeIdCoordCS</con:name><con:value>coord:cs</con:value></con:property><con:property><con:name>nodeIdDECE</con:name><con:value>DECE</con:value></con:property><con:property><con:name>nodeIdDECECS</con:name><con:value>dece:cs</con:value></con:property><con:property><con:name>nodeIdDEV</con:name><con:value>DEV</con:value></con:property><con:property><con:name>nodeIdDEV2</con:name><con:value>DEV_2</con:value></con:property><con:property><con:name>nodeIdDEVCS</con:name><con:value>DEV_CS_1</con:value></con:property><con:property><con:name>nodeIdDEVCS2</con:name><con:value>DEV_CS_2</con:value></con:property><con:property><con:name>nodeIdDLASP</con:name><con:value>DLASP</con:value></con:property><con:property><con:name>nodeIdDLASP2</con:name><con:value>DLASP_2</con:value></con:property><con:property><con:name>nodeIdDLASPCS</con:name><con:value>DLASP_CS_1</con:value></con:property><con:property><con:name>nodeIdDLASPCS2</con:name><con:value>DLASP_CS_2</con:value></con:property><con:property><con:name>nodeIdDSP</con:name><con:value>DSP</con:value></con:property><con:property><con:name>nodeIdDSP2</con:name><con:value>DSP_2</con:value></con:property><con:property><con:name>nodeIdDSPCS</con:name><con:value>DSP_CS_1</con:value></con:property><con:property><con:name>nodeIdDSPCS2</con:name><con:value>DSP_CS_2</con:value></con:property><con:property><con:name>nodeIdLLASP</con:name><con:value>LLASP</con:value></con:property><con:property><con:name>nodeIdLLASP2</con:name><con:value>LLASP_2</con:value></con:property><con:property><con:name>nodeIdLLASPCS</con:name><con:value>LLASP_CS_1</con:value></con:property><con:property><con:name>nodeIdLLASPCS2</con:name><con:value>LLASP_CS_2</con:value></con:property><con:property><con:name>nodeIdportal</con:name><con:value>iscportal1</con:value></con:property><con:property><con:name>nodeIdportalCS</con:name><con:value>iscportalcs1</con:value></con:property><con:property><con:name>nodeIdRTL</con:name><con:value>RET</con:value></con:property><con:property><con:name>QC_AutoMapping</con:name><con:value>disabled</con:value></con:property><con:property><con:name>nodeIdRTL2</con:name><con:value>RET_2</con:value></con:property><con:property><con:name>targetDeviceDomain</con:name><con:value>qa.d.uvvu.com:7001</con:value></con:property><con:property><con:name>nodeIdRTLCS</con:name><con:value>RET_CS_1</con:value></con:property><con:property><con:name>nodeIdRTLCS2</con:name><con:value>RET_CS_2</con:value></con:property><con:property><con:name>OrgID</con:name><con:value>ISC_R1</con:value></con:property><con:property><con:name>Password</con:name><con:value>testing</con:value></con:property><con:property><con:name>PrimaryEmail</con:name><con:value>testing@uvvutesting.biz</con:value></con:property><con:property><con:name>Provision_HostName</con:name><con:value>https://qa.p.uvvu.com:7001</con:value></con:property><con:property><con:name>targetHost</con:name><con:value>qa.p.uvvu.com</con:value></con:property><con:property><con:name>QC_Domain</con:name><con:value>DEFAULT</con:value></con:property><con:property><con:name>Rights_ALID</con:name><con:value>urn:dece:alid:file:RTUPDATE_R3_EXAMPLE_ALIDVersion_212395.txt</con:value></con:property><con:property><con:name>QC_password</con:name><con:value>testing123***</con:value></con:property><con:property><con:name>QC_Project</con:name><con:value>DECE</con:value></con:property><con:property><con:name>QC_ReExport</con:name><con:value>enabled</con:value></con:property><con:property><con:name>QC_ResultExportLevel</con:name><con:value>high</con:value></con:property><con:property><con:name>QC_TestLabDirectory</con:name><con:value>Root\folderA</con:value></con:property><con:property><con:name>QC_TestPlanDirectory</con:name><con:value>Subject\DECE_API\Functional_API\2_Application_Tier\APIsQC_TestLabDirectory=Root\DECE_APIQC_TestSet=DeviceDeceDomain</con:value></con:property><con:property><con:name>QC_TestSet</con:name><con:value>sample_testset</con:value></con:property><con:property><con:name>QC_TestType</con:name><con:value>MANUAL</con:value></con:property><con:property><con:name>QC_URL</con:name><con:value>http://stprqc01.va.neustar.com:8080/qcbin*******</con:value></con:property><con:property><con:name>QC_user</con:name><con:value>schhinna</con:value></con:property><con:property><con:name>Query_HostName</con:name><con:value>https://qa.q.uvvu.com:7001</con:value></con:property><con:property><con:name>Rights_APID</con:name><con:value>urn:dece:apid:file:INTERACTIVE_MetadataDigitalCreate.txt:39983831</con:value></con:property><con:property><con:name>Rights_CID</con:name><con:value>urn:dece:cid:file:RTUPDATE_R3_EXAMPLE_CIDVersion_212395.txt</con:value></con:property><con:property><con:name>runTeardown</con:name><con:value>false</con:value></con:property><con:property><con:name>Streams_ALID</con:name><con:value>urn:dece:alid:file:EXAMPLE_ALID_Version_561393521.txt</con:value></con:property><con:property><con:name>Streams_APID</con:name><con:value>urn:dece:apid:file:AUDIO_MetadataDigitalCreate.txt:242394094</con:value></con:property><con:property><con:name>Streams_CID</con:name><con:value>urn:dece:cid:file:A_File_Name_with_NUMBERS_344946277.txt</con:value></con:property><con:property><con:name>targetHostd</con:name><con:value>qa.d.uvvu.com</con:value></con:property><con:property><con:name>targerHostd</con:name><con:value>qa.d.uvvu.com</con:value></con:property><con:property><con:name>targetPortq</con:name><con:value>7001</con:value></con:property><con:property><con:name>targetDECESystem</con:name><con:value>LP1</con:value></con:property><con:property><con:name>targetHostB</con:name><con:value>qa.b.uvvu.com:7001</con:value></con:property><con:property><con:name>targetHostC</con:name><con:value>qa.c.uvvu.com:7001</con:value></con:property><con:property><con:name>targetHostP</con:name><con:value>qa.p.uvvu.com:7001</con:value></con:property><con:property><con:name>targetHostq</con:name><con:value>qa.q.uvvu.com</con:value></con:property><con:property><con:name>targetHostS</con:name><con:value>qa.s.uvvu.com:7001</con:value></con:property><con:property><con:name>targetPort</con:name><con:value>7001</con:value></con:property><con:property><con:name>targetPortd</con:name><con:value>7001</con:value></con:property><con:property><con:name>targetSystem</con:name><con:value>LP1</con:value></con:property><con:property><con:name>targetURL</con:name><con:value>qa.p.uvvu.com:7001</con:value></con:property><con:property><con:name>targetUrlSHost</con:name><con:value>qa.s.uvvu.com:7001</con:value></con:property><con:property><con:name>urnaccount</con:name><con:value>urn:dece:accountid:org:dece:</con:value></con:property><con:property><con:name>TOUPolicyResource</con:name><con:value>https://qa.c.uvvu.com:7001/Consent/Text/US/urn:dece:type:policy:TermsOfUse:20140811/html</con:value></con:property><con:property><con:name>TOUUrl</con:name><con:value>qa.c.uvvu.com:7001</con:value></con:property><con:property><con:name>coordinatorSchema</con:name><con:value>http://www.decellc.org/schema/2013/10/coordinator</con:value></con:property><con:property><con:name>TOU_US</con:name><con:value>20140811</con:value></con:property><con:property><con:name>URLEncode</con:name><con:value>NO</con:value></con:property><con:property><con:name>versionMajor</con:name><con:value>1</con:value></con:property><con:property><con:name>versionMinor</con:name><con:value>07</con:value></con:property><con:property><con:name>versionURLEncode</con:name><con:value>06</con:value></con:property><con:property><con:name>coordinatorSchema_21</con:name><con:value>http://www.decellc.org/schema/2013/10/coordinator</con:value></con:property><con:property><con:name>policy_TOU</con:name><con:value>https://qa.c.uvvu.com:7001/Consent/Text//urn:dece:type:policy:TermsOfUse:null/html</con:value></con:property><con:property><con:name>NODE_ID</con:name><con:value>RET</con:value></con:property><con:property><con:name>versionManor</con:name><con:value>1</con:value></con:property><con:property><con:name>trailingVersionMajor</con:name><con:value>1</con:value></con:property><con:property><con:name>trailingVersionMinor</con:name><con:value>11</con:value></con:property><con:property><con:name>currentVersionMajor</con:name><con:value>2015</con:value></con:property><con:property><con:name>currentVersionMinor</con:name><con:value>02</con:value></con:property></con:properties>
  <con:afterLoadScript>

log.info "Project Name: "+project.file;</con:afterLoadScript><con:wssContainer>
    
    
    
  </con:wssContainer>
  <con:databaseConnectionContainer/>
  <con:reporting>
    <con:xmlTemplates/>
    <con:parameters/>
  </con:reporting>
  <con:sensitiveInformation/>
</con:soapui-project>